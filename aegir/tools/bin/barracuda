#!/bin/bash

PATH=/usr/local/bin:/usr/local/sbin:/opt/local/bin:/usr/bin:/usr/sbin:/bin:/sbin
SHELL=/bin/bash

_TODAY=`date +%y%m%d`
_NOW=`date +%y%m%d-%H%M`
_CHECK_HOST=`uname -n`
_LOG_DIR="/var/backups/reports/up/$(basename "$0")/$_TODAY"
_UP_LOG="$_LOG_DIR/$(basename "$0")-up-$_NOW.log"
_L_VMFAMILY=XEN
_L_VM_TEST=`uname -a 2>&1`
if [[ "$_L_VM_TEST" =~ beng ]] ; then
  _L_VMFAMILY="VS"
fi

clean_pid_exit () {
  rm -f /var/run/boa_wait.pid
  rm -f /var/run/boa_run.pid
  service cron start &> /dev/null
  exit 1
}

fix_dns_settings () {
  mkdir -p /var/backups
  rm -f /var/backups/resolv.conf.tmp
  if [ -e "/etc/resolv.conf" ] ; then
    cp -a /etc/resolv.conf /var/backups/resolv.conf.tmp
  fi
  if [ ! -e "/var/backups/resolv.conf.vanilla" ] ; then
    for Pre in `ls -la /var/backups/resolv.conf.pre-*` ; do
      if [ -e "$Pre" ] && [ -f "$Pre" ] && [ ! -L "$Pre" ] ; then
        cp -a $Pre /var/backups/resolv.conf.vanilla
      fi
    done
  fi
  if [ ! -e "/var/backups/resolv.conf.vanilla" ] ; then
    rm -f /etc/resolv.conf
    cp -a /var/backups/resolv.conf.tmp /etc/resolv.conf
    cp -a /var/backups/resolv.conf.tmp /var/backups/resolv.conf.vanilla
  fi
  sed -i "/^$/d" /var/backups/resolv.conf.vanilla &> /dev/null
  rm -f /etc/resolv.conf
  echo "nameserver 8.8.8.8" > /etc/resolv.conf
  echo "nameserver 8.8.4.4" >> /etc/resolv.conf
  _BROKEN_DNS_TEST=$(host -a omega8.cc 8.8.8.8 -w 10 2>&1)
  if [[ "$_BROKEN_DNS_TEST" =~ "no servers could be reached" ]] && [ -e "/var/backups/resolv.conf.vanilla" ] ; then
    touch /root/.use.local.nameservers.cnf
    rm -f /etc/resolv.conf
    cp -a /var/backups/resolv.conf.vanilla /etc/resolv.conf
    echo "nameserver 8.8.8.8" >> /etc/resolv.conf
    echo "nameserver 8.8.4.4" >> /etc/resolv.conf
  else
    rm -f /etc/resolv.conf
    cp -a /var/backups/resolv.conf.tmp /etc/resolv.conf
  fi
  if [ -e "/etc/pdnsd.conf" ] ; then
    if [ -e "/root/.local.dns.IP.list" ] ; then
      sed -i "s/.*127.0.0.1.*//g; s/ *$//g; /^$/d" /root/.local.dns.IP.list
      sed -i "s/.*Dynamic.*//g; s/ *$//g; /^$/d"   /root/.local.dns.IP.list
      _BROKEN_DNS_TEST=$(grep "\." /root/.local.dns.IP.list 2>&1)
      if [ -z "$_BROKEN_DNS_TEST" ] ; then
        echo "        label = \"google-servers\";" > /root/.local.dns.IP.list
        echo "        ip=8.8.8.8;" >> /root/.local.dns.IP.list
        echo "        ip=8.8.4.4;" >> /root/.local.dns.IP.list
      fi
    fi
    _CUSTOM_DNS_TEST=$(grep 8.8.8.8 /etc/pdnsd.conf 2>&1)
    _BROKEN_DNS_CONF=$(grep "ip=Dynamic" /etc/pdnsd.conf 2>&1)
    if [[ "$_CUSTOM_DNS_TEST" =~ "8.8.8.8" ]] || [[ "$_BROKEN_DNS_CONF" =~ "Dynamic" ]] ; then
      if [ -e "/root/.use.local.nameservers.cnf" ] ; then
        echo "        label = \"google-servers\";" > /root/.local.dns.IP.list
        for _IP in `cat /etc/resolv.conf | sed 's/.*127.0.0.1.*//g; s/.*Dynamic.*//g' | cut -d ' ' -f2 | sort | uniq`;do echo "        ip=$_IP;" >> /root/.local.dns.IP.list;done
        sed -i "s/ip=8.8.*//g; s/ *$//g; /^$/d" /etc/pdnsd.conf
        sed -i "s/ip=127.*//g; s/ *$//g; /^$/d" /etc/pdnsd.conf
        sed -i "s/ip=Dyn.*//g; s/ *$//g; /^$/d" /etc/pdnsd.conf
        sed -i "s/.*127.0.0.1.*//g; s/ *$//g; /^$/d" /root/.local.dns.IP.list
        sed -i "s/.*Dynamic.*//g; s/ *$//g; /^$/d"   /root/.local.dns.IP.list
        _BROKEN_DNS_TEST=$(grep "\." /root/.local.dns.IP.list 2>&1)
        if [ -z "$_BROKEN_DNS_TEST" ] ; then
           echo "        ip=8.8.8.8;" >> /root/.local.dns.IP.list
           echo "        ip=8.8.4.4;" >> /root/.local.dns.IP.list
        fi
        sed -i '/        label = \"google-servers\";/ {r /root/.local.dns.IP.list
d;};' /etc/pdnsd.conf
        resolvconf -u                      &> /dev/null
        service pdnsd stop                 &> /dev/null
        rm -f /var/cache/pdnsd/pdnsd.cache &> /dev/null
        service pdnsd start                &> /dev/null
        service pdnsd stop                 &> /dev/null
        rm -f /var/cache/pdnsd/pdnsd.cache &> /dev/null
        service pdnsd start                &> /dev/null
      fi
    fi
  fi
}

check_dns_settings () {
  _BROKEN_DNS_TEST=$(host -a omega8.cc 8.8.8.8 -w 10 2>&1)
  if [[ "$_BROKEN_DNS_TEST" =~ "no servers could be reached" ]] || [ -e "/root/.use.local.nameservers.cnf" ] ; then
    _USE_PROVIDER_DNS=YES
    fix_dns_settings
  else
    _USE_PROVIDER_DNS=NO
  fi
}

send_report ()
{
  if [ -e "/root/.barracuda.cnf" ] ; then
    source /root/.barracuda.cnf
    if [ -e "/root/.auto.up.cnf" ] || [ -e "/root/.host8.cnf" ] || [[ "$_CHECK_HOST" =~ ".host8." ]] || [ "$_L_VMFAMILY" = "VS" ] ; then
      _MY_EMAIL="$(basename "$0")@omega8.cc"
    fi
    if [ ! -z "$_MY_EMAIL" ] ; then
      cat $_UP_LOG | mail -e -s "REPORT: Successful Barracuda upgrade on $_CHECK_HOST at $_NOW" $_MY_EMAIL
      echo "REPORT: Successful Barracuda upgrade on $_CHECK_HOST sent to $_MY_EMAIL"
    fi
  fi
}

send_alert ()
{
  if [ -e "/root/.barracuda.cnf" ] ; then
    source /root/.barracuda.cnf
    if [ -e "/root/.auto.up.cnf" ] || [ -e "/root/.host8.cnf" ] || [[ "$_CHECK_HOST" =~ ".host8." ]] || [ "$_L_VMFAMILY" = "VS" ] ; then
      _MY_EMAIL="$(basename "$0")@omega8.cc"
    fi
    if [ ! -z "$_MY_EMAIL" ] ; then
      cat $_UP_LOG | mail -e -s "$_ALERT_MSG on $_CHECK_HOST at $_NOW" $_MY_EMAIL
      echo "$_ALERT_MSG on $_CHECK_HOST sent to $_MY_EMAIL"
    fi
  fi
}

check_report ()
{
  sed -i "s/^_AWS_.*//g"         $_UP_LOG
  sed -i "s/^_NEWRELIC_KEY.*//g" $_UP_LOG
  sed -i "s/^_SCOUT_KEY.*//g"    $_UP_LOG
  sed -i "/^$/d"                 $_UP_LOG
  _SEND_ALERT=NO
  _RESULT_TEST_OK=$(grep "INFO: Test OK" $_UP_LOG)
  if [[ "$_RESULT_TEST_OK" =~ "INFO: Test OK" ]] ; then
    _DO_NOTHING=YES
  else
    if [ "$silent" = "system" ] ; then
      _DO_NOTHING=YES
    else
      _SEND_ALERT=YES
      _ALERT_MSG="ALERT: Failed Barracuda upgrade"
    fi
  fi
  _RESULT_APT_FAIL=$(grep "Displaying the last 15 lines" $_UP_LOG)
  if [[ "$_RESULT_APT_FAIL" =~ "Displaying the last 15 lines" ]] ; then
    _SEND_ALERT=YES
    _ALERT_MSG="ALERT: Failed Barracuda upgrade"
  fi
  _RESULT_ENJOY=$(grep "Enjoy your Aegir Hosting System" $_UP_LOG)
  if [[ "$_RESULT_ENJOY" =~ "Enjoy your Aegir Hosting System" ]] ; then
    _DO_NOTHING=YES
  else
    _SEND_ALERT=YES
    _ALERT_MSG="ALERT: Failed Barracuda upgrade"
  fi
  _RESULT_ALRT=$(grep "ALRT" $_UP_LOG)
  if [[ "$_RESULT_ALRT" =~ "ALRT" ]] ; then
    _SEND_ALERT=YES
    _CHECK_KERNEL=$(grep "Your OS kernel has been upgraded" $_UP_LOG)
    _CHECK_KSPLICE=$(grep "Ksplice rebootless kernel" $_UP_LOG)
    if [[ "$_CHECK_KERNEL" =~ "OS kernel" ]] ; then
      if [[ "$_CHECK_KSPLICE" =~ "rebootless" ]] ; then
        _ALERT_MSG="REPORT: Your OS kernel has been upgraded"
      else
        _ALERT_MSG="REBOOT: Your OS kernel has been upgraded"
      fi
    else
      _ALERT_MSG="ALERT: Failed Barracuda upgrade"
    fi
  fi
  _RESULT_ABORTING=$(grep "Aborting" $_UP_LOG)
  if [[ "$_RESULT_ABORTING" =~ "Aborting" ]] ; then
    _SEND_ALERT=YES
    _ALERT_MSG="ALERT: Failed Barracuda upgrade"
  fi
  if [ "$_SEND_ALERT" = "YES" ] ; then
    send_alert
  else
    send_report
  fi
}

up_action ()
{
  if [ -e "/var/backups/BARRACUDA.sh.txt" ] ; then
    if [ -e "/root/.auto.up.cnf" ] || [ -e "/root/.host8.cnf" ] || [[ "$_CHECK_HOST" =~ ".host8." ]] || [ "$_L_VMFAMILY" = "VS" ] ; then
      _DO_NOTHING=YES
    else
      mkdir -p /var/backups/old-firewall-monitor/$_NOW
      mv -f /var/xdrago/monitor/*.log /var/backups/old-firewall-monitor/$_NOW/ &> /dev/null
      rm -f /var/xdrago/monitor/* &> /dev/null
    fi
    if [ "$cmmand" = "up-vanilla" ] ; then
      sed -i "s/^_BRANCH_PROVISION=.*/_BRANCH_PROVISION=6.x-2.x/g"   /var/backups/BARRACUDA.sh.txt
    elif [ "$cmmand" = "up-modern" ] ; then
      sed -i "s/^_BRANCH_PROVISION=.*/_BRANCH_PROVISION=2.3.x-dev/g" /var/backups/BARRACUDA.sh.txt
    else
      sed -i "s/^_BRANCH_PROVISION=.*/_BRANCH_PROVISION=2.3.x-dev/g" /var/backups/BARRACUDA.sh.txt
    fi
    if [ "$cmmand" = "up-cluster" ] ; then
      sed -i "s/^_BRANCH_BOA=.*/_BRANCH_BOA=cluster/g"               /var/backups/BARRACUDA.sh.txt
    elif [ "$cmmand" = "up-head" ] ; then
      sed -i "s/^_BRANCH_BOA=.*/_BRANCH_BOA=master/g"                /var/backups/BARRACUDA.sh.txt
    elif [ "$cmmand" = "up-stable" ] ; then
      sed -i "s/^_BRANCH_BOA=.*/_BRANCH_BOA=2.3.x-dev/g"             /var/backups/BARRACUDA.sh.txt
    else
      sed -i "s/^_BRANCH_BOA=.*/_BRANCH_BOA=2.3.x-dev/g"             /var/backups/BARRACUDA.sh.txt
    fi
    sed -i "s/^_AUTOPILOT=NO/_AUTOPILOT=YES/g"                       /var/backups/BARRACUDA.sh.txt
    sed -i "s/^_SMTP_RELAY_TEST=YES/_SMTP_RELAY_TEST=NO/g"           /var/backups/BARRACUDA.sh.txt
    if [ -e "/root/.auto.up.cnf" ] || [ -e "/root/.host8.cnf" ] || [[ "$_CHECK_HOST" =~ ".host8." ]] || [ "$_L_VMFAMILY" = "VS" ] ; then
      if [[ "$_CHECK_HOST" =~ ".qq.o8.io" ]] ; then
        _DO_NOTHING=YES
      else
        if [ -e "/root/.barracuda.cnf" ] ; then
          sed -i "s/^_AUTOPILOT=.*/_AUTOPILOT=YES/g"                           /root/.barracuda.cnf
          sed -i "s/^_DNS_SETUP_TEST=.*/_DNS_SETUP_TEST=YES/g"                 /root/.barracuda.cnf
          sed -i "s/^_SMTP_RELAY_TEST=.*/_SMTP_RELAY_TEST=NO/g"                /root/.barracuda.cnf
          sed -i "s/^_STRONG_PASSWORDS=.*/_STRONG_PASSWORDS=YES/g"             /root/.barracuda.cnf
          if [[ "$_CHECK_HOST" =~ ".host8." ]] || [ "$_L_VMFAMILY" = "VS" ] ; then
            sed -i "s/^_MODULES_FIX=.*/_MODULES_FIX=YES/g"                     /root/.barracuda.cnf
            sed -i "s/^_NGINX_FORWARD_SECRECY=.*/_NGINX_FORWARD_SECRECY=YES/g" /root/.barracuda.cnf
            sed -i "s/^_NGINX_SPDY=.*/_NGINX_SPDY=YES/g"                       /root/.barracuda.cnf
            sed -i "s/^_PERMISSIONS_FIX=.*/_PERMISSIONS_FIX=YES/g"             /root/.barracuda.cnf
            sed -i "s/^_SSH_FROM_SOURCES=.*/_SSH_FROM_SOURCES=YES/g"           /root/.barracuda.cnf
            sed -i "s/^_REDIS_LISTEN_MODE=.*/_REDIS_LISTEN_MODE=SOCKET/g"      /root/.barracuda.cnf
          fi
        fi
      fi
      sed -i "s/^_MY_EMAIL=.*/_MY_EMAIL=\"notify\@omega8.cc\"/g" /root/.barracuda.cnf
      _THIS_RV=`lsb_release -sc`
      if [ "$_THIS_RV" = "lenny" ] && [ -e "/root/.barracuda.cnf" ] ; then
        sed -i "s/^_LENNY_TO_SQUEEZE=.*/_LENNY_TO_SQUEEZE=YES/g" /var/backups/BARRACUDA.sh.txt
        sed -i "s/.*_LENNY_TO_SQUEEZE.*//g" /root/.barracuda.cnf
        sed -i "/^$/d" /root/.barracuda.cnf
        echo "_LENNY_TO_SQUEEZE=YES" >> /root/.barracuda.cnf
      fi
      if [ -e "/etc/default/tomcat" ] && [ -e "/etc/init.d/tomcat" ] && [ -e "/root/.barracuda.cnf" ] ; then
        sed -i "s/^_TOMCAT_TO_JETTY=.*/_TOMCAT_TO_JETTY=YES/g" /var/backups/BARRACUDA.sh.txt
        sed -i "s/.*_TOMCAT_TO_JETTY.*//g" /root/.barracuda.cnf
        sed -i "/^$/d" /root/.barracuda.cnf
        echo "_TOMCAT_TO_JETTY=YES" >> /root/.barracuda.cnf
      fi
    fi
    if [ -e "/var/backups/BARRACUDA.sh.txt" ] ; then
      if [ "$cmmand" = "up-cluster" ] ; then
        if [ ! -e "/var/run/mysqld/mysqld.pid" ] && [ ! -e "/root/.dbhd.clstr.cnf" ] && [ -e "/etc/init.d/mysql" ] ; then
          rm -f /root/.remote.db.cnf
          sleep 5
          service mysql start &> /dev/null
        fi
      fi
      if [ "$silent" = "log" ] || [ "$silent" = "system" ] ; then
        if [ "$_L_VMFAMILY" = "VS" ] ; then
          if [[ "$_CHECK_HOST" =~ ".qq.o8.io" ]] ; then
            n=8
          else
            n=$((RANDOM%9+2))
          fi
        else
          n=8
        fi
        if [ -e "/root/.dbhd.clstr.cnf" ] ; then
          n=$((RANDOM%1800+80))
        fi
        echo
        echo "Preparing the upgrade in silent mode..."
        echo
        echo "NOTE: There will be no progress displayed in the console"
        echo "but you will receive an e-mail once the upgrade is complete"
        echo
        sleep 5
        echo "You could watch the progress in another window with command:"
        echo "  tail -f $_UP_LOG"
        echo "or wait until you will see the line: BARRACUDA upgrade completed"
        echo
        echo "Waiting $n seconds..."
        sleep $n
        echo "Starting the upgrade in silent mode now..."
        echo
        sed -i "s/^_AUTOPILOT=.*/_AUTOPILOT=YES/g" /root/.barracuda.cnf
        sed -i "s/^_SPINNER=YES/_SPINNER=NO/g" /var/backups/BARRACUDA.sh.txt
        if [ "$silent" = "system" ] ; then
          touch /var/run/boa_system_wait.pid
          if [ "$cmmand" = "up-legacy" ] ; then
            sed -i "s/^_SYSTEM_UPGRADE_ONLY=.*/_SYSTEM_UPGRADE_ONLY=YES/g"   /var/backups/BARRACUDA.sh.txt
            sed -i "s/^_SYSTEM_UPGRADE_ONLY=.*/_SYSTEM_UPGRADE_ONLY=YES/g"   /root/.barracuda.cnf
          else
            if [ -e "/var/aegir/config/includes/nginx_vhost_common.conf" ] && [ -d "/var/aegir/config/server_master/nginx/subdir.d" ] ; then
              sed -i "s/^_SYSTEM_UPGRADE_ONLY=.*/_SYSTEM_UPGRADE_ONLY=YES/g" /var/backups/BARRACUDA.sh.txt
              sed -i "s/^_SYSTEM_UPGRADE_ONLY=.*/_SYSTEM_UPGRADE_ONLY=YES/g" /root/.barracuda.cnf
            else
              if [[ "$_CHECK_HOST" =~ "v55.lon." ]] || [[ "$_CHECK_HOST" =~ ".lon1.h" ]] ; then
                sed -i "s/^_SYSTEM_UPGRADE_ONLY=.*/_SYSTEM_UPGRADE_ONLY=YES/g" /var/backups/BARRACUDA.sh.txt
                sed -i "s/^_SYSTEM_UPGRADE_ONLY=.*/_SYSTEM_UPGRADE_ONLY=YES/g" /root/.barracuda.cnf
              else
                sed -i "s/^_SYSTEM_UPGRADE_ONLY=.*/_SYSTEM_UPGRADE_ONLY=NO/g"  /var/backups/BARRACUDA.sh.txt
                sed -i "s/^_SYSTEM_UPGRADE_ONLY=.*/_SYSTEM_UPGRADE_ONLY=NO/g"  /root/.barracuda.cnf
              fi
            fi
          fi
          sed -i "s/^_AEGIR_UPGRADE_ONLY=.*/_AEGIR_UPGRADE_ONLY=NO/g"        /root/.barracuda.cnf
        elif [ "$silent" = "log" ] ; then
          sed -i "s/^_SYSTEM_UPGRADE_ONLY=.*/_SYSTEM_UPGRADE_ONLY=NO/g"      /root/.barracuda.cnf
          sed -i "s/^_AEGIR_UPGRADE_ONLY=.*/_AEGIR_UPGRADE_ONLY=NO/g"        /root/.barracuda.cnf
        fi
        bash /var/backups/BARRACUDA.sh.txt >$_UP_LOG 2>&1
        check_report
      else
        sed -i "s/^_SYSTEM_UPGRADE_ONLY=.*/_SYSTEM_UPGRADE_ONLY=NO/g"        /root/.barracuda.cnf
        sed -i "s/^_AEGIR_UPGRADE_ONLY=.*/_AEGIR_UPGRADE_ONLY=NO/g"          /root/.barracuda.cnf
        sed -i "s/^_AUTOPILOT=.*/_AUTOPILOT=NO/g"                            /root/.barracuda.cnf
        bash /var/backups/BARRACUDA.sh.txt
      fi
    fi
  else
    echo "BARRACUDA.sh.txt installer not available - try again"
    clean_pid_exit
  fi
}

up_start ()
{
  if [ -e "/var/run/boa_run.pid" ] ; then
    echo Another BOA installer is running probably - /var/run/boa_run.pid exists
    exit 1
  elif [ -e "/var/run/boa_wait.pid" ] ; then
    echo Some important system task is running probably - /var/run/boa_wait.pid exists
    exit 1
  else
    touch /var/run/boa_run.pid
    touch /var/run/boa_wait.pid
    mkdir -p $_LOG_DIR
    cd /var/backups
    rm -f /var/backups/BARRACUDA.sh*
  fi
  if [ -e "/opt/local/bin/php" ] || [ -e "/opt/local/bin/pear" ] || [ -e "/usr/local/bin/php" ] || [ -e "/usr/local/bin/pear" ] ; then
    rm -f /opt/local/bin/pear
    rm -f /opt/local/bin/php
    rm -f /usr/local/bin/pear
    rm -f /usr/local/bin/php
  fi
  if [ -d "/opt/local/bin" ] ; then
    if [ -x "/opt/php53/bin/php" ] ; then
      ln -s /opt/php53/bin/php /opt/local/bin/php
    elif [ -x "/opt/php54/bin/php" ] ; then
      ln -s /opt/php54/bin/php /opt/local/bin/php
    elif [ -x "/opt/php55/bin/php" ] ; then
      ln -s /opt/php55/bin/php /opt/local/bin/php
    else
      ln -s /opt/php53/bin/php /opt/local/bin/php &> /dev/null
    fi
  fi
}

up_finish ()
{
  rm -f /var/run/boa_run.pid
  rm -f /var/run/boa_wait.pid
  rm -f /var/run/boa_system_wait.pid
  rm -f /var/run/manage_ltd_users.pid
  rm -f /var/run/manage_rvm_users.pid
  rm -f /var/backups/BARRACUDA.sh*
  rm -f /root/BOA.sh*
  rm -f /root/.bashrc.bak*
  if [ -e "/opt/local/bin/php" ] || [ -e "/usr/local/bin/php" ] ; then
    rm -f /opt/local/bin/php
    rm -f /usr/local/bin/php
  fi
  if [[ "$_CHECK_HOST" =~ ".host8." ]] || [ "$_L_VMFAMILY" = "VS" ] ; then
    service webmin stop &> /dev/null
    service usermin stop &> /dev/null
  fi
  echo
  echo BARRACUDA upgrade completed
  echo Bye
  echo
  if [ "$ifauto" = "auto" ] || [ "$_NEEDS_UPDATE" = "YES" ] ; then
    rm -f /var/backups/BOA.sh.txt-*
    curl -L --max-redirs 10 -k -s --retry 10 --retry-delay 5 -A iCab "http://files.aegir.cc/BOA.sh.txt" -o /var/backups/BOA.sh.txt-$_NOW
    exec bash /var/backups/BOA.sh.txt-$_NOW &> /dev/null
    rm -f /var/backups/BOA.sh.txt-$_NOW
  fi
  exit 0
}

set_pin_priority ()
{
  if [ ! -e "/etc/apt/preferences" ] && [ -e "/etc/issue.net" ] ; then
    _THIS_OS=$(grep "Debian" /etc/issue.net)
    if [[ "$_THIS_OS" =~ "Debian" ]] ; then
      _THIS_OS=Debian
    else
      _THIS_OS=Ubuntu
    fi
    if [ "$_THIS_OS" = "Debian" ] ; then
      _THIS_RV=$(grep "6.0" /etc/issue.net)
      if [[ "$_THIS_RV" =~ "6.0" ]] ; then
        curl -L --max-redirs 10 -k -s --retry 10 --retry-delay 5 -A iCab "http://files.aegir.cc/versions/master/aegir/conf/etc-apt-preferences-squeeze.txt" -o /etc/apt/preferences
      else
        curl -L --max-redirs 10 -k -s --retry 10 --retry-delay 5 -A iCab "http://files.aegir.cc/versions/master/aegir/conf/etc-apt-preferences-wheezy.txt" -o /etc/apt/preferences
      fi
    elif [ "$_THIS_OS" = "Ubuntu" ] ; then
      curl -L --max-redirs 10 -k -s --retry 10 --retry-delay 5 -A iCab "http://files.aegir.cc/versions/master/aegir/conf/etc-apt-preferences-ubuntu.txt" -o /etc/apt/preferences
    fi
  fi
}

check_wrapper ()
{
  rm -f /var/backups/$(basename "$0")-now-*
  _THIS_FILE="/var/backups/$(basename "$0")-now-$_NOW"
  curl -L --max-redirs 10 -k -s --retry 10 --retry-delay 5 -A iCab "http://files.aegir.cc/versions/master/aegir/tools/bin/$(basename "$0")" -o $_THIS_FILE
  if [ ! -e "$_THIS_FILE" ] ; then
    echo "I can not download required installers from files.aegir.cc at the moment."
    echo "Please check http://stats.pingdom.com/x0s6yrbopal6/646562 and try again later."
    clean_pid_exit
  fi
  _BIN_FILE="/usr/local/bin/$(basename "$0")"
  _DATE_TEST=$(grep "### $_TODAY ###" $_THIS_FILE)
  if [[ "$_DATE_TEST" =~ "### $_TODAY ###" ]] ; then
    _NEEDS_UPDATE=NO
  else
    _NEEDS_UPDATE=YES
  fi
}

check_dns_curl ()
{
  if [ ! -e "/etc/resolv.conf" ] ; then
    if [ -e "/var/backups/resolv.conf.vanilla" ] ; then
      cat /var/backups/resolv.conf.vanilla >/etc/resolv.conf
    fi
    echo "nameserver 8.8.8.8" >>/etc/resolv.conf
    echo "nameserver 8.8.4.4" >>/etc/resolv.conf
    check_dns_settings
  else
    check_dns_settings
  fi
  if [ -d "/var/cache/pdnsd" ] ; then
    service pdnsd stop &> /dev/null
    sleep 1
    rm -f /var/cache/pdnsd/pdnsd.cache
    sleep 1
    service pdnsd start &> /dev/null
  fi
  _CURL_TEST=$(curl -L --max-redirs 10 -k -s --retry 3 --retry-delay 10 -I "http://files.aegir.cc" 2> /dev/null)
  if [[ "$_CURL_TEST" =~ "200 OK" ]] ; then
    _DO_NOTHING=YES
  else
    apt-get clean -qq &> /dev/null
    apt-get update -qq &> /dev/null
    apt-get install curl -y --force-yes --reinstall &> /dev/null
  fi
}

check_root ()
{
  if [ `whoami` = "root" ] ; then
    chmod a+w /dev/null
    if [ ! -e "/dev/fd" ] ; then
      if [ -e "/proc/self/fd" ] ; then
        rm -rf /dev/fd
        ln -s /proc/self/fd /dev/fd
      fi
    fi
    sed -i "s/.*173.231.133.190.*//g" /etc/hosts
    sed -i "s/^127.0.0.1.*/127.0.0.1 localhost/g" /etc/hosts
    sed -i "s/.*files.aegir.cc.*//g" /etc/hosts
    echo >>/etc/hosts
    sed -i "/^$/d" /etc/hosts
  else
    echo "ERROR: This script should be ran as a root user - please `sudo -i` first"
    clean_pid_exit
  fi
  _DF_TEST=$(df -kTh / -l | grep '/'| sed 's/\%//g'| awk '{print $6}' 2> /dev/null)
  _DF_TEST=${_DF_TEST//[^0-9]/}
  if [ ! -z "$_DF_TEST" ] && [ "$_DF_TEST" -gt "90" ] ; then
    echo "ERROR: Your disk space is almost full - we can not proceed until it is below 90/100"
    clean_pid_exit
  fi
}

proceed ()
{
  check_root
  check_dns_curl
  check_wrapper
  set_pin_priority
  up_start
  if [ "$cmmand" = "up-stable" ] ; then
    _SCRIPT_URL="http://files.aegir.cc/versions/stable/txt/BARRACUDA.sh.txt"
  elif [ "$cmmand" = "up-head" ] ; then
    _SCRIPT_URL="https://raw.githubusercontent.com/omega8cc/boa/master/BARRACUDA.sh.txt"
  elif [ "$cmmand" = "up-cluster" ] ; then
    _SCRIPT_URL="https://raw.githubusercontent.com/omega8cc/boa/cluster/BARRACUDA.sh.txt"
  elif [ "$cmmand" = "up-modern" ] ; then
    _SCRIPT_URL="https://raw.githubusercontent.com/omega8cc/boa/2.3.x-dev/BARRACUDA.sh.txt"
  elif [ "$cmmand" = "up-legacy" ] ; then
    _SCRIPT_URL="http://files.aegir.cc/versions/legacy/txt/BARRACUDA.sh.txt"
  elif [ "$cmmand" = "up-vanilla" ] ; then
    _SCRIPT_URL="https://raw.githubusercontent.com/omega8cc/boa/2.3.x-dev/BARRACUDA.sh.txt"
  else
    echo
    echo "Usage: $(basename "$0") {up-stable|up-head|up-legacy} {system|log}"
    echo
    echo "  Silent Mode Option: system == OS only upgrade"
    echo "  Silent Mode Option: log ===== OS and Aegir Master Instance upgrade"
    echo
    clean_pid_exit
  fi
  if [ -e "/root/.mstr.clstr.cnf" ] || [ -e "/root/.wbhd.clstr.cnf" ] || [ -e "/root/.dbhd.clstr.cnf" ] ; then
    _SCRIPT_URL="https://raw.githubusercontent.com/omega8cc/boa/cluster/BARRACUDA.sh.txt"
    cmmand="up-cluster"
  fi
  curl -L --max-redirs 10 -k -s --retry 10 --retry-delay 5 -A iCab $_SCRIPT_URL -o BARRACUDA.sh.txt
  up_action
  up_finish
}

cmmand="$1"
silent="$2"
ifauto="$3"
proceed
