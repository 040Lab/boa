#!/bin/bash


###----------------------------------------###
###
###  Barracuda Aegir Installer
###
###  Copyright (C) 2010-2015 Omega8.cc
###  noc@omega8.cc www.omega8.cc
###
###  This program is free software. You can
###  redistribute it and/or modify it under
###  the terms of the GNU GPL as published by
###  the Free Software Foundation, version 2
###  or later.
###
###  This program is distributed in the hope
###  that it will be useful, but WITHOUT ANY
###  WARRANTY; without even the implied
###  warranty of MERCHANTABILITY or FITNESS
###  FOR A PARTICULAR PURPOSE. See the GNU GPL
###  for more details.
###
###  You should have received a copy of the
###  GNU GPL along with this program.
###  If not, see http://www.gnu.org/licenses/
###
###  Code: https://code.aegir.cc/aegir
###
###----------------------------------------###


###----------------------------------------###
### HOW-TO: run it with bash, not with sh  ###
###----------------------------------------###
###
### $ bash BARRACUDA.sh.txt
###


###----------------------------------------###
### EDITME                                 ###
###----------------------------------------###
###
### Enter your valid e-mail address below.
###
_MY_EMAIL="notify@omega8.cc"


###----------------------------------------###
### EASY SETUP MODE                        ###
###----------------------------------------###
###
### Active only during initial system setup.
###
### It will skip all prompts and configure
### Barracuda with only some options/services
### enabled, as listed below. Supported
### options and associated settings:
###
###  NO (requires manual configuration)
###  WBHD (experimental for web heads)
###  DBHD (experimental for db heads)
###  LOCAL (experimental for local testing)
###  PUBLIC (default)
###
_EASY_SETUP=PUBLIC

###
### Please enter your FQDN hostname below.
###
### It should already point to your server
### IP address with DNS wildcard configured,
### so you may need to wait for propagation
### on the Internet before it will work.
###
### See for reference: http://bit.ly/UM2nRb
###
### NOTE! You shouldn't use "mydomain.org"
### as your hostname. It should be some
### subdomain, like "server.mydomain.org"
###
### You *don't* need to configure your server
### hostname, since Barracuda will do that
### for you, automatically.
###
_EASY_HOSTNAME="wildcard-enabled-hostname"

###----------------------------------------###
###
### STOP! NO NEED TO CONFIGURE ANYTHING BELOW
### IF _EASY_SETUP MODE HAS BEEN ENABLED.
###
###----------------------------------------###


###----------------------------------------###
### MANUAL INSTALL MODE                    ###
###----------------------------------------###
###
### You can configure all options manually
### below when _EASY_SETUP=NO above.
###


###----------------------------------------###
### PHP MULTI INSTALL                      ###
###----------------------------------------###
###
### By default Barracuda installs only PHP 5.5
### but this option allows you to install also
### other experimental PHP versions and then
### choose different version for PHP and
### PHP-CLI per Aegir Master and per Satellite
### Instance with variables: _PHP_FPM_VERSION
### and _PHP_CLI_VERSION.
###
### Available options: 5.6, 5.5, 5.4, 5.3
###
### Example: _PHP_MULTI_INSTALL="5.3 5.5"
###
### Note that removing any version from this
### list once it is already installed, will
### NOT uninstall anything.
###
### Do not confuse this with other settings
### _PHP_FPM_VERSION and _PHP_CLI_VERSION,
### which are used to define version to be
### used by Master or Satellite Instance.
###
_PHP_MULTI_INSTALL="5.5"


###----------------------------------------###
### PHP SINGLE INSTALL                     ###
###----------------------------------------###
###
### Note that this variable, if used, will
### override all other related variables:
###
### _PHP_FPM_VERSION
### _PHP_CLI_VERSION
### _PHP_MULTI_INSTALL
###
### Available options: 5.6, 5.5, 5.4 or 5.3
###
### Example: _PHP_SINGLE_INSTALL=5.5
###
_PHP_SINGLE_INSTALL=


###----------------------------------------###
### PHP-FPM VERSION                        ###
###----------------------------------------###
###
### You can choose PHP-FPM version per Aegir
### Master and Satellite Instance - both on
### install and upgrade.
###
### Available options (if installed):
###
### _PHP_FPM_VERSION=5.6
### _PHP_FPM_VERSION=5.5
### _PHP_FPM_VERSION=5.4
### _PHP_FPM_VERSION=5.3
###
### Note that 5.5 will be set automatically
### if you specify any other, not installed
### version.
###
_PHP_FPM_VERSION=5.5


###----------------------------------------###
### PHP-CLI VERSION                        ###
###----------------------------------------###
###
### You can choose PHP-CLI version per Aegir
### Master and Satellite Instance - both on
### install and upgrade.
###
### Available options (if installed):
###
### _PHP_CLI_VERSION=5.6
### _PHP_CLI_VERSION=5.5
### _PHP_CLI_VERSION=5.4
### _PHP_CLI_VERSION=5.3
###
### Note that 5.5 will be set automatically
### if you specify any other, not installed
### version.
###
_PHP_CLI_VERSION=5.5


###----------------------------------------###
### XTRAS INSTALL MODE                     ###
###----------------------------------------###
###
### You can use wildcard "ALL" to install
### some default xtras or configure the list
### as explained below.
###
### Note: the "ALL" wildcard is not default!
###
### When combined with _AUTOPILOT=YES option
### you can speed up the process and still
### control which xtras will be installed,
### using the symbols listed below.
###
### Xtras included with "ALL" wildcard:
###
### CGP --- Collectd Graph Panel
### CHV --- Chive DB Manager
### CSF --- Firewall
### CSS --- Compass Tools
### FTP --- Pure-FTPd server with forced FTPS
### WMN --- Webmin Control Panel
###
### Xtras which need to be listed explicitly:
###
### BDD --- SQL Buddy DB Manager
### BND --- Bind9 DNS Server
### BZR --- Bazaar
### FMG --- FFmpeg support
### GIT --- Latest Git from sources
### IMG --- Image Optimize binaries
### SR1 --- Apache Solr 1 with Jetty 7
### SR3 --- Apache Solr 3 with Jetty 8
### SR4 --- Apache Solr 4 with Jetty 8 or 9
###
### Examples:
###
### _XTRAS_LIST=""
### _XTRAS_LIST="ALL"
### _XTRAS_LIST="ALL GIT SR3"
### _XTRAS_LIST="CSF CGP CHV FTP"
###
### Note that removing any item from this
### list once it is already installed, will
### NOT uninstall anything.
###
_XTRAS_LIST="CSF CHV FTP"


###----------------------------------------###
### NEW RELIC INSTALL                      ###
###----------------------------------------###
###
### Enter your New Relic license key to get
### it installed and enabled automatically.
###
_NEWRELIC_KEY=""


###----------------------------------------###
### SCOUT APP INSTALL                      ###
###----------------------------------------###
###
### Enter your Scout App license key to get
### it installed and enabled automatically.
###
_SCOUT_KEY=""


###----------------------------------------###
### AUTOPILOT MODE                         ###
###----------------------------------------###
###
### To disable all Yes/no prompts and just run
### everything as-is, change it to YES.
###
### _AUTOPILOT=YES
###
_AUTOPILOT=NO


###----------------------------------------###
### UPGRADE OPTIONS                        ###
###----------------------------------------###
###
### Use YES to upgrade system only and skip
### Aegir Master Instance upgrade.
###
_SYSTEM_UPGRADE_ONLY=NO

###
### Use YES to upgrade Aegir Master Instance
### only and skip system upgrade.
###
_AEGIR_UPGRADE_ONLY=NO

###
### You can force Nginx, PHP and/or DB server
### reinstall, even if there are no updates
### available, when set to YES.
###
### Note that _SSL_FORCE_REINSTALL when set
### to YES, will automatically force also
### _NGX_FORCE_REINSTALL and
### _PHP_FORCE_REINSTALL
###
_NGX_FORCE_REINSTALL=NO
_PHP_FORCE_REINSTALL=NO
_SQL_FORCE_REINSTALL=NO
_SSL_FORCE_REINSTALL=NO

###
### Use YES to force installing everything
### from sources again, even if there are
### no updates available.
###
_FULL_FORCE_REINSTALL=NO

###
### Use YES to run major system upgrade
### from Debian Squeeze to Debian Wheezy.
###
_SQUEEZE_TO_WHEEZY=NO

###
### Use YES to run major system upgrade
### from Debian Lenny to Debian Squeeze.
###
_LENNY_TO_SQUEEZE=NO

###
### Use YES to run migration from Tomcat 6
### to Jetty 7 with Apache Solr 1.4.1
###
_TOMCAT_TO_JETTY=NO

###----------------------------------------###
### DRUSH DEBUG MODE                       ###
###----------------------------------------###
###
### When set to YES it will run Aegir Master
### Instance install/upgrade with -d option,
### displaying complete Drush backend report.
###
### _DEBUG_MODE=YES
###
_DEBUG_MODE=NO


###----------------------------------------###
### DB SERVER                              ###
###----------------------------------------###
###
### Barracuda no longer supports Percona since
### 2.2.0 release. If you have used Percona
### before, Barracuda will force upgrade to
### MariaDB and PHP rebuild, automatically.
###
_DB_SERVER=MariaDB


###----------------------------------------###
### DB SERIES                              ###
###----------------------------------------###
###
### You can choose MariaDB 5.5 or new 10.0
###
### Note that on Ubuntu 14.04 LTS Trusty we
### force the only available 10.0 version.
###
_DB_SERIES=5.5


###----------------------------------------###
### REDIS LISTEN MODE                      ###
###----------------------------------------###
###
### If set to PORT (old default) Redis will
### listen on standard port and 127.0.0.1 IP.
###
### You can also change this option to SOCKET
### to improve caching backend performance.
###
### When set to any other IP address, it will
### switch ALL your Aegir Satellite Instances
### along with your Aegir Master Instance from
### local Redis server to the remote Redis
### server you have installed in your network.
### It will also permanently disable your
### local Redis server. Make sure to specify
### correct IP when using this mode and also
### modify /etc/csf/csf.conf to allow outgoing
### TCP connections via port 6379.
###
_REDIS_LISTEN_MODE=PORT


###----------------------------------------###
### SSH CUSTOM PORT                        ###
###----------------------------------------###
###
### Change this if you want to use non-default
### port for SSH and SFTP connections.
###
### Changing the port will alter also your
### server firewall (csf) settings, both on
### install and upgrade, unless you are using
### _CUSTOM_CONFIG_CSF=YES option.
###
_SSH_PORT=22


###----------------------------------------###
### LOCAL DEBIAN OR UBUNTU MIRROR          ###
###----------------------------------------###
###
### Modify this if you prefer to use some
### mirror you know is the best / the fastest
### in your server location. For example:
###
### _LOCAL_DEBIAN_MIRROR=ftp.au.debian.org
### _LOCAL_UBUNTU_MIRROR=au.archive.ubuntu.com
###
### To search for the fastest mirror around
### the globe, use empty variables:
###
### _LOCAL_DEBIAN_MIRROR=""
### _LOCAL_UBUNTU_MIRROR=""
###
### Note that searching around the globe is
### no longer enabled by default!
###
### Note also that it may hang and later cause
### broken upgrades if some tested mirror
### responds with unexpected delay instead of
### just respond or not, so it is better
### to use reliable mirrors you know,
### or leave default values.
###
_LOCAL_DEBIAN_MIRROR=ftp.debian.org
_LOCAL_UBUNTU_MIRROR=archive.ubuntu.com


###----------------------------------------###
### FORCE PREFERRED GIT REPOSITORY         ###
###----------------------------------------###
###
### Use this when you are experiencing issues
### trying to connect to the default github
### repository. Valid options:
###
### _FORCE_GIT_MIRROR=github
### _FORCE_GIT_MIRROR=gitorious
###
### Note: with forced mirror the script will
### not try to connect and then switch to
### alternate mirror. It will simply fail
### if the forced mirror doesn't respond.
###
### We recommend github - it is much faster.
###
_FORCE_GIT_MIRROR=""


###----------------------------------------###
### DNS MANUAL CONFIG                      ###
###----------------------------------------###
###
### Starting with release 0.4-alpha9 Aegir
### requires proper DNS configuration
### of your server. Your hostname has to be
### FQDN and has to match your server IP.
###
### This script is trying to discover your
### DNS details and allow or deny the install,
### if something doesn't look right.
###
### This script will also use your FQDN
### hostname as a web address of your Aegir
### frontend (control panel) by default.
###
### You may want to change the automatic
### defaults by setting up your IP address,
### your FQDN hostname and your Aegir frontend
### web address below - it is recommended!
###
### It may be useful when you are using local
### environment with custom settings in your
### /etc/hosts, when you have more than one
### public IPs on eth0 and you wish to use
### non-default (first) IP address, or when
### you want to use non-hostname (sub)domain
### to access your Aegir frontend.
###
### It is also useful when you plan to use
### available in Barracuda optional installs
### of Chive, SQL Buddy and Collectd, since
### all of them will use subdomains in the
### server hostname and it will not work
### when your hostname domain DNS is not
### under your control (like many default
### hostnames and reverse DNS provided by
### VPS hosting companies).
###
### Please change *all 3 values* if you wish
### to customize this automatic setup.
###
### Example:
###
### _MY_OWNIP=192.168.0.108
### _MY_HOSTN=server.mydomain.com
### _MY_FRONT=aegir.mydomain.com
###
### NOTE:
###
### If you will use your custom DNS settings,
### they will be still validated, therefore
### make sure your _MY_HOSTN and _MY_FRONT
### both matches your _MY_OWNIP or the script
### will fail to install Aegir (unless you
### will disable the DNS test completely
### below in _DNS_SETUP_TEST).
###
_MY_OWNIP=""
_MY_HOSTN=""
_MY_FRONT=""


###----------------------------------------###
### DNS SETUP TEST                         ###
###----------------------------------------###
###
### If you don't want to test your DNS
### because of some custom local setup
### you know is correct (like DynDNS)
### but the script can't validate it with its
### standard ifconfig tests, set this to:
###
### _DNS_SETUP_TEST=NO
###
### There is no guarantee it will work.
###
_DNS_SETUP_TEST=YES


###----------------------------------------###
### DATABASE DEFAULT HOST                  ###
###----------------------------------------###
###
### If you prefer, you can set the database
### to be connected via FQDN pointing to your
### public IP instead of default "localhost",
### but it will make it harder to migrate
### sites with DB grants tied to the system
### unique hostname.
###
### Note: the "FQDN" is a keyword. It will be
### automatically replaced with your system
### real hostname when used.
###
### NOTE: This distinction is very important,
### because if you will specify your system
### local hostname literally, BOA will use
### the "Remote DB Server Mode" instead, as
### explained further below.
###
### For local or Amazon based installs with
### local/dynamic IP address it is recommended
### to use default "localhost" option.
###
### Supported options:
###
### _THIS_DB_HOST=localhost
### _THIS_DB_HOST=FQDN
###
_THIS_DB_HOST=localhost


###----------------------------------------###
### REMOTE DB SERVER MODE                  ###
###----------------------------------------###
###
### WARNING !!!
###
### THIS IS **HIGHLY EXPERIMENTAL** FEATURE.
### EXPECT YOUR SYSTEM TO *EXPLODE* IF USED.
###
### Note: We may refer to the DB server
###       also by using term 'DB head'
###
### If you will specify some remote DB server
### name (not IP) or even local hostname, but
### literally instead of via 'localhost' or
### 'FQDN' keyword, it will turn on and use
### the special REMOTE DB SERVER MODE.
###
### This mode will work only if the remote DB
### server has been already configured with
### the same default dummy mysql root password
### as your Aegir system you are about to
### install, and if the mysql port 3306 is
### already open for incoming and outgoing
### TCP connections on all servers expected
### to communicate in this mode.
###
### HINT: you may want to add WEB head (Aegir)
### IP as allowed on the DB head with standard
### command: 'csf -a 12.34.56.789 my web head'
###
### Note that if the remote DB server defined
### as hostname with a valid DNS entry will be
### used, BOA will never change mysql root
### password and also on initial install will
### use this dummy password:
###
###   sCWL4tgEpyS5cLZITshxSTWRjhsUOeR6
###
### The same password will be used for the
### Aegir special DB user 'aegir_root'.
###
### Furthermore, BOA will not create separate
### special DB users per Octopus instance
### and all instances will use the same
### 'aegir_root' DB user to manage databases
### for hosted sites.
###
### You can later change this password for
### both mysql 'root' and 'aegir_root' users
### on the remote DB server, but you will
### have to manually update them in every
### Aegir instance (Master and Satellites)
### db server node settings.
###
### However, BOA will always check and use
### the password it will find in the special
### file /root/.my.pass.txt during Master
### and Satellite instances upgrade.
###
### If you will change the mysql root password
### you **must** update it also in two files:
###
###   /root/.my.pass.txt
###   /root/.my.cnf
###
### When installing BOA on a machine expected
### to work as a remote DB server, you should
### create a special file containing your
### WEB head (Aegir) hostname:
###
###  /root/.remote.web.head.txt
###
### BOA will use this file to add required
### DB GRANT for 'aegir_root' on the DB head
### so the WEB head (Aegir) hosted on the
### machine with hostname specified in this
### file will be able to manage databases
### remotely. Make sure that this file
### is present only on the DB head, though.
###
### WARNING !!!
###
### Make sure that there is no remote, public,
### unrestricted access via port 3306 to any
### DB server used in this special mode!
###
### Available non-default option:
###
### _THIS_DB_HOST=remote.db.server.name
###
_THIS_DB_HOST=localhost


###----------------------------------------###
### SMTP CONNECTION TEST                   ###
###----------------------------------------###
###
### If you don't want to test outgoing SMTP
### connections, change _SMTP_RELAY_TEST
### value to "NO".
###
_SMTP_RELAY_TEST=YES


###----------------------------------------###
### SMTP RELAY HOST - ONLY WHEN REQUIRED   ###
###----------------------------------------###
###
### _SMTP_RELAY_HOST="smtp.your.relay.net"
###
_SMTP_RELAY_HOST=""


###----------------------------------------###
### LOCALHOST ON LOCAL NETWORK             ###
###----------------------------------------###
###
### When enabled, it will force your Nginx web
### server to listen only on local IP with
### local, non-FQDN hostname, for example:
###
### _LOCAL_NETWORK_IP=10.10.80.80
### _LOCAL_NETWORK_HN=aegir.local
###
### In this example "aegir.local" will be used
### as your hostname and all connections and
### grants will use "aegir.local" instead of
### FQDN. Also your Aegir Master Instance
### will be available at http://aegir.local
###
### This option is useful when your server is
### available only in your local network
### without any public IP address assigned/
### available on any eth interface. This also
### means it should work as a handy local
### setup on your wirelessly connected laptop
### or netbook, with improved DNS cache
### support - pdnsd will save results in file.
###
### In this case you could use 127.0.1.1 as
### _LOCAL_NETWORK_IP to avoid issues with
### DHCP changing your assigned IP on the fly
### and to avoid conflicts with some other
### services listening on 127.0.0.1
###
### This option works only with initial
### install and is disabled on upgrade.
###
### When used, it will override all defined
### above _MY_OWNIP, _MY_HOSTN and _MY_FRONT
### values.
###
### It will also disable all DNS and SMTP
### relay tests automatically.
###
_LOCAL_NETWORK_IP=""
_LOCAL_NETWORK_HN=""


###----------------------------------------###
### ADVANCED CONFIGURATION OPTIONS         ###
###----------------------------------------###

###
### Change to NO if you don't want the running
### daily script to fix permissions on all
### files belonging to hosted sites an their
### platforms (and any shared code).
###
### Note that this feature is again enabled
### by default, because critically important
### security fixes/procedures depend on it.
###
_PERMISSIONS_FIX=YES

###
### Change to NO if you don't want the running
### daily script to enable/disable modules in
### all hosted sites without 'dev.' in their
### main domain name, as listed in the
### docs/MODULES.txt
###
### This options is now smart enough to check
### if the module is defined as required by any
### other module or feature and will skip such
### module automatically, to avoid disabling
### innocent modules via feature or any other
### dependency.
###
### Note that if you disable this option, you
### will automatically disable also the user
### register protection check/feature:
### https://omega8.cc/node/273
###
_MODULES_FIX=YES

###
### List modules to never disable via running
### daily script to enable/disable modules in
### all hosted sites without 'dev.' in their
### main domain name, as listed in the
### docs/MODULES.txt
###
### Requires: _MODULES_FIX=YES
###
### Example: _MODULES_SKIP="dblog update"
###
### While any module detected as required
### will not be disabled anyway, this option
### allows you to whitelist modules which
### otherwise would get disabled.
###
_MODULES_SKIP=""

###
### Use YES only if both "randpass 32 esc"
### and "randpass 32 alnum" commands produce
### well looking, strong passwords and not
### some binary garbage, which is typically
### a sign of unreliable /dev/urandom.
### See: https://drupal.org/node/1952042
###
### Configurable length: 8-128 or automatic
### with keywords: YES (32), NO (8).
###
_STRONG_PASSWORDS=NO

###
### Extra packages to install. Useful to
### specify packages not included by default
### which could be otherwise removed because
### of some conflicts due to the aggressive
### Barracuda behaviour: apt-get autoremove -y
###
_EXTRA_PACKAGES=""

###
### Use YES to avoid overwriting configuration
### for listed services on upgrade.
###
_CUSTOM_CONFIG_CSF=NO
_CUSTOM_CONFIG_LSHELL=NO
_CUSTOM_CONFIG_PHP53=NO
_CUSTOM_CONFIG_PHP54=NO
_CUSTOM_CONFIG_PHP55=NO
_CUSTOM_CONFIG_PHP56=NO
_CUSTOM_CONFIG_REDIS=NO
_CUSTOM_CONFIG_SQL=NO

###
### You can define custom list of functions
### to disable besides those already denied
### in the system level 'disable_functions'.
###
### Note: If this option is left empty, BOA
### will deny access also to function:
###
###   passthru
###
### If _PHP_FPM_DENY is *not* empty, its value
### will *replace* default 'passthru', so any
### denied function must be listed explicitly.
###
### WARNING! Do not add here 'shell_exec'
### or you will break cron for all sites
### including all hosted on all Satellite
### Instances. The 'shell_exec' function is
### also required by Collectd Graph Panel,
### if installed.
###
### This option affects only Aegir Master
### Instance plus all scripts running outside
### of Octopus Satellite Instances.
###
### Example:
###
### _PHP_FPM_DENY="passthru,popen,system"
###
### Note that while it will improve security
### it will also break modules which rely
### on any of disabled functions.
###
_PHP_FPM_DENY=""

###
### We highly recommend to enable this option
### to improve system security when certain
### PHP functions, especially: exec, passthru,
### shell_exec,system,proc_open,popen are not
### disabled via option _PHP_FPM_DENY above.
###
### WARNING! This option is very aggressive
### and can break any extra service or binary
### you have installed which BOA doesn't
### manage and the binary has system group
### set to 'root'. BOA will not touch any
### binary which has non-root group or has
### setgid or setuid permissions.
###
_STRICT_BIN_PERMISSIONS=YES

###
### Define the amount of RAM you want to keep
### reserved for other services installed which
### are not controlled by BOA, so it will
### assume that available RAM is the value of
### ${_RAM} - ${_RESERVED_RAM} (in MB).
###
### Example for 256MB: _RESERVED_RAM=256
###
_RESERVED_RAM=0

###
### CiviCRM 4.2 and newer requires more SQL
### privileges (the SUPER which can't be added
### for obvious security reasons) or binary
### logging disabled. Otherwise almost all
### Aegir tasks against any site with CiviCRM
### system active will fail, so we disable
### binary logging by default. It will also
### improve system performance on servers
### with slower/lower disks I/O.
###
### You can still enable it, if you prefer,
### by changing it to _DB_BINARY_LOG=YES
### below or in the /root/.barracuda.cnf file,
### but you must first stop mysql service
### and delete or move away all existing files
### from the /var/log/mysql/ directory, so it
### will start fresh logs after it has been
### disabled during previous system upgrade.
###
### Note: this option is ignored if the option
### _CUSTOM_CONFIG_SQL is set to YES.
###
_DB_BINARY_LOG=NO

###
### BOA already outsources most of cache*
### tables to Redis, disables accesslog and
### dblog by default, so for many typical
### Drupal sites MyISAM will provide better
### speed and much lower memory usage -
### typically only 1/3 of memory and binary
### space used by InnoDB.
###
### However, MyISAM can't recover itself
### on the fly like InnoDB, and if it will
### crash, it will have to wait for the
### self-healing monitor to detect the crash
### and run auto-repair.
###
### Note that Drupal 7 forces InnoDB.
###
### You can easily convert any site to-MyISAM
### or to-InnoDB with `sqlmagic` tool.
###
### Note: this option is ignored if the option
### _CUSTOM_CONFIG_SQL is set to YES.
###
_DB_ENGINE=InnoDB

###
### Allows to change InnoDB log file size,
### which requires special procedure.
###
### Accepted value must be an integer between
### 10 and 500 (in megabytes).
###
### Note: if _CUSTOM_CONFIG_SQL is set to YES,
### this option will be ignored.
###
### Example: _INNODB_LOG_FILE_SIZE=50
###
_INNODB_LOG_FILE_SIZE=AUTO

###
### Set max 1 min load per CPU core before blocking
### spiders temporarily, until the load stabilizes.
###
_CPU_SPIDER_RATIO=3

###
### Set max 1 min load per CPU core before disabling
### Nginx temporarily, until the load stabilizes.
###
_CPU_MAX_RATIO=6

###
### Set max 1 min load per CPU core before killing
### all running PHP, Drush, Wget and Curl processes
### until the load stabilizes.
###
### This shouldn't affect any innocent Aegir tasks,
### including cron for sites, because the system
### never starts them anyway, if the average load
### in the last minute is higher than 3.5
###
_CPU_CRIT_RATIO=9

###
### Set max allowed page views from one IP
### out of last 500. Note that it will lock
### the access completely for 1 hour on the
### firewall level in /etc/csf/csf.deny
###
_NGINX_DOS_LIMIT=300

###
### Experimental LDAP support is available
### via third-party Nginx module. To enable
### change this option to _NGINX_LDAP=YES
### below or in the /root/.barracuda.cnf file.
###
_NGINX_LDAP=NO

###
### NAXSI means Nginx Anti XSS & SQL Injection
### and is a third-party Nginx module not used
### by default. If you want to test / use it,
### change this option to _NGINX_NAXSI=YES
### below or in the /root/.barracuda.cnf file.
###
_NGINX_NAXSI=NO

###
### When set to YES, it will also force
### OpenSSL ans cURL re-install from sources
### on systems other than Debian Wheezy,
### which already comes with required
### OpenSSL 1.0.1+ by default.
###
_NGINX_SPDY=NO

###
### When set to YES, it will also force
### OpenSSL ans cURL re-install from sources
### on systems other than Debian Wheezy,
### which already comes with required
### OpenSSL 1.0.1+ by default.
###
_NGINX_FORWARD_SECRECY=NO

###
### Use this only when you need to always
### compile in some extra/custom module(s).
###
_NGINX_EXTRA_CONF=""

###
### Use this only when you need to always
### compile in some extra PHP extension.
###
_PHP_EXTRA_CONF=""

###
### Change to YES to always compile in
### MongoDB driver. Works for PHP 5.3 only.
###
_PHP_MONGODB=NO

###
### Change to YES to always compile in
### GEOS extension. Works for PHP 5.3 only.
### Warning: experimental only! See issue:
### https://drupal.org/node/1913488
###
_PHP_GEOS=NO

###
### When set to YES, it will force
### OpenSSL, OpenSSH and cURL re-install
### from sources.
###
### Debian Wheezy already comes with latest
### OpenSSL 1.0.1+ by default, so this option
### will be ignored on this system.
###
_SSL_FROM_SOURCES=NO

###
### When set to YES it will force OpenSSH
### re-install from sources. Do NOT use
### if you don't have a serial console
### access to the machine or VPS!
###
_SSH_FROM_SOURCES=NO

###
### AUTO will default to values calculated
### on the fly and based on available RAM.
### You can force workers number for Nginx
### and PHP-FPM here.
###
_NGINX_WORKERS=AUTO
_PHP_FPM_WORKERS=AUTO

###
### Max default TTL for Speed Booster Cache.
### It will affect all Aegir Instances, but
### it is used only for spiders and with not
### enabled by default control file per site
### or per platform modules/cache_hour/YES.txt
###
_SPEED_VALID_MAX=3600


###----------------------------------------###
### DON'T EDIT ANYTHING BELOW THIS LINE    ###
###----------------------------------------###

_AEGIR_VERSION="HEAD"
_AEGIR_XTS_VERSION="BOA-2.4.0"
_BRANCH_BOA="2.4.x-dev"
_BRANCH_PRN="2.4.x-dev"
_X_VERSION="BOA-2.4.0-dev"

###
### Software versions
###
_BZR_VRN=2.6.0
_CGP_VRN=master-30-03-2014
_CHIVE_VRN=1.3
_CURL_VRN=7.40.0
_DB_SERVER_SRC=ftp.osuosl.org
_DRUSH4_VRN=mini-4-26-08-2014
_DRUSH6_VRN=mini-6-30-10-2014
_DRUSH7_VRN=mini-7-01-01-2015
_GALERA_10_VRN=10.0.15
_GEOS_VRN=3.4.2
_GIT_VRN=2.2.1
_IMAGICK_VRN=3.1.2
_IONCUBE_VRN=4.7.3
_JETTY_7_VRN=7.6.16.v20140903
_JETTY_8_VRN=8.1.16.v20140903
_JETTY_9_VRN=9.2.3.v20140905
_LSHELL_VRN=0.9.16.5-om8
_MAILPARSE_VRN=2.1.6
_MARIADB_10_VRN=10.0.15
_MARIADB_5_VRN=5.5.41
_MONGO_VRN=1.4.5
_MSS_VRN=1.33
_NGINX_VRN=1.7.9
_OPCACHE_VRN=master-08-11-2014
_OPENSSH_VRN=6.7p1
_OPENSSL_VRN=1.0.1j
_PHP53_API=20090626
_PHP53_VRN=5.3.29
_PHP54_API=20100525
_PHP54_VRN=5.4.36
_PHP55_API=20121212
_PHP55_VRN=5.5.20
_PHP56_API=20131226
_PHP56_VRN=5.6.4
_PHPREDIS_VRN=master-03-10-2014
_PURE_FTPD_VRN=1.0.36
_REDIS_VRN=2.8.19
_RUBY_VRN=2.2.0
_SOLR_1_VRN=1.4.1
_SOLR_3_VRN=3.6.2
_SOLR_4_VRN=4.2.0
_UPROGRESS_VRN=1.0.3.1
_VNSTAT_VRN=1.11
_ZLIB_VRN=1.2.8

###
### Variables
###
_CUSTOM_NAME="nginx"
_DRUSH_VERSION="${_DRUSH7_VRN}"
_FORCE_REDIS_RESTART=NO
_LOC_REL_VERSION=""
_NOW=$(date +%y%m%d-%H%M 2>&1)
_PURGE_ALL_THISHTIP=NO
_PURGE_MODE=ON
_SPINNER=YES
PATH=/usr/local/bin:/usr/local/sbin:/opt/local/bin:/usr/bin:/usr/sbin:/bin:/sbin
SHELL=/bin/bash
if [ -n "${STY+x}" ]; then
  _SPINNER=NO
fi
barCnf="/root/.barracuda.cnf"
crlGet="curl -L --max-redirs 10 -k -s --retry 10 --retry-delay 15 -A iCab"
locCnf="/opt/tmp/boa/aegir/conf"
mtrInc="/var/aegir/config/includes"
mtrNgx="/var/aegir/config/server_master/nginx"
mtrTpl="/var/aegir/.drush/sys/provision/http/Provision/Config/Nginx"
pthBld="/opt/tmp/boa"
pthLog="/var/xdrago/log"
urlHmr="http://files.aegir.cc/versions/master/aegir"
urlStb="http://files.aegir.cc/versions/stable"
urlDev="http://files.aegir.cc/dev"
forCer="-f -y --force-yes --reinstall"

###---### Avoid too many questions
#
export DEBIAN_FRONTEND=noninteractive
if [ -z "${TERM+x}" ]; then
  export TERM=vt100
fi
#
###---### Functions
#
# Clean pid files on exit.
clean_pid_exit() {
  rm -f /var/run/boa_wait.pid
  rm -f /var/run/boa_run.pid
  service cron start &> /dev/null
  exit 1
}
#
# Noticeable messages.
msg() {
  echo "Barracuda [$(date +%T 2>&1)] ==> $*"
}
# Simple prompt.
prompt_yes_no() {
if [ "${_AUTOPILOT}" = "YES" ] ; then
  return 0
else
  while true ; do
  printf "$* [Y/n] "
  read answer
  if [ -z "$answer" ] ; then
    return 0
  fi
  case $answer in
    [Yy]|[Yy][Ee][Ss])
    return 0
    ;;
    [Nn]|[Nn][Oo])
    return 1
    ;;
    *)
    echo "Please answer yes or no"
    ;;
  esac
 done
fi
}
#
# Prompt to confirm choice.
prompt_confirm_choice() {
  read -p "$1 [$2]:" _CONFIRMED_ANSWER
  if [ -z "$_CONFIRMED_ANSWER" ] ; then
    _CONFIRMED_ANSWER=$2
  fi
}
#
# Stop on error.
# set -e ### disable this for debugging
#
# Success msg.
success() {
  msg "$1 Succeeded"
}
#
# Error msg.
fatal() {
  echo " "
  msg "Fatal Error Occurred: $1"
  msg "Cannot continue installation"
  clean_pid_exit
}
#
# Not supported OS.
not_supported_os() {
  msg "== FATAL ERROR =="
  msg "Invalid install script or OS used"
  msg "It is not any supported Debian or Ubuntu version"
  msg "You need Debian - Squeeze (recommended) or Wheezy"
  msg "or Ubuntu - Precise or Lucid"
  clean_pid_exit
}
#
# Perform an action, log it, and run the spinner throughout.
runner() {
  CMD="$1"
  touch busy
  if [ "${_SPINNER}" = "YES" ] ; then
    bash ${_SRCDIR}/spinner busy &
  fi
  if ${CMD} >> ${_LOG}; then
    rm busy
    sleep 1
    success "${CMD}:"
    return 0
  else
    rm busy
    sleep 1
    echo "${CMD} failed.  Error (if any): $?"
    echo " "
    echo "Displaying the last 15 lines of ${_LOG} to help troubleshoot this problem"
    echo "If you see any error with advice to run 'dpkg --configure -a', run this"
    echo "command first and choose default answer, then run this installer again"
    echo " "
    tail -15 ${_LOG}
    return 1
  fi
}
#
# Small spinner.
mrun() {
  CMD="$1"
  touch busy
  if [ "${_SPINNER}" = "YES" ] ; then
    bash ${_SRCDIR}/spinner busy &
  fi
  if ${CMD} >> ${_LOG}; then
    rm busy
    sleep 1
    return 0
  fi
}
#
# Silent runner.
st_runner() {
  CMD="$1"
  touch busy
  if [ "${_SPINNER}" = "YES" ] ; then
    bash ${_SRCDIR}/spinner busy &
  fi
  if ${CMD} >> ${_LOG}; then
    rm busy
    sleep 1
    return 0
  else
    rm busy
    sleep 1
    echo "${CMD} failed.  Error (if any): $?"
    echo " "
    echo "Displaying the last 15 lines of ${_LOG} to help troubleshoot this problem"
    echo "If you see any error with advice to run 'dpkg --configure -a', run this"
    echo "command first and choose default answer, then run this installer again"
    echo " "
    tail -15 ${_LOG}
    return 1
  fi
}
#
# Remove dangerous stuff from the string.
sanitize_string() {
  echo "$1" | sed 's/[\\\/\^\?\>\`\#\"\{\(\$\@\&\|\*]//g; s/\(['"'"'\]\)//g'
}
#
# Find correct IP.
find_correct_ip() {
  _LOC_IP=$(echo $(getent ahostsv4 $_LOC_DOM) \
    | cut -d: -f2 \
    | awk '{ print $1}' 2>&1)
}
#
# Extract archive.
extract_archive() {
  if [ ! -z $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1    ;;
      *.tar.gz)    tar xzf $1    ;;
      *.bz2)       bunzip2 $1    ;;
      *.rar)       unrar x $1    ;;
      *.gz)        gunzip -q $1  ;;
      *.tar)       tar xf $1     ;;
      *.tbz2)      tar xjf $1    ;;
      *.tgz)       tar xzf $1    ;;
      *.zip)       unzip -qq $1  ;;
      *.Z)         uncompress $1 ;;
      *.7z)        7z x $1       ;;
      *)           echo "'$1' cannot be extracted via >extract<" ;;
    esac
    rm -f $1
  fi
}
#
# Download and extract archive from dev mirror.
get_dev_arch() {
  if [ ! -z $1 ] ; then
    curl -L --max-redirs 10 -k -s -O --retry 10 --retry-delay 15 \
      -A iCab "${urlDev}/$1"
    extract_archive "$1"
  fi
}
#
# Download and extract from dev/version mirror.
get_dev_ext() {
  if [ ! -z $1 ] ; then
    curl -L --max-redirs 10 -k -s -O --retry 10 --retry-delay 15 \
      -A iCab "${urlDev}/${_AEGIR_XTS_VERSION}/$1"
    extract_archive "$1"
  fi
}
#
# Download and extract from dev/contrib mirror.
get_dev_contrib() {
  if [ ! -z $1 ] ; then
    curl -L --max-redirs 10 -k -s -O --retry 10 --retry-delay 15 \
      -A iCab "${urlDev}/contrib/$1"
    extract_archive "$1"
  fi
}
#
# Download and extract archive from dev/src mirror.
get_dev_src() {
  if [ ! -z $1 ] ; then
    curl -L --max-redirs 10 -k -s -O --retry 10 --retry-delay 15 \
      -A iCab "${urlDev}/src/$1"
    extract_archive "$1"
  fi
}
#
# Fix DNS settings.
fix_dns_settings() {
  mkdir -p /var/backups
  rm -f /var/backups/resolv.conf.tmp
  if [ -e "/etc/resolv.conf" ] ; then
    cp -a /etc/resolv.conf /var/backups/resolv.conf.tmp
  fi
  if [ ! -e "/var/backups/resolv.conf.vanilla" ] ; then
    for Pre in `ls -la /var/backups/resolv.conf.pre-*` ; do
      if [ -e "${Pre}" ] && [ -f "${Pre}" ] && [ ! -L "${Pre}" ] ; then
        cp -a ${Pre} /var/backups/resolv.conf.vanilla
      fi
    done
  fi
  if [ ! -e "/var/backups/resolv.conf.vanilla" ] ; then
    rm -f /etc/resolv.conf
    cp -a /var/backups/resolv.conf.tmp /etc/resolv.conf
    cp -a /var/backups/resolv.conf.tmp /var/backups/resolv.conf.vanilla
  fi
  sed -i "/^$/d" /var/backups/resolv.conf.vanilla &> /dev/null
  rm -f /etc/resolv.conf
  echo "nameserver 8.8.8.8" > /etc/resolv.conf
  echo "nameserver 8.8.4.4" >> /etc/resolv.conf
  _BROKEN_DNS_TEST=$(host -a omega8.cc 8.8.8.8 -w 10 2>&1)
  if [[ "${_BROKEN_DNS_TEST}" =~ "no servers could be reached" ]] \
    && [ -e "/var/backups/resolv.conf.vanilla" ] ; then
    touch /root/.use.local.nameservers.cnf
    rm -f /etc/resolv.conf
    cp -a /var/backups/resolv.conf.vanilla /etc/resolv.conf
    echo "nameserver 8.8.8.8" >> /etc/resolv.conf
    echo "nameserver 8.8.4.4" >> /etc/resolv.conf
  else
    rm -f /etc/resolv.conf
    cp -a /var/backups/resolv.conf.tmp /etc/resolv.conf
  fi
  if [ -e "/etc/pdnsd.conf" ] ; then
    if [ -e "/root/.local.dns.IP.list" ] ; then
      sed -i "s/.*127.0.0.1.*//g; s/ *$//g; /^$/d" /root/.local.dns.IP.list
      sed -i "s/.*Dynamic.*//g; s/ *$//g; /^$/d"   /root/.local.dns.IP.list
      _BROKEN_DNS_TEST=$(grep "\." /root/.local.dns.IP.list 2>&1)
      if [ -z "${_BROKEN_DNS_TEST}" ] ; then
        echo "        label = \"google-servers\";" > /root/.local.dns.IP.list
        echo "        ip=8.8.8.8;" >> /root/.local.dns.IP.list
        echo "        ip=8.8.4.4;" >> /root/.local.dns.IP.list
      fi
    fi
    _CUSTOM_DNS_TEST=$(grep 8.8.8.8 /etc/pdnsd.conf 2>&1)
    _BROKEN_DNS_CONF=$(grep "ip=Dynamic" /etc/pdnsd.conf 2>&1)
    if [[ "${_CUSTOM_DNS_TEST}" =~ "8.8.8.8" ]] \
      || [[ "${_BROKEN_DNS_CONF}" =~ "Dynamic" ]] ; then
      if [ -e "/root/.use.local.nameservers.cnf" ] ; then
        echo "        label = \"google-servers\";" > /root/.local.dns.IP.list
        for _IP in `cat /etc/resolv.conf \
          | sed 's/.*127.0.0.1.*//g; s/.*Dynamic.*//g' \
          | cut -d ' ' -f2 \
          | sort \
          | uniq`;do echo "        ip=$_IP;" >> /root/.local.dns.IP.list;done
        sed -i "s/ip=8.8.*//g; s/ *$//g; /^$/d" /etc/pdnsd.conf
        sed -i "s/ip=127.*//g; s/ *$//g; /^$/d" /etc/pdnsd.conf
        sed -i "s/ip=Dyn.*//g; s/ *$//g; /^$/d" /etc/pdnsd.conf
        sed -i "s/.*127.0.0.1.*//g; s/ *$//g; /^$/d" /root/.local.dns.IP.list
        sed -i "s/.*Dynamic.*//g; s/ *$//g; /^$/d"   /root/.local.dns.IP.list
        _BROKEN_DNS_TEST=$(grep "\." /root/.local.dns.IP.list 2>&1)
        if [ -z "${_BROKEN_DNS_TEST}" ] ; then
           echo "        ip=8.8.8.8;" >> /root/.local.dns.IP.list
           echo "        ip=8.8.4.4;" >> /root/.local.dns.IP.list
        fi
        sed -i '/        label = \"google-servers\";/ {r /root/.local.dns.IP.list
d;};' /etc/pdnsd.conf
        resolvconf -u                      &> /dev/null
        service pdnsd stop                 &> /dev/null
        rm -f /var/cache/pdnsd/pdnsd.cache &> /dev/null
        service pdnsd start                &> /dev/null
        service pdnsd stop                 &> /dev/null
        rm -f /var/cache/pdnsd/pdnsd.cache &> /dev/null
        service pdnsd start                &> /dev/null
      fi
    fi
  fi
}
#
# Check DNS settings.
check_dns_settings() {
  _BROKEN_DNS_TEST=$(host -a omega8.cc 8.8.8.8 -w 10 2>&1)
  if [[ "${_BROKEN_DNS_TEST}" =~ "no servers could be reached" ]] \
    || [ -e "/root/.use.local.nameservers.cnf" ] ; then
    _USE_PROVIDER_DNS=YES
    fix_dns_settings
  else
    _USE_PROVIDER_DNS=NO
  fi
}
#
# Check repo status.
check_git_repos_status() {
  _GITHUB_WORKS=NO
  _GITORIOUS_WORKS=NO
  if [ "${_FORCE_GIT_MIRROR}" = "drupal" ] ; then
    _FORCE_GIT_MIRROR=github
  fi
  if [ "${_FORCE_GIT_MIRROR}" = "github" ] ; then
    msg "INFO: We will use forced GitHub repository without testing connection"
    _GITHUB_WORKS=YES
    _GITORIOUS_WORKS=NO
    sleep 1
  elif [ "${_FORCE_GIT_MIRROR}" = "gitorious" ] ; then
    msg "INFO: We will use forced Gitorious mirror without testing connection"
    _GITHUB_WORKS=NO
    _GITORIOUS_WORKS=YES
    sleep 1
  else
    if [ "${_DEBUG_MODE}" = "YES" ] ; then
      msg "INFO: Testing repository mirror servers availability..."
    fi
    sleep 1
    _GITHUB_WORKS=YES
    _GITORIOUS_WORKS=YES
    if ! netcat -w 14 -z github.com 9418 ; then
      _GITHUB_WORKS=NO
      msg "WARN: The GitHub master repository server doesn't respond..."
    elif ! netcat -w 14 -z code.aegir.cc 9418 ; then
      _GITORIOUS_WORKS=NO
      msg "WARN: The Gitorious mirror repository server doesn't respond..."
    fi
  fi
  if [ "$_GITHUB_WORKS" = "YES" ] ; then
    _BOA_REPO_NAME="boa"
    _BOA_REPO_GIT_URL="git://github.com/omega8cc"
    if [ "${_DEBUG_MODE}" = "YES" ] ; then
      msg "INFO: GitHub master repository will be used"
    fi
  elif [ "$_GITORIOUS_WORKS" = "YES" ] ; then
    _BOA_REPO_NAME="barracuda-octopus"
    _BOA_REPO_GIT_URL="git://code.aegir.cc/aegir"
    if [ "${_DEBUG_MODE}" = "YES" ] ; then
      msg "INFO: Gitorious mirror repository will be used"
    fi
  else
    cat <<EOF

    None of repository servers responded in 8 seconds,
    so we can't continue this installation.

    Please try again later or check if your firewall has port 9418 open.

    Bye.

EOF
    clean_pid_exit
  fi
  _BOA_REPO_GIT_URLX=${_BOA_REPO_GIT_URL//\//\\\/}
}
#
# Fix php.ini files to remove suhosin.so
fix_php_ini_suhosin() {
  if [ -e "${_THIS_FILE}" ] ; then
    _SUHOSIN_INI_TEST=$(grep "extension=suhosin.so" ${_THIS_FILE} 2>&1)
    if [[ "$_SUHOSIN_INI_TEST" =~ "extension=suhosin.so" ]] ; then
      sed -i "s/.*suhosin.*//g" ${_THIS_FILE} &> /dev/null
    fi
  fi
}
#
# Fix php.ini files to add mailparse.so
fix_php_ini_mailparse() {
  if [ -e "${_THIS_FILE}" ] ; then
    _MAILPARSE_INI_TEST=$(grep "extension=mailparse.so" ${_THIS_FILE} 2>&1)
    if [[ "$_MAILPARSE_INI_TEST" =~ "extension=mailparse.so" ]] ; then
      _DO_NOTHING=YES
    else
      echo "extension=mailparse.so" >> ${_THIS_FILE}
    fi
  fi
}
#
# Fix php.ini files to add jsmin.so
fix_php_ini_jsmin() {
  if [ -e "${_THIS_FILE}" ] ; then
    _JSMIN_INI_TEST=$(grep "extension=jsmin.so" ${_THIS_FILE} 2>&1)
    if [[ "$_JSMIN_INI_TEST" =~ "extension=jsmin.so" ]] ; then
      _DO_NOTHING=YES
    else
      echo "extension=jsmin.so" >> ${_THIS_FILE}
    fi
  fi
}
#
# Fix php.ini files to add redis.so
fix_php_ini_redis() {
  if [ -e "${_THIS_FILE}" ] ; then
    _REDIS_INI_TEST=$(grep "extension=redis.so" ${_THIS_FILE} 2>&1)
    if [[ "$_REDIS_INI_TEST" =~ "extension=redis.so" ]] ; then
      _DO_NOTHING=YES
    else
      echo "extension=redis.so" >> ${_THIS_FILE}
    fi
  fi
}
#
# Forced Redis password update.
forced_redis_password_update() {
  if [ "${_REDIS_LISTEN_MODE}" = "SOCKET" ] \
    || [ "${_REDIS_LISTEN_MODE}" = "PORT" ] \
    || [ "${_REDIS_LISTEN_MODE}" = "127.0.0.1" ] ; then
    if [ "${_DEBUG_MODE}" = "YES" ] ; then
      msg "INFO: Generating random password for local Redis server"
    fi
    _ESC_RPASS=""
    _LEN_RPASS=0
    if [ "${_STRONG_PASSWORDS}" = "YES" ] ; then
      _PWD_CHARS=32
    elif [ "${_STRONG_PASSWORDS}" = "NO" ] ; then
      _PWD_CHARS=8
    else
      _STRONG_PASSWORDS=${_STRONG_PASSWORDS//[^0-9]/}
      if [ ! -z "${_STRONG_PASSWORDS}" ] \
        && [ ${_STRONG_PASSWORDS} -gt "8" ] ; then
        _PWD_CHARS="${_STRONG_PASSWORDS}"
      else
        _PWD_CHARS=8
      fi
      if [ ! -z "$_PWD_CHARS" ] && [ $_PWD_CHARS -gt "128" ] ; then
        _PWD_CHARS=128
      fi
    fi
    if [ "${_STRONG_PASSWORDS}" = "YES" ] || [ $_PWD_CHARS -gt "8" ] ; then
      _ESC_RPASS=$(randpass $_PWD_CHARS alnum 2>&1)
      _ESC_RPASS=$(echo -n $_ESC_RPASS | tr -d "\n" 2>&1)
      _LEN_RPASS=$(echo ${#_ESC_RPASS} 2>&1)
    fi
    if [ -z "$_ESC_RPASS" ] || [ $_LEN_RPASS -lt 9 ] ; then
      _ESC_RPASS=$(pwgen -v -s -1 2>&1)
      _ESC_RPASS=$(echo -n $_ESC_RPASS | tr -d "\n" 2>&1)
      _ESC_RPASS=$(sanitize_string "$_ESC_RPASS" 2>&1)
    fi
  else
    msg "INFO: Managing password for remote Redis server"
    if [ -e "/root/.redis.pass.txt" ] \
      && [ -e "${pthLog}/remote-redis-passwd.log" ] ; then
      _ESC_RPASS=$(cat /root/.redis.pass.txt 2>&1)
      _ESC_RPASS=$(echo -n $_ESC_RPASS | tr -d "\n" 2>&1)
      _ESC_RPASS=$(sanitize_string "$_ESC_RPASS" 2>&1)
    else
      _ESC_RPASS=sCWL4tgEpyS5cLZITshxSTWRjhsUOeR6
      touch ${pthLog}/remote-redis-passwd.log
    fi
  fi
  echo "$_ESC_RPASS" > /root/.redis.pass.txt
  chmod 0600 /root/.redis.pass.txt &> /dev/null
  touch ${pthLog}/sec-redis-pass-${_X_VERSION}-${_NOW}.log
  if [ -e "/etc/redis/redis.conf" ] ; then
    _FORCE_REDIS_RESTART=YES
    sed -i "s/^# requirepass /requirepass /g" /etc/redis/redis.conf &> /dev/null
    sed -i "s/^requirepass.*/requirepass $_ESC_RPASS/g" /etc/redis/redis.conf &> /dev/null
    chown redis:redis /etc/redis/redis.conf
    chmod 0600 /etc/redis/redis.conf
  fi
}
#
# Fix Redis mode.
fix_redis_mode() {
  mkdir -p /var/run/redis
  chown redis:redis /var/run/redis
  if [ "${_CUSTOM_CONFIG_REDIS}" = "NO" ] \
    || [[ "${_THISHOST}" =~ ".host8." ]] \
    || [ "${_VMFAMILY}" = "VS" ] ; then
    if [[ "${_THISHOST}" =~ ".host8." ]] \
      || [ "${_VMFAMILY}" = "VS" ] ; then
      if [ -e "/root/.mstr.clstr.cnf" ] \
        || [ -e "/root/.wbhd.clstr.cnf" ] \
        || [ -e "/root/.dbhd.clstr.cnf" ] \
        || [ -e "/root/.test.clstr.cnf" ] ; then
        _DO_NOTHING=YES
      else
        _REDIS_LISTEN_MODE=SOCKET
      fi
    fi
    if [ "${_REDIS_LISTEN_MODE}" = "SOCKET" ] ; then
      sed -i "s/redis_client_host/redis_client_socket/g"               /data/conf/global.inc &> /dev/null
      sed -i "s/  = '127.0.0.1';/= '\/var\/run\/redis\/redis.sock';/g" /data/conf/global.inc &> /dev/null
      sed -i "s/^port 0/port 6379/g"                                   /etc/redis/redis.conf &> /dev/null
      sed -i "s/^# bind 127.0.0.1/bind 127.0.0.1/g"                    /etc/redis/redis.conf &> /dev/null
      sed -i "s/^# unixsocket/unixsocket/g"                            /etc/redis/redis.conf &> /dev/null
    elif [ "${_REDIS_LISTEN_MODE}" = "PORT" ] \
      || [ "${_REDIS_LISTEN_MODE}" = "127.0.0.1" ] ; then
      _DO_NOTHING=YES
    else
      _REDIS_LISTEN_MODE=${_REDIS_LISTEN_MODE//[^0-9.]/}
      if [ ! -z "${_REDIS_LISTEN_MODE}" ] ; then
        _LOCAL_REDIS_PORT_TEST=$(ifconfig \
          | grep "inet addr:${_REDIS_LISTEN_MODE} " 2>&1)
        if [[ "$_LOCAL_REDIS_PORT_TEST" =~ "inet addr:${_REDIS_LISTEN_MODE}" ]] ; then
          _REDIS_HOST=LOCAL
        else
          _REDIS_HOST=REMOTE
        fi
        if [[ "${_REDIS_LISTEN_MODE}" =~ (^)"10." ]] \
          || [[ "${_REDIS_LISTEN_MODE}" =~ (^)"192.168." ]] \
          || [[ "${_REDIS_LISTEN_MODE}" =~ (^)"172.16." ]] \
          || [[ "${_REDIS_LISTEN_MODE}" =~ (^)"127.0." ]] ; then
          if [ "$_REDIS_HOST" = "LOCAL" ] ; then
            sed -i "s/^bind 127.0.0.1/bind ${_REDIS_LISTEN_MODE}/g" /etc/redis/redis.conf &> /dev/null
            sed -i "s/'127.0.0.1'/'${_REDIS_LISTEN_MODE}'/g" /data/conf/global.inc &> /dev/null
          else
            sed -i "s/'127.0.0.1'/'${_REDIS_LISTEN_MODE}'/g" /data/conf/global.inc &> /dev/null
            service redis-server stop &> /dev/null
            update-rc.d -f redis-server remove &> /dev/null
            service redis stop &> /dev/null
            update-rc.d -f redis remove &> /dev/null
            mv -f /etc/init.d/redis /etc/init.d/redis-off &> /dev/null
            mv -f /etc/init.d/redis-server /etc/init.d/redis-server-off &> /dev/null
            killall -9 redis-server &> /dev/null
            rm -f /var/run/redis/redis.pid
            rm -f /var/xdrago/memcache.sh* &> /dev/null
            killall -9 memcached &> /dev/null
            msg "INFO: Remote Redis IP set to ${_REDIS_LISTEN_MODE} with local instance disabled"
          fi
        else
          sed -i "s/'127.0.0.1'/'${_REDIS_LISTEN_MODE}'/g" /data/conf/global.inc &> /dev/null
          service redis-server stop &> /dev/null
          update-rc.d -f redis-server remove &> /dev/null
          service redis stop &> /dev/null
          update-rc.d -f redis remove &> /dev/null
          mv -f /etc/init.d/redis /etc/init.d/redis-off &> /dev/null
          mv -f /etc/init.d/redis-server /etc/init.d/redis-server-off &> /dev/null
          killall -9 redis-server &> /dev/null
          rm -f /var/run/redis/redis.pid
          rm -f /var/xdrago/memcache.sh* &> /dev/null
          killall -9 memcached &> /dev/null
          msg "INFO: Remote Redis IP set to ${_REDIS_LISTEN_MODE} with local instance disabled"
        fi
      fi
    fi
  fi
}
#
# Set or update Redis password.
update_redis_password() {
  if [ -e "/etc/redis/redis.conf" ] ; then
    if [ ! -e "${pthLog}/sec-redis-pass-${_X_VERSION}-${_NOW}.log" ] ; then
      if [ ! -e "/root/.redis.no.new.password.cnf" ] \
        || [ ! -e "/root/.redis.pass.txt" ] ; then
         forced_redis_password_update
      fi
    fi
  fi
  if [ -e "/root/.redis.pass.txt" ] && [ -e "/etc/redis/redis.conf" ] ; then
    if [ -z "$_ESC_RPASS" ] ; then
      RPASS=$(cat /root/.redis.pass.txt 2>&1)
      RPASS=$(echo -n $RPASS | tr -d "\n" 2>&1)
    else
      RPASS="$_ESC_RPASS"
    fi
    _REDIS_PWD_TEST=$(grep "'$RPASS'" /data/conf/global.inc 2>&1)
    if [[ "$_REDIS_PWD_TEST" =~ "'$RPASS'" ]] ; then
      _DO_NOTHING=YES
    else
      if [ ! -z "$RPASS" ] ; then
        mkdir -p /data/conf
        cp -af ${locCnf}/global.inc /data/conf/global.inc
        sed -i "s/isfoobared/$RPASS/g" /data/conf/global.inc &> /dev/null
      fi
    fi
    if [ -e "${mtrInc}" ] \
      && [ ! -L "${mtrInc}/global.inc" ] \
      && [ -e "/data/conf/global.inc" ] ; then
      ln -sf /data/conf/global.inc ${mtrInc}/global.inc
    fi
    fix_redis_mode
  fi
}
#
# Install Redis from sources.
install_redis_src() {
  msg "INFO: Installing Redis update for $_THIS_OS/$_THIS_RV..."
  if [ ! -e "/var/lib/redis" ] ; then
    st_runner "adduser --system --group redis" 2> /dev/null
  fi
  cd /var/opt
  rm -f -r redis*
  get_dev_src "redis-${_REDIS_VRN}.tar.gz"
  if [ -e "/var/lib/redis" ] ; then
    mrun "service redis-server stop" &> /dev/null
    killall -9 redis-server &> /dev/null
  fi
  rm -f /usr/local/bin/redis*
  rm -f /usr/bin/redis*
  cd redis-${_REDIS_VRN}
  st_runner "make --quiet" 2> /dev/null
  st_runner "make --quiet PREFIX=/usr install" 2> /dev/null
  cp -af ${locCnf}/redis-server /etc/init.d/redis-server
  chmod 755 /etc/init.d/redis-server &> /dev/null
  st_runner "update-rc.d redis-server defaults" &> /dev/null
  mkdir -p /var/run/redis
  chown redis:redis /var/run/redis
  mkdir -p /var/log/redis
  chown redis:redis /var/log/redis
  mkdir -p /var/lib/redis
  chown redis:redis /var/lib/redis
  rm -f /var/lib/redis/*
  mkdir -p /etc/redis
  if [ -e "/etc/redis/redis.conf" ] && [ "${_STATUS}" = "UPGRADE" ] ; then
    if [ "${_CUSTOM_CONFIG_REDIS}" = "NO" ] \
      || [[ "${_THISHOST}" =~ ".host8." ]] \
      || [ "${_VMFAMILY}" = "VS" ] ; then
      if [ "$_REDIS_INSTALL_MISMATCH" = "YES" ] \
        || [ ! -e "${pthLog}/redis-${_REDIS_VRN}-${_X_VERSION}.log" ] ; then
        cp -af ${locCnf}/redis.conf /etc/redis/redis.conf
      fi
    fi
  else
    if [ ! -e "/etc/redis/redis.conf" ] \
      || [ "$_REDIS_INSTALL_MISMATCH" = "YES" ] \
      || [ ! -e "${pthLog}/redis-${_REDIS_VRN}-${_X_VERSION}.log" ] ; then
      cp -af ${locCnf}/redis.conf /etc/redis/redis.conf
    fi
  fi
  update_redis_password
  touch ${pthLog}/redis-${_REDIS_VRN}-${_X_VERSION}.log
}
#
# Set xterm.
set_xterm() {
  if [ -e "/root/.bashrc" ] ; then
    _XTERM_TEST=$(grep ${_X_VERSION} /root/.bashrc 2>&1)
    if [[ "$_XTERM_TEST" =~ "${_X_VERSION}" ]] ; then
      sed -i "s/^export TERM=.*/export TERM=xterm-color/g" /root/.bashrc
    fi
  fi
}
#
# Kill nash-hotplug.
kill_nash() {
  _L_VM_TEST=$(uname -a 2>&1)
  if [[ "${_L_VM_TEST}" =~ beng ]] ; then
    _DO_NOTHING=YES
  else
    _NASH_TEST=$(grep nash-hotplug /etc/rc.local 2>&1)
    if [[ "$_NASH_TEST" =~ "nash-hotplug" ]] ; then
      _DO_NOTHING=YES
    else
      cp -af /etc/rc.local /etc/rc.local.bak.${_NOW}
      sed -i "s/exit 0//g" /etc/rc.local &> /dev/null
      echo "killall -9 nash-hotplug" >> /etc/rc.local
      echo "exit 0" >> /etc/rc.local
      killall -9 nash-hotplug &> /dev/null
    fi
  fi
}
#
# Fix FTPS PAM where required.
fix_ftps_pam() {
  if [ ! -e "/etc/ftpusers" ] ; then
    cp -af ${locCnf}/ftpusers /etc/ftpusers
  fi
  if [ "$_REL_VERSION" = "lenny" ] ; then
    _DO_NOTHING=YES
  else
    sed -i "s/pam_stack.so/pam_unix.so/g" /etc/pam.d/pure-ftpd &> /dev/null
    sed -i "s/ service=system-auth//g"    /etc/pam.d/pure-ftpd &> /dev/null
  fi
}
#
# Fix FTPS and SFTP access on modern systems.
fix_sftp_ftps_modern() {
  if [ "$_REL_VERSION" != "lenny" ] ; then
    _LSHELL_PATH_TEST=$(grep "/usr/bin/lshell" /etc/shells 2>&1)
    if [[ "$_LSHELL_PATH_TEST" =~ "/usr/bin/lshell" ]] ; then
      _DO_NOTHING=YES
    else
      echo "/usr/bin/lshell" >> /etc/shells
    fi
  fi
  if [ ! -e "${pthLog}/mss-build-${_MSS_VRN}-${_X_VERSION}.log" ] \
    || [ ! -e "/etc/ssh/sftp_config" ] \
    || [ ! -e "/usr/bin/MySecureShell" ] \
    || [ "$_SSL_INSTALL_REQUIRED" = "YES" ] ; then
    msg "INFO: Installing MySecureShell ${_MSS_VRN}..."
    cd /var/opt
    rm -f -r mysecureshell*
    get_dev_src "mysecureshell-${_MSS_VRN}.tar.gz"
    cd /var/opt/mysecureshell-${_MSS_VRN}
    st_runner "sh ./configure" 2> /dev/null
    st_runner "make --quiet" 2> /dev/null
    st_runner "sh ./install.sh yesall" 2> /dev/null
    touch ${pthLog}/mss-build-${_MSS_VRN}-${_X_VERSION}.log
    cp -af ${locCnf}/sftp_config /etc/ssh/sftp_config
    mrun "service ssh restart" &> /dev/null
  fi
  if [ -e "/usr/bin/MySecureShell" ] && [ -e "/etc/ssh/sftp_config" ] ; then
    _MSS_TEST=$(grep "lshell" /etc/passwd 2>&1)
    if [[ "$_MSS_TEST" =~ "lshell" ]] ; then
      sed -i "s/usr\/.*\/lshell/usr\/bin\/MySecureShell/g" /etc/passwd &> /dev/null
    fi
  fi
  _MSS_PATH_TEST=$(grep "/usr/bin/MySecureShell" /etc/shells 2>&1)
  if [[ "$_MSS_PATH_TEST" =~ "/usr/bin/MySecureShell" ]] ; then
    _DO_NOTHING=YES
  else
    echo "/usr/bin/MySecureShell" >> /etc/shells
  fi
  if [ ! -e "${pthLog}/fixed-sftp-idle.log" ] ; then
    sed -i "s/IdleTimeOut.*/IdleTimeOut            15m/g" /etc/ssh/sftp_config &> /dev/null
    mrun "service ssh reload" &> /dev/null
    touch ${pthLog}/fixed-sftp-idle.log
  fi
}
#
# Disable Old Purge Cruft Machine.
disable_old_purge_cruft_machine() {
  if [[ "${_THISHOST}" =~ ".host8." ]] \
    || [ "${_VMFAMILY}" = "VS" ] \
    || [ -e "/root/.host8.cnf" ] ; then
    sed -i "s/.*purge_cruft.*//g" /etc/crontab &> /dev/null
    sed -i "/^$/d" /etc/crontab &> /dev/null
  fi
}
#
# Enable Weekly Usage Monitor (Monday).
enable_weekly_usage_monitor() {
  if [[ "${_THISHOST}" =~ ".host8." ]] \
    || [ "${_VMFAMILY}" = "VS" ] ; then
    sed -i "s/.*weekly.sh.*//g" /etc/crontab &> /dev/null
    sed -i "/^$/d" /etc/crontab &> /dev/null
    echo "28 6    * * 7   root    bash /var/xdrago/weekly.sh >/dev/null 2>&1" >> /etc/crontab
  fi
}
#
# Fix php.ini file to add newrelic.ini
fix_php_ini_newrelic() {
  _NR_TPL="${locCnf}/newrelic.ini"
  if [ -e "${_THIS_FILE}" ] ; then
    _NEWRELIC_INI_TEST_A=$(grep "extension=newrelic.so" ${_THIS_FILE} 2>&1)
    if [[ "$_NEWRELIC_INI_TEST_A" =~ "extension=newrelic.so" ]] ; then
      _DO_NOTHING=YES
    else
      cat $_NR_TPL >> ${_THIS_FILE}
    fi
    _NEWRELIC_INI_TEST_B=$(grep "newrelic.framework.drupal.modules" ${_THIS_FILE} 2>&1)
    if [[ "$_NEWRELIC_INI_TEST_B" =~ "newrelic.framework.drupal.modules" ]] ; then
      _DO_NOTHING=YES
    else
      echo "newrelic.framework.drupal.modules = 1" >> ${_THIS_FILE}
    fi
    sed -i "/REPLACE_WITH_REAL_KEY//g" ${_THIS_FILE} &> /dev/null
    sed -i "s/license_key=//g" ${_THIS_FILE} &> /dev/null
  fi
}
#
# Fix all php.ini files to add newrelic.ini
fix_php_ini_newrelic_all() {
  if [ -e "/etc/newrelic/newrelic.cfg" ] ; then
    if [ -z "${_NEWRELIC_KEY}" ] ; then
      _NEWRELIC_KEY=$(grep license_key /etc/newrelic/newrelic.cfg 2>&1)
      _NEWRELIC_KEY=$(echo -n ${_NEWRELIC_KEY} | tr -d "\n" 2>&1)
    fi
    _PHP_V="56 55 54 53"
    for e in $_PHP_V; do
      _THIS_FILE=/opt/php${e}/etc/php${e}.ini
      fix_php_ini_newrelic
      _THIS_FILE=/opt/php${e}/lib/php.ini
      fix_php_ini_newrelic
    done
  fi
}
#
# Fix FMP php.ini file to add opcache.so
fix_php_ini_opcache() {
  if [ -e "${_THIS_FILE}" ] ; then
    _OPCACHE_INI_TEST=$(grep "opcache.so" ${_THIS_FILE} 2>&1)
    if [[ "$_OPCACHE_INI_TEST" =~ "opcache.so" ]] ; then
      _DO_NOTHING=YES
    else
      echo ";"                                   >> ${_THIS_FILE}
      echo "; Zend OPcache"                      >> ${_THIS_FILE}
      echo "zend_extension=\"$_OPCACHE_SO\""     >> ${_THIS_FILE}
      echo "opcache.enable=1"                    >> ${_THIS_FILE}
      echo "opcache.memory_consumption=181"      >> ${_THIS_FILE}
      echo "opcache.interned_strings_buffer=8"   >> ${_THIS_FILE}
      echo "opcache.max_accelerated_files=64000" >> ${_THIS_FILE}
      echo "opcache.revalidate_freq=60"          >> ${_THIS_FILE}
      echo "opcache.enable_file_override=1"      >> ${_THIS_FILE}
      echo "opcache.inherited_hack=1"            >> ${_THIS_FILE}
      echo "opcache.dups_fix=1"                  >> ${_THIS_FILE}
      echo "opcache.log_verbosity_level=0"       >> ${_THIS_FILE}
      echo "opcache.fast_shutdown=1"             >> ${_THIS_FILE}
      echo ";"                                   >> ${_THIS_FILE}
    fi
  fi
}
#
# Fix all FMP php.ini files to add Zend OPcache
fix_php_ini_opcache_all() {
  _PHP_V="56 55 54 53"
  for e in $_PHP_V; do
    case "${e}" in
      56) _P_API="${_PHP56_API}" ;;
      55) _P_API="${_PHP55_API}" ;;
      54) _P_API="${_PHP54_API}" ;;
      53) _P_API="${_PHP53_API}" ;;
      *)  msg "WARN: Unknown PHP API version for PHP ${e}"
      ;;
    esac
    _THIS_FILE=/opt/php${e}/etc/php${e}.ini
    _OPCACHE_LP="/opt/php${e}/lib/php/extensions/no-debug-non-zts"
    _OPCACHE_SO="${_OPCACHE_LP}-${_P_API}/opcache.so"
    fix_php_ini_opcache "${e}"
  done
}
#
# Fix php.ini file to add geos.so
fix_php_ini_geos() {
  if [ -e "${_THIS_FILE}" ] ; then
    _GEOS_INI_TEST=$(grep "extension=geos.so" ${_THIS_FILE} 2>&1)
    if [[ "$_GEOS_INI_TEST" =~ "extension=geos.so" ]] ; then
      _DO_NOTHING=YES
    else
      echo "extension=geos.so" >> ${_THIS_FILE}
    fi
  fi
}
#
# Fix 5.3 php.ini files to add geos.so
fix_php_ini_geos_all() {
  if [ "${_PHP_GEOS}" = "YES" ] || [[ "${_XTRAS_LIST}" =~ "GEO" ]] ; then
    _THIS_FILE=/opt/php53/etc/php53.ini
    fix_php_ini_geos
    _THIS_FILE=/opt/php53/lib/php.ini
    fix_php_ini_geos
  fi
}
#
# Fix php.ini file to add mongo.so
fix_php_ini_mongo() {
  if [ -e "${_THIS_FILE}" ] ; then
    _MONGODB_INI_TEST=$(grep "extension=mongo.so" ${_THIS_FILE} 2>&1)
    if [[ "$_MONGODB_INI_TEST" =~ "extension=mongo.so" ]] ; then
      _DO_NOTHING=YES
    else
      echo "extension=mongo.so" >> ${_THIS_FILE}
    fi
  fi
}
#
# Fix 5.3 php.ini files to add mongo.so
fix_php_ini_mongo_all() {
  if [ "${_PHP_MONGODB}" = "YES" ] || [[ "${_XTRAS_LIST}" =~ "MNG" ]] ; then
    _THIS_FILE=/opt/php53/etc/php53.ini
    fix_php_ini_mongo
    _THIS_FILE=/opt/php53/lib/php.ini
    fix_php_ini_mongo
  fi
}
#
# Update PHP Config.
update_php_conf() {
  if [ -z "${_THISHTIP}" ] ; then
    _LOC_DOM="${_THISHOST}"
    find_correct_ip
    _THISHTIP="${_LOC_IP}"
  fi
  if [ ! -e "/opt/etc/fpm" ] \
    || [ ! -e "/opt/etc/fpm/fpm-pool-common.conf" ] ; then
    mkdir -p /opt/etc/fpm
  fi
  cp -af ${locCnf}/fpm-pool-common.conf /opt/etc/fpm/fpm-pool-common.conf
  sed -i "s/127.0.0.1/127.0.0.1,${_THISHTIP}/g" /opt/etc/fpm/fpm-pool-common.conf
  sed -i "s/mode =.*/mode = 0660/g" /opt/etc/fpm/fpm-pool-common.conf
  _PHP_V="56 55 54 53"
  for e in $_PHP_V; do
    if [ ! -e "/var/www/www${e}" ] ; then
      adduser --system --group --home /var/www/www${e} www${e} &> /dev/null
      usermod -aG www-data www${e} &> /dev/null
    fi
    if [ ! -e "/opt/php${e}/etc/php${e}.ini" ] \
      || [ ! -e "/opt/php${e}/etc/pool.d/www${e}.conf" ] ; then
      mkdir -p /opt/php${e}/etc/pool.d
      cp -af ${locCnf}/php${e}.ini /opt/php${e}/etc/php${e}.ini
    fi
    cp -af ${locCnf}/fpm${e}-pool-www.conf /opt/php${e}/etc/pool.d/www${e}.conf
    if [ ! -e "/opt/php${e}/lib/php.ini" ] ; then
      mkdir -p /opt/php${e}/lib
      cp -af ${locCnf}/php${e}-cli.ini /opt/php${e}/lib/php.ini
    fi
    if [ "$_CUSTOM_CONFIG_PHP${e}" = "NO" ] \
      || [[ "${_THISHOST}" =~ ".host8." ]] \
      || [ "${_VMFAMILY}" = "VS" ] ; then
      cp -af ${locCnf}/php${e}.ini /opt/php${e}/etc/php${e}.ini
      cp -af ${locCnf}/php${e}-cli.ini /opt/php${e}/lib/php.ini
    fi
    cp -af ${locCnf}/php${e}-fpm.conf /opt/php${e}/etc/php${e}-fpm.conf
    _THIS_FILE=/opt/php${e}/etc/php${e}.ini
    fix_php_ini_redis
    fix_php_ini_jsmin
    fix_php_ini_suhosin
    fix_php_ini_mailparse
    _THIS_FILE=/opt/php${e}/lib/php.ini
    fix_php_ini_redis
    fix_php_ini_jsmin
    fix_php_ini_suhosin
    fix_php_ini_mailparse
    if [ -e "/opt/php${e}/etc/php${e}.ini" ] ; then
      sed -i "s/^zlib.output_compression.*/zlib.output_compression = Off/g"       /opt/php${e}/etc/php${e}.ini
      sed -i "s/.*zlib.output_compression_level/;zlib.output_compression_level/g" /opt/php${e}/etc/php${e}.ini
    fi
    if [ -e "/opt/php${e}/lib/php.ini" ] ; then
      sed -i "s/^zlib.output_compression.*/zlib.output_compression = Off/g"       /opt/php${e}/lib/php.ini
      sed -i "s/.*zlib.output_compression_level/;zlib.output_compression_level/g" /opt/php${e}/lib/php.ini
    fi
  done
  rm -f /etc/php5/conf.d/{opcache.ini,apc.ini,imagick.ini,memcached.ini}
  rm -f /etc/php5/conf.d/{redis.ini,suhosin.ini,newrelic.ini}
  fix_php_ini_newrelic_all
  fix_php_ini_geos_all
  fix_php_ini_mongo_all
  fix_php_ini_opcache_all
}
#
# Update innodb_log_file_size.
update_innodb_log_file_size() {
  msg "INFO: InnoDB log file will be set to ${_INNODB_LOG_FILE_SIZE_MB}, please wait..."
  mrun "service mysql stop" &> /dev/null
  mrun "sleep 5"
  if [ ! -e "/var/run/mysqld/mysqld.sock" ] \
    && [ ! -e "/var/run/mysqld/mysqld.pid" ] ; then
    mkdir -p /var/backups/old-sql-ib-log-${_NOW}
    mrun "sleep 5"
    mv -f /var/lib/mysql/ib_logfile0 /var/backups/old-sql-ib-log-${_NOW}/ &> /dev/null
    mv -f /var/lib/mysql/ib_logfile1 /var/backups/old-sql-ib-log-${_NOW}/ &> /dev/null
    sed -i "s/.*innodb_log_file_size.*/innodb_log_file_size    = ${_INNODB_LOG_FILE_SIZE_MB}/g" /etc/mysql/my.cnf
    mrun "sleep 5"
  fi
  mrun "service mysql start" &> /dev/null
}
#
# Update SQL Config.
update_sql_conf() {
  sed -i "s/.*check_for_crashed_tables/#check_for_crashed_tables/g" /etc/mysql/debian-start
  if [ "${_CUSTOM_CONFIG_SQL}" = "NO" ] \
    || [[ "${_THISHOST}" =~ ".host8." ]] \
    || [ "${_VMFAMILY}" = "VS" ] ; then
    if [ "${_CUSTOM_CONFIG_SQL}" = "YES" ] ; then
      _DO_NOTHING=YES
    else
      cp -af /etc/mysql/my.cnf /var/backups/dragon/t/my.cnf-pre-${_X_VERSION}-${_NOW}
      cp -af ${locCnf}/my.cnf.txt /etc/mysql/my.cnf
      _INNODB_LOG_FILE_SIZE=${_INNODB_LOG_FILE_SIZE//[^0-9]/}
      if [ ! -z "${_INNODB_LOG_FILE_SIZE}" ] ; then
        if [ "${_INNODB_LOG_FILE_SIZE}" -ge "10" ] \
          && [ "${_INNODB_LOG_FILE_SIZE}" -lt "501" ] ; then
          _INNODB_LOG_FILE_SIZE_MB="${_INNODB_LOG_FILE_SIZE}M"
          _INNODB_LOG_FILE_SIZE_TEST=$(grep "^innodb_log_file_size" \
            /var/backups/dragon/t/my.cnf-pre-${_X_VERSION}-${_NOW} 2>&1)
          if [[ "${_INNODB_LOG_FILE_SIZE_TEST}" =~ "= ${_INNODB_LOG_FILE_SIZE_MB}" ]] ; then
            _INNODB_LOG_FILE_SIZE_SAME=YES
          else
            _INNODB_LOG_FILE_SIZE_SAME=NO
          fi
        fi
      fi
      sed -i "s/.*slow_query_log/#slow_query_log/g"           /etc/mysql/my.cnf
      sed -i "s/.*long_query_time/#long_query_time/g"         /etc/mysql/my.cnf
      sed -i "s/.*slow_query_log_file/#slow_query_log_file/g" /etc/mysql/my.cnf
      if [ ! -e "/etc/mysql/skip-name-resolve.txt" ] ; then
        sed -i "s/.*skip-name-resolve/#skip-name-resolve/g"   /etc/mysql/my.cnf
      fi
    fi
  fi
  mv -f /etc/mysql/my.cnf-pre* /var/backups/dragon/t/ &> /dev/null
  sed -i "s/.*default-table-type/#default-table-type/g" /etc/mysql/my.cnf
  sed -i "s/.*language/#language/g" /etc/mysql/my.cnf
  _THIS_DB_SERVER_TEST=$(mysql -V 2>&1)
  if [[ "$_THIS_DB_SERVER_TEST" =~ "5.5." ]] \
    || [[ "$_THIS_DB_SERVER_TEST" =~ "10.0" ]] ; then
    _DO_NOTHING=YES
  else
    sed -i "s/.*lc_messages_dir /#lc_messages_dir /g" /etc/mysql/my.cnf
    sed -i "s/.*lc_messages /#lc_messages /g"         /etc/mysql/my.cnf
  fi
  if [[ "$_THIS_DB_SERVER_TEST" =~ "MariaDB" ]] ; then
    sed -i "s/.*innodb_lazy_drop_table /#innodb_lazy_drop_table /g" /etc/mysql/my.cnf
  fi
  if [ "${_CUSTOM_CONFIG_SQL}" = "NO" ] ; then
    if [ "${_DB_BINARY_LOG}" = "NO" ] ; then
      bash /var/xdrago/purge_binlogs.sh &> /dev/null
      sed -i "s/.*purge_binlogs.*//g" /var/spool/cron/crontabs/root
      sed -i "/^$/d"                  /var/spool/cron/crontabs/root
      sed -i "s/^log_bin/#log_bin/g"                   /etc/mysql/my.cnf
      sed -i "s/^expire_logs_days/#expire_logs_days/g" /etc/mysql/my.cnf
      sed -i "s/^max_binlog_size/#max_binlog_size/g"   /etc/mysql/my.cnf
    elif [ "${_DB_BINARY_LOG}" = "YES" ] ; then
      sed -i "s/.*log_bin/log_bin/g"                   /etc/mysql/my.cnf
      sed -i "s/.*expire_logs_days/expire_logs_days/g" /etc/mysql/my.cnf
      sed -i "s/.*max_binlog_size/max_binlog_size/g"   /etc/mysql/my.cnf
    fi
    if [ "${_DB_ENGINE}" = "MyISAM" ] || [ "${_DB_ENGINE}" = "InnoDB" ] ; then
      sed -i "s/^default_storage_engine.*/default_storage_engine  = ${_DB_ENGINE}/g" /etc/mysql/my.cnf
    fi
    if [ ! -z "${_INNODB_LOG_FILE_SIZE}" ] ; then
      if [ "${_INNODB_LOG_FILE_SIZE}" -ge "10" ] \
        && [ "${_INNODB_LOG_FILE_SIZE}" -lt "501" ] ; then
        _INNODB_LOG_FILE_SIZE_MB="${_INNODB_LOG_FILE_SIZE}M"
        _INNODB_LOG_FILE_SIZE_TEST=$(grep "^innodb_log_file_size" \
          /etc/mysql/my.cnf 2>&1)
        if [[ "${_INNODB_LOG_FILE_SIZE_TEST}" =~ "= ${_INNODB_LOG_FILE_SIZE_MB}" ]] ; then
          _DO_NOTHING=YES
        else
          if [ "${_INNODB_LOG_FILE_SIZE_SAME}" = "YES" ] ; then
            sed -i "s/.*innodb_log_file_size.*/innodb_log_file_size    = ${_INNODB_LOG_FILE_SIZE_MB}/g" /etc/mysql/my.cnf
          else
            update_innodb_log_file_size
          fi
        fi
      fi
    fi
  fi
}
#
# Update Nginx Config.
update_nginx_conf() {
  if [ ! -e "${pthLog}/nginx-config-fixed-${_X_VERSION}" ] \
    && [ -d "/var/aegir" ] ; then
    if [ -e "${locCnf}/nginx.conf" ] \
      && [ -e "/etc/nginx/nginx.conf" ] ; then
      mv -f /etc/nginx/nginx.conf-* /var/backups/dragon/t/ &> /dev/null
      mv -f /etc/nginx/mime.types-pre-* /var/backups/dragon/t/ &> /dev/null
      mv -f /etc/nginx/nginx.conf /var/backups/dragon/t/nginx.conf-pre-${_X_VERSION}-${_NOW} &> /dev/null
      cp -af ${locCnf}/nginx.conf /etc/nginx/nginx.conf
      touch ${pthLog}/nginx-config-fixed-${_X_VERSION}
    fi
  fi
  if [ -e "${mtrNgx}/pre.d" ] \
    && [ "${_PURGE_MODE}" = "ON" ] ; then
    cp -af ${locCnf}/nginx_speed_purge.conf ${mtrNgx}/pre.d/nginx_speed_purge.conf
  fi
}
#
# Update INI templates.
update_ini_tpl() {
  mkdir -p /data/conf
  if [ -e "${locCnf}/default.boa_platform_control.ini" ] ; then
    cp -af ${locCnf}/default.boa_platform_control.ini /data/conf/default.boa_platform_control.ini
    rm -f /var/xdrago/conf/default.boa_platform_control.ini
  fi
  if [ -e "${locCnf}/default.boa_site_control.ini" ] ; then
    cp -af ${locCnf}/default.boa_site_control.ini /data/conf/default.boa_site_control.ini
    rm -f /var/xdrago/conf/default.boa_site_control.ini
  fi
}
#
# Update global.inc Config.
update_global_inc_conf() {
  if [ -e "/data/conf/global.inc" ] ; then
    mv -f /data/conf/global.inc /data/conf/global.inc-pre-${_X_VERSION}-${_NOW} &> /dev/null
    cp -af ${locCnf}/global.inc /data/conf/global.inc
    sed -i "s/3600/${_SPEED_VALID_MAX}/g" /data/conf/global.inc &> /dev/null
  fi
}
#
# Fix this on upgrade.
fix_on_upgrade() {
  sed -i "s/loglevel.*/loglevel warning/g" /etc/redis/redis.conf &> /dev/null
  sed -i "s/^TLS.*/TLS 2/g" /usr/local/etc/pure-ftpd.conf &> /dev/null
  cp -af ${locCnf}/clean-boa-env /etc/init.d/clean-boa-env
  chmod 755 /etc/init.d/clean-boa-env &> /dev/null
  st_runner "update-rc.d clean-boa-env defaults" &> /dev/null
  kill_nash
  fix_sftp_ftps_modern
  fix_ftps_pam
  disable_old_purge_cruft_machine
  enable_weekly_usage_monitor
  update_php_conf
  update_ini_tpl
  update_sql_conf
  update_nginx_conf
  update_global_inc_conf
  update_redis_password
}
#
# Validate server public IP.
validate_public_ip() {
  if [ "${_VMFAMILY}" = "AWS" ] ; then
    _LOC_DOM="${_MY_HOSTN}"
    if [ -z "${_MY_OWNIP}" ] ; then
      find_correct_ip
      _MY_OWNIP="${_LOC_IP}"
    else
      _LOC_IP="${_MY_OWNIP}"
    fi
  fi
  if [ ! -z "${_LOCAL_NETWORK_IP}" ] ; then
    if [ -z "${_LOCAL_NETWORK_HN}" ] ; then
      msg "FATAL ERROR: you must specify also _LOCAL_NETWORK_HN"
      clean_pid_exit
    else
      _MY_OWNIP="${_LOCAL_NETWORK_IP}"
      _MY_HOSTN="${_LOCAL_NETWORK_HN}"
      _MY_FRONT="${_LOCAL_NETWORK_HN}"
      _THISHTIP="${_LOCAL_NETWORK_IP}"
    fi
  else
    _ETH_TEST=$(ifconfig 2>&1)
    if [[ "${_ETH_TEST}" =~ "venet0" ]] ; then
      _IFCONFIG="venet0"
    elif [ -e "/proc/bean_counters" ] ; then
      _IFCONFIG="venet0"
    else
      _IFCONFIG="eth0"
    fi
    if [ "${_DNS_SETUP_TEST}" = "YES" ] ; then
      if [ -z "${_MY_OWNIP}" ] ; then
        _THISHTIP=$(ifconfig ${_IFCONFIG} \
          | grep 'inet addr:' \
          | cut -d: -f2 \
          | awk '{ print $1}' 2>&1)
        if [[ "${_THISHTIP}" =~ "127.0.0." ]] ; then
          _THISHTIP=$(ifconfig ${_IFCONFIG}:0 \
            | grep 'inet addr:' \
            | cut -d: -f2 \
            | awk '{ print $1}' 2>&1)
        fi
      else
        _THISHTIP="${_MY_OWNIP}"
      fi
    else
      if [ -z "${_MY_OWNIP}" ] && [ ! -z "${_MY_HOSTN}" ] ; then
        _LOC_DOM="${_MY_HOSTN}"
        find_correct_ip
        _THISHTIP="${_LOC_IP}"
      else
        _THISHTIP="${_MY_OWNIP}"
      fi
    fi
  fi
}
#
# Validate server IP for xtras.
validate_xtras_ip() {
  if [ "${_VMFAMILY}" = "AWS" ] ; then
    _LOC_DOM="${_MY_HOSTN}"
    if [ -z "${_MY_OWNIP}" ] ; then
      find_correct_ip
      _MY_OWNIP="${_LOC_IP}"
    else
      _LOC_IP="${_MY_OWNIP}"
    fi
  fi
  _XTRAS_THISHTIP="*"
}
#
# Validate server IP for purge vhost.
validate_purge_ip() {
  if [ "${_PURGE_ALL_THISHTIP}" = "YES" ] ; then
    _PURGE_THISHTIP="0.0.0.0/0"
  else
    _ETH_TEST=$(ifconfig 2>&1)
    if [[ "${_ETH_TEST}" =~ "venet0" ]] ; then
      _IFCONFIG="venet0"
    elif [ -e "/proc/bean_counters" ] ; then
      _IFCONFIG="venet0"
    else
      _IFCONFIG="eth0"
    fi
    if [ "${_DNS_SETUP_TEST}" = "YES" ] ; then
      if [ -z "${_MY_OWNIP}" ] ; then
        _PURGE_THISHTIP=$(ifconfig ${_IFCONFIG} \
          | grep 'inet addr:' \
          | cut -d: -f2 \
          | awk '{ print $1}' 2>&1)
        if [[ "$_PURGE_THISHTIP" =~ "127.0.0." ]] ; then
          _PURGE_THISHTIP=$(ifconfig ${_IFCONFIG}:0 \
            | grep 'inet addr:' \
            | cut -d: -f2 \
            | awk '{ print $1}' 2>&1)
        fi
      else
        _PURGE_THISHTIP="${_MY_OWNIP}"
      fi
    else
      if [ -z "${_MY_OWNIP}" ] ; then
        if [ -e "/usr/bin/sipcalc" ] ; then
          if [ -z "${_THISHTIP}" ] ; then
            _LOC_DOM="${_THISHOST}"
            find_correct_ip
            _THISHTIP="${_LOC_IP}"
          fi
          _IP_TEST=$(sipcalc ${_THISHTIP} 2>&1)
          if [[ "${_IP_TEST}" =~ "ERR" ]] ; then
            _IP_TEST_RESULT=FAIL
            _PURGE_THISHTIP="0.0.0.0/0"
          else
            _IP_TEST_RESULT=OK
            _PURGE_THISHTIP="${_THISHTIP}"
          fi
        else
          _PURGE_THISHTIP="${_THISHTIP}"
        fi
      else
        _PURGE_THISHTIP="${_MY_OWNIP}"
      fi
    fi
    if [ -z "$_PURGE_THISHTIP" ] ; then
      _PURGE_THISHTIP="0.0.0.0/0"
    fi
  fi
}
#
# Validate local server IP.
validate_local_ip() {
  _LOCAL_THISHTIP=all
}
#
# Sub Force advanced Nginx configuration.
sub_force_advanced_nginx_config() {
  if [ -e "/opt/php${_PHP_SV}/etc/php${_PHP_SV}-fpm.conf" ] ; then
    sed -i "s/127.0.0.1:.*;/unix:\/var\/run\/${_PHP_CN}.fpm.socket;/g"             ${mtrInc}/nginx_compact_include.conf &> /dev/null

    sed -i "s/127.0.0.1:.*;/unix:\/var\/run\/${_PHP_CN}.fpm.socket;/g"             ${mtrInc}/nginx_vhost_common.conf &> /dev/null
    sed -i "s/data.*post.d/var\/aegir\/config\/includes/g"                         ${mtrInc}/nginx_vhost_common.conf &> /dev/null
    sed -i "s/unix:cron:fastcgi.socket;/unix:\/var\/run\/${_PHP_CN}.fpm.socket;/g" ${mtrInc}/nginx_vhost_common.conf &> /dev/null
    sed -i "s/unix:.*www53.fpm.socket;/unix:\/var\/run\/${_PHP_CN}.fpm.socket;/g"  ${mtrInc}/nginx_vhost_common.conf &> /dev/null

    sed -i "s/127.0.0.1:.*;/unix:\/var\/run\/${_PHP_CN}.fpm.socket;/g"             ${mtrTpl}/subdir.tpl.php &> /dev/null
    sed -i "s/data.*post.d/var\/aegir\/config\/includes/g"                         ${mtrTpl}/subdir.tpl.php &> /dev/null
    sed -i "s/unix:cron:fastcgi.socket;/unix:\/var\/run\/${_PHP_CN}.fpm.socket;/g" ${mtrTpl}/subdir.tpl.php &> /dev/null
    sed -i "s/unix:.*www53.fpm.socket;/unix:\/var\/run\/${_PHP_CN}.fpm.socket;/g"  ${mtrTpl}/subdir.tpl.php &> /dev/null

    sed -i "s/127.0.0.1:.*;/unix:\/var\/run\/${_PHP_CN}.fpm.socket;/g"             ${mtrTpl}/Inc/vhost_include.tpl.php &> /dev/null
    sed -i "s/data.*post.d/var\/aegir\/config\/includes/g"                         ${mtrTpl}/Inc/vhost_include.tpl.php &> /dev/null
    sed -i "s/unix:cron:fastcgi.socket;/unix:\/var\/run\/${_PHP_CN}.fpm.socket;/g" ${mtrTpl}/Inc/vhost_include.tpl.php &> /dev/null
    sed -i "s/unix:.*www53.fpm.socket;/unix:\/var\/run\/${_PHP_CN}.fpm.socket;/g"  ${mtrTpl}/Inc/vhost_include.tpl.php &> /dev/null
  fi
}
#
# Force advanced Nginx configuration.
force_advanced_nginx_config() {
  cp -af ${locCnf}/nginx_compact_include.conf ${mtrInc}/nginx_compact_include.conf
  validate_local_ip &> /dev/null
  sub_force_advanced_nginx_config
  sed -i "s/ 90;/ 180;/g" ${mtrNgx}/pre.d/*.conf &> /dev/null
  if [ "${_NGINX_SPDY}" = "YES" ] ; then
    sed -i "s/:443;/:443 ssl spdy;/g" ${mtrNgx}/pre.d/*.conf &> /dev/null
    sed -i "s/:443;/:443 ssl spdy;/g" ${mtrNgx}/vhost.d/*    &> /dev/null
  fi
  _SSL_INSTALLED=$(openssl version 2>&1 \
    | tr -d "\n" \
    | cut -d" " -f2 \
    | awk '{ print $1}' 2>&1)
  if [ "${_SSL_INSTALLED}" = "${_OPENSSL_VRN}" ] \
    && [ "${_NGINX_FORWARD_SECRECY}" = "YES" ] ; then
    _ALLOW_NGINX_FORWARD_SECRECY=YES
    _SSL_PROTOCOLS="TLSv1 TLSv1.1 TLSv1.2;"
    _SSL_CIPHERS="EECDH+ECDSA+AESGCM: \
      EECDH+aRSA+AESGCM:  \
      EECDH+ECDSA+SHA384: \
      EECDH+ECDSA+SHA256: \
      EECDH+aRSA+SHA384:  \
      EECDH+aRSA+SHA256:  \
      EECDH:    \
      EDH+aRSA: \
      \!aNULL:  \
      \!eNULL:  \
      \!LOW:    \
      \!3DES:   \
      \!MD5:    \
      \!EXP:    \
      \!PSK:    \
      \!SRP:    \
      \!DSS:    \
      \!RC4;"
    _SSL_CIPHERS=$(echo "${_SSL_CIPHERS}" | sed "s/ //g" 2>&1)
  else
    _ALLOW_NGINX_FORWARD_SECRECY=NO
  fi
  if [ "$_ALLOW_NGINX_FORWARD_SECRECY" = "YES" ] ; then
    sed -i "s/ssl_protocols .*/ssl_protocols $_SSL_PROTOCOLS/g" ${mtrNgx}/pre.d/*.conf &> /dev/null
    sed -i "s/ssl_protocols .*/ssl_protocols $_SSL_PROTOCOLS/g" ${mtrNgx}/vhost.d/*    &> /dev/null
    sed -i "s/ssl_ciphers .*/ssl_ciphers $_SSL_CIPHERS/g" ${mtrNgx}/pre.d/*.conf       &> /dev/null
    sed -i "s/ssl_ciphers .*/ssl_ciphers $_SSL_CIPHERS/g" ${mtrNgx}/vhost.d/*          &> /dev/null
  fi
  if [ -e "${mtrInc}/nginx_vhost_common.conf" ] ; then
    rm -f ${mtrInc}/nginx_advanced_include.conf
    rm -f ${mtrInc}/nginx_legacy_include.conf
    rm -f ${mtrInc}/nginx_modern_include.conf
    rm -f ${mtrInc}/nginx_octopus_include.conf
    rm -f ${mtrInc}/nginx_simple_include.conf
  fi
  chown aegir:aegir ${mtrInc}/*
  chown aegir:aegir /var/aegir/.drush/sys/provision/http/Provision/Config/Nginx/*
  if [ ! -e "/data/conf/nginx_high_load_off.conf" ] ; then
    mkdir -p /data/conf
    cp -af ${locCnf}/nginx_high_load_off.conf /data/conf/nginx_high_load_off.conf
    chmod 644 /data/conf/nginx_high_load_off.conf &> /dev/null
  fi
  if [ -e "/root/.high_traffic.cnf" ] ; then
    sed -i "s/access_log .*/access_log             /var/log/nginx/access.log main buffer=32k;/g" ${mtrNgx}.conf &> /dev/null
  fi
}
#
# Tune Web Sever configuration.
tune_web_server_config() {
  _LIM_FPM="${_L_PHP_FPM_WORKERS}"
  if [ "$_LIM_FPM" -lt "24" ] ; then
    if [[ "${_THISHOST}" =~ ".host8." ]] || [ "${_VMFAMILY}" = "VS" ] ; then
      _LIM_FPM=24
    fi
  fi
  _PROCESS_MAX_FPM=$(( _LIM_FPM * 5 ))
  _CHILD_MAX_FPM=$(( _LIM_FPM * 2 ))
  if [ "${_PHP_FPM_WORKERS}" = "AUTO" ] ; then
    _DO_NOTHING=YES
  else
    _PHP_FPM_WORKERS=${_PHP_FPM_WORKERS//[^0-9]/}
    if [ ! -z "${_PHP_FPM_WORKERS}" ] && [ "${_PHP_FPM_WORKERS}" -gt "0" ] ; then
      _CHILD_MAX_FPM="${_PHP_FPM_WORKERS}"
    fi
  fi
  _START_LEGACY_FPM=$(( _LIM_FPM - 21 ))
  if [ "$_START_LEGACY_FPM" -lt "3" ] ; then
    _START_LEGACY_FPM=3
  fi
  _PHP_V="56 55 54 53"
  for e in $_PHP_V; do
    sed -i "s/process.max =.*/process.max = $_PROCESS_MAX_FPM/g"       /opt/php${e}/etc/php${e}-fpm.conf    &> /dev/null
    sed -i "s/pm.max_children =.*/pm.max_children = ${_CHILD_MAX_FPM}/g" /opt/php${e}/etc/pool.d/www${e}.conf &> /dev/null
    if [ ! -z "${_PHP_FPM_DENY}" ] ; then
      sed -i "s/passthru,/${_PHP_FPM_DENY},/g" /opt/php${e}/etc/pool.d/www${e}.conf &> /dev/null
    fi
  done
  # PHP-FPM INI
  sed -i "s/^default_socket_timeout =.*/default_socket_timeout = 180/g" /opt/php*/etc/php*.ini &> /dev/null
  sed -i "s/^max_execution_time =.*/max_execution_time = 180/g" /opt/php*/etc/php*.ini         &> /dev/null
  sed -i "s/^max_input_time =.*/max_input_time = 180/g" /opt/php*/etc/php*.ini                 &> /dev/null
  # PHP-CLI INI
  sed -i "s/^default_socket_timeout =.*/default_socket_timeout = 3600/g" /opt/php*/lib/php.ini &> /dev/null
  sed -i "s/^max_execution_time =.*/max_execution_time = 3600/g" /opt/php*/lib/php.ini         &> /dev/null
  sed -i "s/^max_input_time =.*/max_input_time = 3600/g" /opt/php*/lib/php.ini                 &> /dev/null
  # Redis config should sync with PHP-CLI
  sed -i "s/^timeout .*/timeout 3600/g" /etc/redis/redis.conf                                  &> /dev/null
  if [ ! -z "${_L_NGINX_WORKERS}" ] ; then
    sed -i "s/worker_processes.*/worker_processes  ${_L_NGINX_WORKERS};/g" /etc/nginx/nginx.conf &> /dev/null
  else
    sed -i "s/worker_processes.*/worker_processes  4;/g" /etc/nginx/nginx.conf                 &> /dev/null
  fi
}
#
# Tune memory limits for SQL server.
tune_sql_memory_limits() {
  urlDld="https://raw.githubusercontent.com/major/MySQLTuner-perl/master"
  pthTun="/var/opt/mysqltuner.pl"
  outTun="/var/opt/mysqltuner-${_X_VERSION}-${_NOW}.txt"
  if [ -e "/root/.mstr.clstr.cnf" ] \
    || [ -e "/root/.wbhd.clstr.cnf" ] \
    || [ -e "/root/.dbhd.clstr.cnf" ] ; then
    _GALERA_COMP=NO
  fi
  if [ ! -e "${outTun}" ] \
    && [ "${_STATUS}" = "UPGRADE" ] \
    && [ -z "$_GALERA_COMP" ] ; then
    msg "INFO: Running MySQLTuner check on all databases..."
    msg "NOTE! This step may take a LONG time, please wait..."
    _MYSQLTUNER_TEST_RESULT=OK
    rm -f /var/opt/mysqltuner*
    ${crlGet} "${urlDld}/mysqltuner.pl" -o ${pthTun}
    if [ ! -e "${pthTun}" ] ; then
      ${crlGet} "${urlDev}/mysqltuner.pl" -o ${pthTun}
    fi
    if [ -e "${pthTun}" ] ; then
      perl ${pthTun} > ${outTun} 2>&1
    fi
  fi
  if [ -e "${pthTun}" ] \
    && [ -e "${outTun}" ] \
    && [ "${_STATUS}" = "UPGRADE" ] ; then
    _REC_MYISAM_MEM=$(cat ${outTun} \
      | grep "Data in MyISAM tables" \
      | cut -d: -f2 \
      | awk '{ print $1}' 2>&1)
    _REC_INNODB_MEM=$(cat ${outTun} \
      | grep "data size:" \
      | cut -d/ -f3 \
      | awk '{ print $1}' 2>&1)
    _MYSQLTUNER_TEST=$(cat ${outTun} 2>&1)
    cp -a ${outTun} ${pthLog}/
    if [ -z "$_REC_INNODB_MEM" ] \
      || [[ "$_MYSQLTUNER_TEST" =~ "Cannot calculate MyISAM index" ]] \
      || [[ "$_MYSQLTUNER_TEST" =~ "InnoDB is enabled but isn" ]] ; then
      _MYSQLTUNER_TEST_RESULT=FAIL
      msg "ALRT! The MySQLTuner test failed!"
      msg "ALRT! Please review ${outTun}"
      msg "ALRT! We will use some sane SQL defaults instead, do not worry!"
    fi
    ###--------------------###
    if [ ! -z "$_REC_MYISAM_MEM" ] \
      && [ "$_MYSQLTUNER_TEST_RESULT" = "OK" ] ; then
      _RAW_MYISAM_MEM=$(echo $_REC_MYISAM_MEM | sed "s/[A-Z]//g" 2>&1)
      if [[ "$_REC_MYISAM_MEM" =~ "G" ]] ; then
        _RAW_MYISAM_MEM=$(( _RAW_MYISAM_MEM * 1024 ))
      fi
      if [ "$_RAW_MYISAM_MEM" -gt "$_USE_SQL" ] ; then
        _USE_MYISAM_MEM="$_USE_SQL"
      else
        _USE_MYISAM_MEM="$_RAW_MYISAM_MEM"
      fi
      if [ "$_USE_MYISAM_MEM" -lt "256" ] || [ -z "$_USE_MYISAM_MEM" ] ; then
        _USE_MYISAM_MEM="$_USE_SQL"
      fi
      _USE_MYISAM_MEM="${_USE_MYISAM_MEM}M"
      sed -i "s/^key_buffer_size.*/key_buffer_size         = $_USE_MYISAM_MEM/g"  /etc/mysql/my.cnf
    else
      _USE_MYISAM_MEM="${_USE_SQL}M"
      if [ "$_MYSQLTUNER_TEST_RESULT" = "FAIL" ] ; then
        msg "ALRT! _USE_MYISAM_MEM is $_USE_MYISAM_MEM because _REC_MYISAM_MEM was empty!"
      fi
      sed -i "s/^key_buffer_size.*/key_buffer_size         = $_USE_MYISAM_MEM/g"  /etc/mysql/my.cnf
    fi
    ###--------------------###
    if [ ! -z "$_REC_INNODB_MEM" ] && [ "$_MYSQLTUNER_TEST_RESULT" = "OK" ] ; then
      _RAW_INNODB_MEM=$(echo $_REC_INNODB_MEM | sed "s/[A-Z]//g" 2>&1)
      if [[ "$_REC_INNODB_MEM" =~ "G" ]] ; then
        _RAW_INNODB_MEM=$(echo "$_RAW_INNODB_MEM * 1024" | bc -l 2>&1)
      fi
      _RAW_INNODB_MEM=$(echo "($_RAW_INNODB_MEM+0.5)/1" | bc 2>&1)
      if [ "$_RAW_INNODB_MEM" -gt "$_USE_SQL" ] ; then
        _USE_INNODB_MEM="$_USE_SQL"
      else
        _RAW_INNODB_MEM=$(echo "scale=2; ($_RAW_INNODB_MEM * 1.1)" | bc 2>&1)
        _USE_INNODB_MEM=$(echo "($_RAW_INNODB_MEM+0.5)/1" | bc 2>&1)
      fi
      _INNODB_BPI="0"
      _INNODB_BPI=$(echo "scale=0; $_USE_INNODB_MEM/1024" | bc 2>&1)
      if [ "$_INNODB_BPI" -gt "1" ] ; then
        sed -i "s/innodb_file_per_table   = 1/innodb_file_per_table   = 1\ninnodb_buffer_pool_instances = $_INNODB_BPI/g" /etc/mysql/my.cnf
      fi
      if [ "$_USE_INNODB_MEM" -lt "256" ] || [ -z "$_USE_INNODB_MEM" ] ; then
        _USE_INNODB_MEM="$_USE_SQL"
      fi
      _USE_INNODB_MEM="${_USE_INNODB_MEM}M"
      sed -i "s/^innodb_buffer_pool_size.*/innodb_buffer_pool_size = $_USE_INNODB_MEM/g"  /etc/mysql/my.cnf
    else
      _USE_INNODB_MEM="${_USE_SQL}M"
      msg "ALRT! _USE_INNODB_MEM is $_USE_INNODB_MEM because _REC_INNODB_MEM was empty!"
      sed -i "s/^innodb_buffer_pool_size.*/innodb_buffer_pool_size = $_USE_INNODB_MEM/g"  /etc/mysql/my.cnf
    fi
  else
    _THIS_USE_MEM="${_USE_SQL}M"
    if [ "$_MYSQLTUNER_TEST_RESULT" = "FAIL" ] \
      && [ "${_STATUS}" = "UPGRADE" ] \
      && [ -z "$_GALERA_COMP" ] ; then
      msg "ALRT! _USE_MYISAM_MEM is $_THIS_USE_MEM because _REC_MYISAM_MEM was empty!"
      msg "ALRT! _USE_INNODB_MEM is $_THIS_USE_MEM because _REC_INNODB_MEM was empty!"
    fi
    sed -i "s/= 181/= $_USE_SQL/g"  /etc/mysql/my.cnf
  fi
}
#
# Tune memory limits for PHP, Nginx and MariaDB.
tune_memory_limits() {
  _ETH_TEST=$(ifconfig 2>&1)
  _VM_TEST=$(uname -a 2>&1)
  if [[ "${_ETH_TEST}" =~ "venet0" ]] ; then
    _VMFAMILY="VZ"
  elif [ -e "/proc/bean_counters" ] ; then
    _VMFAMILY="VZ"
  elif [[ "${_THISHOST}" =~ ".host8." ]] && [ -e "/boot/grub/menu.lst" ] ; then
    _VMFAMILY="TG"
  elif [[ "${_THISHOST}" =~ ".host8." ]] && [ -e "/boot/grub/grub.cfg" ] ; then
    _VMFAMILY="TG"
  else
    _VMFAMILY="XEN"
  fi
  if [[ "${_VM_TEST}" =~ beng ]] ; then
    _VMFAMILY="VS"
  fi
  if [[ "${_AWS_TEST_A}" =~ "cloudimg" ]] \
    || [[ "${_AWS_TEST_B}" =~ "cloudconfig" ]] ; then
    _VMFAMILY="AWS"
  fi
  _CPU_INFO=$(grep -c processor /proc/cpuinfo 2>&1)
  _CPU_INFO=${_CPU_INFO//[^0-9]/}
  _NPROC_TEST=$(which nproc 2>&1)
  if [ -z "${_NPROC_TEST}" ] ; then
    _CPU_NR="${_CPU_INFO}"
  else
    _CPU_NR=$(nproc 2>&1)
  fi
  _CPU_NR=${_CPU_NR//[^0-9]/}
  if [ ! -z "${_CPU_NR}" ] && [ ! -z "${_CPU_INFO}" ] \
    && [ "${_CPU_NR}" -gt "${_CPU_INFO}" ] && [ "${_CPU_INFO}" -gt "0" ] ; then
    _CPU_NR="${_CPU_INFO}"
  fi
  if [ -z "${_CPU_NR}" ] || [ "${_CPU_NR}" -lt "1" ] ; then
    _CPU_NR=1
  fi
  _CPU_MX=$(( _CPU_NR * 2 ))
  if [ "$_CPU_MX" -lt "4" ] ; then
    _CPU_MX=4
  fi
  _CPU_TG=$(( _CPU_NR / 2 ))
  if [ "$_CPU_TG" -lt "4" ] ; then
    _CPU_TG=4
  fi
  _CPU_VS=$(( _CPU_NR / 12 ))
  if [ "${_CPU_VS}" -lt "2" ] ; then
    _CPU_VS=2
  fi
  _RAM=$(free -mto | grep Mem: | awk '{ print $2 }' 2>&1)
  if [ "${_RESERVED_RAM}" -gt "0" ] ; then
    _RAM=$(( _RAM - _RESERVED_RAM ))
  fi
  _USE=$(( _RAM / 4 ))
  if [ "${_VMFAMILY}" = "VS" ] || [[ "${_THISHOST}" =~ ".host8." ]] ; then
    if [ "${_VMFAMILY}" = "VS" ] ; then
      if [ -e "/root/.tg.cnf" ] ; then
        _USE_SQL=$(( _RAM / 8 ))
      else
        _USE_SQL=$(( _RAM / 18 ))
      fi
    else
      _USE_SQL=$(( _RAM / 8 ))
    fi
  else
    _USE_SQL=$(( _RAM / 8 ))
  fi
  if [ "$_USE_SQL" -lt "256" ] ; then
    _USE_SQL=256
  fi
  _TMP_SQL="${_USE_SQL}M"
  _SRT_SQL=$(( _USE_SQL * 2 ))
  _SRT_SQL="${_SRT_SQL}K"
  if [ "$_USE" -ge "512" ] && [ "$_USE" -lt "1024" ] ; then
    _USE_PHP=512
    _USE_OPC=512
    _MXC_SQL=20
    _QCE_SQL=128M
    _RND_SQL=8M
    _JBF_SQL=4M
    if [ "${_PHP_FPM_WORKERS}" = "AUTO" ] ; then
      _L_PHP_FPM_WORKERS=12
    else
      _L_PHP_FPM_WORKERS=${_PHP_FPM_WORKERS}
    fi
    if [ "${_NGINX_WORKERS}" = "AUTO" ] ; then
      _L_NGINX_WORKERS=$_CPU_MX
    else
      _L_NGINX_WORKERS=${_NGINX_WORKERS}
    fi
  elif [ "$_USE" -ge "1024" ] ; then
    if [ "${_VMFAMILY}" = "XEN" ] || [ "${_VMFAMILY}" = "AWS" ] ; then
      _USE_PHP=512
      _USE_OPC=1024
      _MXC_SQL=30
      _QCE_SQL=128M
      _RND_SQL=8M
      _JBF_SQL=4M
      if [ "${_PHP_FPM_WORKERS}" = "AUTO" ] ; then
        _L_PHP_FPM_WORKERS=24
      else
        _L_PHP_FPM_WORKERS=${_PHP_FPM_WORKERS}
      fi
      if [ "${_NGINX_WORKERS}" = "AUTO" ] ; then
        _L_NGINX_WORKERS=$_CPU_MX
      else
        _L_NGINX_WORKERS=${_NGINX_WORKERS}
      fi
    elif [ "${_VMFAMILY}" = "VS" ] || [ "${_VMFAMILY}" = "TG" ] ; then
      if [ -e "/boot/grub/grub.cfg" ] \
        || [ -e "/boot/grub/menu.lst" ] \
        || [ -e "/root/.tg.cnf" ] ; then
        _USE_PHP=1024
        _USE_OPC=1024
        _MXC_SQL=100
        _QCE_SQL=256M
        _RND_SQL=8M
        _JBF_SQL=4M
        if [ "${_PHP_FPM_WORKERS}" = "AUTO" ] ; then
          _L_PHP_FPM_WORKERS=24
        else
          _L_PHP_FPM_WORKERS=${_PHP_FPM_WORKERS}
        fi
        if [ "${_NGINX_WORKERS}" = "AUTO" ] ; then
          _L_NGINX_WORKERS=$_CPU_TG
        else
          _L_NGINX_WORKERS=${_NGINX_WORKERS}
        fi
        sed -i "s/64000/128000/g"  /opt/php56/etc/php56.ini &> /dev/null
        sed -i "s/64000/128000/g"  /opt/php55/etc/php55.ini &> /dev/null
        sed -i "s/64000/128000/g"  /opt/php54/etc/php54.ini &> /dev/null
        sed -i "s/64000/128000/g"  /opt/php53/etc/php53.ini &> /dev/null
      else
        _USE_PHP=1024
        _USE_OPC=1024
        _MXC_SQL=30
        _QCE_SQL=64M
        _RND_SQL=2M
        _JBF_SQL=2M
        if [ "${_PHP_FPM_WORKERS}" = "AUTO" ] ; then
          _L_PHP_FPM_WORKERS=6
        else
          _L_PHP_FPM_WORKERS=${_PHP_FPM_WORKERS}
        fi
        if [ "${_NGINX_WORKERS}" = "AUTO" ] ; then
          _L_NGINX_WORKERS=${_CPU_VS}
        else
          _L_NGINX_WORKERS=${_NGINX_WORKERS}
        fi
      fi
    else
      _USE_PHP=256
      _USE_OPC=256
      _MXC_SQL=10
      _QCE_SQL=32M
      _RND_SQL=2M
      _JBF_SQL=2M
      if [ "${_PHP_FPM_WORKERS}" = "AUTO" ] ; then
        _L_PHP_FPM_WORKERS=12
      else
        _L_PHP_FPM_WORKERS=${_PHP_FPM_WORKERS}
      fi
      if [ "${_NGINX_WORKERS}" = "AUTO" ] ; then
        _L_NGINX_WORKERS=$_CPU_MX
      else
        _L_NGINX_WORKERS=${_NGINX_WORKERS}
      fi
    fi
  else
    _USE_PHP="$_USE"
    _USE_OPC="$_USE"
    _MXC_SQL=10
    _QCE_SQL=32M
    _RND_SQL=1M
    _JBF_SQL=1M
    if [ "${_PHP_FPM_WORKERS}" = "AUTO" ] ; then
      _L_PHP_FPM_WORKERS=6
    else
      _L_PHP_FPM_WORKERS=${_PHP_FPM_WORKERS}
    fi
    if [ "${_NGINX_WORKERS}" = "AUTO" ] ; then
      _L_NGINX_WORKERS=$_CPU_MX
    else
      _L_NGINX_WORKERS=${_NGINX_WORKERS}
    fi
  fi
  _USE_JETTY="-Xmx${_USE_OPC}m"
  if [ "${_VMFAMILY}" = "VZ" ] ; then
    _USE_OPC=64
  fi
  _USE_FPM=$(( _USE_PHP / 2 ))
  if [ "$_USE_FPM" -lt "196" ] ; then
    _USE_FPM=196
  fi
  if [ "$_USE_PHP" -lt "196" ] ; then
    _USE_PHP=196
  fi
  if [ ! -e "/var/xdrago/conf/fpm-pool-foo.conf" ] ; then
    mkdir -p /var/xdrago/conf
  fi
  if [ ! -e "/data/conf" ] ; then
    mkdir -p /data/conf
  fi
  cp -af ${locCnf}/fpm-pool-foo.conf /var/xdrago/conf/fpm-pool-foo.conf
  cp -af ${locCnf}/hhvm /var/xdrago/conf/
  cp -af ${locCnf}/hhvm/hhvm_intercept.php /data/conf/hhvm_intercept.php
  chmod 644 /data/conf/hhvm_intercept.php
  if [ -e "/opt/etc/fpm/fpm-pool-common.conf" ] ; then
    sed -i "s/256/$_USE_FPM/g" /opt/etc/fpm/fpm-pool-common.conf &> /dev/null
  fi
  if [ -e "/opt/php56/etc/php56.ini" ] ; then
    sed -i "s/256/$_USE_FPM/g" /opt/php56/etc/php56.ini &> /dev/null
    sed -i "s/181/$_USE_OPC/g" /opt/php56/etc/php56.ini &> /dev/null
    sed -i "s/256/$_USE_PHP/g" /opt/php56/lib/php.ini   &> /dev/null
  fi
  if [ -e "/opt/php55/etc/php55.ini" ] ; then
    sed -i "s/256/$_USE_FPM/g" /opt/php55/etc/php55.ini &> /dev/null
    sed -i "s/181/$_USE_OPC/g" /opt/php55/etc/php55.ini &> /dev/null
    sed -i "s/256/$_USE_PHP/g" /opt/php55/lib/php.ini   &> /dev/null
  fi
  if [ -e "/opt/php54/etc/php54.ini" ] ; then
    sed -i "s/256/$_USE_FPM/g" /opt/php54/etc/php54.ini &> /dev/null
    sed -i "s/181/$_USE_OPC/g" /opt/php54/etc/php54.ini &> /dev/null
    sed -i "s/256/$_USE_PHP/g" /opt/php54/lib/php.ini   &> /dev/null
  fi
  if [ -e "/opt/php53/etc/php53.ini" ] ; then
    sed -i "s/256/$_USE_FPM/g" /opt/php53/etc/php53.ini &> /dev/null
    sed -i "s/181/$_USE_OPC/g" /opt/php53/etc/php53.ini &> /dev/null
    sed -i "s/256/$_USE_PHP/g" /opt/php53/lib/php.ini   &> /dev/null
  fi
  if [ "${_CUSTOM_CONFIG_SQL}" = "NO" ] ; then
    tune_sql_memory_limits
    _UXC_SQL=$_MXC_SQL
    _UXC_SQL=$(( _MXC_SQL / 2 ))
    sed -i "s/= 191/= $_UXC_SQL/g"                                               /etc/mysql/my.cnf
    sed -i "s/= 292/= $_MXC_SQL/g"                                               /etc/mysql/my.cnf
    sed -i "s/^tmp_table_size.*/tmp_table_size          = $_TMP_SQL/g"           /etc/mysql/my.cnf
    sed -i "s/^max_heap_table_size.*/max_heap_table_size     = $_TMP_SQL/g"      /etc/mysql/my.cnf
    sed -i "s/^myisam_sort_buffer_size.*/myisam_sort_buffer_size = $_SRT_SQL/g"  /etc/mysql/my.cnf
    sed -i "s/^query_cache_size.*/query_cache_size        = $_QCE_SQL/g"         /etc/mysql/my.cnf
    sed -i "s/^read_rnd_buffer_size.*/read_rnd_buffer_size    = $_RND_SQL/g"     /etc/mysql/my.cnf
    sed -i "s/^join_buffer_size.*/join_buffer_size        = $_JBF_SQL/g"         /etc/mysql/my.cnf
  fi
  _MAX_MEM_REDIS="${_USE_OPC}MB"
  sed -i "s/^maxmemory .*/maxmemory $_MAX_MEM_REDIS/g" \
    /etc/redis/redis.conf &> /dev/null
  if [ -e "/etc/default/jetty9" ] && [ -e "/opt/solr4" ] ; then
    sed -i "s/^JAVA_OPTIONS.*/JAVA_OPTIONS=\"-Xms8m $_USE_JETTY \
      -Djava.awt.headless=true \
      -Dsolr.solr.home=\/opt\/solr4 \$JAVA_OPTIONS\" \
      # Options/g" /etc/default/jetty9
  fi
  if [ -e "/etc/default/jetty8" ] && [ -e "/opt/solr3" ] ; then
    sed -i "s/^JAVA_OPTIONS.*/JAVA_OPTIONS=\"-Xms8m $_USE_JETTY \
      -Djava.awt.headless=true \
      -Dsolr.solr.home=\/opt\/solr3 \$JAVA_OPTIONS\" \
      # Options/g" /etc/default/jetty8
  fi
  if [ -e "/etc/default/jetty7" ] && [ -e "/opt/solr1" ] ; then
    sed -i "s/^JAVA_OPTIONS.*/JAVA_OPTIONS=\"-Xms8m $_USE_JETTY \
      -Djava.awt.headless=true \
      -Dsolr.solr.home=\/opt\/solr1 \$JAVA_OPTIONS\" \
      # Options/g" /etc/default/jetty7
  fi
  tune_web_server_config
}
#
# Fix locales.
fix_locales() {
  if [ -e "/etc/ssh/sshd_config" ] ; then
    _SSH_LC_TEST=$(grep "^AcceptEnv LANG LC_" /etc/ssh/sshd_config 2>&1)
    if [[ "$_SSH_LC_TEST" =~ "AcceptEnv LANG LC_" ]] ; then
      _DO_NOTHING=YES
    else
      sed -i "s/.*AcceptEnv.*//g" /etc/ssh/sshd_config
      echo "AcceptEnv LANG LC_*" >> /etc/ssh/sshd_config
    fi
  fi
  if [ -e "/usr/etc/sshd_config" ] ; then
    _SSH_LC_TEST=$(grep "^AcceptEnv LANG LC_" /usr/etc/sshd_config 2>&1)
    if [[ "$_SSH_LC_TEST" =~ "AcceptEnv LANG LC_" ]] ; then
      _DO_NOTHING=YES
    else
      sed -i "s/.*AcceptEnv.*//g" /usr/etc/sshd_config
      echo "AcceptEnv LANG LC_*" >> /usr/etc/sshd_config
    fi
  fi
  _LOCALE_TEST=BROKEN
  _LOC_TEST=$(locale 2>&1)
  if [[ "$_LOC_TEST" =~ LANGUAGE=.*UTF-8 ]] \
    && [[ "$_LOC_TEST" =~ LANG=.*UTF-8 ]] ; then
    _LOCALE_TEST=OK
  fi
  if [[ "$_LOC_TEST" =~ "Cannot" ]] ; then
    _LOCALE_TEST=BROKEN
  fi
  if [ "$_LOCALE_TEST" = "BROKEN" ] ; then
    msg "WARNING!"
    cat <<EOF

  Locales on this system are broken or not installed
  and/or not configured correctly yet. This is a known
  issue on some systems/hosts which either don't configure
  locales at all or don't use UTF-8 compatible locales
  during initial OS setup.

  We will fix this problem for you now by enforcing en_US.UTF-8
  locale settings on the fly during install, and as system
  defaults in /etc/default/locale for future sessions. This
  overrides any locale settings passed by your SSH client.

  You should log out when this installer will finish all its tasks
  and display last line with "BYE!" and then log in again
  to see the result.

  We will continue in 5 seconds...

EOF
    sleep 5
    if [ "$_THIS_OS" = "Debian" ] ; then
      _LOCALE_GEN_TEST=$(grep -v "^#" /etc/locale.gen 2>&1)
      if [[ ! "$_LOCALE_GEN_TEST" =~ "en_US.UTF-8 UTF-8" ]] ; then
        echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
      fi
      sed -i "/^$/d" /etc/locale.gen
      locale-gen &> /dev/null
    else
      locale-gen en_US.UTF-8 &> /dev/null # Ubuntu-specific locale-gen
    fi
    # Explicitly enforce all locale settings
    update-locale \
      LANG=en_US.UTF-8 \
      LC_CTYPE=en_US.UTF-8 \
      LC_COLLATE=POSIX \
      LC_NUMERIC=POSIX \
      LC_TIME=en_US.UTF-8 \
      LC_MONETARY=en_US.UTF-8 \
      LC_MESSAGES=en_US.UTF-8 \
      LC_PAPER=en_US.UTF-8 \
      LC_NAME=en_US.UTF-8 \
      LC_ADDRESS=en_US.UTF-8 \
      LC_TELEPHONE=en_US.UTF-8 \
      LC_MEASUREMENT=en_US.UTF-8 \
      LC_IDENTIFICATION=en_US.UTF-8 \
      LC_ALL= &> /dev/null
    if [ -e "${locCnf}/boa.bashrc.txt" ] ; then
      cp -af /root/.bashrc /root/.bashrc.bak.${_NOW}
      cp -af ${locCnf}/boa.bashrc.txt /root/.bashrc
      set_xterm
    fi
    # Define all locale settings on the fly to prevent unnecessary
    # warnings during installation of packages.
    export LANG=en_US.UTF-8
    export LC_CTYPE=en_US.UTF-8
    export LC_COLLATE=POSIX
    export LC_NUMERIC=POSIX
    export LC_TIME=en_US.UTF-8
    export LC_MONETARY=en_US.UTF-8
    export LC_MESSAGES=en_US.UTF-8
    export LC_PAPER=en_US.UTF-8
    export LC_NAME=en_US.UTF-8
    export LC_ADDRESS=en_US.UTF-8
    export LC_TELEPHONE=en_US.UTF-8
    export LC_MEASUREMENT=en_US.UTF-8
    export LC_IDENTIFICATION=en_US.UTF-8
    export LC_ALL=
  else
    if [ -e "${locCnf}/boa.bashrc.txt" ] ; then
      cp -af /root/.bashrc /root/.bashrc.bak.${_NOW}
      cp -af ${locCnf}/boa.bashrc.txt /root/.bashrc
      set_xterm
    fi
    if [ "$_THIS_OS" = "Debian" ] ; then
      _LOCALE_GEN_TEST=$(grep -v "^#" /etc/locale.gen 2>&1)
      if [[ ! "$_LOCALE_GEN_TEST" =~ "en_US.UTF-8 UTF-8" ]] ; then
        echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
      fi
      sed -i "/^$/d" /etc/locale.gen
      locale-gen &> /dev/null
    else
      locale-gen en_US.UTF-8 &> /dev/null # Ubuntu-specific locale-gen
    fi
    # Explicitly enforce locale settings required for consistency
    update-locale \
      LANG=en_US.UTF-8 \
      LC_CTYPE=en_US.UTF-8 \
      LC_COLLATE=POSIX \
      LC_NUMERIC=POSIX \
      LC_ALL= &> /dev/null
    # Define locale settings required for consistency also on the fly
    if [ "${_STATUS}" != "INIT" ] ; then
      # On initial install it causes warning on Wheezy:
      # setlocale: LC_CTYPE: cannot change locale (en_US.UTF-8):
      # No such file or directory
      export LC_CTYPE=en_US.UTF-8
    fi
    export LC_COLLATE=POSIX
    export LC_NUMERIC=POSIX
    export LC_ALL=
  fi
}
#
# Read or create Barracuda cnf file.
barracuda_cnf() {
  if [ ! -e "${barCnf}" ] ; then
    if [[ "${_MY_EMAIL}" =~ "omega8.cc" ]] ; then
      _CHECK_HOST=$(uname -n 2>&1)
      if [ -e "/root/.auto.up.cnf" ] \
        || [ -e "/root/.host8.cnf" ] \
        || [[ "${_CHECK_HOST}" =~ ".host8." ]] \
        || [ "${_VMFAMILY}" = "VS" ] ; then
        if [ -e "/root/.debug.cnf" ] ; then
          _DO_NOTHING=YES
        else
          _DB_SERVER=MariaDB
        fi
      else
        msg "EXIT: Invalid e-mail address defined in the _MY_EMAIL variable"
        msg "EXIT: Bye (1)"
        clean_pid_exit
      fi
    fi
    if [ "${_DB_SERIES}" = "10.0" ] ; then
      if [ -e "/root/.mstr.clstr.cnf" ] \
        || [ -e "/root/.wbhd.clstr.cnf" ] \
        || [ -e "/root/.dbhd.clstr.cnf" ] ; then
        _MARIADB_VERSION="${_GALERA_10_VRN}"
      else
        _MARIADB_VERSION="${_MARIADB_10_VRN}"
      fi
    else
      _DB_SERIES=5.5
      _MARIADB_VERSION="${_MARIADB_5_VRN}"
    fi
    msg "INFO: Creating your ${barCnf} config file"
    sleep 1
    echo "###"                                                 > ${barCnf}
    echo "### Configuration created on ${_NOW}"               >> ${barCnf}
    echo "###"                                                >> ${barCnf}
    echo "_LOCAL_NETWORK_HN=\"${_LOCAL_NETWORK_HN}\""         >> ${barCnf}
    echo "_LOCAL_NETWORK_IP=\"${_LOCAL_NETWORK_IP}\""         >> ${barCnf}
    echo "_MY_FRONT=\"${_MY_FRONT}\""                         >> ${barCnf}
    echo "_MY_HOSTN=\"${_MY_HOSTN}\""                         >> ${barCnf}
    echo "_MY_OWNIP=\"${_MY_OWNIP}\""                         >> ${barCnf}
    echo "_SMTP_RELAY_HOST=\"${_SMTP_RELAY_HOST}\""           >> ${barCnf}
    echo "_SMTP_RELAY_TEST=${_SMTP_RELAY_TEST}"               >> ${barCnf}
    echo "_THIS_DB_HOST=${_THIS_DB_HOST}"                     >> ${barCnf}

    echo "###"                                                >> ${barCnf}
    echo "_AUTOPILOT=${_AUTOPILOT}"                           >> ${barCnf}
    echo "_DEBUG_MODE=${_DEBUG_MODE}"                         >> ${barCnf}
    echo "_MY_EMAIL=\"${_MY_EMAIL}\""                         >> ${barCnf}
    echo "_XTRAS_LIST=\"${_XTRAS_LIST}\""                     >> ${barCnf}

    echo "###"                                                >> ${barCnf}
    echo "_MODULES_FIX=${_MODULES_FIX}"                       >> ${barCnf}
    echo "_MODULES_SKIP=\"${_MODULES_SKIP}\""                 >> ${barCnf}
    echo "_PERMISSIONS_FIX=${_PERMISSIONS_FIX}"               >> ${barCnf}

    echo "###"                                                >> ${barCnf}
    echo "_CPU_CRIT_RATIO=${_CPU_CRIT_RATIO}"                 >> ${barCnf}
    echo "_CPU_MAX_RATIO=${_CPU_MAX_RATIO}"                   >> ${barCnf}
    echo "_CPU_SPIDER_RATIO=${_CPU_SPIDER_RATIO}"             >> ${barCnf}

    echo "###"                                                >> ${barCnf}
    echo "_DB_BINARY_LOG=${_DB_BINARY_LOG}"                   >> ${barCnf}
    echo "_DB_ENGINE=${_DB_ENGINE}"                           >> ${barCnf}
    echo "_DB_SERIES=${_DB_SERIES}"                           >> ${barCnf}
    echo "_DB_SERVER=${_DB_SERVER}"                           >> ${barCnf}
    echo "_INNODB_LOG_FILE_SIZE=${_INNODB_LOG_FILE_SIZE}"     >> ${barCnf}

    echo "###"                                                >> ${barCnf}
    echo "_DNS_SETUP_TEST=${_DNS_SETUP_TEST}"                 >> ${barCnf}
    echo "_EXTRA_PACKAGES=${_EXTRA_PACKAGES}"                 >> ${barCnf}
    echo "_FORCE_GIT_MIRROR=\"${_FORCE_GIT_MIRROR}\""         >> ${barCnf}
    echo "_LOCAL_DEBIAN_MIRROR=${_LOCAL_DEBIAN_MIRROR}"       >> ${barCnf}
    echo "_LOCAL_UBUNTU_MIRROR=${_LOCAL_UBUNTU_MIRROR}"       >> ${barCnf}
    echo "_NEWRELIC_KEY=${_NEWRELIC_KEY}"                     >> ${barCnf}
    echo "_SCOUT_KEY=${_SCOUT_KEY}"                           >> ${barCnf}

    echo "###"                                                >> ${barCnf}
    echo "_NGINX_DOS_LIMIT=${_NGINX_DOS_LIMIT}"               >> ${barCnf}
    echo "_NGINX_EXTRA_CONF=\"${_NGINX_EXTRA_CONF}\""         >> ${barCnf}
    echo "_NGINX_FORWARD_SECRECY=${_NGINX_FORWARD_SECRECY}"   >> ${barCnf}
    echo "_NGINX_LDAP=${_NGINX_LDAP}"                         >> ${barCnf}
    echo "_NGINX_NAXSI=${_NGINX_NAXSI}"                       >> ${barCnf}
    echo "_NGINX_SPDY=${_NGINX_SPDY}"                         >> ${barCnf}
    echo "_NGINX_WORKERS=${_NGINX_WORKERS}"                   >> ${barCnf}

    echo "###"                                                >> ${barCnf}
    echo "_PHP_CLI_VERSION=${_PHP_CLI_VERSION}"               >> ${barCnf}
    echo "_PHP_EXTRA_CONF=\"${_PHP_EXTRA_CONF}\""             >> ${barCnf}
    echo "_PHP_FPM_DENY=\"${_PHP_FPM_DENY}\""                 >> ${barCnf}
    echo "_PHP_FPM_VERSION=${_PHP_FPM_VERSION}"               >> ${barCnf}
    echo "_PHP_FPM_WORKERS=${_PHP_FPM_WORKERS}"               >> ${barCnf}
    echo "_PHP_GEOS=${_PHP_GEOS}"                             >> ${barCnf}
    echo "_PHP_MONGODB=${_PHP_MONGODB}"                       >> ${barCnf}
    echo "_PHP_MULTI_INSTALL=\"${_PHP_MULTI_INSTALL}\""       >> ${barCnf}
    echo "_PHP_SINGLE_INSTALL=${_PHP_SINGLE_INSTALL}"         >> ${barCnf}

    echo "###"                                                >> ${barCnf}
    echo "_REDIS_LISTEN_MODE=${_REDIS_LISTEN_MODE}"           >> ${barCnf}
    echo "_RESERVED_RAM=${_RESERVED_RAM}"                     >> ${barCnf}
    echo "_SPEED_VALID_MAX=${_SPEED_VALID_MAX}"               >> ${barCnf}
    echo "_SSH_FROM_SOURCES=${_SSH_FROM_SOURCES}"             >> ${barCnf}
    echo "_SSH_PORT=${_SSH_PORT}"                             >> ${barCnf}
    echo "_SSL_FROM_SOURCES=${_SSL_FROM_SOURCES}"             >> ${barCnf}
    echo "_STRICT_BIN_PERMISSIONS=${_STRICT_BIN_PERMISSIONS}" >> ${barCnf}
    echo "_STRONG_PASSWORDS=${_STRONG_PASSWORDS}"             >> ${barCnf}

    echo "###"                                                >> ${barCnf}
    echo "_CUSTOM_CONFIG_CSF=${_CUSTOM_CONFIG_CSF}"           >> ${barCnf}
    echo "_CUSTOM_CONFIG_LSHELL=${_CUSTOM_CONFIG_LSHELL}"     >> ${barCnf}
    echo "_CUSTOM_CONFIG_PHP53=$_CUSTOM_CONFIG_PHP53"       >> ${barCnf}
    echo "_CUSTOM_CONFIG_PHP54=$_CUSTOM_CONFIG_PHP54"       >> ${barCnf}
    echo "_CUSTOM_CONFIG_PHP55=$_CUSTOM_CONFIG_PHP55"       >> ${barCnf}
    echo "_CUSTOM_CONFIG_PHP56=$_CUSTOM_CONFIG_PHP56"       >> ${barCnf}
    echo "_CUSTOM_CONFIG_REDIS=${_CUSTOM_CONFIG_REDIS}"       >> ${barCnf}
    echo "_CUSTOM_CONFIG_SQL=${_CUSTOM_CONFIG_SQL}"           >> ${barCnf}

    echo "###"                                                >> ${barCnf}
    echo "_AEGIR_UPGRADE_ONLY=${_AEGIR_UPGRADE_ONLY}"         >> ${barCnf}
    echo "_SYSTEM_UPGRADE_ONLY=${_SYSTEM_UPGRADE_ONLY}"       >> ${barCnf}
    echo "###"                                                >> ${barCnf}
    _CHECK_HOST=$(uname -n 2>&1)
    sed -i "s/^_DB_SERVER=.*/_DB_SERVER=MariaDB/g" ${barCnf}
    if [ -e "/root/.auto.up.cnf" ] \
      || [ -e "/root/.host8.cnf" ] \
      || [[ "${_CHECK_HOST}" =~ ".host8." ]] \
      || [ "${_VMFAMILY}" = "VS" ] ; then
      if [ -e "/root/.debug.cnf" ] ; then
        _DO_NOTHING=YES
      else
        sed -i "s/^_AUTOPILOT=.*/_AUTOPILOT=YES/g"                                 ${barCnf}
        sed -i "s/^_DB_ENGINE=.*/_DB_ENGINE=InnoDB/g"                              ${barCnf}
        sed -i "s/^_DB_SERVER=.*/_DB_SERVER=MariaDB/g"                             ${barCnf}
        sed -i "s/^_DEBUG_MODE=.*/_DEBUG_MODE=NO/g"                                ${barCnf}
        sed -i "s/^_FORCE_GIT_MIRROR=.*/_FORCE_GIT_MIRROR=\"\"/g"                  ${barCnf}
        sed -i "s/^_LOCAL_DEBIAN_MIRROR=.*/_LOCAL_DEBIAN_MIRROR=ftp.debian.org/g"  ${barCnf}
        sed -i "s/^_MY_EMAIL=.*/_MY_EMAIL=\"notify\@omega8.cc\"/g"                 ${barCnf}
        sed -i "s/^_NGINX_FORWARD_SECRECY=.*/_NGINX_FORWARD_SECRECY=YES/g"         ${barCnf}
        sed -i "s/^_NGINX_SPDY=.*/_NGINX_SPDY=YES/g"                               ${barCnf}
        sed -i "s/^_SSH_FROM_SOURCES=.*/_SSH_FROM_SOURCES=YES/g"                   ${barCnf}
        sed -i "s/^_STRICT_BIN_PERMISSIONS=.*/_STRICT_BIN_PERMISSIONS=YES/g"       ${barCnf}
        sed -i "s/^_STRONG_PASSWORDS=.*/_STRONG_PASSWORDS=YES/g"                   ${barCnf}
        sed -i "s/^_DEBUG_MODE=.*/_DEBUG_MODE=NO/g"                                /root/.*.octopus.cnf &> /dev/null
        sed -i "s/^_FORCE_GIT_MIRROR=.*/_FORCE_GIT_MIRROR=\"\"/g"                  /root/.*.octopus.cnf &> /dev/null
        sed -i "s/^_STRONG_PASSWORDS=.*/_STRONG_PASSWORDS=YES/g"                   /root/.*.octopus.cnf &> /dev/null
        if [ -e "/root/.mstr.clstr.cnf" ] \
          || [ -e "/root/.wbhd.clstr.cnf" ] \
          || [ -e "/root/.dbhd.clstr.cnf" ] \
          || [ -e "/root/.test.clstr.cnf" ] ; then
          _DO_NOTHING=YES
        else
          sed -i "s/^_REDIS_LISTEN_MODE=.*/_REDIS_LISTEN_MODE=SOCKET/g"            ${barCnf}
        fi
        if [[ "${_CHECK_HOST}" =~ ".host8." ]] || [ "${_VMFAMILY}" = "VS" ] ; then
          if [ "${_VMFAMILY}" = "VS" ] ; then
            sed -i "s/^_CPU_CRIT_RATIO=.*/_CPU_CRIT_RATIO=3/g"                     ${barCnf}
            sed -i "s/^_CPU_MAX_RATIO=.*/_CPU_MAX_RATIO=2/g"                       ${barCnf}
            sed -i "s/^_CPU_SPIDER_RATIO=.*/_CPU_SPIDER_RATIO=1/g"                 ${barCnf}
          fi
          sed -i "s/^_SQL_CONVERT=.*/_SQL_CONVERT=NO/g"                            /root/.*.octopus.cnf &> /dev/null
          sed -i "s/^_MODULES_FIX=.*/_MODULES_FIX=YES/g"                           ${barCnf}
          sed -i "s/^_PERMISSIONS_FIX=.*/_PERMISSIONS_FIX=YES/g"                   ${barCnf}
          if [ -x "/opt/php55/bin/php" ] && [ -z "${_PHP_SINGLE_INSTALL}" ] ; then
            sed -i "s/^_PHP_CLI_VERSION=.*/_PHP_CLI_VERSION=5.5/g"                 ${barCnf}
            sed -i "s/^_PHP_FPM_VERSION=.*/_PHP_FPM_VERSION=5.5/g"                 ${barCnf}
          fi
        fi
      fi
    fi
    if [ "${_LOCAL_DEBIAN_MIRROR}" = "http.debian.net" ] ; then
      _LOCAL_DEBIAN_MIRROR="ftp.debian.org"
      sed -i "s/^_LOCAL_DEBIAN_MIRROR=.*/_LOCAL_DEBIAN_MIRROR=ftp.debian.org/g"    ${barCnf}
    fi
  else
    if [ "${_DEBUG_MODE}" = "YES" ] ; then
      msg "INFO: Reading your ${barCnf} config file"
      sleep 1
      msg "NOTE! Please review all config options displayed below"
      msg "NOTE! It will *override* all settings in the Barracuda script"
    fi
    sed -i "s/_SPEED_VALID_MAX=300/_SPEED_VALID_MAX=3600/g" ${barCnf}
    _USE_SPEED_BOOSTER_TEST=$(grep _USE_SPEED_BOOSTER ${barCnf} 2>&1)
    if [[ "$_USE_SPEED_BOOSTER_TEST" =~ "_USE_SPEED_BOOSTER" ]] ; then
      sed -i "s/^_USE_SPEED_BOOSTER.*//g" ${barCnf}
      sed -i "/^$/d" ${barCnf}
    fi
    _NGINX_WORKERS_TEST=$(grep _NGINX_WORKERS ${barCnf} 2>&1)
    if [[ "${_NGINX_WORKERS_TEST}" =~ "_NGINX_WORKERS" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_NGINX_WORKERS=${_NGINX_WORKERS}" >> ${barCnf}
    fi
    _PHP_FPM_WORKERS_TEST=$(grep _PHP_FPM_WORKERS ${barCnf} 2>&1)
    if [[ "${_PHP_FPM_WORKERS_TEST}" =~ "_PHP_FPM_WORKERS" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_PHP_FPM_WORKERS=${_PHP_FPM_WORKERS}" >> ${barCnf}
    fi
    _PHP_INSTALL_NEW_TEST=$(grep _PHP_INSTALL_NEW ${barCnf} 2>&1)
    if [[ "$_PHP_INSTALL_NEW_TEST" =~ "_PHP_INSTALL_NEW" ]] ; then
      sed -i "s/^_PHP_INSTALL_NEW.*//g" ${barCnf}
      sed -i "/^$/d" ${barCnf}
    fi

    _PHP_CLI_LEGACY_IF_USED_A=$(grep "5\.2" /data/disk/*/log/cli.txt 2>&1)
    _PHP_CLI_LEGACY_IF_USED_B=$(grep "5\.2" /data/disk/*/static/control/cli.info 2>&1)
    _PHP_CLI_LEGACY_IF_USED_C=$(grep "CLI.*5\.2" /root/.*.octopus.cnf 2>&1)
    if [[ "$_PHP_CLI_LEGACY_IF_USED_A" =~ "5.2" ]] \
      || [[ "$_PHP_CLI_LEGACY_IF_USED_B" =~ "5.2" ]] \
      || [[ "$_PHP_CLI_LEGACY_IF_USED_C" =~ "5.2" ]] ; then
      if [ -e "/opt/php52/bin/php" ] || [ -e "/etc/init.d/php52-fpm" ] ; then
        echo " "
        msg "Legacy PHP-CLI 5.2 is used on this system but will be removed"
      fi
    fi

    _PHP_FPM_LEGACY_IF_USED_A=$(grep "5\.2" /data/disk/*/log/fpm.txt 2>&1)
    _PHP_FPM_LEGACY_IF_USED_B=$(grep "5\.2" /data/disk/*/static/control/fpm.info 2>&1)
    _PHP_FPM_LEGACY_IF_USED_C=$(grep "FPM.*5\.2" /root/.*.octopus.cnf 2>&1)
    if [[ "$_PHP_FPM_LEGACY_IF_USED_A" =~ "5.2" ]] \
      || [[ "$_PHP_FPM_LEGACY_IF_USED_B" =~ "5.2" ]] \
      || [[ "$_PHP_FPM_LEGACY_IF_USED_C" =~ "5.2" ]] ; then
      if [ -e "/opt/php52/bin/php" ] || [ -e "/etc/init.d/php52-fpm" ] ; then
        msg "Legacy PHP-FPM 5.2 is used on this system but will be removed"
        echo " "
      fi
    fi

    _PHP_MULTI_INSTALL_TEST=$(grep _PHP_MULTI_INSTALL ${barCnf} 2>&1)

    if [[ "${_PHP_MULTI_INSTALL_TEST}" =~ "5.2" ]] ; then
      _R_M=5.2
      _PHP_MULTI_INSTALL=${_PHP_MULTI_INSTALL%%${_R_M}}
      sed -i "s/^_PHP_MULTI_INSTALL.*/_PHP_MULTI_INSTALL=\"${_PHP_MULTI_INSTALL}\"/g" ${barCnf}
      sed -i "/^$/d" ${barCnf}
    fi

    if [ -e "/etc/init.d/php-fpm" ] ; then
      mrun "service php-fpm stop" &> /dev/null
      update-rc.d -f php-fpm remove &> /dev/null
      rm -f /etc/init.d/php-fpm
    fi
    if [ -e "/etc/init.d/php52-fpm" ] ; then
      mrun "service php52-fpm stop" &> /dev/null
      update-rc.d -f php52-fpm remove &> /dev/null
      rm -f /etc/init.d/php52-fpm
    fi
    killall -9 php-cgi &> /dev/null

    _CHECK_HOST=$(uname -n 2>&1)
    _L_VMFAMILY=XEN
    _L_VM_TEST=$(uname -a 2>&1)
    if [[ "${_L_VM_TEST}" =~ beng ]] ; then
      _L_VMFAMILY="VS"
    fi
    if [ -e "/root/.auto.up.cnf" ] \
      || [[ "${_CHECK_HOST}" =~ ".host8." ]] \
      || [ "${_L_VMFAMILY}" = "VS" ] \
      || [ -e "/root/.host8.cnf" ] ; then
      if [ -e "/root/.mstr.clstr.cnf" ] \
        || [ -e "/root/.wbhd.clstr.cnf" ] \
        || [ -e "/root/.dbhd.clstr.cnf" ] ; then
        _CLSTR_PHP_MULTI_INSTALL="${_PHP_MULTI_INSTALL}"
      fi
      if [ ! -e "/root/.debug.cnf" ] ; then
        sed -i "s/^_PHP_MULTI_INSTALL.*//g" ${barCnf}
        sed -i "/^$/d" ${barCnf}
        _PHP_MULTI_INSTALL=""
      fi
    fi

    if [[ "${_PHP_MULTI_INSTALL_TEST}" =~ "_PHP_MULTI_INSTALL" ]] \
      && [ ! -z "${_PHP_MULTI_INSTALL}" ] ; then
      _DO_NOTHING=YES
    else
      if [ -e "/root/.auto.up.cnf" ] \
        || [[ "${_CHECK_HOST}" =~ ".host8." ]] \
        || [ "${_L_VMFAMILY}" = "VS" ] \
        || [ -e "/root/.host8.cnf" ] ; then
        if [ -e "/root/.mstr.clstr.cnf" ] \
          || [ -e "/root/.wbhd.clstr.cnf" ] \
          || [ -e "/root/.dbhd.clstr.cnf" ] ; then
          if [ ! -z "$_CLSTR_PHP_MULTI_INSTALL" ] ; then
            _PHP_MULTI_INSTALL="$_CLSTR_PHP_MULTI_INSTALL"
          else
            _PHP_MULTI_INSTALL="5.5"
          fi
        else
          if [ ! -z "${_PHP_SINGLE_INSTALL}" ] ; then
            if [ "${_PHP_SINGLE_INSTALL}" = "5.6" ] \
              || [ "${_PHP_SINGLE_INSTALL}" = "5.5" ] \
              || [ "${_PHP_SINGLE_INSTALL}" = "5.4" ] \
              || [ "${_PHP_SINGLE_INSTALL}" = "5.3" ] ; then
              _PHP_MULTI_INSTALL=${_PHP_SINGLE_INSTALL}
              _PHP_CLI_VERSION=${_PHP_SINGLE_INSTALL}
              _PHP_FPM_VERSION=${_PHP_SINGLE_INSTALL}
            fi
          else
            if [ ! -e "/root/.debug.cnf" ] ; then
              _PHP_MULTI_INSTALL="5.6 5.5 5.4 5.3"
            fi
          fi
        fi
      fi
      if [ ! -z "${_PHP_SINGLE_INSTALL}" ] ; then
        if [ "${_PHP_SINGLE_INSTALL}" = "5.6" ] \
          || [ "${_PHP_SINGLE_INSTALL}" = "5.5" ] \
          || [ "${_PHP_SINGLE_INSTALL}" = "5.4" ] \
          || [ "${_PHP_SINGLE_INSTALL}" = "5.3" ] ; then
          _PHP_MULTI_INSTALL=${_PHP_SINGLE_INSTALL}
          _PHP_CLI_VERSION=${_PHP_SINGLE_INSTALL}
          _PHP_FPM_VERSION=${_PHP_SINGLE_INSTALL}
        fi
      fi
      echo "_PHP_MULTI_INSTALL=\"${_PHP_MULTI_INSTALL}\"" >> ${barCnf}
    fi

    _PHP_MODERN_ONLY_TEST=$(grep _PHP_MODERN_ONLY ${barCnf} 2>&1)
    if [[ "$_PHP_MODERN_ONLY_TEST" =~ "_PHP_MODERN_ONLY" ]] ; then
      sed -i "s/^_PHP_MODERN_ONLY.*//g" ${barCnf}
      sed -i "/^$/d" ${barCnf}
    fi
    _PHP_FPM_VERSION_TEST=$(grep _PHP_FPM_VERSION ${barCnf} 2>&1)
    if [[ "${_PHP_FPM_VERSION_TEST}" =~ "_PHP_FPM_VERSION" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_PHP_FPM_VERSION=${_PHP_FPM_VERSION}" >> ${barCnf}
    fi
    _PHP_CLI_VERSION_TEST=$(grep _PHP_CLI_VERSION ${barCnf} 2>&1)
    if [[ "${_PHP_CLI_VERSION_TEST}" =~ "_PHP_CLI_VERSION" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_PHP_CLI_VERSION=${_PHP_CLI_VERSION}" >> ${barCnf}
    fi
    _PHP_SINGLE_INSTALL_TEST=$(grep _PHP_SINGLE_INSTALL ${barCnf} 2>&1)
    if [[ "${_PHP_SINGLE_INSTALL_TEST}" =~ "_PHP_SINGLE_INSTALL" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_PHP_SINGLE_INSTALL=${_PHP_SINGLE_INSTALL}" >> ${barCnf}
    fi
    _LOAD_LIMIT_ONE_TEST=$(grep _LOAD_LIMIT_ONE ${barCnf} 2>&1)
    if [[ "$_LOAD_LIMIT_ONE_TEST" =~ "_LOAD_LIMIT_ONE" ]] ; then
      sed -i "s/^_LOAD_LIMIT_ONE.*//g" ${barCnf}
      sed -i "/^$/d" ${barCnf}
    fi
    _LOAD_LIMIT_TWO_TEST=$(grep _LOAD_LIMIT_TWO ${barCnf} 2>&1)
    if [[ "$_LOAD_LIMIT_TWO_TEST" =~ "_LOAD_LIMIT_TWO" ]] ; then
      sed -i "s/^_LOAD_LIMIT_TWO.*//g" ${barCnf}
      sed -i "/^$/d" ${barCnf}
    fi
    _CUSTOM_CONFIG_LSHELL_TEST=$(grep _CUSTOM_CONFIG_LSHELL ${barCnf} 2>&1)
    if [[ "${_CUSTOM_CONFIG_LSHELL_TEST}" =~ "_CUSTOM_CONFIG_LSHELL" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_CUSTOM_CONFIG_LSHELL=${_CUSTOM_CONFIG_LSHELL}" >> ${barCnf}
    fi
    _CUSTOM_CONFIG_CSF_TEST=$(grep _CUSTOM_CONFIG_CSF ${barCnf} 2>&1)
    if [[ "${_CUSTOM_CONFIG_CSF_TEST}" =~ "_CUSTOM_CONFIG_CSF" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_CUSTOM_CONFIG_CSF=${_CUSTOM_CONFIG_CSF}" >> ${barCnf}
    fi
    _CUSTOM_CONFIG_SQL_TEST=$(grep _CUSTOM_CONFIG_SQL ${barCnf} 2>&1)
    if [[ "${_CUSTOM_CONFIG_SQL_TEST}" =~ "_CUSTOM_CONFIG_SQL" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_CUSTOM_CONFIG_SQL=${_CUSTOM_CONFIG_SQL}" >> ${barCnf}
    fi
    _CUSTOM_CONFIG_PHP56_TEST=$(grep _CUSTOM_CONFIG_PHP56 ${barCnf} 2>&1)
    if [[ "$_CUSTOM_CONFIG_PHP56_TEST" =~ "_CUSTOM_CONFIG_PHP56" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_CUSTOM_CONFIG_PHP56=$_CUSTOM_CONFIG_PHP56" >> ${barCnf}
    fi
    _CUSTOM_CONFIG_PHP55_TEST=$(grep _CUSTOM_CONFIG_PHP55 ${barCnf} 2>&1)
    if [[ "$_CUSTOM_CONFIG_PHP55_TEST" =~ "_CUSTOM_CONFIG_PHP55" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_CUSTOM_CONFIG_PHP55=$_CUSTOM_CONFIG_PHP55" >> ${barCnf}
    fi
    _CUSTOM_CONFIG_PHP54_TEST=$(grep _CUSTOM_CONFIG_PHP54 ${barCnf} 2>&1)
    if [[ "$_CUSTOM_CONFIG_PHP54_TEST" =~ "_CUSTOM_CONFIG_PHP54" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_CUSTOM_CONFIG_PHP54=$_CUSTOM_CONFIG_PHP54" >> ${barCnf}
    fi
    _CUSTOM_CONFIG_PHP53_TEST=$(grep _CUSTOM_CONFIG_PHP53 ${barCnf} 2>&1)
    if [[ "$_CUSTOM_CONFIG_PHP53_TEST" =~ "_CUSTOM_CONFIG_PHP53" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_CUSTOM_CONFIG_PHP53=$_CUSTOM_CONFIG_PHP53" >> ${barCnf}
    fi
    _SPEED_VALID_MAX_TEST=$(grep _SPEED_VALID_MAX ${barCnf} 2>&1)
    if [[ "${_SPEED_VALID_MAX_TEST}" =~ "_SPEED_VALID_MAX" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_SPEED_VALID_MAX=${_SPEED_VALID_MAX}" >> ${barCnf}
    fi
    _NGINX_DOS_LIMIT_TEST=$(grep _NGINX_DOS_LIMIT ${barCnf} 2>&1)
    if [[ "${_NGINX_DOS_LIMIT_TEST}" =~ "_NGINX_DOS_LIMIT" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_NGINX_DOS_LIMIT=${_NGINX_DOS_LIMIT}" >> ${barCnf}
    fi
    _CPU_SPIDER_RATIO_TEST=$(grep _CPU_SPIDER_RATIO ${barCnf} 2>&1)
    if [[ "${_CPU_SPIDER_RATIO_TEST}" =~ "_CPU_SPIDER_RATIO" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_CPU_SPIDER_RATIO=${_CPU_SPIDER_RATIO}" >> ${barCnf}
    fi
    _CPU_MAX_RATIO_TEST=$(grep _CPU_MAX_RATIO ${barCnf} 2>&1)
    if [[ "${_CPU_MAX_RATIO_TEST}" =~ "_CPU_MAX_RATIO" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_CPU_MAX_RATIO=${_CPU_MAX_RATIO}" >> ${barCnf}
    fi
    _CPU_CRIT_RATIO_TEST=$(grep _CPU_CRIT_RATIO ${barCnf} 2>&1)
    if [[ "${_CPU_CRIT_RATIO_TEST}" =~ "_CPU_CRIT_RATIO" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_CPU_CRIT_RATIO=${_CPU_CRIT_RATIO}" >> ${barCnf}
    fi
    _SYSTEM_UPGRADE_ONLY_TEST=$(grep _SYSTEM_UPGRADE_ONLY ${barCnf} 2>&1)
    if [[ "${_SYSTEM_UPGRADE_ONLY_TEST}" =~ "_SYSTEM_UPGRADE_ONLY" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_SYSTEM_UPGRADE_ONLY=${_SYSTEM_UPGRADE_ONLY}" >> ${barCnf}
    fi
    _AEGIR_UPGRADE_ONLY_TEST=$(grep _AEGIR_UPGRADE_ONLY ${barCnf} 2>&1)
    if [[ "${_AEGIR_UPGRADE_ONLY_TEST}" =~ "_AEGIR_UPGRADE_ONLY" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_AEGIR_UPGRADE_ONLY=${_AEGIR_UPGRADE_ONLY}" >> ${barCnf}
    fi
    _USE_MEMCACHED_TEST=$(grep _USE_MEMCACHED ${barCnf} 2>&1)
    if [[ "$_USE_MEMCACHED_TEST" =~ "_USE_MEMCACHED" ]] ; then
      sed -i "s/^_USE_MEMCACHED.*//g" ${barCnf}
      sed -i "/^$/d" ${barCnf}
    fi
    _CUSTOM_CONFIG_REDIS_TEST=$(grep _CUSTOM_CONFIG_REDIS ${barCnf} 2>&1)
    if [[ "${_CUSTOM_CONFIG_REDIS_TEST}" =~ "_CUSTOM_CONFIG_REDIS" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_CUSTOM_CONFIG_REDIS=${_CUSTOM_CONFIG_REDIS}" >> ${barCnf}
    fi
    _BUILD_FROM_SRC_TEST=$(grep _BUILD_FROM_SRC ${barCnf} 2>&1)
    if [[ "$_BUILD_FROM_SRC_TEST" =~ "_BUILD_FROM_SRC" ]] ; then
      sed -i "s/^_BUILD_FROM_SRC.*//g" ${barCnf}
      sed -i "/^$/d" ${barCnf}
    fi
    _NEWRELIC_KEY_TEST=$(grep _NEWRELIC_KEY ${barCnf} 2>&1)
    if [[ "${_NEWRELIC_KEY_TEST}" =~ "_NEWRELIC_KEY" ]] ; then
      _DO_NOTHING=YES
    else
      if [ ! -z "${_NEWRELIC_KEY}" ] ; then
        echo "_NEWRELIC_KEY=${_NEWRELIC_KEY}" >> ${barCnf}
      else
        if [ -e "/etc/newrelic/newrelic.cfg" ] ; then
          _NEWRELIC_KEY=$(grep license_key /etc/newrelic/newrelic.cfg 2>&1)
          _NEWRELIC_KEY=$(echo -n ${_NEWRELIC_KEY} | tr -d "\n" 2>&1)
          echo "_NEWRELIC_KEY=${_NEWRELIC_KEY}" >> ${barCnf}
          sed -i "s/license_key=//g" ${barCnf}
        fi
      fi
    fi
    _SCOUT_KEY_TEST=$(grep _SCOUT_KEY ${barCnf} 2>&1)
    if [[ "${_SCOUT_KEY_TEST}" =~ "_SCOUT_KEY" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_SCOUT_KEY=${_SCOUT_KEY}" >> ${barCnf}
    fi

    _USE_STOCK_TEST=$(grep _USE_STOCK ${barCnf} 2>&1)
    if [[ "$_USE_STOCK_TEST" =~ "_USE_STOCK" ]] ; then
      sed -i "s/^_USE_STOCK.*//g" ${barCnf}
      sed -i "/^$/d" ${barCnf}
    fi

    _HTTP_WILDCARD_TEST=$(grep _HTTP_WILDCARD ${barCnf} 2>&1)
    if [[ "$_HTTP_WILDCARD_TEST" =~ "_HTTP_WILDCARD" ]] ; then
      sed -i "s/^_HTTP_WILDCARD.*//g" ${barCnf}
      sed -i "/^$/d" ${barCnf}
    fi

    _CUSTOM_CONFIG_PHP52_TEST=$(grep _CUSTOM_CONFIG_PHP52 ${barCnf} 2>&1)
    if [[ "$_CUSTOM_CONFIG_PHP52_TEST" =~ "_CUSTOM_CONFIG_PHP52" ]] ; then
      sed -i "s/^_CUSTOM_CONFIG_PHP52.*//g" ${barCnf}
      sed -i "/^$/d" ${barCnf}
    fi

    _EXTRA_PACKAGES_TEST=$(grep _EXTRA_PACKAGES ${barCnf} 2>&1)
    if [[ "${_EXTRA_PACKAGES_TEST}" =~ "_EXTRA_PACKAGES" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_EXTRA_PACKAGES=${_EXTRA_PACKAGES}" >> ${barCnf}
    fi
    _PHP_EXTRA_CONF_TEST=$(grep _PHP_EXTRA_CONF ${barCnf} 2>&1)
    if [[ "${_PHP_EXTRA_CONF_TEST}" =~ "_PHP_EXTRA_CONF" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_PHP_EXTRA_CONF=\"${_PHP_EXTRA_CONF}\"" >> ${barCnf}
    fi
    _PHP_FPM_DENY_TEST=$(grep _PHP_FPM_DENY ${barCnf} 2>&1)
    if [[ "${_PHP_FPM_DENY_TEST}" =~ "_PHP_FPM_DENY" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_PHP_FPM_DENY=\"${_PHP_FPM_DENY}\"" >> ${barCnf}
    fi
    _STRONG_PASSWORDS_TEST=$(grep _STRONG_PASSWORDS ${barCnf} 2>&1)
    if [[ "${_STRONG_PASSWORDS_TEST}" =~ "_STRONG_PASSWORDS" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_STRONG_PASSWORDS=${_STRONG_PASSWORDS}" >> ${barCnf}
    fi
    _DB_BINARY_LOG_TEST=$(grep _DB_BINARY_LOG ${barCnf} 2>&1)
    if [[ "${_DB_BINARY_LOG_TEST}" =~ "_DB_BINARY_LOG" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_DB_BINARY_LOG=${_DB_BINARY_LOG}" >> ${barCnf}
    fi
    _INNODB_LOG_FILE_SIZE_TEST=$(grep _INNODB_LOG_FILE_SIZE ${barCnf} 2>&1)
    if [[ "${_INNODB_LOG_FILE_SIZE_TEST}" =~ "_INNODB_LOG_FILE_SIZE" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_INNODB_LOG_FILE_SIZE=${_INNODB_LOG_FILE_SIZE}" >> ${barCnf}
    fi
    _DB_ENGINE_TEST=$(grep _DB_ENGINE ${barCnf} 2>&1)
    if [[ "${_DB_ENGINE_TEST}" =~ "_DB_ENGINE" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_DB_ENGINE=${_DB_ENGINE}" >> ${barCnf}
    fi
    _REDIS_LISTEN_MODE_TEST=$(grep _REDIS_LISTEN_MODE ${barCnf} 2>&1)
    if [[ "${_REDIS_LISTEN_MODE_TEST}" =~ "_REDIS_LISTEN_MODE" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_REDIS_LISTEN_MODE=${_REDIS_LISTEN_MODE}" >> ${barCnf}
    fi
    _NGINX_LDAP_TEST=$(grep _NGINX_LDAP ${barCnf} 2>&1)
    if [[ "${_NGINX_LDAP_TEST}" =~ "_NGINX_LDAP" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_NGINX_LDAP=${_NGINX_LDAP}" >> ${barCnf}
    fi
    _NGINX_NAXSI_TEST=$(grep _NGINX_NAXSI ${barCnf} 2>&1)
    if [[ "${_NGINX_NAXSI_TEST}" =~ "_NGINX_NAXSI" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_NGINX_NAXSI=${_NGINX_NAXSI}" >> ${barCnf}
    fi
    _NGINX_SPDY_TEST=$(grep _NGINX_SPDY ${barCnf} 2>&1)
    if [[ "${_NGINX_SPDY_TEST}" =~ "_NGINX_SPDY" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_NGINX_SPDY=${_NGINX_SPDY}" >> ${barCnf}
    fi
    _NGINX_FORWARD_SECRECY_TEST=$(grep _NGINX_FORWARD_SECRECY ${barCnf} 2>&1)
    if [[ "${_NGINX_FORWARD_SECRECY_TEST}" =~ "_NGINX_FORWARD_SECRECY" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_NGINX_FORWARD_SECRECY=${_NGINX_FORWARD_SECRECY}" >> ${barCnf}
    fi
    _PHP_GEOS_TEST=$(grep _PHP_GEOS ${barCnf} 2>&1)
    if [[ "${_PHP_GEOS_TEST}" =~ "_PHP_GEOS" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_PHP_GEOS=${_PHP_GEOS}" >> ${barCnf}
    fi
    _PHP_MONGODB_TEST=$(grep _PHP_MONGODB ${barCnf} 2>&1)
    if [[ "${_PHP_MONGODB_TEST}" =~ "_PHP_MONGODB" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_PHP_MONGODB=${_PHP_MONGODB}" >> ${barCnf}
    fi
    _PHP_ZEND_OPCACHE_TEST=$(grep _PHP_ZEND_OPCACHE ${barCnf} 2>&1)
    if [[ "$_PHP_ZEND_OPCACHE_TEST" =~ "_PHP_ZEND_OPCACHE" ]] ; then
      sed -i "s/^_PHP_ZEND_OPCACHE.*//g" ${barCnf}
      sed -i "/^$/d" ${barCnf}
    fi
    _PERMISSIONS_FIX_TEST=$(grep _PERMISSIONS_FIX ${barCnf} 2>&1)
    if [[ "${_PERMISSIONS_FIX_TEST}" =~ "_PERMISSIONS_FIX" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_PERMISSIONS_FIX=${_PERMISSIONS_FIX}" >> ${barCnf}
    fi
    _MODULES_FIX_TEST=$(grep _MODULES_FIX ${barCnf} 2>&1)
    if [[ "${_MODULES_FIX_TEST}" =~ "_MODULES_FIX" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_MODULES_FIX=${_MODULES_FIX}" >> ${barCnf}
    fi
    _MODULES_SKIP_TEST=$(grep _MODULES_SKIP ${barCnf} 2>&1)
    if [[ "${_MODULES_SKIP_TEST}" =~ "_MODULES_SKIP" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_MODULES_SKIP=\"${_MODULES_SKIP}\"" >> ${barCnf}
    fi
    _SSL_FROM_SOURCES_TEST=$(grep _SSL_FROM_SOURCES ${barCnf} 2>&1)
    if [[ "${_SSL_FROM_SOURCES_TEST}" =~ "_SSL_FROM_SOURCES" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_SSL_FROM_SOURCES=${_SSL_FROM_SOURCES}" >> ${barCnf}
    fi
    _SSH_FROM_SOURCES_TEST=$(grep _SSH_FROM_SOURCES ${barCnf} 2>&1)
    if [[ "${_SSH_FROM_SOURCES_TEST}" =~ "_SSH_FROM_SOURCES" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_SSH_FROM_SOURCES=${_SSH_FROM_SOURCES}" >> ${barCnf}
    fi
    _RESERVED_RAM_TEST=$(grep _RESERVED_RAM ${barCnf} 2>&1)
    if [[ "${_RESERVED_RAM_TEST}" =~ "_RESERVED_RAM" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_RESERVED_RAM=${_RESERVED_RAM}" >> ${barCnf}
    fi
    _STRICT_BIN_PERMISSIONS_TEST=$(grep _STRICT_BIN_PERMISSIONS ${barCnf} 2>&1)
    if [[ "${_STRICT_BIN_PERMISSIONS_TEST}" =~ "_STRICT_BIN_PERMISSIONS" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_STRICT_BIN_PERMISSIONS=${_STRICT_BIN_PERMISSIONS}" >> ${barCnf}
    fi
    _DB_SERIES_TEST=$(grep _DB_SERIES ${barCnf} 2>&1)
    if [[ "${_DB_SERIES_TEST}" =~ "_DB_SERIES" ]] ; then
      _DO_NOTHING=YES
    else
      echo "_DB_SERIES=${_DB_SERIES}" >> ${barCnf}
    fi
    sleep 1
    _CHECK_HOST=$(uname -n 2>&1)
    sed -i "s/^_DB_SERVER=.*/_DB_SERVER=MariaDB/g" ${barCnf}
    if [ -e "/root/.auto.up.cnf" ] \
      || [ -e "/root/.host8.cnf" ] \
      || [[ "${_CHECK_HOST}" =~ ".host8." ]] \
      || [ "${_VMFAMILY}" = "VS" ] ; then
      if [ -e "/root/.debug.cnf" ] ; then
        _DO_NOTHING=YES
      else
        sed -i "s/^_AUTOPILOT=.*/_AUTOPILOT=YES/g"                                 ${barCnf}
        sed -i "s/^_DB_ENGINE=.*/_DB_ENGINE=InnoDB/g"                              ${barCnf}
        sed -i "s/^_DB_SERVER=.*/_DB_SERVER=MariaDB/g"                             ${barCnf}
        sed -i "s/^_DEBUG_MODE=.*/_DEBUG_MODE=NO/g"                                ${barCnf}
        sed -i "s/^_FORCE_GIT_MIRROR=.*/_FORCE_GIT_MIRROR=\"\"/g"                  ${barCnf}
        sed -i "s/^_LOCAL_DEBIAN_MIRROR=.*/_LOCAL_DEBIAN_MIRROR=ftp.debian.org/g"  ${barCnf}
        sed -i "s/^_MY_EMAIL=.*/_MY_EMAIL=\"notify\@omega8.cc\"/g"                 ${barCnf}
        sed -i "s/^_NGINX_FORWARD_SECRECY=.*/_NGINX_FORWARD_SECRECY=YES/g"         ${barCnf}
        sed -i "s/^_NGINX_SPDY=.*/_NGINX_SPDY=YES/g"                               ${barCnf}
        sed -i "s/^_SSH_FROM_SOURCES=.*/_SSH_FROM_SOURCES=YES/g"                   ${barCnf}
        sed -i "s/^_STRICT_BIN_PERMISSIONS=.*/_STRICT_BIN_PERMISSIONS=YES/g"       ${barCnf}
        sed -i "s/^_STRONG_PASSWORDS=.*/_STRONG_PASSWORDS=YES/g"                   ${barCnf}
        sed -i "s/^_DEBUG_MODE=.*/_DEBUG_MODE=NO/g"                                /root/.*.octopus.cnf &> /dev/null
        sed -i "s/^_FORCE_GIT_MIRROR=.*/_FORCE_GIT_MIRROR=\"\"/g"                  /root/.*.octopus.cnf &> /dev/null
        sed -i "s/^_STRONG_PASSWORDS=.*/_STRONG_PASSWORDS=YES/g"                   /root/.*.octopus.cnf &> /dev/null
        if [ -e "/root/.mstr.clstr.cnf" ] \
          || [ -e "/root/.wbhd.clstr.cnf" ] \
          || [ -e "/root/.dbhd.clstr.cnf" ] \
          || [ -e "/root/.test.clstr.cnf" ] ; then
          _DO_NOTHING=YES
        else
          sed -i "s/^_REDIS_LISTEN_MODE=.*/_REDIS_LISTEN_MODE=SOCKET/g"            ${barCnf}
        fi
        if [[ "${_CHECK_HOST}" =~ ".host8." ]] || [ "${_VMFAMILY}" = "VS" ] ; then
          if [ "${_VMFAMILY}" = "VS" ] ; then
            sed -i "s/^_CPU_CRIT_RATIO=.*/_CPU_CRIT_RATIO=3/g"                     ${barCnf}
            sed -i "s/^_CPU_MAX_RATIO=.*/_CPU_MAX_RATIO=2/g"                       ${barCnf}
            sed -i "s/^_CPU_SPIDER_RATIO=.*/_CPU_SPIDER_RATIO=1/g"                 ${barCnf}
          fi
          sed -i "s/^_MODULES_FIX=.*/_MODULES_FIX=YES/g"                           ${barCnf}
          sed -i "s/^_PERMISSIONS_FIX=.*/_PERMISSIONS_FIX=YES/g"                   ${barCnf}
          sed -i "s/^_SQL_CONVERT=.*/_SQL_CONVERT=NO/g"                            /root/.*.octopus.cnf &> /dev/null
          if [ -x "/opt/php55/bin/php" ] && [ -z "${_PHP_SINGLE_INSTALL}" ] ; then
            sed -i "s/^_PHP_CLI_VERSION=.*/_PHP_CLI_VERSION=5.5/g"                 ${barCnf}
            sed -i "s/^_PHP_FPM_VERSION=.*/_PHP_FPM_VERSION=5.5/g"                 ${barCnf}
          fi
        fi
      fi
    fi
    sed -i "/^$/d" ${barCnf}
    if [ "${_DEBUG_MODE}" = "YES" ] ; then
      echo " "
      while read line ; do
        echo "$line"
      done < ${barCnf}
      echo " "
    fi
    if [ -e "${barCnf}" ] ; then
      source ${barCnf}
    fi
    if [ "${_LOCAL_DEBIAN_MIRROR}" = "http.debian.net" ] ; then
      _LOCAL_DEBIAN_MIRROR=ftp.debian.org
      sed -i "s/^_LOCAL_DEBIAN_MIRROR=.*/_LOCAL_DEBIAN_MIRROR=ftp.debian.org/g"    ${barCnf}
    fi
    if [ "${_DB_SERIES}" = "10.0" ] ; then
      if [ -e "/root/.mstr.clstr.cnf" ] \
        || [ -e "/root/.wbhd.clstr.cnf" ] \
        || [ -e "/root/.dbhd.clstr.cnf" ] ; then
        _MARIADB_VERSION="${_GALERA_10_VRN}"
      else
        _MARIADB_VERSION="${_MARIADB_10_VRN}"
      fi
    else
      _DB_SERIES=5.5
      _MARIADB_VERSION="${_MARIADB_5_VRN}"
    fi
    _CHECK_HOST=$(uname -n 2>&1)
    if [[ "${_MY_EMAIL}" =~ "omega8.cc" ]] ; then
      if [ -e "/root/.auto.up.cnf" ] \
        || [ -e "/root/.host8.cnf" ] \
        || [[ "${_CHECK_HOST}" =~ ".host8." ]] \
        || [ "${_VMFAMILY}" = "VS" ] ; then
        if [ -e "/root/.debug.cnf" ] ; then
          _DO_NOTHING=YES
        else
          _DB_SERVER=MariaDB
        fi
      else
        msg "EXIT: Invalid e-mail address defined in the _MY_EMAIL variable"
        msg "EXIT: Bye (2)"
        clean_pid_exit
      fi
    fi

    ### Make sure that _PHP_SINGLE_INSTALL takes precedence
    if [ ! -z "${_PHP_SINGLE_INSTALL}" ] ; then
      if [ "${_PHP_SINGLE_INSTALL}" = "5.6" ] \
        || [ "${_PHP_SINGLE_INSTALL}" = "5.5" ] \
        || [ "${_PHP_SINGLE_INSTALL}" = "5.4" ] \
        || [ "${_PHP_SINGLE_INSTALL}" = "5.3" ] ; then
        _PHP_MULTI_INSTALL=${_PHP_SINGLE_INSTALL}
        _PHP_CLI_VERSION=${_PHP_SINGLE_INSTALL}
        _PHP_FPM_VERSION=${_PHP_SINGLE_INSTALL}
        sed -i "s/^_PHP_MULTI_INSTALL=.*/_PHP_MULTI_INSTALL=${_PHP_SINGLE_INSTALL}/g" ${barCnf}
        sed -i "s/^_PHP_CLI_VERSION=.*/_PHP_CLI_VERSION=${_PHP_SINGLE_INSTALL}/g"     ${barCnf}
        sed -i "s/^_PHP_FPM_VERSION=.*/_PHP_FPM_VERSION=${_PHP_SINGLE_INSTALL}/g"     ${barCnf}
        sed -i "s/^_PHP_CLI_VERSION=.*/_PHP_CLI_VERSION=5.2/g" /root/.*.octopus.cnf &> /dev/null
        sed -i "s/^_PHP_FPM_VERSION=.*/_PHP_FPM_VERSION=5.2/g" /root/.*.octopus.cnf &> /dev/null
        if [ -e "/data/disk" ] && [ -e "/data/conf/global.inc" ] ; then
          for Ctrl in `find /data/disk/*/log -maxdepth 0 -mindepth 0 | sort`; do
            echo ${_PHP_SINGLE_INSTALL} > $Ctrl/fpm.txt
            echo ${_PHP_SINGLE_INSTALL} > $Ctrl/cli.txt
            ### msg "INFO: Forced PHP ${_PHP_SINGLE_INSTALL} in $Ctrl"
          done
          for Ctrl in `find /data/disk/*/static/control \
            -maxdepth 0 -mindepth 0 | sort`; do
            echo 5.2 > $Ctrl/fpm.info
            echo 5.2 > $Ctrl/cli.info
            ### msg "INFO: Forced PHP ${_PHP_SINGLE_INSTALL} in $Ctrl"
          done
          for Ctrl in `find /data/disk/*/.drush \
            -maxdepth 0 -mindepth 0 | sort`; do
            rm -f $Ctrl/.ctrl.php*
            ### msg "INFO: Forced PHP ${_PHP_SINGLE_INSTALL} in $Ctrl"
          done
        fi
      fi
    fi

    _NGX_FORCE_REINSTALL_TEST=$(grep _NGX_FORCE_REINSTALL ${barCnf} 2>&1)
    if [[ "${_NGX_FORCE_REINSTALL_TEST}" =~ "_NGX_FORCE_REINSTALL" ]] ; then
      sed -i "s/^_NGX_FORCE_REINSTALL.*//g" ${barCnf}
      sed -i "/^$/d" ${barCnf}
    fi
    _PHP_FORCE_REINSTALL_TEST=$(grep _PHP_FORCE_REINSTALL ${barCnf} 2>&1)
    if [[ "${_PHP_FORCE_REINSTALL_TEST}" =~ "_PHP_FORCE_REINSTALL" ]] ; then
      sed -i "s/^_PHP_FORCE_REINSTALL.*//g" ${barCnf}
      sed -i "/^$/d" ${barCnf}
    fi
    _SQL_FORCE_REINSTALL_TEST=$(grep _SQL_FORCE_REINSTALL ${barCnf} 2>&1)
    if [[ "${_SQL_FORCE_REINSTALL_TEST}" =~ "_SQL_FORCE_REINSTALL" ]] ; then
      sed -i "s/^_SQL_FORCE_REINSTALL.*//g" ${barCnf}
      sed -i "/^$/d" ${barCnf}
    fi
    _SSL_FORCE_REINSTALL_TEST=$(grep _SSL_FORCE_REINSTALL ${barCnf} 2>&1)
    if [[ "${_SSL_FORCE_REINSTALL_TEST}" =~ "_SSL_FORCE_REINSTALL" ]] ; then
      sed -i "s/^_SSL_FORCE_REINSTALL.*//g" ${barCnf}
      sed -i "/^$/d" ${barCnf}
    fi
    _SSH_FORCE_REINSTALL_TEST=$(grep _SSH_FORCE_REINSTALL ${barCnf} 2>&1)
    if [[ "$_SSH_FORCE_REINSTALL_TEST" =~ "_SSH_FORCE_REINSTALL" ]] ; then
      sed -i "s/^_SSH_FORCE_REINSTALL.*//g" ${barCnf}
      sed -i "/^$/d" ${barCnf}
    fi
    _GIT_FORCE_REINSTALL_TEST=$(grep _GIT_FORCE_REINSTALL ${barCnf} 2>&1)
    if [[ "$_GIT_FORCE_REINSTALL_TEST" =~ "_GIT_FORCE_REINSTALL" ]] ; then
      sed -i "s/^_GIT_FORCE_REINSTALL.*//g" ${barCnf}
      sed -i "/^$/d" ${barCnf}
    fi
    _FULL_FORCE_REINSTALL_TEST=$(grep _FULL_FORCE_REINSTALL ${barCnf} 2>&1)
    if [[ "${_FULL_FORCE_REINSTALL_TEST}" =~ "_FULL_FORCE_REINSTALL" ]] ; then
      sed -i "s/^_FULL_FORCE_REINSTALL.*//g" ${barCnf}
      sed -i "/^$/d" ${barCnf}
    fi
    if [ "${_STATUS}" = "INIT" ] ; then
      if prompt_yes_no "Do you want to proceed with the install?" ; then
        true
      else
        echo "Installation aborted by you"
        clean_pid_exit
      fi
    else
      echo " "
      if prompt_yes_no "Do you want to proceed with the upgrade?" ; then
        true
      else
        echo "Upgrade aborted by you"
        clean_pid_exit
      fi
    fi
  fi
}
#
# Running aptitude full-upgrade.
run_aptitude_full_upgrade() {
  msg "INFO: Running aptitude full-upgrade, please wait..."
  _BROKEN_KEYRING_TEST=$(apt-get update 2>&1)
  if [[ "$_BROKEN_KEYRING_TEST" =~ "signatures were invalid" ]] \
    || [[ "$_BROKEN_KEYRING_TEST" =~ "GPG error" ]]; then
    msg "WARN: Installed keyring is broken, forced reinstall required"
    if [ "$_THIS_OS" = "Debian" ] ; then
      st_runner "apt-get install debian-keyring ${forCer}" 2> /dev/null
      st_runner "apt-get install debian-archive-keyring ${forCer}" 2> /dev/null
    else
      st_runner "apt-get install ubuntu-keyring ${forCer}" 2> /dev/null
    fi
  fi
  st_runner "dpkg --configure --force-all -a" 2> /dev/null
  st_runner "aptitude update -y" &> /dev/null
  _THIS_DB_SERVER_TEST=$(mysql -V 2>&1)
  if [[ "$_THIS_DB_SERVER_TEST" =~ "MariaDB" ]] \
    && [ ! -e "${pthLog}/fixed-mytop-mariadb.log" ] ; then
    st_runner "aptitude remove mytop -y" &> /dev/null
    st_runner "apt-get purge mytop -y --force-yes -qq" &> /dev/null
    rm -f /usr/bin/mytop
    touch ${pthLog}/fixed-mytop-mariadb.log
  fi
  st_runner "aptitude full-upgrade -f -y -q \
    -o Dpkg::Options::=--force-confdef \
    -o Dpkg::Options::=--force-confold" 2> /dev/null
  if [[ "$_THIS_DB_SERVER_TEST" =~ "MariaDB" ]] \
    && [ -e "${pthLog}/fixed-mytop-mariadb.log" ] ; then
    st_runner "$_INSTAPP mytop" 2> /dev/null
  fi
}
#
# Running silent aptitude full-upgrade.
run_silent_aptitude_full_upgrade() {
  msg "INFO: Running silent aptitude full-upgrade, please wait..."
  _BROKEN_KEYRING_TEST=$(apt-get update 2>&1)
  if [[ "$_BROKEN_KEYRING_TEST" =~ "signatures were invalid" ]] \
    || [[ "$_BROKEN_KEYRING_TEST" =~ "GPG error" ]]; then
    msg "WARN: Installed keyring is broken, forced reinstall required"
    if [ "$_THIS_OS" = "Debian" ] ; then
      mrun "apt-get install debian-keyring ${forCer}" 2> /dev/null
      mrun "apt-get install debian-archive-keyring ${forCer}" 2> /dev/null
    else
      mrun "apt-get install ubuntu-keyring ${forCer}" 2> /dev/null
    fi
  fi
  mrun "dpkg --configure --force-all -a" 2> /dev/null
  mrun "apt-get update -y" 2> /dev/null
  mrun "dpkg --configure --force-all -a" 2> /dev/null
  mrun "apt-get install aptitude ${forCer}" 2> /dev/null
  mrun "apt-get install util-linux ${forCer}" 2> /dev/null
  mrun "apt-get install libmagickwand-dev ${forCer}" 2> /dev/null
  mrun "aptitude full-upgrade -f -y -q -o Dpkg::Options::=--force-confdef \
    -o Dpkg::Options::=--force-confold --allow-unauthenticated" 2> /dev/null
}
#
# Install IonCube.
install_ioncube() {
  ###--------------------###
  if [ ! -e "${pthLog}/ioncube-${_IONCUBE_VRN}.log" ] \
    || [ ! -e "/usr/local/ioncube" ] \
    || [ "${_FULL_FORCE_REINSTALL}" = "YES" ] ; then
    mkdir -p /usr/local/ioncube
    _X86_64_TEST=$(uname -m 2>&1)
    if [ "$_X86_64_TEST" = "x86_64" ] ; then
      SYSTEMARCH="x86_64"
      msg "INFO: Installing IonCube $SYSTEMARCH version for PHP..."
      cd /var/opt
      rm -f -r ioncube_loaders*
      get_dev_arch "ioncube_loaders_lin_x86-64.tar.gz"
    else
      SYSTEMARCH="x86"
      msg "INFO: Installing IonCube $SYSTEMARCH version for PHP..."
      cd /var/opt
      rm -f -r ioncube_loaders*
      get_dev_arch "ioncube_loaders_lin_x86.tar.gz"
    fi
    rm -f /usr/local/ioncube/*
    cp -af /var/opt/ioncube/* /usr/local/ioncube/ &> /dev/null
    touch ${pthLog}/ioncube-${_IONCUBE_VRN}.log
  fi
}
#
# Install PHP extensions.
install_php_extensions() {
  ###--------------------###
  if [ "$1" != "56" ] && [ "$1" != "55" ] ; then
    msg "INFO: Installing Zend OPcache for PHP $_T_PHP_VRN..."
    cd /var/opt
    rm -f -r zendopcache*
    get_dev_src "zendopcache-${_OPCACHE_VRN}.tar.gz"
    cd /var/opt/zendopcache-${_OPCACHE_VRN}
    st_runner "$_T_PHP_PTH/phpize" 2> /dev/null
    st_runner "sh ./configure --with-php-config=$_T_PHP_CFG" 2> /dev/null
    st_runner "make --quiet" 2> /dev/null
    st_runner "make --quiet install" 2> /dev/null
    touch ${pthLog}/zendopcache-${_OPCACHE_VRN}-$_T_PHP_VRN.log
  fi
  ###--------------------###
  msg "INFO: Installing PhpRedis for PHP $_T_PHP_VRN..."
  cd /var/opt
  rm -f -r phpredis*
  get_dev_src "phpredis-${_PHPREDIS_VRN}.tar.gz"
  cd /var/opt/phpredis
  st_runner "$_T_PHP_PTH/phpize" 2> /dev/null
  st_runner "sh ./configure --with-php-config=$_T_PHP_CFG" 2> /dev/null
  st_runner "make --quiet" 2> /dev/null
  st_runner "make --quiet install" 2> /dev/null
  touch ${pthLog}/phpredis-${_PHPREDIS_VRN}-$_T_PHP_VRN.log
  ###--------------------###
  msg "INFO: Installing UploadProgress for PHP $_T_PHP_VRN..."
  cd /var/opt
  rm -f -r uploadprogress*
  get_dev_src "uploadprogress-${_UPROGRESS_VRN}.tgz"
  cd /var/opt/uploadprogress-${_UPROGRESS_VRN}
  st_runner "$_T_PHP_PTH/phpize" 2> /dev/null
  st_runner "sh ./configure --with-php-config=$_T_PHP_CFG" 2> /dev/null
  st_runner "make --quiet" 2> /dev/null
  st_runner "make --quiet install" 2> /dev/null
  touch ${pthLog}/uploadprogress-${_UPROGRESS_VRN}-$_T_PHP_VRN.log
  ###--------------------###
  msg "INFO: Installing JSMin for PHP $_T_PHP_VRN..."
  cd /var/opt
  rm -f -r pecl-jsmin*
  get_dev_src "pecl-jsmin-0.1.1.tar.gz"
  cd /var/opt/pecl-jsmin-0.1.1
  st_runner "$_T_PHP_PTH/phpize" 2> /dev/null
  st_runner "sh ./configure --with-php-config=$_T_PHP_CFG" 2> /dev/null
  st_runner "make --quiet" 2> /dev/null
  st_runner "make --quiet install" 2> /dev/null
  touch ${pthLog}/php-pecl-jsmin-$_T_PHP_VRN.log
  ###--------------------###
  if [ "${_PHP_GEOS}" = "YES" ] || [[ "${_XTRAS_LIST}" =~ "GEO" ]] ; then
    if [ "$1" = "53" ] ; then
      msg "INFO: Installing GEOS extension for PHP $_T_PHP_VRN, please wait..."
      if [ ! -e "${pthLog}/geos-${_X_VERSION}.log" ] ; then
        st_runner "apt-get update -y --force-yes" &> /dev/null
        st_runner "$_INSTAPP libgeos-dev libgeos-c1 phpunit" 2> /dev/null
        touch ${pthLog}/geos-${_X_VERSION}.log
      fi
      cd /var/opt
      rm -f -r geos*
      get_dev_src "geos-${_GEOS_VRN}.tar.bz2"
      cd geos-${_GEOS_VRN}
      _PHP_V="56 55 54 53"
      for e in $_PHP_V; do
        if [ "$1" = "${e}" ] ; then
          find . -type f -print0 \
            | xargs -0 sed -i 's/\/usr\/local/\/opt\/php${e}/g' &> /dev/null
        fi
      done
      st_runner "sh ./configure --enable-php" 2> /dev/null
      st_runner "make --quiet" 2> /dev/null
      st_runner "make --quiet install" 2> /dev/null
      touch ${pthLog}/php-geos-${_GEOS_VRN}-$_T_PHP_VRN.log
    fi
  fi
  ###--------------------###
  if [ "${_PHP_MONGODB}" = "YES" ] || [[ "${_XTRAS_LIST}" =~ "MNG" ]] ; then
    if [ "$1" = "53" ] ; then
      msg "INFO: Installing MongoDB driver for PHP $_T_PHP_VRN..."
      cd /var/opt
      rm -f -r mongo*
      get_dev_src "mongo-${_MONGO_VRN}.tgz"
      cd /var/opt/mongo-${_MONGO_VRN}
      st_runner "$_T_PHP_PTH/phpize" 2> /dev/null
      st_runner "sh ./configure --with-php-config=$_T_PHP_CFG" 2> /dev/null
      st_runner "make --quiet" 2> /dev/null
      st_runner "make --quiet install" 2> /dev/null
      touch ${pthLog}/php-mongo-${_MONGO_VRN}-$_T_PHP_VRN.log
    fi
  fi
  ###--------------------###
  msg "INFO: Installing Imagick for PHP $_T_PHP_VRN..."
  if [ ! -e "${pthLog}/libmagickwand-dev-${_IMAGICK_VRN}-rebuild.log" ] ; then
    mrun "apt-get install libmagickwand-dev ${forCer}" 2> /dev/null
    touch ${pthLog}/libmagickwand-dev-${_IMAGICK_VRN}-rebuild.log
  fi
  cd /var/opt
  rm -f -r imagick*
  get_dev_src "imagick-${_IMAGICK_VRN}.tgz"
  cd /var/opt/imagick-${_IMAGICK_VRN}
  st_runner "$_T_PHP_PTH/phpize" 2> /dev/null
  st_runner "sh ./configure --with-php-config=$_T_PHP_CFG" 2> /dev/null
  st_runner "make --quiet" 2> /dev/null
  st_runner "make --quiet install" 2> /dev/null
  touch ${pthLog}/imagick-${_IMAGICK_VRN}-$_T_PHP_VRN.log
  ###--------------------###
  msg "INFO: Installing MailParse for PHP $_T_PHP_VRN..."
  cd /var/opt
  rm -f -r mailparse*
  get_dev_src "mailparse-${_MAILPARSE_VRN}.tgz"
  cd /var/opt/mailparse-${_MAILPARSE_VRN}
  st_runner "$_T_PHP_PTH/phpize" 2> /dev/null
  st_runner "sh ./configure --with-php-config=$_T_PHP_CFG" 2> /dev/null
  st_runner "make --quiet" 2> /dev/null
  st_runner "make --quiet install" 2> /dev/null
  touch ${pthLog}/mailparse-${_MAILPARSE_VRN}-$_T_PHP_VRN.log
}
#
# Update extensions for PHP built from sources.
update_php_extensions() {
  ###--------------------###
  if [ "$1" != "56" ] && [ "$1" != "55" ] ; then
    if [ ! -e "${pthLog}/zendopcache-${_OPCACHE_VRN}-$_T_PHP_VRN.log" ] ; then
      msg "INFO: Installing Zend OPcache upgrade for PHP $_T_PHP_VRN..."
      cd /var/opt
      rm -f -r zendopcache*
      get_dev_src "zendopcache-${_OPCACHE_VRN}.tar.gz"
      cd /var/opt/zendopcache-${_OPCACHE_VRN}
      st_runner "$_T_PHP_PTH/phpize" 2> /dev/null
      st_runner "sh ./configure --with-php-config=$_T_PHP_CFG" 2> /dev/null
      st_runner "make --quiet" 2> /dev/null
      st_runner "make --quiet install" 2> /dev/null
      touch ${pthLog}/zendopcache-${_OPCACHE_VRN}-$_T_PHP_VRN.log
    fi
  fi
  ###--------------------###
  if [ ! -e "${pthLog}/phpredis-${_PHPREDIS_VRN}-$_T_PHP_VRN.log" ] ; then
    msg "INFO: Installing PhpRedis upgrade for PHP $_T_PHP_VRN..."
    cd /var/opt
    rm -f -r phpredis*
    get_dev_src "phpredis-${_PHPREDIS_VRN}.tar.gz"
    cd /var/opt/phpredis
    st_runner "$_T_PHP_PTH/phpize" 2> /dev/null
    st_runner "sh ./configure --with-php-config=$_T_PHP_CFG" 2> /dev/null
    st_runner "make --quiet" 2> /dev/null
    st_runner "make --quiet install" 2> /dev/null
    touch ${pthLog}/phpredis-${_PHPREDIS_VRN}-$_T_PHP_VRN.log
  fi
  ###--------------------###
  if [ ! -e "${pthLog}/uploadprogress-${_UPROGRESS_VRN}-$_T_PHP_VRN.log" ] ; then
    msg "INFO: Installing UploadProgress upgrade for PHP $_T_PHP_VRN..."
    cd /var/opt
    rm -f -r uploadprogress*
    get_dev_src "uploadprogress-${_UPROGRESS_VRN}.tgz"
    cd /var/opt/uploadprogress-${_UPROGRESS_VRN}
    st_runner "$_T_PHP_PTH/phpize" 2> /dev/null
    st_runner "sh ./configure --with-php-config=$_T_PHP_CFG" 2> /dev/null
    st_runner "make --quiet" 2> /dev/null
    st_runner "make --quiet install" 2> /dev/null
    touch ${pthLog}/uploadprogress-${_UPROGRESS_VRN}-$_T_PHP_VRN.log
  fi
  ###--------------------###
  if [ ! -e "${pthLog}/php-pecl-jsmin-$_T_PHP_VRN.log" ] ; then
    msg "INFO: Installing JSMin upgrade for PHP $_T_PHP_VRN..."
    cd /var/opt
    rm -f -r pecl-jsmin*
    get_dev_src "pecl-jsmin-0.1.1.tar.gz"
    cd /var/opt/pecl-jsmin-0.1.1
    st_runner "$_T_PHP_PTH/phpize" 2> /dev/null
    st_runner "sh ./configure --with-php-config=$_T_PHP_CFG" 2> /dev/null
    st_runner "make --quiet" 2> /dev/null
    st_runner "make --quiet install" 2> /dev/null
    touch ${pthLog}/php-pecl-jsmin-$_T_PHP_VRN.log
  fi
  ###--------------------###
  if [ "$1" = "53" ] \
    && [ ! -e "${pthLog}/php-geos-${_GEOS_VRN}-$_T_PHP_VRN.log" ] ; then
    if [ "${_PHP_GEOS}" = "YES" ] || [[ "${_XTRAS_LIST}" =~ "GEO" ]] ; then
      msg "INFO: Installing GEOS upgrade for PHP $_T_PHP_VRN, please wait..."
      if [ ! -e "${pthLog}/geos-${_X_VERSION}.log" ] ; then
        st_runner "apt-get update -y --force-yes" &> /dev/null
        st_runner "$_INSTAPP libgeos-dev libgeos-c1 phpunit" 2> /dev/null
        touch ${pthLog}/geos-${_X_VERSION}.log
      fi
      cd /var/opt
      rm -f -r geos*
      get_dev_src "geos-${_GEOS_VRN}.tar.bz2"
      cd geos-${_GEOS_VRN}
      _PHP_V="56 55 54 53"
      for e in $_PHP_V; do
        if [ "$1" = "${e}" ] ; then
          find . -type f -print0 \
            | xargs -0 sed -i 's/\/usr\/local/\/opt\/php${e}/g' &> /dev/null
        fi
      done
      st_runner "sh ./configure --enable-php" 2> /dev/null
      st_runner "make --quiet" 2> /dev/null
      st_runner "make --quiet install" 2> /dev/null
      touch ${pthLog}/php-geos-${_GEOS_VRN}-$_T_PHP_VRN.log
    fi
  fi
  ###--------------------###
  if [ "$1" = "53" ] \
    && [ ! -e "${pthLog}/php-mongo-${_MONGO_VRN}-$_T_PHP_VRN.log" ] ; then
    if [ "${_PHP_MONGODB}" = "YES" ] || [[ "${_XTRAS_LIST}" =~ "MNG" ]] ; then
      msg "INFO: Installing MongoDB PHP driver upgrade for PHP $_T_PHP_VRN..."
      cd /var/opt
      rm -f -r mongo*
      get_dev_src "mongo-${_MONGO_VRN}.tgz"
      cd /var/opt/mongo-${_MONGO_VRN}
      st_runner "$_T_PHP_PTH/phpize" 2> /dev/null
      st_runner "sh ./configure --with-php-config=$_T_PHP_CFG" 2> /dev/null
      st_runner "make --quiet" 2> /dev/null
      st_runner "make --quiet install" 2> /dev/null
      touch ${pthLog}/php-mongo-${_MONGO_VRN}-$_T_PHP_VRN.log
    fi
  fi
  ###--------------------###
  if [ ! -e "${pthLog}/imagick-${_IMAGICK_VRN}-$_T_PHP_VRN.log" ] ; then
    msg "INFO: Installing Imagick upgrade for PHP $_T_PHP_VRN..."
    if [ ! -e "${pthLog}/libmagickwand-dev-${_IMAGICK_VRN}-rebuild.log" ] ; then
      mrun "apt-get install libmagickwand-dev ${forCer}" 2> /dev/null
      touch ${pthLog}/libmagickwand-dev-${_IMAGICK_VRN}-rebuild.log
    fi
    cd /var/opt
    rm -f -r imagick*
    get_dev_src "imagick-${_IMAGICK_VRN}.tgz"
    cd /var/opt/imagick-${_IMAGICK_VRN}
    st_runner "$_T_PHP_PTH/phpize" 2> /dev/null
    st_runner "sh ./configure --with-php-config=$_T_PHP_CFG" 2> /dev/null
    st_runner "make --quiet" 2> /dev/null
    st_runner "make --quiet install" 2> /dev/null
    touch ${pthLog}/imagick-${_IMAGICK_VRN}-$_T_PHP_VRN.log
  fi
  ###--------------------###
  if [ ! -e "${pthLog}/mailparse-${_MAILPARSE_VRN}-$_T_PHP_VRN.log" ] ; then
    msg "INFO: Installing MailParse upgrade for PHP $_T_PHP_VRN..."
    cd /var/opt
    rm -f -r mailparse*
    get_dev_src "mailparse-${_MAILPARSE_VRN}.tgz"
    cd /var/opt/mailparse-${_MAILPARSE_VRN}
    st_runner "$_T_PHP_PTH/phpize" 2> /dev/null
    st_runner "sh ./configure --with-php-config=$_T_PHP_CFG" 2> /dev/null
    st_runner "make --quiet" 2> /dev/null
    st_runner "make --quiet install" 2> /dev/null
    touch ${pthLog}/mailparse-${_MAILPARSE_VRN}-$_T_PHP_VRN.log
  fi
}
#
# Install modern PHP version
install_php_multi() {
  if [ "$1" = "55" ] || [ "$1" = "56" ] ; then
    _PHP_EXTRA=$(echo "${_PHP_EXTRA}" | sed "s/--with-curlwrappers//g" 2>&1)
  fi
  ###--------------------###
  msg "INFO: Installing PHP $_PHP_VERSION"
  msg "NOTE! This step may take longer than 8 minutes, please wait..."
  cd /var/opt
  rm -f -r php*
  get_dev_src "php-$_PHP_VERSION.tar.bz2"
  msg "INFO: Installing PHP $_PHP_VERSION part 1/3"
  cd /var/opt/php-$_PHP_VERSION
  st_runner "sh ./buildconf --force" 2> /dev/null
  if [ "$_REL_VERSION" = "wheezy" ] \
    || [ "$_REL_VERSION" = "trusty" ] \
    || [ "$_REL_VERSION" = "precise" ] ; then
    patchFile="disable_SSLv2_for_openssl_1_0_0.patch"
    patch -p1 < ${pthBld}/aegir/patches/${patchFile} &> /dev/null
  fi
  ### cd sapi/fpm/fpm
  ### patch -p1 < ${pthBld}/aegir/patches/fpm_main.c.patch &> /dev/null
  ### cd /var/opt/php-$_PHP_VERSION
  msg "INFO: Installing PHP $_PHP_VERSION part 2/3"
  if [ "$1" = "55" ] || [ "$1" = "56" ] ; then
    _PHP_EXTRA="${_PHP_EXTRA} --enable-opcache"
  fi
  st_runner "sh ./configure \
                --quiet \
                --prefix=/opt/php$1 \
                --enable-fpm \
                --enable-bcmath \
                --enable-calendar \
                --enable-exif \
                --enable-ftp \
                --enable-gd-native-ttf \
                --enable-mbstring \
                --enable-pcntl \
                --enable-soap \
                --enable-zip \
                --with-curl \
                --with-fpm-group=www-data \
                --with-fpm-user=www-data \
                --with-freetype-dir=/usr \
                --with-gd \
                --with-imap \
                --with-imap-ssl \
                --with-jpeg-dir=/usr \
                --with-kerberos \
                --with-mcrypt \
                --with-mysql-sock=/var/run/mysqld/mysqld.sock \
                --with-mysql=/usr \
                --with-mysqli=/usr/bin/mysql_config \
                --with-openssl \
                --with-pdo-mysql=/usr \
                --with-pear \
                --with-png-dir=/usr \
                --with-t1lib=/usr \
                --with-xmlrpc \
                --with-xsl \
                --with-zlib \
                ${_PHP_EXTRA}" 2> /dev/null
  msg "INFO: Installing PHP $_PHP_VERSION part 3/3"
  sed -i "s/^EXTRA_LIBS = -lcrypt/EXTRA_LIBS = -llber -lcrypt/g" Makefile 2> /dev/null
  st_runner "make --quiet" 2> /dev/null
  st_runner "make --quiet install" 2> /dev/null
  if [ -f "/usr/bin/php" ] && [ -f "/opt/php$1/bin/php" ] ; then
    mv -f /usr/bin/php /usr/bin/php-old &> /dev/null
    ln -sf /opt/php$1/bin/php /usr/bin/php
    if [ -f "/usr/bin/phpize" ] \
      && [ -f "/opt/php$1/bin/phpize" ] \
      && [ ! -L "/opt/php$1/bin/phpize" ] ; then
      mv -f /usr/bin/phpize /usr/bin/phpize-old &> /dev/null
      ln -sf /opt/php$1/bin/phpize /usr/bin/phpize
    fi
  fi
  _T_PHP_VRN="$_PHP_VERSION"
  _T_PHP_PTH="/opt/php$1/bin"
  _T_PHP_CFG="/opt/php$1/bin/php-config"
  install_php_extensions "$1"
  touch ${pthLog}/installed-$_PHP_VERSION-$_MARIADB_VERSION-MariaDB.log
  rm -f /etc/init.d/php$1-fpm*
  cp -af ${locCnf}/php$1-fpm /etc/init.d/php$1-fpm
  chmod 755 /etc/init.d/php$1-fpm
  st_runner "update-rc.d php$1-fpm defaults" &> /dev/null
}
#
# Update PHP extensions
update_php_multi() {
  _T_PHP_VRN="$_PHP_VERSION"
  _T_PHP_PTH="/opt/php$1/bin"
  _T_PHP_CFG="/opt/php$1/bin/php-config"
  update_php_extensions "$1"
}
#
# Install latest Git.
do_install_latest_git() {
  if [ ! -e "${pthLog}/git-${_GIT_VRN}-${_X_VERSION}-${_NOW}.log" ] ; then
    msg "INFO: Installing Git ${_GIT_VRN} from sources, please wait..."
    cd /var/opt
    rm -f -r git*
    get_dev_src "git-${_GIT_VRN}.tar.gz"
    cd /var/opt/git-${_GIT_VRN}
    st_runner "make configure" 2> /dev/null
    st_runner "sh ./configure --without-tcltk --quiet" 2> /dev/null
    st_runner "make --quiet" 2> /dev/null
    st_runner "make --quiet install" 2> /dev/null
    mv -f /usr/bin/git /usr/bin/git-old
    ln -sf /usr/local/bin/git /usr/bin/git
    cd /var/opt
    touch ${pthLog}/git-${_GIT_VRN}-${_X_VERSION}-${_NOW}.log
  else
    if [ "${_DEBUG_MODE}" = "YES" ] ; then
      msg "INFO: Git ${_GIT_VRN} already installed from sources, OK"
    fi
  fi
}
#
# Check if latest Git should be installed.
check_install_latest_git() {
  _GIT_INSTALLED=$(git --version 2>&1)
  if [[ "$_GIT_INSTALLED" =~ "git version 1.9.1" ]] ; then
    _GIT_FORCE_REINSTALL=YES
  fi
  if [[ "${_XTRAS_LIST}" =~ "GIT" ]] \
    || [ "$_REL_VERSION" = "lenny" ] \
    || [ "$_REL_VERSION" = "lucid" ] \
    || [ "$_SSB_SRC" = "YES" ] \
    || [ "$_GIT_FORCE_REINSTALL" = "YES" ] ; then
    _GIT_TEST=$(git --version 2>&1)
    if [[ "$_GIT_TEST" =~ "git version ${_GIT_VRN}" ]] ; then
      if [ "${_FULL_FORCE_REINSTALL}" = "YES" ] \
        || [ "$_GIT_FORCE_REINSTALL" = "YES" ] ; then
        do_install_latest_git
      fi
    else
      do_install_latest_git
    fi
  fi
}
#
# Check apt updates.
check_apt_updates() {
  for Update in `/usr/bin/apt-get -q -y --force-yes --allow-unauthenticated \
    -s dist-upgrade | grep ^Inst | cut -d\  -f2 | sort`
  do
    case $Update in
      *libcurl*)    _UP_CRL=YES ;;
      *libmysql*)   _UP_PHP=YES ;;
      *libssl*)     _UP_PHP=YES ;;
      *linux-*)     _UP_LNX=YES ;;
      *mariadb*)    _UP_PHP=YES ;;
      *newrelic*)   _UP_NRC=YES ;;
      *openjdk*)    _UP_JDK=YES ;;
      *openssl*)    _YP_PHP=YES ;;
      *)  ;;
    esac
  done
  if [ "$_YP_PHP" = "YES" ] ; then
    if [ "${_NGINX_SPDY}" = "YES" ] \
      || [ "${_SSL_FROM_SOURCES}" = "YES" ] \
      || [ "${_NGINX_FORWARD_SECRECY}" = "YES" ] ; then
      if [ "$_REL_VERSION" = "wheezy" ] \
        || [ "$_REL_VERSION" = "trusty" ] \
        || [ "$_REL_VERSION" = "precise" ] ; then
        _UP_PHP=YES
      else
        _UP_PHP=NO
      fi
    else
      _UP_PHP=YES
    fi
  fi
  if [ "$_UP_CRL" = "YES" ] ; then
    _UP_PHP=YES
  fi
}
#
# Generate provision backend db_passwd.
provision_backend_dbpass_generate() {
  _ESC_APASS=""
  _LEN_APASS=0
  if [ "${_STRONG_PASSWORDS}" = "YES" ] ; then
    _PWD_CHARS=32
  elif [ "${_STRONG_PASSWORDS}" = "NO" ] ; then
    _PWD_CHARS=8
  else
    _STRONG_PASSWORDS=${_STRONG_PASSWORDS//[^0-9]/}
    if [ ! -z "${_STRONG_PASSWORDS}" ] && [ ${_STRONG_PASSWORDS} -gt "8" ] ; then
      _PWD_CHARS="${_STRONG_PASSWORDS}"
    else
      _PWD_CHARS=8
    fi
    if [ ! -z "$_PWD_CHARS" ] && [ $_PWD_CHARS -gt "128" ] ; then
      _PWD_CHARS=128
    fi
  fi
  if [ "${_STRONG_PASSWORDS}" = "YES" ] || [ $_PWD_CHARS -gt "8" ] ; then
    if [ "${_THIS_DB_HOST}" = "localhost" ] || [ "${_THIS_DB_HOST}" = "FQDN" ] ; then
      _ESC_APASS=$(randpass $_PWD_CHARS esc 2>&1)
    else
      if [ -e "/root/.my.pass.txt" ] ; then
        _ESC_APASS=$(cat /root/.my.pass.txt 2>&1)
      else
        _ESC_APASS=sCWL4tgEpyS5cLZITshxSTWRjhsUOeR6
      fi
    fi
    _ESC_APASS=$(echo -n ${_ESC_APASS} | tr -d "\n" 2>&1)
    _ENC_APASS=$(python -c "import urllib; print urllib.quote('''${_ESC_APASS}''')")
    _LEN_APASS=$(echo ${#_ESC_APASS} 2>&1)
  fi
  if [ -z "${_ESC_APASS}" ] || [ $_LEN_APASS -lt 9 ] ; then
    if [ "${_THIS_DB_HOST}" = "localhost" ] || [ "${_THIS_DB_HOST}" = "FQDN" ] ; then
      _ESC_APASS=$(pwgen -v -s -1 2>&1)
      _ESC_APASS=$(echo -n ${_ESC_APASS} | tr -d "\n" 2>&1)
      _ESC_APASS=$(sanitize_string "${_ESC_APASS}" 2>&1)
    else
      if [ -e "/root/.my.pass.txt" ] ; then
        _ESC_APASS=$(cat /root/.my.pass.txt 2>&1)
      else
        _ESC_APASS=sCWL4tgEpyS5cLZITshxSTWRjhsUOeR6
      fi
    fi
    _ENC_APASS="${_ESC_APASS}"
  fi
  echo "${_ESC_APASS}" > $_L_SYS
  chown aegir:aegir $_L_SYS &> /dev/null
  chmod 0600 $_L_SYS
  if [ "${_THIS_DB_HOST}" = "localhost" ] || [ "${_THIS_DB_HOST}" = "FQDN" ] ; then
    if [ "${_THIS_DB_HOST}" = "FQDN" ] ; then
      _THIS_DB_HOST=$(uname -n 2>&1)
    else
      _THIS_DB_HOST=localhost
    fi
    _AEGIR_HOST=$(uname -n 2>&1)
    _SQL_CONNECT=localhost
  else
    _AEGIR_HOST=$(uname -n 2>&1)
    ### _SQL_CONNECT="${_THIS_DB_HOST}"
    ### Master Instance will use local DB server
    _SQL_CONNECT=localhost
  fi
  if [ "${_THIS_DB_HOST}" = "${_MY_OWNIP}" ] ; then
    _AEGIR_HOST=$(uname -n 2>&1)
    _SQL_CONNECT=localhost
  fi
  _RESOLVEIP=$(echo $(getent ahostsv4 ${_AEGIR_HOST}) \
    | cut -d: -f2 \
    | awk '{ print $1}' 2>&1)
  if [ -z "$_RESOLVEIP" ] ; then
    msg "FATAL ERROR:: DNS looks broken for server ${_AEGIR_HOST}"
    msg "FATAL ERROR:: Aborting Barracuda installer NOW!"
    touch /opt/tmp/status-Barracuda-FAIL
    clean_pid_exit
  fi
_ESC="\`%\`.*"
mysqladmin flush-privileges &> /dev/null
if [ "${_STATUS}" = "INIT" ] ; then
  mysql -h${_SQL_CONNECT} -uroot mysql<<EOFMYSQL
GRANT ALL PRIVILEGES ON $_ESC TO '$_ADBU'@'${_AEGIR_HOST}' IDENTIFIED BY '${_ESC_APASS}' WITH GRANT OPTION;
GRANT ALL PRIVILEGES ON $_ESC TO '$_ADBU'@'$_RESOLVEIP' IDENTIFIED BY '${_ESC_APASS}' WITH GRANT OPTION;
GRANT ALL PRIVILEGES ON $_ESC TO '$_ADBU'@'localhost' IDENTIFIED BY '${_ESC_APASS}' WITH GRANT OPTION;
EOFMYSQL
else
  if [ "${_THIS_DB_HOST}" = "localhost" ] || [ "${_THIS_DB_HOST}" = "FQDN" ] ; then
    mysql -h${_SQL_CONNECT} -uroot mysql<<EOFMYSQL
DROP USER '$_ADBU'@'${_AEGIR_HOST}';
DROP USER '$_ADBU'@'$_RESOLVEIP';
DROP USER '$_ADBU'@'localhost';
EOFMYSQL
    mysql -h${_SQL_CONNECT} -uroot mysql<<EOFMYSQL
GRANT ALL PRIVILEGES ON $_ESC TO '$_ADBU'@'${_AEGIR_HOST}' IDENTIFIED BY '${_ESC_APASS}' WITH GRANT OPTION;
GRANT ALL PRIVILEGES ON $_ESC TO '$_ADBU'@'$_RESOLVEIP' IDENTIFIED BY '${_ESC_APASS}' WITH GRANT OPTION;
GRANT ALL PRIVILEGES ON $_ESC TO '$_ADBU'@'localhost' IDENTIFIED BY '${_ESC_APASS}' WITH GRANT OPTION;
EOFMYSQL
  fi
fi

if [ "${_THIS_DB_HOST}" = "localhost" ] || [ "${_THIS_DB_HOST}" = "FQDN" ] ; then
  _EXTRA_GRANTS=NO
else
  _LOCAL_HOST=$(uname -n 2>&1)
  _LOCAL_IP=$(echo $(getent ahostsv4 $_LOCAL_HOST) | cut -d: -f2 | awk '{ print $1}' 2>&1)
  mysql -h${_SQL_CONNECT} -uroot mysql<<EOFMYSQL
GRANT ALL PRIVILEGES ON $_ESC TO '$_ADBU'@'${_THIS_DB_HOST}' IDENTIFIED BY '${_ESC_APASS}' WITH GRANT OPTION;
GRANT ALL PRIVILEGES ON $_ESC TO '$_ADBU'@'$_LOCAL_HOST' IDENTIFIED BY '${_ESC_APASS}' WITH GRANT OPTION;
GRANT ALL PRIVILEGES ON $_ESC TO '$_ADBU'@'$_LOCAL_IP' IDENTIFIED BY '${_ESC_APASS}' WITH GRANT OPTION;
EOFMYSQL
fi

mysqladmin flush-privileges &> /dev/null
}
#
# Sync provision backend db_passwd.
provision_backend_dbpass_sync() {
  if [ "${_DEBUG_MODE}" = "YES" ] ; then
    msg "INFO: Syncing provision backend db_passwd..."
  fi
  _ADBU=aegir_root
  _L_SYS="/var/aegir/backups/system/.$_ADBU.pass.txt"
  mv -f $_L_SYS $_L_SYS-pre-${_X_VERSION}-${_NOW} &> /dev/null
  provision_backend_dbpass_generate
  if [ ! -z "${_ESC_APASS}" ] && [ ! -z "${_ENC_APASS}" ] ; then
    su -s /bin/bash - aegir -c "drush @hostmaster \
      sqlq \"UPDATE hosting_db_server SET db_passwd='${_ESC_APASS}' \
      WHERE db_user='$_ADBU'\" &> /dev/null"
    mysql -u root -e "UPDATE mysql.user SET Password=PASSWORD('${_ESC_APASS}') \
      WHERE User='$_ADBU';" &> /dev/null
    sed -i "s/mysql:\/\/$_ADBU:.*/mysql:\/\/$_ADBU:${_ENC_APASS}@${_SQL_CONNECT}',/g" \
      /var/aegir/.drush/server_*.alias.drushrc.php &> /dev/null
  fi
  mysqladmin flush-privileges &> /dev/null
  su -s /bin/bash - aegir -c "drush cache-clear drush &> /dev/null"
  rm -f -r /var/aegir/.tmp/cache
  if [ -e "/var/aegir/.drush/server_localhost.alias.drushrc.php" ] ; then
    su -s /bin/bash aegir -c "drush @hostmaster hosting-task @server_localhost \
      verify --force &> /dev/null"
  else
    su -s /bin/bash aegir -c "drush @hostmaster hosting-task @server_master \
      verify --force &> /dev/null"
  fi
  if [ "${_DEBUG_MODE}" = "YES" ] ; then
    msg "INFO: Running hosting-dispatch (1/3)..."
  fi
  su -s /bin/bash - aegir -c "drush @hostmaster hosting-dispatch &> /dev/null"
  mrun "sleep 5"
  if [ "${_DEBUG_MODE}" = "YES" ] ; then
    msg "INFO: Running hosting-dispatch (2/3)..."
  fi
  su -s /bin/bash - aegir -c "drush @hostmaster hosting-dispatch &> /dev/null"
  mrun "sleep 5"
  if [ "${_DEBUG_MODE}" = "YES" ] ; then
    msg "INFO: Running hosting-dispatch (3/3)..."
  fi
  su -s /bin/bash - aegir -c "drush @hostmaster hosting-dispatch &> /dev/null"
}
#
# Sync hostmaster frontend db_passwd.
hostmaster_frontend_dbpass_sync() {
  if [ "${_DEBUG_MODE}" = "YES" ] ; then
    msg "INFO: Syncing hostmaster frontend db_passwd..."
  fi
  _THIS_HM_SPTH=$(cat /var/aegir/.drush/hostmaster.alias.drushrc.php \
    | grep "site_path'" \
    | cut -d: -f2 \
    | awk '{ print $3}' \
    | sed "s/[\,']//g" 2>&1)
  _THIS_HM_DBUR=$(cat $_THIS_HM_SPTH/drushrc.php \
    | grep "options\['db_user'\] = " \
    | cut -d: -f2 \
    | awk '{ print $3}' \
    | sed "s/[\,';]//g" 2>&1)
  _THIS_HM_DBPD=$(cat $_THIS_HM_SPTH/drushrc.php \
    | grep "options\['db_passwd'\] = " \
    | cut -d: -f2 \
    | awk '{ print $3}' \
    | sed "s/[\,';]//g" 2>&1)
  if [ -e "$_THIS_HM_SPTH" ] \
    && [ ! -z "$_THIS_HM_DBUR" ] \
    && [ ! -z "$_THIS_HM_DBPD" ] ; then
    mysql -u root -e "UPDATE mysql.user SET Password=PASSWORD('$_THIS_HM_DBPD') \
      WHERE User='$_THIS_HM_DBUR';" &> /dev/null
  fi
  mysqladmin flush-privileges &> /dev/null
}
#
# Upgrade Aegir Master Instance.
upgrade_aegir_master() {
  if prompt_yes_no "Do you want to upgrade Aegir Master Instance?" ; then
    true
    msg "INFO: Running Aegir Master Instance upgrade"
    rm -f /opt/tmp/testecho*
    if [ ! -e "/root/.upstart.cnf" ] ; then
      service cron stop &> /dev/null
    fi
    usermod -aG users aegir &> /dev/null
    if [ ! -d "/var/aegir/.drush/sys/provision/http" ] ; then
      rm -f -r /var/aegir/.drush/{sys,xts,usr}
      rm -f -r /var/aegir/.drush/{provision,drush_make}
      mkdir -p /var/aegir/.drush/{sys,xts,usr}
      git clone --branch ${_BRANCH_PRN} git://github.com/omega8cc/provision.git \
        /var/aegir/.drush/sys/provision &> /dev/null
      rm -f -r /var/aegir/drush
      cd /var/aegir
      get_dev_ext "drush-${_DRUSH_VERSION}.tar.gz"
      cd /var/aegir/drush/
      rm -f -r /var/aegir/drush/vendor
      get_dev_ext "vendor-${_DRUSH_VERSION}.tar.gz"
      find /var/aegir/drush -type d -exec chmod 0755 {} \; &> /dev/null
      find /var/aegir/drush -type f -exec chmod 0644 {} \; &> /dev/null
      chmod 755 /var/aegir/drush/drush
      chmod 755 /var/aegir/drush/drush.php
    fi
    _THIS_HM_ROOT=$(cat /var/aegir/.drush/hostmaster.alias.drushrc.php \
      | grep "root'" \
      | cut -d: -f2 \
      | awk '{ print $3}' \
      | sed "s/[\,']//g" 2>&1)
    _THIS_HM_SITE=$(cat /var/aegir/.drush/hostmaster.alias.drushrc.php \
      | grep "site_path'" \
      | cut -d: -f2 \
      | awk '{ print $3}' \
      | sed "s/[\,']//g" 2>&1)
    mkdir -p ${_THIS_HM_ROOT}/sites/all/{modules,themes,libraries}
    chown -R aegir:aegir ${_THIS_HM_ROOT}/sites/all
    _U_HD="/var/aegir/.drush"
    chattr -i ${_U_HD}/php.ini &> /dev/null
    chown -R aegir:aegir /var/aegir/.drush
    chown -R aegir:aegir /var/aegir/backups
    chown -R aegir:aegir /var/aegir/clients
    chown -R aegir:aegir /var/aegir/config
    chown -R aegir:aegir /var/aegir/drush
    chown -R aegir ${_THIS_HM_ROOT}
    chown -R aegir:www-data $_THIS_HM_SITE/files
    chmod -R 02775 $_THIS_HM_SITE/files
    cd /var/aegir
    cp ${pthBld}/aegir/scripts/AegirUpgrade.sh.txt ./
    pthAue="/var/aegir/AegirUpgrade.sh.txt"
    sed -i "s/EDIT_AEGIR_VERSION/${_AEGIR_VERSION}/g"         ${pthAue}
    sed -i "s/EDIT_AEGIR_XTS_VERSION/${_AEGIR_XTS_VERSION}/g" ${pthAue}
    sed -i "s/EDIT_BOA_REPO_GIT_URL/${_BOA_REPO_GIT_URLX}/g"  ${pthAue}
    sed -i "s/EDIT_BOA_REPO_NAME/${_BOA_REPO_NAME}/g"         ${pthAue}
    sed -i "s/EDIT_BRANCH_BOA/${_BRANCH_BOA}/g"               ${pthAue}
    sed -i "s/EDIT_BRANCH_PRN/${_BRANCH_PRN}/g"               ${pthAue}
    sed -i "s/EDIT_DEBUG_MODE/${_DEBUG_MODE}/g"               ${pthAue}
    sed -i "s/EDIT_DOMAIN/${_THIS_FRONT}/g"                   ${pthAue}
    sed -i "s/EDIT_DRUSH_VERSION/${_DRUSH_VERSION}/g"         ${pthAue}
    sed -i "s/EDIT_X_VERSION/${_X_VERSION}/g"                 ${pthAue}
    sed -i "s/EDIT_PHP_CLI_VERSION/${_PHP_CLI_VERSION}/g"     ${pthAue}
    sed -i "s/EDIT_PHP_FPM_VERSION/${_PHP_FPM_VERSION}/g"     ${pthAue}
    sed -i "s/EDIT_STRONG_PASSWORDS/${_STRONG_PASSWORDS}/g"   ${pthAue}
    sed -i "s/EDIT_THIS_DB_HOST/${_THIS_DB_HOST}/g"           ${pthAue}
    mysqladmin flush-hosts &> /dev/null
    provision_backend_dbpass_sync
    hostmaster_frontend_dbpass_sync
    su -s /bin/bash - aegir -c "bash AegirUpgrade.sh.txt"
    if [ -e "/opt/tmp/status-AegirUpgrade-FAIL" ] ; then
      msg "FATAL ERROR: AegirUpgrade installer failed"
      msg "FATAL ERROR: Aborting Barracuda installer NOW!"
      touch /opt/tmp/status-Barracuda-FAIL
      clean_pid_exit
    else
      chattr +i ${_U_HD}/php.ini &> /dev/null
      hostmaster_frontend_dbpass_sync
      sed -i "s/hosting-dispatch.*/hosting-dispatch \>\/dev\/null 2\>\&1/g" \
        /var/spool/cron/crontabs/aegir &> /dev/null
    fi
    if [ ! -L "${mtrInc}/global.inc" ] && [ -e "${mtrInc}/global.inc" ] ; then
      mv -f ${mtrInc}/global.inc \
        ${mtrInc}/global.inc-pre-${_X_VERSION}-${_NOW} &> /dev/null
    fi
    mkdir -p /data/conf
    cp -af ${locCnf}/global.inc /data/conf/global.inc
    sed -i "s/3600/${_SPEED_VALID_MAX}/g" /data/conf/global.inc &> /dev/null
    if [ -e "${mtrInc}" ] && [ ! -L "${mtrInc}/global.inc" ] \
      && [ -e "/data/conf/global.inc" ] ; then
      ln -sf /data/conf/global.inc ${mtrInc}/global.inc
    fi
    update_redis_password
    force_advanced_nginx_config
    cd /var/aegir
    rm -f AegirUpgrade.sh.txt
    if [ -d "${mtrNgx}/conf.d" ] ; then
      if [ ! -d "${mtrNgx}/pre.d" ] ; then
        cd ${mtrNgx}
        cp -a conf.d pre.d
      else
        rm -f -r ${mtrNgx}/conf.d
      fi
      if [ -e "${mtrNgx}/pre.d/custom_nginx.conf" ] ; then
        rm -f ${mtrNgx}/pre.d/custom_nginx.conf
      fi
    fi
    find /var/aegir/host_master/*/profiles/* -type d -exec chmod 0755 {} \; &> /dev/null
    find /var/aegir/host_master/*/profiles/* -type f -exec chmod 0644 {} \; &> /dev/null
    find /var/aegir/*/profiles/* -type d -exec chmod 0755 {} \; &> /dev/null
    find /var/aegir/*/profiles/* -type f -exec chmod 0644 {} \; &> /dev/null
    chown -R aegir:aegir /var/aegir/.drush &> /dev/null
    find /var/aegir/.drush -type d -exec chmod 0755 {} \; &> /dev/null
    find /var/aegir/.drush -type f -exec chmod 0644 {} \; &> /dev/null
    chmod 0440 /var/aegir/.drush/*.php &> /dev/null
    chmod 0711 /var/aegir/.drush &> /dev/null
    msg "INFO: Aegir Master Instance upgrade completed"
  else
    msg "INFO: Aegir Master Instance not upgraded this time"
    echo " "
  fi
  rm -f /var/aegir/*install.sh.txt
}
#
# Check for Linux/Cdorked.A malware and delete if discovered.
detect_cdorked_malware() {
  _C_DORKED=NO
  _C_FILE=${pthBld}/aegir/helpers/dump_cdorked_config.c
  if [ -e "$_C_FILE" ] ; then
    ### msg "INFO: Checking for Linux/Cdorked.A malware..."
    chattr -ai $(which nginx) &> /dev/null
    cd /var/backups
    rm -f -r /var/opt/foo_bar*
    gcc -o /var/opt/foo_bar ${pthBld}/aegir/helpers/dump_cdorked_config.c &> /dev/null
    _C_DORKED_TEST=$(/var/opt/foo_bar 2>&1)
    if [[ "$_C_DORKED_TEST" =~ "No shared memory matching Cdorked signature" ]] ; then
      _DO_NOTHING=YES
      ### msg "INFO: No Linux/Cdorked.A malware traces found - system clean"
    else
      msg "ALRT! Your system is probably infected by Linux/Cdorked.A malware!"
      msg "ALRT! Please send /var/backups/httpd_cdorked_config.bin file \
        to leveille@eset.com"
      rm -f $(which nginx)
      _NGX_FORCE_REINSTALL=YES
      _C_DORKED=YES
    fi
  fi
}
#
# Install or upgrade Nginx.
install_upgrade_nginx() {
  if [ "${_DEBUG_MODE}" = "YES" ] ; then
    msg "INFO: Testing Nginx version..."
  fi
  if [ "${_STATUS}" = "UPGRADE" ] ; then
    _NGINX_INSTALL_REQUIRED=NO
  fi
  if [ -x "/usr/sbin/nginx" ] ; then
    _NGINX_F_INSTALLED=$(/usr/sbin/nginx -v 2>&1 | tr -d "\n" \
      | cut -d" " -f4 | awk '{ print $1}' 2>&1)
    _NGINX_V_INSTALLED=$(/usr/sbin/nginx -V 2>&1)
    if [ -z "$_NGINX_F_INSTALLED" ] ; then
      _NGINX_F_INSTALLED=$(/usr/sbin/nginx -v 2>&1 | tr -d "\n" \
        | cut -d" " -f3 | awk '{ print $1}' 2>&1)
    fi
    _NGINX_F_VERSION="${_CUSTOM_NAME}/${_NGINX_VRN}"
    if [ "$_NGINX_F_INSTALLED" = "$_NGINX_F_VERSION" ] \
      && [ "${_STATUS}" = "UPGRADE" ] ; then
      _NGINX_INSTALL_REQUIRED=NO
      if [ "${_DEBUG_MODE}" = "YES" ] ; then
        msg "INFO: Installed Nginx version $_NGINX_F_INSTALLED, OK"
      fi
    elif [ "$_NGINX_F_INSTALLED" = "$_NGINX_F_VERSION" ] \
      && [ "${_STATUS}" = "INIT" ] ; then
      _NGINX_INSTALL_REQUIRED=NO
      if [ "${_DEBUG_MODE}" = "YES" ] ; then
        msg "INFO: Installed Nginx version $_NGINX_F_INSTALLED, OK"
      fi
    elif [ "$_NGINX_F_INSTALLED" != "$_NGINX_F_VERSION" ] ; then
      _NGINX_INSTALL_REQUIRED=YES
      msg "INFO: Installed Nginx version $_NGINX_F_INSTALLED, upgrade required"
    fi
    if [ "$_NGINX_F_INSTALLED" = "$_NGINX_F_VERSION" ] ; then
      if [[ "$_NGINX_V_INSTALLED" =~ "geoip" ]] ; then
        _DO_NOTHING=YES
      else
        _NGINX_INSTALL_REQUIRED=YES
        msg "INFO: Installed Nginx version $_NGINX_F_INSTALLED, \
          forced rebuild to include geoip module"
      fi
      if [[ "$_NGINX_V_INSTALLED" =~ "nginx-development-kit" ]] ; then
        _NGINX_INSTALL_REQUIRED=YES
        msg "INFO: Nginx rebuild required to avoid apt-get overwrite"
      fi
      if [[ "$_NGINX_V_INSTALLED" =~ "http_flv_module" ]] \
        && [[ "$_NGINX_V_INSTALLED" =~ "http_mp4_module" ]] ; then
        _DO_NOTHING=YES
      else
        _NGINX_INSTALL_REQUIRED=YES
        msg "INFO: Installed Nginx version $_NGINX_F_INSTALLED, \
          forced rebuild to include pseudo-streaming support"
      fi
      if [ "${_NGINX_LDAP}" = "YES" ] ; then
        if [[ "$_NGINX_V_INSTALLED" =~ "nginx-auth-ldap" ]] ; then
          _DO_NOTHING=YES
        else
          _NGINX_INSTALL_REQUIRED=YES
          msg "INFO: Installed Nginx version $_NGINX_F_INSTALLED, \
            forced rebuild to include LDAP support"
        fi
      fi
      if [ "${_PURGE_MODE}" = "ON" ] ; then
        if [[ "$_NGINX_V_INSTALLED" =~ "purge" ]] ; then
          _DO_NOTHING=YES
        else
          _NGINX_INSTALL_REQUIRED=YES
          msg "INFO: Installed Nginx version $_NGINX_F_INSTALLED, \
            forced rebuild to include purge module"
        fi
      fi
      if [ "${_NGINX_NAXSI}" = "YES" ] ; then
        if [[ "$_NGINX_V_INSTALLED" =~ "naxsi" ]] ; then
          _DO_NOTHING=YES
        else
          _NGINX_INSTALL_REQUIRED=YES
          msg "INFO: Installed Nginx version $_NGINX_F_INSTALLED, \
            forced rebuild to include NAXSI module"
        fi
      fi
      if [ "${_NGINX_SPDY}" = "YES" ] ; then
        if [[ "$_NGINX_V_INSTALLED" =~ "http_spdy_module" ]] ; then
          _DO_NOTHING=YES
        else
          _NGINX_INSTALL_REQUIRED=YES
          msg "INFO: Installed Nginx version $_NGINX_F_INSTALLED, \
            forced rebuild to include SPDY support"
        fi
      fi
    fi
  else
    _NGINX_INSTALL_REQUIRED=YES
  fi
  detect_cdorked_malware
  if [ "$_C_DORKED" = "YES" ] ; then
    _NGINX_INSTALL_REQUIRED=YES
    msg "INFO: Nginx rebuild required to remove possible Linux/Cdorked.A malware"
  fi
  if [ "$_NGINX_INSTALL_REQUIRED" = "YES" ] \
    || [ "${_FULL_FORCE_REINSTALL}" = "YES" ] \
    || [ "${_NGX_FORCE_REINSTALL}" = "YES" ] ; then
    if [ "${_STATUS}" = "UPGRADE" ] ; then
      msg "INFO: Upgrading Nginx..."
    else
      msg "INFO: Installing Nginx..."
    fi
    cd /var/opt; rm -f -r nginx*
    get_dev_src "nginx-upload-progress-module.tar.gz"
    if [ "${_PURGE_MODE}" = "ON" ] ; then
      get_dev_src "ngx-cache-purge.tar.gz"
    fi
    get_dev_src "nginx-${_NGINX_VRN}.tar.gz"
    sed -i "s/nginx/${_CUSTOM_NAME}/g" \
      /var/opt/nginx-${_NGINX_VRN}/src/core/nginx.h &> /dev/null
    if [ "${_PURGE_MODE}" = "ON" ] && [ -z "${_NGINX_EXTRA_CONF}" ] ; then
      _NGINX_EXTRA="--add-module=/var/opt/ngx-cache-purge/"
    elif [ ! -z "${_NGINX_EXTRA_CONF}" ] && [ "${_PURGE_MODE}" = "OFF" ] ; then
      _NGINX_EXTRA="${_NGINX_EXTRA_CONF}"
    elif [ ! -z "${_NGINX_EXTRA_CONF}" ] && [ "${_PURGE_MODE}" = "ON" ] ; then
      _NGINX_EXTRA="--add-module=/var/opt/ngx-cache-purge/ ${_NGINX_EXTRA_CONF}"
    else
      _NGINX_EXTRA=""
    fi
    if [ -e "/var/opt/nginx-upload-progress-module" ] ; then
      _NGINX_EXTRA="--add-module=/var/opt/nginx-upload-progress-module/ $_NGINX_EXTRA"
    fi
    if [ "${_NGINX_LDAP}" = "YES" ] ; then
      cd /var/opt
      rm -f -r /var/opt/nginx-auth-ldap*
      get_dev_src "nginx-auth-ldap.tar.gz"
      if [ -e "/var/opt/nginx-auth-ldap" ] ; then
        _NGINX_EXTRA="--add-module=/var/opt/nginx-auth-ldap/ $_NGINX_EXTRA"
      fi
    fi
    if [ "${_NGINX_NAXSI}" = "YES" ] ; then
      cd /var/opt
      rm -f -r /var/opt/nginx-naxsi*
      get_dev_src "nginx-naxsi.tar.gz"
      if [ -e "/var/opt/nginx-naxsi" ] ; then
        _NGINX_EXTRA="--add-module=/var/opt/nginx-naxsi/naxsi_src/ $_NGINX_EXTRA"
      fi
    fi
    if [ "${_NGINX_SPDY}" = "YES" ] ; then
      _NGINX_EXTRA="--with-http_spdy_module $_NGINX_EXTRA"
    fi
    cd /var/opt/nginx-${_NGINX_VRN}
    st_runner "sh ./configure \
      --prefix=/usr \
      --sbin-path=/usr/sbin/nginx \
      --conf-path=/etc/nginx/nginx.conf \
      --error-log-path=/var/log/nginx/error.log \
      --http-log-path=/var/log/nginx/access.log \
      --pid-path=/var/run/nginx.pid \
      --lock-path=/var/lock/nginx.lock \
      --user=www-data \
      --group=www-data \
      --with-http_realip_module \
      --with-http_gzip_static_module \
      --with-http_stub_status_module \
      --with-http_ssl_module \
      --with-http_dav_module \
      --with-http_flv_module \
      --with-http_mp4_module \
      --without-mail_pop3_module \
      --without-mail_imap_module \
      --without-mail_smtp_module \
      --without-http_scgi_module \
      --without-http_uwsgi_module \
      --with-ipv6 \
      --with-http_geoip_module \
      --with-debug $_NGINX_EXTRA" 2> /dev/null
    st_runner "make --quiet" 2> /dev/null
    st_runner "make --quiet install" 2> /dev/null
    if [ "${_SQUEEZE_TO_WHEEZY}" = "YES" ] \
      && [ "${_LOC_REL_VERSION}" = "squeeze" ] ; then
      _DO_NOTHING=YES
    elif [ "${_LENNY_TO_SQUEEZE}" = "YES" ] \
      && [ "${_LOC_REL_VERSION}" = "lenny" ] ; then
      _DO_NOTHING=YES
    else
      mrun "service nginx stop" &> /dev/null
      killall -9 nginx &> /dev/null
      mrun "service nginx start" &> /dev/null
    fi
    _NGINX_INSTALL_REQUIRED=NO
  fi
  if [ ! -L "/usr/bin/nginx" ] ; then
    ln -sf /usr/sbin/nginx /usr/bin/nginx
  fi
}
#
# Install wkhtmltopdf.
install_wkhtmltopdf() {
  ###--------------------###
  if [ ! -e "${pthLog}/wkhtmltopdf-fix10" ] \
    || [ ! -x "/usr/bin/wkhtmltopdf" ] \
    || [ "${_FULL_FORCE_REINSTALL}" = "YES" ] ; then
    _X86_64_TEST=$(uname -m 2>&1)
    if [ "$_X86_64_TEST" = "x86_64" ] ; then
      SYSTEMARCH="x86_64"
      msg "INFO: Installing /usr/bin/wkhtmltopdf $SYSTEMARCH version..."
      cd /var/opt
      rm -f -r wkhtmltopdf*
      get_dev_arch "wkhtmltopdf-0.10.0_rc2-static-amd64.tar.bz2"
      cp -af wkhtmltopdf-amd64 /usr/bin/wkhtmltopdf &> /dev/null
      chown root:root /usr/bin/wkhtmltopdf &> /dev/null
      chmod 755 /usr/bin/wkhtmltopdf &> /dev/null
    else
      SYSTEMARCH="x86"
      msg "INFO: Installing /usr/bin/wkhtmltopdf $SYSTEMARCH version..."
      cd /var/opt
      rm -f -r wkhtmltopdf*
      get_dev_arch "wkhtmltopdf-0.10.0_rc2-static-i386.tar.bz2"
      cp -af wkhtmltopdf-i386 /usr/bin/wkhtmltopdf &> /dev/null
      chown root:root /usr/bin/wkhtmltopdf &> /dev/null
      chmod 755 /usr/bin/wkhtmltopdf &> /dev/null
    fi
    touch ${pthLog}/wkhtmltopdf-fix10
  fi
}
#
# Install wkhtmltoimage.
install_wkhtmltoimage() {
  ###--------------------###
  if [ ! -e "${pthLog}/wkhtmltoimage-fix10" ] \
    || [ ! -x "/usr/bin/wkhtmltoimage" ] \
    || [ "${_FULL_FORCE_REINSTALL}" = "YES" ] ; then
    _X86_64_TEST=$(uname -m 2>&1)
    if [ "$_X86_64_TEST" = "x86_64" ] ; then
      SYSTEMARCH="x86_64"
      msg "INFO: Installing /usr/bin/wkhtmltoimage $SYSTEMARCH version..."
      cd /var/opt
      rm -f -r wkhtmltoimage*
      get_dev_arch "wkhtmltoimage-0.10.0_rc2-static-amd64.tar.bz2"
      cp -af wkhtmltoimage-amd64 /usr/bin/wkhtmltoimage &> /dev/null
      chown root:root /usr/bin/wkhtmltoimage &> /dev/null
      chmod 755 /usr/bin/wkhtmltoimage &> /dev/null
    else
      SYSTEMARCH="x86"
      msg "INFO: Installing /usr/bin/wkhtmltoimage $SYSTEMARCH version..."
      cd /var/opt
      rm -f -r wkhtmltoimage*
      get_dev_arch "wkhtmltoimage-0.10.0_rc2-static-i386.tar.bz2"
      cp -af wkhtmltoimage-i386 /usr/bin/wkhtmltoimage &> /dev/null
      chown root:root /usr/bin/wkhtmltoimage &> /dev/null
      chmod 755 /usr/bin/wkhtmltoimage &> /dev/null
    fi
    touch ${pthLog}/wkhtmltoimage-fix10
  fi
}
#
# Update php-cli in the cron entry.
update_php_cli_cron() {
  if [ "${_PHP_CLI_VERSION}" = "5.5" ] && [ -x "/opt/php55/bin/php" ] ; then
    sed -i "s/^PATH=.*/PATH=\/opt\/php55\/bin:\/sbin:\/bin:\/usr\/sbin:\/usr\/bin/g" \
      /var/spool/cron/crontabs/aegir &> /dev/null
  elif [ "${_PHP_CLI_VERSION}" = "5.6" ] && [ -x "/opt/php56/bin/php" ] ; then
    sed -i "s/^PATH=.*/PATH=\/opt\/php56\/bin:\/sbin:\/bin:\/usr\/sbin:\/usr\/bin/g" \
      /var/spool/cron/crontabs/aegir &> /dev/null
  elif [ "${_PHP_CLI_VERSION}" = "5.4" ] && [ -x "/opt/php54/bin/php" ] ; then
    sed -i "s/^PATH=.*/PATH=\/opt\/php54\/bin:\/sbin:\/bin:\/usr\/sbin:\/usr\/bin/g" \
      /var/spool/cron/crontabs/aegir &> /dev/null
  elif [ "${_PHP_CLI_VERSION}" = "5.3" ] && [ -x "/opt/php53/bin/php" ] ; then
    sed -i "s/^PATH=.*/PATH=\/opt\/php53\/bin:\/sbin:\/bin:\/usr\/sbin:\/usr\/bin/g" \
      /var/spool/cron/crontabs/aegir &> /dev/null
  fi
  chown aegir:crontab /var/spool/cron/crontabs/aegir &> /dev/null
}
#
# Update New Relic.
update_newrelic() {
  ###--------------------###
  if [ ! -z "${_NEWRELIC_KEY}" ] ; then
    if [ -e "/etc/newrelic/newrelic.cfg" ] \
      || [ -e "/etc/apt/sources.list.d/newrelic.list" ] ; then
      msg "INFO: Uninstalling previous version of New Relic Apps Monitor..."
      cd /var/opt
      _KEYS_SERVER_TEST=FALSE
      until [[ "$_KEYS_SERVER_TEST" =~ "GnuPG" ]] ; do
        rm -f 548C16BF.gpg*
        wget -q -U iCab http://download.newrelic.com/548C16BF.gpg
        _KEYS_SERVER_TEST=$(grep GnuPG 548C16BF.gpg 2>&1)
        sleep 2
      done
      cat 548C16BF.gpg | apt-key add - &> /dev/null
      rm -f 548C16BF.gpg*
      st_runner "aptitude remove newrelic-php5 \
                                 newrelic-php5-common \
                                 newrelic-daemon \
                                 newrelic-sysmond -y" &> /dev/null
      st_runner "apt-get autoremove -y --force-yes -qq" &> /dev/null
      mkdir -p /var/backups/nr
      mv -f /etc/newrelic \
        /var/backups/nr/etc-newrelic-pre-${_X_VERSION}-${_NOW} &> /dev/null
      pthNrx="lib/php/extensions/no-debug-non-zts"
      _PHP_EXT_DIR_56="/opt/php56/${pthNrx}-${_PHP56_API}"
      _PHP_EXT_DIR_55="/opt/php55/${pthNrx}-${_PHP55_API}"
      _PHP_EXT_DIR_54="/opt/php54/${pthNrx}-${_PHP54_API}"
      _PHP_EXT_DIR_53="/opt/php53/${pthNrx}-${_PHP53_API}"
      msg "INFO: Installing latest version of New Relic Apps Monitor..."
      echo "## New Relic APT Repository" > /etc/apt/sources.list.d/newrelic.list
      echo "deb http://apt.newrelic.com/debian/ newrelic non-free" >> \
        /etc/apt/sources.list.d/newrelic.list
      st_runner "apt-get update -y --force-yes" &> /dev/null
      st_runner "apt-get install newrelic-php5 newrelic-sysmond -f -y \
        --force-yes -q --config-file /opt/tmp/apt.conf.noninteractive" \
        2> /dev/null
      NR_PHPLIST="/opt/php53/bin:/opt/php54/bin:/opt/php55/bin:/opt/php56/bin"
      NR_SILENT="silent"
      export NR_INSTALL_PHPLIST="${NR_PHPLIST}"
      export NR_INSTALL_SILENT="${NR_SILENT}"
      newrelic-install install &> /dev/null
      _X86_64_TEST=$(uname -m 2>&1)
      if [ "$_X86_64_TEST" = "x86_64" ] ; then
        _SYSTEM_ARCH="x64"
      else
        _SYSTEM_ARCH="x32"
      fi
      pthNra="/usr/lib/newrelic-php5/agent"
      if [ -e "$_PHP_EXT_DIR_56" ] && [ ! -e "$_PHP_EXT_DIR_56/newrelic.so" ] \
        && [ -e "${pthNra}/$_SYSTEM_ARCH/newrelic-${_PHP56_API}.so" ] ; then
        ln -sf ${pthNra}/$_SYSTEM_ARCH/newrelic-${_PHP56_API}.so \
          $_PHP_EXT_DIR_56/newrelic.so
      fi
      if [ -e "$_PHP_EXT_DIR_55" ] && [ ! -e "$_PHP_EXT_DIR_55/newrelic.so" ] \
        && [ -e "${pthNra}/$_SYSTEM_ARCH/newrelic-${_PHP55_API}.so" ] ; then
        ln -sf ${pthNra}/$_SYSTEM_ARCH/newrelic-${_PHP55_API}.so \
          $_PHP_EXT_DIR_55/newrelic.so
      fi
      if [ -e "$_PHP_EXT_DIR_54" ] && [ ! -e "$_PHP_EXT_DIR_54/newrelic.so" ] \
        && [ -e "${pthNra}/$_SYSTEM_ARCH/newrelic-${_PHP54_API}.so" ] ; then
        ln -sf ${pthNra}/$_SYSTEM_ARCH/newrelic-${_PHP54_API}.so \
          $_PHP_EXT_DIR_54/newrelic.so
      fi
      if [ -e "$_PHP_EXT_DIR_53" ] && [ ! -e "$_PHP_EXT_DIR_53/newrelic.so" ] \
        && [ -e "${pthNra}/$_SYSTEM_ARCH/newrelic-${_PHP53_API}.so" ] ; then
        ln -sf ${pthNra}/$_SYSTEM_ARCH/newrelic-${_PHP53_API}.so \
          $_PHP_EXT_DIR_53/newrelic.so
      fi
      if [ ! -e "/etc/newrelic/newrelic.cfg" ] ; then
        echo "## New Relic Configuration" > \
          /etc/newrelic/newrelic.cfg
        echo "license_key=${_NEWRELIC_KEY}" >> \
          /etc/newrelic/newrelic.cfg
        echo "pidfile=/var/run/newrelic-daemon.pid" >> \
          /etc/newrelic/newrelic.cfg
        echo "logfile=/var/log/newrelic/newrelic-daemon.log" >> \
          /etc/newrelic/newrelic.cfg
        echo "loglevel=error" >> \
          /etc/newrelic/newrelic.cfg
      else
        sed -i "s/REPLACE_WITH_REAL_KEY/${_NEWRELIC_KEY}/g" \
          /etc/newrelic/newrelic.cfg &> /dev/null
      fi
      sed -i "s/REPLACE_WITH_REAL_KEY/${_NEWRELIC_KEY}/g" \
        /etc/newrelic/nrsysmond.cfg &> /dev/null
    fi
  fi
}
#
# Install New Relic.
install_newrelic() {
  ###--------------------###
  if [ ! -z "${_NEWRELIC_KEY}" ] ; then
    _MULTI_NR=NO
    _PHP_EXT_DIR_56="/opt/php56/lib/php/extensions/no-debug-non-zts-${_PHP56_API}"
    _PHP_EXT_DIR_55="/opt/php55/lib/php/extensions/no-debug-non-zts-${_PHP55_API}"
    _PHP_EXT_DIR_54="/opt/php54/lib/php/extensions/no-debug-non-zts-${_PHP54_API}"
    _PHP_EXT_DIR_53="/opt/php53/lib/php/extensions/no-debug-non-zts-${_PHP53_API}"
    if [ -e "$_PHP_EXT_DIR_56" ] \
      && [ ! -e "$_PHP_EXT_DIR_56/newrelic.so" ] ; then
      _MULTI_NR=YES
    fi
    if [ -e "$_PHP_EXT_DIR_55" ] \
      && [ ! -e "$_PHP_EXT_DIR_55/newrelic.so" ] ; then
      _MULTI_NR=YES
    fi
    if [ -e "$_PHP_EXT_DIR_54" ] \
      && [ ! -e "$_PHP_EXT_DIR_54/newrelic.so" ] ; then
      _MULTI_NR=YES
    fi
    if [ -e "$_PHP_EXT_DIR_53" ] \
      && [ ! -e "$_PHP_EXT_DIR_53/newrelic.so" ] ; then
      _MULTI_NR=YES
    fi
    if [ "$_MULTI_NR" = "YES" ] \
      || [ ! -e "${pthLog}/newrelic-${_X_VERSION}.log" ] \
      || [ ! -e "/etc/newrelic/newrelic.cfg" ] \
      || [ ! -e "/etc/newrelic/nrsysmond.cfg" ] \
      || [ ! -e "/etc/apt/sources.list.d/newrelic.list" ] ; then
      msg "INFO: Installing New Relic Apps and Server Monitor..."
      cd /var/opt
      _KEYS_SERVER_TEST=FALSE
      until [[ "$_KEYS_SERVER_TEST" =~ "GnuPG" ]] ; do
        rm -f 548C16BF.gpg*
        wget -q -U iCab http://download.newrelic.com/548C16BF.gpg
        _KEYS_SERVER_TEST=$(grep GnuPG 548C16BF.gpg 2>&1)
        sleep 2
      done
      cat 548C16BF.gpg | apt-key add - &> /dev/null
      rm -f 548C16BF.gpg*
      echo "## New Relic APT Repository" > \
        /etc/apt/sources.list.d/newrelic.list
      echo "deb http://apt.newrelic.com/debian/ newrelic non-free" >> \
        /etc/apt/sources.list.d/newrelic.list
      st_runner "apt-get update -y --force-yes" &> /dev/null
      st_runner "apt-get install newrelic-php5 newrelic-sysmond -f -y \
        --force-yes -q --config-file /opt/tmp/apt.conf.noninteractive" 2> /dev/null
      if [ "$_MULTI_NR" = "YES" ] ; then
        msg "INFO: Installing latest version of New Relic Apps Monitor..."
        NR_PHPLIST="/opt/php53/bin:/opt/php54/bin:/opt/php55/bin:/opt/php56/bin"
        NR_SILENT="silent"
        export NR_INSTALL_PHPLIST="${NR_PHPLIST}"
        export NR_INSTALL_SILENT="${NR_SILENT}"
        newrelic-install install &> /dev/null
        _X86_64_TEST=$(uname -m 2>&1)
        if [ "$_X86_64_TEST" = "x86_64" ] ; then
          _SYSTEM_ARCH="x64"
        else
          _SYSTEM_ARCH="x32"
        fi
        pthNra="/usr/lib/newrelic-php5/agent"
        if [ -e "$_PHP_EXT_DIR_56" ] && [ ! -e "$_PHP_EXT_DIR_56/newrelic.so" ] \
          && [ -e "${pthNra}/$_SYSTEM_ARCH/newrelic-${_PHP56_API}.so" ] ; then
          ln -sf ${pthNra}/$_SYSTEM_ARCH/newrelic-${_PHP56_API}.so \
            $_PHP_EXT_DIR_56/newrelic.so
        fi
        if [ -e "$_PHP_EXT_DIR_55" ] && [ ! -e "$_PHP_EXT_DIR_55/newrelic.so" ] \
          && [ -e "${pthNra}/$_SYSTEM_ARCH/newrelic-${_PHP55_API}.so" ] ; then
          ln -sf ${pthNra}/$_SYSTEM_ARCH/newrelic-${_PHP55_API}.so \
            $_PHP_EXT_DIR_55/newrelic.so
        fi
        if [ -e "$_PHP_EXT_DIR_54" ] && [ ! -e "$_PHP_EXT_DIR_54/newrelic.so" ] \
          && [ -e "${pthNra}/$_SYSTEM_ARCH/newrelic-${_PHP54_API}.so" ] ; then
          ln -sf ${pthNra}/$_SYSTEM_ARCH/newrelic-${_PHP54_API}.so \
            $_PHP_EXT_DIR_54/newrelic.so
        fi
        if [ -e "$_PHP_EXT_DIR_53" ] && [ ! -e "$_PHP_EXT_DIR_53/newrelic.so" ] \
          && [ -e "${pthNra}/$_SYSTEM_ARCH/newrelic-${_PHP53_API}.so" ] ; then
          ln -sf ${pthNra}/$_SYSTEM_ARCH/newrelic-${_PHP53_API}.so \
            $_PHP_EXT_DIR_53/newrelic.so
        fi
        if [ ! -e "/etc/newrelic/newrelic.cfg" ] ; then
          echo "## New Relic Configuration" > \
            /etc/newrelic/newrelic.cfg
          echo "license_key=${_NEWRELIC_KEY}" >> \
            /etc/newrelic/newrelic.cfg
          echo "pidfile=/var/run/newrelic-daemon.pid" >> \
            /etc/newrelic/newrelic.cfg
          echo "logfile=/var/log/newrelic/newrelic-daemon.log" >> \
            /etc/newrelic/newrelic.cfg
          echo "loglevel=error" >> \
            /etc/newrelic/newrelic.cfg
        else
          sed -i "s/REPLACE_WITH_REAL_KEY/${_NEWRELIC_KEY}/g" \
            /etc/newrelic/newrelic.cfg &> /dev/null
        fi
        sed -i "s/REPLACE_WITH_REAL_KEY/${_NEWRELIC_KEY}/g" \
          /etc/newrelic/nrsysmond.cfg &> /dev/null
      fi
    fi
    touch ${pthLog}/newrelic-${_X_VERSION}.log
  fi
}
#
# Install or update Drush versions.
get_drush_versions() {
  ###--------------------###
  mkdir -p /opt/tools/drush/{4,6,7}
  chown -R root:root /opt/tools
  rm -f -r /opt/tools/drush/4/*
  cd /opt/tools/drush/4/
  get_dev_ext "drush-${_DRUSH4_VRN}.tar.gz"
  msg "INFO: Drush ${_DRUSH4_VRN} installation complete"
  rm -f -r /opt/tools/drush/6/*
  cd /opt/tools/drush/6/
  get_dev_ext "drush-${_DRUSH6_VRN}.tar.gz"
  cd /opt/tools/drush/6/drush/lib
  get_dev_ext "Console_Table-1.1.3.tgz"
  msg "INFO: Drush ${_DRUSH6_VRN} installation complete"
  rm -f -r /opt/tools/drush/7/*
  cd /opt/tools/drush/7/
  get_dev_ext "drush-${_DRUSH7_VRN}.tar.gz"
  cd /opt/tools/drush/7/drush/
  rm -f -r /opt/tools/drush/7/drush/vendor
  get_dev_ext "vendor-${_DRUSH7_VRN}.tar.gz"
  msg "INFO: Drush ${_DRUSH7_VRN} installation complete"
  find /opt/tools -type d -exec chmod 0755 {} \; &> /dev/null
  find /opt/tools -type f -exec chmod 0644 {} \; &> /dev/null
  chmod 755 /opt/tools/drush/*/drush/drush
  chmod 755 /opt/tools/drush/*/drush/drush.php
  if [ -x "/opt/tools/drush/4/drush/drush" ] ; then
    rm -f /usr/bin/drush4
    ln -s /opt/tools/drush/4/drush/drush /usr/bin/drush4
  fi
  if [ -x "/opt/tools/drush/6/drush/drush" ] ; then
    rm -f /usr/bin/drush6
    ln -s /opt/tools/drush/6/drush/drush /usr/bin/drush6
  fi
  if [ -x "/opt/tools/drush/7/drush/drush" ] ; then
    rm -f /usr/bin/drush7
    rm -f /usr/bin/drush
    ln -s /opt/tools/drush/7/drush/drush /usr/bin/drush7
    ln -s /opt/tools/drush/7/drush/drush /usr/bin/drush
  else
    rm -f /usr/bin/drush7
    if [ -x "/opt/tools/drush/6/drush/drush" ] ; then
      ln -s /opt/tools/drush/6/drush/drush /usr/bin/drush7
    fi
  fi
  if [ -e "/opt/tools/drush/5" ] ; then
    rm -f -r /opt/tools/drush/5
    rm -f /usr/bin/drush5
  fi
  chown -R root:root /opt/tools/drush
  cd /opt/tmp
}
#
# Update packages sources list.
update_sources_list() {
  ###--------------------###
  if [ -e "${pthLog}/apt-fast-install-log.txt" ] \
    || [ -e "/var/log/apt-fast-install-log.txt" ] ; then
    _APT_SOURCES_REWRITE=NO
    if [ ! -z "${_LOCAL_DEBIAN_MIRROR}" ] ; then
      _APT_SOURCES_REWRITE=YES
    fi
    if [ ! -z "${_LOCAL_UBUNTU_MIRROR}" ] ; then
      _APT_SOURCES_REWRITE=YES
    fi
    if [ "$_REL_VERSION" = "lenny" ] ; then
      sed -i "s/^deb.*security.debian.org.*/## security updates no longer \
        available for lenny/g" /etc/apt/sources.list &> /dev/null
      sed -i "s/ftp.*debian.org/archive.debian.org/g" \
        /etc/apt/sources.list &> /dev/null
      sed -i "s/volatile.debian.org/archive.debian.org/g" \
        /etc/apt/sources.list &> /dev/null
    fi
    if [ "${_SQUEEZE_TO_WHEEZY}" = "YES" ] \
      && [ "$_REL_VERSION" = "squeeze" ] ; then
      run_silent_aptitude_full_upgrade
      _LOC_REL_VERSION=squeeze
      _REL_VERSION=wheezy
      _APT_SOURCES_REWRITE=YES
    elif [ "${_LENNY_TO_SQUEEZE}" = "YES" ] \
      && [ "$_REL_VERSION" = "lenny" ] ; then
      run_silent_aptitude_full_upgrade
      _LOC_REL_VERSION=lenny
      _REL_VERSION=squeeze
      _APT_SOURCES_REWRITE=YES
    fi
    if [ "$_REL_VERSION" = "squeeze" ] ; then
      _LTS_TEST=$(grep "DEBIAN LTS UPDATES" /etc/apt/sources.list 2>&1)
      if [[ "$_LTS_TEST" =~ "DEBIAN LTS UPDATES" ]] ; then
        _DO_NOTHING=YES
      else
        _APT_SOURCES_REWRITE=YES
      fi
      _PROPOSED_TEST=$(grep "DEBIAN PROPOSED UPDATES" /etc/apt/sources.list 2>&1)
      if [[ "$_PROPOSED_TEST" =~ "DEBIAN PROPOSED UPDATES" ]] ; then
        _DO_NOTHING=YES
      else
        _APT_SOURCES_REWRITE=YES
      fi
      _VOLATILE_TEST=$(grep "MAJOR BUG FIX UPDATES" /etc/apt/sources.list 2>&1)
      if [[ "$_VOLATILE_TEST" =~ "MAJOR BUG FIX UPDATES" ]] ; then
        _DO_NOTHING=YES
      else
        _APT_SOURCES_REWRITE=YES
      fi
      if [ ! -e "/etc/apt/sources.list.d/mariadb.list" ]; then
        _APT_SOURCES_REWRITE=YES
      fi
    fi
  else
    _APT_SOURCES_REWRITE=YES
  fi
  if [ "$_APT_SOURCES_REWRITE" = "YES" ] ; then
    if [ "${_DEBUG_MODE}" = "YES" ] ; then
      msg "INFO: Updating packages sources list..."
    fi
    mv -f /etc/apt/sources.list \
      /var/backups/sources.list-pre-${_X_VERSION}-${_NOW} &> /dev/null
    if [ "$_THIS_OS" = "Ubuntu" ] ; then
      if [ "${_AUTOPILOT}" = "YES" ] ; then
        if [ -z "${_LOCAL_UBUNTU_MIRROR}" ] ; then
          _MIRROR=archive.ubuntu.com
        else
          _MIRROR=${_LOCAL_UBUNTU_MIRROR}
        fi
      else
        if [ -z "${_LOCAL_UBUNTU_MIRROR}" ] ; then
          msg "INFO: Now looking for the best/fastest $_THIS_OS mirror, \
            this may take a while, please wait..."
          mkdir -p /opt/tmp/helpers
          cd /opt/tmp/helpers
          ${crlGet} "${urlHmr}/helpers/ffmirror.sh.txt" -o ffmirror.sh.txt
          ${crlGet} "${urlHmr}/helpers/apt-list-ubuntu.txt" \
            -o apt-list-ubuntu.txt
          _MIRROR=$(bash ffmirror.sh.txt < apt-list-ubuntu.txt 2>&1)
          _MIRROR=$(bash ffmirror.sh.txt < apt-list-ubuntu.txt 2>&1)
          echo " "
          prompt_confirm_choice "Enter your own mirror to use or press enter \
            to use the fastest found mirror" $_MIRROR
          echo " "
          _MIRROR=$_CONFIRMED_ANSWER
        else
          _MIRROR=${_LOCAL_UBUNTU_MIRROR}
        fi
        if ! netcat -w 5 -z $_MIRROR 80 ; then
          msg "INFO: The mirror $_MIRROR doesn't respond now, let's try default"
          _MIRROR=archive.ubuntu.com
        fi
      fi
      if [ "${_DEBUG_MODE}" = "YES" ] ; then
        msg "INFO: We will use $_THIS_OS mirror $_MIRROR"
      fi
      cd /var/opt
      echo "## MAIN REPOSITORIES" > /etc/apt/sources.list
      echo "deb http://$_MIRROR/ubuntu/ $_REL_VERSION main \
        restricted universe multiverse" >> /etc/apt/sources.list
      echo "deb-src http://$_MIRROR/ubuntu/ $_REL_VERSION main \
        restricted universe multiverse" >> /etc/apt/sources.list
      echo "" >> /etc/apt/sources.list
      echo "## MAJOR BUG FIX UPDATES produced after the final release" >> \
        /etc/apt/sources.list
      echo "deb http://$_MIRROR/ubuntu/ $_REL_VERSION-updates main \
        restricted universe multiverse" >> /etc/apt/sources.list
      echo "deb-src http://$_MIRROR/ubuntu/ $_REL_VERSION-updates main \
        restricted universe multiverse" >> /etc/apt/sources.list
      echo "" >> /etc/apt/sources.list
      echo "## BACKPORTS" >> /etc/apt/sources.list
      echo "deb http://$_MIRROR/ubuntu/ $_REL_VERSION-backports main \
        restricted universe multiverse" >> /etc/apt/sources.list
      echo "deb-src http://$_MIRROR/ubuntu/ $_REL_VERSION-backports main \
        restricted universe multiverse" >> /etc/apt/sources.list
      echo "" >> /etc/apt/sources.list
      echo "## UBUNTU SECURITY UPDATES" >> /etc/apt/sources.list
      echo "deb http://security.ubuntu.com/ubuntu $_REL_VERSION-security \
        main restricted universe multiverse" >> /etc/apt/sources.list
      echo "deb-src http://security.ubuntu.com/ubuntu $_REL_VERSION-security \
        main restricted universe multiverse" >> /etc/apt/sources.list
      if [ -e "${locCnf}/etc-apt-preferences-ubuntu.txt" ] ; then
        cp -af ${locCnf}/etc-apt-preferences-ubuntu.txt /etc/apt/preferences
      else
        ${crlGet} "${urlHmr}/conf/etc-apt-preferences-ubuntu.txt" \
          -o /etc/apt/preferences
      fi
    elif [ "$_THIS_OS" = "Debian" ] ; then
      _MIRROR_CHECK=NO
      if [ "$_REL_VERSION" = "lenny" ] ; then
        _MIRROR=archive.debian.org
      else
        if [ "${_AUTOPILOT}" = "YES" ] ; then
          if [ -z "${_LOCAL_DEBIAN_MIRROR}" ] ; then
            _MIRROR=ftp.debian.org
          else
            _MIRROR=${_LOCAL_DEBIAN_MIRROR}
          fi
        else
          _MIRROR_CHECK=YES
        fi
      fi
      if [ "$_MIRROR_CHECK" = "YES" ] ; then
        if [ -z "${_LOCAL_DEBIAN_MIRROR}" ] ; then
          msg "INFO: Now looking for the best/fastest $_THIS_OS mirror, \
            this may take a while, please wait..."
          mkdir -p /opt/tmp/helpers
          cd /opt/tmp/helpers
          ${crlGet} "${urlHmr}/helpers/ffmirror.sh.txt" -o ffmirror.sh.txt
          ${crlGet} "${urlHmr}/helpers/apt-list-debian.txt" -o apt-list-debian.txt
          _MIRROR=$(bash ffmirror.sh.txt < apt-list-debian.txt 2>&1)
          _MIRROR=$(bash ffmirror.sh.txt < apt-list-debian.txt 2>&1)
          echo " "
          prompt_confirm_choice "Enter your own mirror to use or press enter \
            to use the fastest found mirror" $_MIRROR
          echo " "
          _MIRROR=$_CONFIRMED_ANSWER
        else
          _MIRROR=${_LOCAL_DEBIAN_MIRROR}
        fi
        if ! netcat -w 5 -z $_MIRROR 80 ; then
          msg "INFO: The mirror $_MIRROR doesn't respond now, let's try default"
          _MIRROR=ftp.debian.org
        fi
      fi
      if [ "${_DEBUG_MODE}" = "YES" ] ; then
        msg "INFO: We will use $_THIS_OS mirror $_MIRROR"
      fi
      cd /var/opt
      echo "## MAIN REPOSITORIES" > /etc/apt/sources.list
      echo "deb http://$_MIRROR/debian/ $_REL_VERSION main contrib non-free" \
        >> /etc/apt/sources.list
      echo "deb-src http://$_MIRROR/debian/ $_REL_VERSION main contrib \
        non-free" >> /etc/apt/sources.list
      echo "" >> /etc/apt/sources.list
      echo "## MAJOR BUG FIX UPDATES produced after the final release" \
        >> /etc/apt/sources.list
      if [ "$_REL_VERSION" = "lenny" ] ; then
        echo "deb http://archive.debian.org/debian-volatile \
          $_REL_VERSION/volatile main contrib non-free" >> /etc/apt/sources.list
        echo "deb-src http://archive.debian.org/debian-volatile \
          $_REL_VERSION/volatile main contrib non-free" >> /etc/apt/sources.list
      else
        echo "deb http://$_MIRROR/debian/ $_REL_VERSION-updates main" \
          >> /etc/apt/sources.list
        echo "deb-src http://$_MIRROR/debian/ $_REL_VERSION-updates main" \
          >> /etc/apt/sources.list
        echo "" >> /etc/apt/sources.list
        echo "## DEBIAN SECURITY UPDATES" >> /etc/apt/sources.list
        echo "deb http://security.debian.org/ $_REL_VERSION/updates main \
          contrib non-free" >> /etc/apt/sources.list
        echo "deb-src http://security.debian.org/ $_REL_VERSION/updates main \
          contrib non-free" >> /etc/apt/sources.list
        echo "" >> /etc/apt/sources.list
        echo "## DEBIAN PROPOSED UPDATES" >> /etc/apt/sources.list
        echo "deb http://$_MIRROR/debian/ $_REL_VERSION-proposed-updates main" \
          >> /etc/apt/sources.list
        if [ "$_REL_VERSION" = "wheezy" ] ; then
          if [ -e "${locCnf}/etc-apt-preferences-wheezy.txt" ] ; then
            cp -af ${locCnf}/etc-apt-preferences-wheezy.txt /etc/apt/preferences
          else
            ${crlGet} "${urlHmr}/conf/etc-apt-preferences-wheezy.txt" \
              -o /etc/apt/preferences
          fi
        fi
        if [ "$_REL_VERSION" = "squeeze" ] ; then
          echo "" >> /etc/apt/sources.list
          echo "## DEBIAN LTS UPDATES" >> /etc/apt/sources.list
          echo "deb http://$_MIRROR/debian/ $_REL_VERSION-lts main \
            contrib non-free" >> /etc/apt/sources.list
          echo "deb-src http://$_MIRROR/debian/ $_REL_VERSION-lts main \
            contrib non-free" >> /etc/apt/sources.list
          if [ -e "/etc/apt/apt.conf" ] ; then
            sed -i "s/APT::Default-Release \"squeeze\";/APT::Default-Release \"squeeze-lts\";/g" \
              /etc/apt/apt.conf &> /dev/null
          fi
          if [ -e "${locCnf}/etc-apt-preferences-squeeze.txt" ] ; then
            cp -af ${locCnf}/etc-apt-preferences-squeeze.txt /etc/apt/preferences
          else
            ${crlGet} "${urlHmr}/conf/etc-apt-preferences-squeeze.txt" \
              -o /etc/apt/preferences
          fi
        fi
      fi
    fi
    mkdir -p ${pthLog}
    touch ${pthLog}/apt-fast-install-log.txt
    cd /var/opt
  fi
  if [ ! -e "/etc/apt/preferences" ] ; then
    if [ "$_THIS_OS" = "Ubuntu" ] ; then
      if [ -e "${locCnf}/etc-apt-preferences-ubuntu.txt" ] ; then
        cp -af ${locCnf}/etc-apt-preferences-ubuntu.txt /etc/apt/preferences
      else
        ${crlGet} "${urlHmr}/conf/etc-apt-preferences-ubuntu.txt" \
          -o /etc/apt/preferences
      fi
    else
      if [ "$_REL_VERSION" = "wheezy" ] ; then
        if [ -e "${locCnf}/etc-apt-preferences-wheezy.txt" ] ; then
          cp -af ${locCnf}/etc-apt-preferences-wheezy.txt /etc/apt/preferences
        else
          ${crlGet} "${urlHmr}/conf/etc-apt-preferences-wheezy.txt" \
            -o /etc/apt/preferences
        fi
      else
        if [ -e "${locCnf}/etc-apt-preferences-squeeze.txt" ] ; then
          cp -af ${locCnf}/etc-apt-preferences-squeeze.txt /etc/apt/preferences
        else
          ${crlGet} "${urlHmr}/conf/etc-apt-preferences-squeeze.txt" \
            -o /etc/apt/preferences
        fi
      fi
    fi
  fi
}
#
# Install OpenSSH from sources.
install_ssh_src() {
  _SSH_GET_DPKG=$(dpkg --get-selections | grep ssh | grep hold 2>&1)
  _SSH_INSTALL_REQUIRED=NO
  _SSH_INSTALLED=$(ssh -V 2>&1 \
    | tr -d "\n" \
    | tr -d "," \
    | cut -d"_" -f2 \
    | awk '{ print $1}' 2>&1)
  if [ "$_SSH_FORCE_REINSTALL" = "YES" ] ; then
    _SSH_INSTALL_REQUIRED=YES
    msg "INFO: OpenSSH $_SSH_INSTALLED, rebuild forced"
  elif [ "$_SSH_INSTALLED" = "${_OPENSSH_VRN}" ] ; then
    _DO_NOTHING=YES
  else
    _SSH_INSTALL_REQUIRED=YES
    msg "INFO: Installed OpenSSH version $_SSH_INSTALLED, upgrade required"
  fi
  if [ "$_SSH_INSTALL_REQUIRED" = "YES" ] ; then
    msg "INFO: Installing OpenSSH ${_OPENSSH_VRN}, please wait..."
    cd /var/opt
    rm -f -r openssh*
    get_dev_src "openssh-${_OPENSSH_VRN}.tar.gz"
    cd /var/opt/openssh-${_OPENSSH_VRN}
    st_runner "sh ./configure --without-openssl-header-check --prefix=/usr \
      --with-pam" 2> /dev/null
    st_runner "make --quiet" 2> /dev/null
    st_runner "make --quiet install" 2> /dev/null
    mrun "service ssh restart" &> /dev/null
    if [[ ! "$_SSH_GET_DPKG" =~ "hold" ]] ; then
      aptitude hold openssh-server &> /dev/null
      aptitude hold openssh-client &> /dev/null
      aptitude hold ssh &> /dev/null
      echo "openssh-server hold" | dpkg --set-selections &> /dev/null
      echo "openssh-client hold" | dpkg --set-selections &> /dev/null
      echo "ssh hold" | dpkg --set-selections &> /dev/null
    fi
  else
    if [[ ! "$_SSH_GET_DPKG" =~ "hold" ]] ; then
      aptitude hold openssh-server &> /dev/null
      aptitude hold openssh-client &> /dev/null
      aptitude hold ssh &> /dev/null
      echo "openssh-server hold" | dpkg --set-selections &> /dev/null
      echo "openssh-client hold" | dpkg --set-selections &> /dev/null
      echo "ssh hold" | dpkg --set-selections &> /dev/null
    fi
  fi
  _SSH_FORCE_REINSTALL=NO
}
#
# Install cURL from sources.
install_curl_src() {
  _CURL_INSTALL_REQUIRED=NO
  _CURL_GET_DPKG=$(dpkg --get-selections | grep curl | grep hold 2>&1)
  _CURL_INSTALLED=$(curl --version 2>&1 \
    | tr -d "\n" \
    | cut -d" " -f2 \
    | awk '{ print $1}' 2>&1)
  _CURL_SSL_INSTALLED=$(curl --version 2>&1 \
    | tr -d "\n" \
    | cut -d" " -f5 \
    | awk '{ print $1}' \
    | cut -d"/" -f2 \
    | awk '{ print $1}' 2>&1)
  _CURL_LIB_INSTALLED=$(curl --version 2>&1 \
    | tr -d "\n" \
    | cut -d" " -f4 \
    | awk '{ print $1}' \
    | cut -d"/" -f2 \
    | awk '{ print $1}' 2>&1)
  if [ "$_CURL_INSTALLED" = "${_CURL_VRN}" ] ; then
    if [ "$_CURL_SSL_INSTALLED" = "${_OPENSSL_VRN}" ] ; then
      _CURL_INSTALL_REQUIRED=NO
    else
      if [ "$_REL_VERSION" = "wheezy" ] \
        || [ "$_REL_VERSION" = "trusty" ] \
        || [ "$_REL_VERSION" = "precise" ] ; then
        _DO_NOTHING=YES
      else
        _CURL_INSTALL_REQUIRED=YES
        msg "INFO: Installed cURL $_CURL_INSTALLED with OpenSSL \
          $_CURL_SSL_INSTALLED, rebuild forced"
      fi
    fi
  else
    if [ "$_REL_VERSION" = "wheezy" ] \
      || [ "$_REL_VERSION" = "trusty" ] \
      || [ "$_REL_VERSION" = "precise" ] ; then
      _DO_NOTHING=YES
    else
      _CURL_INSTALL_REQUIRED=YES
      msg "INFO: Installed cURL version $_CURL_INSTALLED, upgrade required"
    fi
  fi
  _BROKEN_CURL_TEST=$(curl --version 2>&1)
  if [[ "$_BROKEN_CURL_TEST" =~ "libcurl.so.4" ]]; then
    _CURL_INSTALL_REQUIRED=YES
    msg "INFO: Installed libcurl is broken, cURL $_CURL_INSTALLED upgrade required"
  fi
  if [ "$_PHP_BIN_BROKEN" = "YES" ] && [ -z "$_CURL_ALREADY_REBUILT" ] ; then
    _CURL_INSTALL_REQUIRED=YES
  fi
  if [ "${_FULL_FORCE_REINSTALL}" = "YES" ] ; then
    _CURL_INSTALL_REQUIRED=YES
    msg "INFO: Installed cURL version $_CURL_INSTALLED, rebuild forced"
  fi
  if [ "$_REL_VERSION" = "wheezy" ] \
    || [ "$_REL_VERSION" = "trusty" ] \
    || [ "$_REL_VERSION" = "precise" ] ; then
    _CURL_INSTALL_REQUIRED=NO
  fi
  if [ "$_CURL_INSTALL_REQUIRED" = "YES" ] ; then
    ###--------------------###
    if [[ ! "$_CURL_GET_DPKG" =~ "hold" ]] ; then
      echo "libcurl3 install" | dpkg --set-selections &> /dev/null
      echo "libcurl3-gnutls install" | dpkg --set-selections &> /dev/null
      echo "libcurl4-openssl-dev install" | dpkg --set-selections &> /dev/null
      aptitude install libcurl3 -y &> /dev/null
      aptitude install libcurl3-gnutls -y &> /dev/null
      aptitude install libcurl4-openssl-dev -y &> /dev/null
      echo "curl hold" | dpkg --set-selections &> /dev/null
      aptitude hold curl &> /dev/null
    fi
    msg "INFO: Installing cURL ${_CURL_VRN}, please wait..."
    cd /var/opt
    rm -f -r curl*
    get_dev_src "curl-${_CURL_VRN}.tar.gz"
    cd /var/opt/curl-${_CURL_VRN}
    st_runner "sh ./configure --prefix=/usr" 2> /dev/null
    st_runner "make --quiet" 2> /dev/null
    st_runner "make --quiet install" 2> /dev/null
    _CURL_ALREADY_REBUILT=YES
    _UP_PHP=YES
  else
    ###--------------------###
    if [ "$_REL_VERSION" = "wheezy" ] \
      || [ "$_REL_VERSION" = "trusty" ] \
      || [ "$_REL_VERSION" = "precise" ] ; then
      if [ "$_CURL_INSTALLED" = "$_CURL_LIB_INSTALLED" ] ; then
        _DO_NOTHING=YES
      else
        if [ "$_REL_VERSION" = "trusty" ] \
          || [ "$_REL_VERSION" = "precise" ] ; then
          apt-mark unhold curl &> /dev/null
        fi
        if [[ "$_CURL_GET_DPKG" =~ "hold" ]]; then
          echo "curl install" | dpkg --set-selections &> /dev/null
          apt-get install curl -y --force-yes --reinstall &> /dev/null
        fi
      fi
    else
      if [[ ! "$_CURL_GET_DPKG" =~ "hold" ]] ; then
        echo "libcurl3 install" | dpkg --set-selections &> /dev/null
        echo "libcurl3-gnutls install" | dpkg --set-selections &> /dev/null
        echo "libcurl4-openssl-dev install" | dpkg --set-selections &> /dev/null
        aptitude install libcurl3 -y &> /dev/null
        aptitude install libcurl3-gnutls -y &> /dev/null
        aptitude install libcurl4-openssl-dev -y &> /dev/null
        echo "curl hold" | dpkg --set-selections &> /dev/null
        aptitude hold curl &> /dev/null
      fi
    fi
  fi
}
#
# Install OpenSSL from sources.
install_ssl_src() {
  _SSL_INSTALL_REQUIRED=NO
  _SSL_GET_DPKG=$(dpkg --get-selections \
    | grep openssl \
    | grep hold 2>&1)
  _SSL_INSTALLED=$(openssl version 2>&1 \
    | tr -d "\n" \
    | cut -d" " -f2 \
    | awk '{ print $1}' 2>&1)
  if [ "${_SSL_INSTALLED}" = "${_OPENSSL_VRN}" ] ; then
    _SPDY_COMPATIBILITY_TEST=$(service nginx configtest 2>&1)
    if [[ "$_SPDY_COMPATIBILITY_TEST" =~ "without OpenSSL ALPN or NPN" ]] ; then
      _SSL_FORCE_REINSTALL=YES
    fi
    if [ "${_FULL_FORCE_REINSTALL}" = "YES" ] \
      || [ "${_SSL_FORCE_REINSTALL}" = "YES" ] ; then
      _SSL_INSTALL_REQUIRED=YES
      _SSH_FORCE_REINSTALL=YES
      _NGX_FORCE_REINSTALL=YES
      _PHP_FORCE_REINSTALL=YES
      _GIT_FORCE_REINSTALL=YES
      rm -f ${pthLog}/pure-ftpd-build-${_PURE_FTPD_VRN}-${_X_VERSION}.log
      rm -f ${pthLog}/mss-build-${_MSS_VRN}-${_X_VERSION}.log
      msg "INFO: Installed OpenSSL version ${_SSL_INSTALLED}, rebuild forced"
    else
      _DO_NOTHING=YES
      _SSH_FORCE_REINSTALL=NO
    fi
  else
    _SSL_INSTALL_REQUIRED=YES
    _SSH_FORCE_REINSTALL=YES
    _NGX_FORCE_REINSTALL=YES
    _PHP_FORCE_REINSTALL=YES
    _GIT_FORCE_REINSTALL=YES
    rm -f ${pthLog}/pure-ftpd-build-${_PURE_FTPD_VRN}-${_X_VERSION}.log
    rm -f ${pthLog}/mss-build-${_MSS_VRN}-${_X_VERSION}.log
    msg "INFO: Installed OpenSSL version ${_SSL_INSTALLED}, upgrade required"
  fi
  if [ "$_SSL_INSTALL_REQUIRED" = "YES" ] ; then
    ###--------------------###
    msg "INFO: Installing zlib ${_ZLIB_VRN}, please wait..."
    cd /var/opt
    rm -f -r zlib*
    get_dev_src "zlib-${_ZLIB_VRN}.tar.gz"
    cd /var/opt/zlib-${_ZLIB_VRN}
    st_runner "./configure --prefix=/usr" 2> /dev/null
    st_runner "make --quiet" 2> /dev/null
    st_runner "make --quiet install" 2> /dev/null
    ###--------------------###
    msg "INFO: Installing OpenSSL ${_OPENSSL_VRN}, please wait..."
    cd /var/opt
    rm -f -r openssl*
    get_dev_src "openssl-${_OPENSSL_VRN}.tar.gz"
    cd /var/opt/openssl-${_OPENSSL_VRN}
    _X86_64_IF=$(uname -m 2>&1)
    if [ "$_X86_64_IF" = "x86_64" ] ; then
      st_runner "sh ./config --prefix=/usr zlib-dynamic --openssldir=/etc/ssl \
        shared enable-ec_nistp_64_gcc_128" 2> /dev/null
      st_runner "make depend" 2> /dev/null
    else
      st_runner "sh ./config --prefix=/usr zlib-dynamic --openssldir=/etc/ssl \
        shared" 2> /dev/null
    fi
    st_runner "make --quiet" 2> /dev/null
    st_runner "make --quiet install" 2> /dev/null
    ###--------------------###
    if [[ ! "$_SSL_GET_DPKG" =~ "hold" ]] ; then
      aptitude install libssl-dev -y &> /dev/null
      aptitude hold openssl &> /dev/null
      aptitude hold zlibc &> /dev/null
      aptitude hold zlib1g &> /dev/null
      aptitude hold zlib1g-dev &> /dev/null
      echo "libssl-dev install" | dpkg --set-selections &> /dev/null
      echo "openssl hold" | dpkg --set-selections &> /dev/null
      echo "zlibc hold" | dpkg --set-selections &> /dev/null
      echo "zlib1g hold" | dpkg --set-selections &> /dev/null
      echo "zlib1g-dev hold" | dpkg --set-selections &> /dev/null
    fi
  else
    if [[ ! "$_SSL_GET_DPKG" =~ "hold" ]] ; then
      aptitude install libssl-dev -y &> /dev/null
      aptitude hold openssl &> /dev/null
      aptitude hold zlibc &> /dev/null
      aptitude hold zlib1g &> /dev/null
      aptitude hold zlib1g-dev &> /dev/null
      echo "libssl-dev install" | dpkg --set-selections &> /dev/null
      echo "openssl hold" | dpkg --set-selections &> /dev/null
      echo "zlibc hold" | dpkg --set-selections &> /dev/null
      echo "zlib1g hold" | dpkg --set-selections &> /dev/null
      echo "zlib1g-dev hold" | dpkg --set-selections &> /dev/null
    fi
  fi
}
#
# Fix multi-IP cron access.
fix_multi_ip_cron_access() {
  rm -f /root/.local.IP.list.allow
  for _IP in `cat /root/.local.IP.list \
    | cut -d '#' -f1 \
    | sort \
    | uniq \
    | tr -d "\s"`;do echo "  allow        $_IP;" >> /root/.local.IP.list.allow;done
  echo "  allow        127.0.0.1;" >> /root/.local.IP.list.allow
  echo "  deny         all;" >> /root/.local.IP.list.allow

  sed -i "s/allow        .*;//g; s/ *$//g; /^$/d" ${mtrTpl}/Inc/vhost_include.tpl.php
  sed -i '/deny         all;/ {r /root/.local.IP.list.allow
d;};' ${mtrTpl}/Inc/vhost_include.tpl.php

  sed -i "s/allow        .*;//g; s/ *$//g; /^$/d" ${mtrTpl}/subdir.tpl.php
  sed -i '/deny         all;/ {r /root/.local.IP.list.allow
d;};' ${mtrTpl}/subdir.tpl.php

  sed -i "s/allow        .*;//g; s/ *$//g; /^$/d" ${mtrInc}/nginx_vhost_common.conf
  sed -i '/deny         all;/ {r /root/.local.IP.list.allow
d;};' ${mtrInc}/nginx_vhost_common.conf

  sed -i "s/allow .*;//g; s/ *$//g; /^$/d" ${mtrNgx}/pre.d/nginx_speed_purge.conf
  sed -i '/deny         all;/ {r /root/.local.IP.list.allow
d;};' ${mtrNgx}/pre.d/nginx_speed_purge.conf
}
#
# Check if the PHP rebuild is required.
check_php_rebuild() {
  if [ "${_FULL_FORCE_REINSTALL}" = "YES" ] \
    || [ "${_PHP_FORCE_REINSTALL}" = "YES" ] ; then
    _PHP_INSTALLED=5.x
    if [ "$1" = "55" ] ; then
      rm -f ${pthLog}/installed-5.5*
    elif [ "$1" = "56" ] ; then
      rm -f ${pthLog}/installed-5.6*
    elif [ "$1" = "54" ] ; then
      rm -f ${pthLog}/installed-5.4*
    elif [ "$1" = "53" ] ; then
      rm -f ${pthLog}/installed-5.3*
    fi
    msg "INFO: PHP to $_PHP_VERSION rebuild forced"
  else
    _PHP_INSTALLED=$(/opt/php$1/bin/php -v \
      | grep 'PHP 5' \
      | cut -d: -f1 \
      | awk '{ print $2}' 2>&1)
  fi
  if [ "$1" = "55" ] || [ "$1" = "56" ] ; then
    if  [ -x "/opt/php$1/bin/php" ] ; then
      _PHP_DRIVERS=$(/opt/php$1/bin/php -i | grep "with-mysql=/usr" 2>&1)
      if [ -z "$_PHP_DRIVERS" ] ; then
        _PHP_DRIVERS_BUILD=NO
      else
        _PHP_DRIVERS_BUILD=YES
      fi
    fi
  fi
  if [ "$_PHP_DRIVERS_BUILD" = "NO" ] \
    || [[ "$_PHP_INSTALLED" =~ "~" ]] \
    || [[ "$_PHP_INSTALLED" =~ "dotdeb" ]] \
    || [[ "$_PHP_INSTALLED" =~ "ubuntu" ]] ; then
    msg "INFO: Installed PHP version $_PHP_INSTALLED, upgrade required"
    install_php_multi "$1"
  else
    if [[ "$_PHP_INSTALLED" =~ "$_PHP_VERSION" ]] ; then
      if [ "$_UP_PHP" = "YES" ] ; then
        if [ ! -z "$_PHP_ALREADY_REBUILT" ] \
          && [ "$_PHP_ALREADY_REBUILT" = "$1" ] ; then
          if [ "${_DEBUG_MODE}" = "YES" ] ; then
            msg "INFO: Installed PHP version $_PHP_INSTALLED, OK"
          fi
        else
          msg "INFO: PHP $_PHP_VERSION rebuild required to include upgraded libs"
          install_php_multi "$1"
        fi
      else
        if [ "${_DEBUG_MODE}" = "YES" ] ; then
          msg "INFO: Installed PHP version $_PHP_INSTALLED, OK"
        fi
      fi
    else
      if [ "${_FULL_FORCE_REINSTALL}" = "YES" ] \
        || [ "${_PHP_FORCE_REINSTALL}" = "YES" ] ; then
        _DO_NOTHING=YES
      else
        msg "INFO: Installed PHP version $_PHP_INSTALLED, upgrade required"
      fi
      install_php_multi "$1"
    fi
  fi
  if [ ! -e "${pthLog}/installed-$_PHP_VERSION-$_MARIADB_VERSION-MariaDB.log" ] ; then
    msg "INFO: PHP $_PHP_VERSION rebuild required to include \
      MariaDB $_MARIADB_VERSION libs"
    install_php_multi "$1"
  fi
}
#
# Check if the PHP build is broken.
check_php_broken() {
  _BROKEN_LIBCURL_TEST=$(/opt/php$1/bin/php -v 2>&1)
  if [[ "$_BROKEN_LIBCURL_TEST" =~ "libcurl.so.4" ]] ; then
    _PHP_BIN_BROKEN=YES
    msg "INFO: PHP $_PHP_VERSION rebuild required to fix broken libcurl"
    install_curl_src
    install_php_multi "$1"
    _PHP_ALREADY_REBUILT=$1
  else
    _PHP_ALREADY_REBUILT=$1
  fi
}
#
# Symlink to dash.
symlink_to_dash() {
  if [ -x "/bin/dash" ] ; then
    rm -f /bin/sh
    ln -s /bin/dash /bin/sh
  fi
}
#
# Symlink to bash.
symlink_to_bash() {
  if [ -x "/bin/bash" ] ; then
    rm -f /bin/sh
    ln -s /bin/bash /bin/sh
  fi
}
#
# Switch to dash.
switch_to_dash() {
  if [ -x "/bin/dash" ] ; then
    sed -i "s/:\/bin\/sh/:\/bin\/dash/g"  /etc/passwd &> /dev/null
    sed -i "s/\/bin\/sh/\/bin\/dash/g" /etc/crontab &> /dev/null
    _X_BIN_PATHS="/bin \
                  /etc/alternatives \
                  /etc/cron.d \
                  /etc/cron.daily \
                  /etc/cron.monthly \
                  /etc/cron.weekly \
                  /etc/init.d \
                  /etc/network/if-down.d \
                  /etc/network/if-up.d \
                  /etc/resolvconf \
                  /etc/webmin \
                  /opt/php53/bin \
                  /opt/php54/bin \
                  /opt/php55/bin \
                  /opt/php56/bin \
                  /sbin \
                  /usr/bin \
                  /usr/lib/ConsoleKit/run-session.d \
                  /usr/lib/git-core \
                  /usr/lib/postfix \
                  /usr/lib/sysstat \
                  /usr/local/bin \
                  /usr/local/libexec/git-core \
                  /usr/local/sbin \
                  /usr/sbin"
    for p in $_X_BIN_PATHS; do
      if [ -e "$p" ] ; then
        for f in `find $p ! -perm -4000 ! -perm -2000 -type f` ; do
          if [[ "$f" =~ "drush"($) ]] \
            || [[ "$f" =~ "clean-boa-env"($) ]] \
            || [[ "$f" =~ "websh"($) ]] ; then
            _SKIP_THIS=YES
          else
            _SHELL_TEST=$(grep -I -o "/bin/sh" $f 2>&1)
            if [ ! -z "$_SHELL_TEST" ] \
              && [ "$f" != "/etc/init.d/clean-boa-env" ] \
              && [ "$f" != "/bin/websh" ] ; then
              sed -i "s/^#\! \/.*/#\!\/bin\/dash/g" $f &> /dev/null
              sed -i "s/\/bin\/sh/\/bin\/dash/g" $f &> /dev/null
            fi
          fi
        done
      fi
    done
  fi
}
#
# Switch to bash.
switch_to_bash() {
  if [ -x "/bin/bash" ] ; then
    sed -i "s/:\/bin\/sh/:\/bin\/bash/g"  /etc/passwd &> /dev/null
    sed -i "s/\/bin\/sh/\/bin\/bash/g" /etc/crontab &> /dev/null
    _X_BIN_PATHS="/bin \
                  /etc/alternatives \
                  /etc/cron.d \
                  /etc/cron.daily \
                  /etc/cron.monthly \
                  /etc/cron.weekly \
                  /etc/init.d \
                  /etc/network/if-down.d \
                  /etc/network/if-up.d \
                  /etc/resolvconf \
                  /etc/webmin \
                  /opt/php53/bin \
                  /opt/php54/bin \
                  /opt/php55/bin \
                  /opt/php56/bin \
                  /sbin \
                  /usr/bin \
                  /usr/lib/ConsoleKit/run-session.d \
                  /usr/lib/git-core \
                  /usr/lib/postfix \
                  /usr/lib/sysstat \
                  /usr/local/bin \
                  /usr/local/libexec/git-core \
                  /usr/local/sbin \
                  /usr/sbin"
    for p in $_X_BIN_PATHS; do
      if [ -e "$p" ] ; then
        for f in `find $p ! -perm -4000 ! -perm -2000 -type f` ; do
          if [[ "$f" =~ "drush"($) ]] \
            || [[ "$f" =~ "clean-boa-env"($) ]] \
            || [[ "$f" =~ "websh"($) ]] ; then
            _SKIP_THIS=YES
          else
            _SHELL_TEST=$(grep -I -o "/bin/sh" $f 2>&1)
            if [ ! -z "$_SHELL_TEST" ] \
              && [ "$f" != "/etc/init.d/clean-boa-env" ] \
              && [ "$f" != "/bin/websh" ] ; then
              sed -i "s/^#\! \/.*/#\!\/bin\/bash/g" $f &> /dev/null
              sed -i "s/\/bin\/sh/\/bin\/bash/g" $f &> /dev/null
            fi
          fi
        done
      fi
    done
  fi
}
#
# Strict Permissions on All Binaries.
strict_bin_permissions() {

  _BIN_PATHS="/bin \
              /etc/alternatives \
              /opt/php53/bin \
              /opt/php54/bin \
              /opt/php55/bin \
              /opt/php56/bin \
              /sbin \
              /usr/bin \
              /usr/local/bin \
              /usr/local/sbin \
              /usr/sbin"

  for p in $_BIN_PATHS; do
    if [ -e "$p" ] ; then
      chown root:root $p &> /dev/null
      chmod 711 $p &> /dev/null
    fi
  done
  for p in $_BIN_PATHS; do
    if [ -e "$p" ] ; then
      for f in `find $p -group users ! -perm -4000 ! -perm -2000 -type f` ; do
        chgrp root $f &> /dev/null
        chmod 750 $f &> /dev/null
      done
    fi
  done
  for p in $_BIN_PATHS; do
    if [ -e "$p" ] ; then
      for f in `find $p -group lshellg ! -perm -4000 ! -perm -2000 -type f` ; do
        chgrp root $f &> /dev/null
        chmod 750 $f &> /dev/null
      done
    fi
  done
  for p in $_BIN_PATHS; do
    if [ -e "$p" ] ; then
      for f in `find $p -group www-data ! -perm -4000 ! -perm -2000 -type f` ; do
        chgrp root $f &> /dev/null
        chmod 750 $f &> /dev/null
      done
    fi
  done
  for p in $_BIN_PATHS; do
    if [ -e "$p" ] ; then
      for f in `find $p -group root ! -perm -4000 ! -perm -2000 -type f` ; do
        chgrp users $f &> /dev/null
        chmod 750 $f &> /dev/null
      done
    fi
  done
  for p in $_BIN_PATHS; do
    if [ -e "$p" ] ; then
      for f in `find $p -group staff ! -perm -4000 ! -perm -2000 -type f` ; do
        chgrp users $f &> /dev/null
        chmod 750 $f &> /dev/null
      done
    fi
  done

  _WEBSERVER_BIN_PATHS="/bin \
                        /etc/alternatives \
                        /sbin \
                        /usr/bin \
                        /usr/local/bin \
                        /usr/local/sbin \
                        /usr/sbin"
  for p in ${_WEBSERVER_BIN_PATHS}; do
    for f in `find $p ! -perm -4000 ! -perm -2000 -type f | grep pdf` ; do
      if [ -e "$f" ] ; then
        chgrp root $f &> /dev/null
        chmod 755 $f &> /dev/null
      fi
    done
  done

  _BACKEND_ITEMS="advdef \
                  advpng \
                  avconv \
                  bash \
                  compass \
                  convert \
                  curl \
                  dash \
                  env \
                  ffmpeg \
                  flvtool2 \
                  git \
                  gs \
                  hhvm \
                  id \
                  java \
                  java6 \
                  java7 \
                  jpegoptim \
                  jpegtran \
                  logger \
                  newrelic-daemon \
                  nrsysmond \
                  pngcrush \
                  pngquant \
                  redis-server \
                  rrdtool \
                  sass \
                  sass-convert \
                  scss \
                  sendmail \
                  wget \
                  which \
                  wkhtmltoimage \
                  wkhtmltopdf"
  if [ ! -z "${_BACKEND_ITEMS_LIST}" ] ; then
    _BACKEND_ITEMS="${_BACKEND_ITEMS} ${_BACKEND_ITEMS_LIST}"
  fi
  for i in ${_BACKEND_ITEMS}; do
    _BIN_ITEM=$(which $i 2>&1)
    if [ -e "$_BIN_ITEM" ] ; then
      chgrp root $_BIN_ITEM &> /dev/null
      chmod 755 $_BIN_ITEM &> /dev/null
    fi
  done

  _PROTECTED_ITEMS="backboa \
                    barracuda \
                    boa \
                    named \
                    octopus \
                    redis-benchmark \
                    redis-check-aof \
                    redis-check-dump \
                    redis-cli \
                    sftp-admin \
                    sftp-kill \
                    sftp-state \
                    syncpass"
  for i in ${_PROTECTED_ITEMS}; do
    _BIN_ITEM=$(which $i 2>&1)
    if [ -e "$_BIN_ITEM" ] ; then
      chown root:root $_BIN_ITEM &> /dev/null
      chmod 700 $_BIN_ITEM &> /dev/null
    fi
  done

  cp -af ${pthBld}/aegir/helpers/websh.sh.txt /bin/websh
  chmod 755 /bin/websh
  chown root:root /bin/websh
  chown root:root /etc/passwd
  chmod 644 /etc/passwd
}
#
# Fix for broken platforms
fix_broken_platforms() {
  # https://www.drupal.org/SA-CORE-2014-005
  if [ -e "/var/xdrago" ] \
    && [ ! -e "/var/xdrago/conf/SA-CORE-2014-005-D7.patch" ] \
    && [ -e "${pthBld}/aegir/patches/7-core/SA-CORE-2014-005-D7.patch" ] ; then
    mkdir -p /var/xdrago/conf
    cp -a ${pthBld}/aegir/patches/7-core/SA-CORE-2014-005-D7.patch \
      /var/xdrago/conf/SA-CORE-2014-005-D7.patch &> /dev/null
  fi
  if [ -e "/var/xdrago" ] \
    && [ -e "/var/xdrago/conf/SA-CORE-2014-005-D7.patch" ] \
    && [ ! -e "${pthLog}/SA-CORE-2014-005-fixed-d7.log" ] ; then
    if [ -d "/data/all/000/core" ] ; then
      for Core in `find /data/all/000/core/drupal-7* -maxdepth 0 \
        -mindepth 0 | sort`; do
        cd $Core
        patch -p1 < /var/xdrago/conf/SA-CORE-2014-005-D7.patch &> /dev/null
      done
    elif [ -d "/data/disk/all/000/core" ] ; then
      for Core in `find /data/disk/all/000/core/drupal-7* -maxdepth 0 \
        -mindepth 0 | sort`; do
        cd $Core
        patch -p1 < /var/xdrago/conf/SA-CORE-2014-005-D7.patch &> /dev/null
      done
    fi
    touch ${pthLog}/SA-CORE-2014-005-fixed-d7.log
    cd
  fi
  # https://www.drupal.org/SA-CORE-2014-005 for ancient platforms
  if [ -e "/var/xdrago" ] \
    && [ -e "/var/xdrago/conf/SA-CORE-2014-005-D7.patch" ] ; then
    if [ -d "/data/all" ] \
      && [ ! -e "${pthLog}/legacy-SA-CORE-2014-005-fixed-d7.log" ] ; then
      for File in `find /data/all/*/*/includes/database/database.inc \
        -maxdepth 0 -mindepth 0 | sort`; do
        Core=$(echo $File | sed 's/\/includes.*//g'| awk '{print $1}' 2>&1)
        if [ -d "$Core" ] ; then
          cd $Core
          patch -p1 < /var/xdrago/conf/SA-CORE-2014-005-D7.patch &> /dev/null
        fi
      done
      touch ${pthLog}/legacy-SA-CORE-2014-005-fixed-d7.log
    elif [ -d "/data/disk/all" ] \
      && [ ! -e "${pthLog}/legacy-SA-CORE-2014-005-fixed-d7eee.log" ] ; then
      for File in `find /data/disk/all/*/*/includes/database/database.inc \
        -maxdepth 0 -mindepth 0 | sort`; do
        Core=$(echo $File | sed 's/\/includes.*//g'| awk '{print $1}' 2>&1)
        if [ -d "$Core" ] ; then
          cd $Core
          patch -p1 < /var/xdrago/conf/SA-CORE-2014-005-D7.patch &> /dev/null
        fi
      done
      touch ${pthLog}/legacy-SA-CORE-2014-005-fixed-d7eee.log
    fi
    cd
  fi
  # https://www.drupal.org/SA-CORE-2014-005 for custom platforms
  if [ -e "/var/xdrago" ] \
    && [ -e "/var/xdrago/conf/SA-CORE-2014-005-D7.patch" ] ; then
    if [ -d "/data/disk" ] \
      && [ ! -e "${pthLog}/batch-custom-SA-CORE-2014-005-fixed-d7.log" ] ; then
      for File in `find /data/disk/*/static/*/includes/database/database.inc \
        -maxdepth 0 -mindepth 0 | sort`; do
        Core=$(echo $File | sed 's/\/includes.*//g'| awk '{print $1}' 2>&1)
        if [ -d "$Core" ] \
          && [ ! -e "$Core/profiles/SA-CORE-2014-005-D7-fix.info" ] ; then
          cd $Core
          patch -p1 < /var/xdrago/conf/SA-CORE-2014-005-D7.patch &> /dev/null
          echo fixed > $Core/profiles/SA-CORE-2014-005-D7-fix.info
        fi
      done
      for File in `find /data/disk/*/static/*/*/includes/database/database.inc \
        -maxdepth 0 -mindepth 0 | sort`; do
        Core=$(echo $File | sed 's/\/includes.*//g'| awk '{print $1}' 2>&1)
        if [ -d "$Core" ] \
          && [ ! -e "$Core/profiles/SA-CORE-2014-005-D7-fix.info" ] ; then
          cd $Core
          patch -p1 < /var/xdrago/conf/SA-CORE-2014-005-D7.patch &> /dev/null
          echo fixed > $Core/profiles/SA-CORE-2014-005-D7-fix.info
        fi
      done
      for File in `find /data/disk/*/static/*/*/*/includes/database/database.inc \
        -maxdepth 0 -mindepth 0 | sort`; do
        Core=$(echo $File | sed 's/\/includes.*//g'| awk '{print $1}' 2>&1)
        if [ -d "$Core" ] \
          && [ ! -e "$Core/profiles/SA-CORE-2014-005-D7-fix.info" ] ; then
          cd $Core
          patch -p1 < /var/xdrago/conf/SA-CORE-2014-005-D7.patch &> /dev/null
          echo fixed > $Core/profiles/SA-CORE-2014-005-D7-fix.info
        fi
      done
      for File in `find /data/disk/*/static/*/*/*/*/includes/database/database.inc \
        -maxdepth 0 -mindepth 0 | sort`; do
        Core=$(echo $File | sed 's/\/includes.*//g'| awk '{print $1}' 2>&1)
        if [ -d "$Core" ] \
          && [ ! -e "$Core/profiles/SA-CORE-2014-005-D7-fix.info" ] ; then
          cd $Core
          patch -p1 < /var/xdrago/conf/SA-CORE-2014-005-D7.patch &> /dev/null
          echo fixed > $Core/profiles/SA-CORE-2014-005-D7-fix.info
        fi
      done
      for File in `find /data/disk/*/static/*/*/*/*/*/includes/database/database.inc \
        -maxdepth 0 -mindepth 0 | sort`; do
        Core=$(echo $File | sed 's/\/includes.*//g'| awk '{print $1}' 2>&1)
        if [ -d "$Core" ] \
          && [ ! -e "$Core/profiles/SA-CORE-2014-005-D7-fix.info" ] ; then
          cd $Core
          patch -p1 < /var/xdrago/conf/SA-CORE-2014-005-D7.patch &> /dev/null
          echo fixed > $Core/profiles/SA-CORE-2014-005-D7-fix.info
        fi
      done
    fi
    cd
    touch ${pthLog}/batch-custom-SA-CORE-2014-005-fixed-d7.log
  fi
}
# Fix for Postfix configuration.
fix_cnf_postfix() {
  _RELOAD_POSTFIX=NO
  _INET_TEST=$(grep 'inet_protocols' /etc/postfix/main.cf 2>&1)
  if [[ "$_INET_TEST" =~ "inet_protocols" ]] ; then
    _INET_TEST=$(grep 'inet_protocols = ipv4' /etc/postfix/main.cf 2>&1)
    if [[ "$_INET_TEST" =~ "ipv4" ]] ; then
      _DO_NOTHING=YES
    else
      sed -i "s/^inet_protocols.*/inet_protocols = ipv4/g" \
        /etc/postfix/main.cf &> /dev/null
      _RELOAD_POSTFIX=YES
    fi
  else
    echo "inet_protocols = ipv4" >> /etc/postfix/main.cf
    _RELOAD_POSTFIX=YES
  fi
  if [ "$_RELOAD_POSTFIX" = "YES" ] ; then
    postfix reload &> /dev/null
  fi
}
#
# Fix init.d to disable not used PHP-FPM versions
php_single_initd_cleanup() {
  if [ ! -z "${_PHP_SINGLE_INSTALL}" ] ; then
    if [ "${_PHP_SINGLE_INSTALL}" = "5.5" ] ; then
      if [ -e "/opt/php56/bin/php" ] ; then
        mv -f /opt/php56/bin/php /var/backups/bin-php56-cli
      fi
      if [ -e "/opt/php54/bin/php" ] ; then
        mv -f /opt/php54/bin/php /var/backups/bin-php54-cli
      fi
      if [ -e "/opt/php53/bin/php" ] ; then
        mv -f /opt/php53/bin/php /var/backups/bin-php53-cli
      fi
      if [ -e "/etc/init.d/php56-fpm" ] ; then
        update-rc.d -f php56-fpm remove &> /dev/null
        mv -f /etc/init.d/php56-fpm /var/backups/initd-php56-fpm
        _FPM_INITD_CLEANUP=YES
      fi
      if [ -e "/etc/init.d/php54-fpm" ] ; then
        update-rc.d -f php54-fpm remove &> /dev/null
        mv -f /etc/init.d/php54-fpm /var/backups/initd-php54-fpm
        _FPM_INITD_CLEANUP=YES
      fi
      if [ -e "/etc/init.d/php53-fpm" ] ; then
        update-rc.d -f php53-fpm remove &> /dev/null
        mv -f /etc/init.d/php53-fpm /var/backups/initd-php53-fpm
        _FPM_INITD_CLEANUP=YES
      fi
    elif [ "${_PHP_SINGLE_INSTALL}" = "5.6" ] ; then
      if [ -e "/opt/php55/bin/php" ] ; then
        mv -f /opt/php55/bin/php /var/backups/bin-php55-cli
      fi
      if [ -e "/opt/php54/bin/php" ] ; then
        mv -f /opt/php54/bin/php /var/backups/bin-php54-cli
      fi
      if [ -e "/opt/php53/bin/php" ] ; then
        mv -f /opt/php53/bin/php /var/backups/bin-php53-cli
      fi
      if [ -e "/etc/init.d/php55-fpm" ] ; then
        update-rc.d -f php55-fpm remove &> /dev/null
        mv -f /etc/init.d/php55-fpm /var/backups/initd-php55-fpm
        _FPM_INITD_CLEANUP=YES
      fi
      if [ -e "/etc/init.d/php54-fpm" ] ; then
        update-rc.d -f php54-fpm remove &> /dev/null
        mv -f /etc/init.d/php54-fpm /var/backups/initd-php54-fpm
        _FPM_INITD_CLEANUP=YES
      fi
      if [ -e "/etc/init.d/php53-fpm" ] ; then
        update-rc.d -f php53-fpm remove &> /dev/null
        mv -f /etc/init.d/php53-fpm /var/backups/initd-php53-fpm
        _FPM_INITD_CLEANUP=YES
      fi
    elif [ "${_PHP_SINGLE_INSTALL}" = "5.4" ] ; then
      if [ -e "/opt/php56/bin/php" ] ; then
        mv -f /opt/php56/bin/php /var/backups/bin-php56-cli
      fi
      if [ -e "/opt/php55/bin/php" ] ; then
        mv -f /opt/php55/bin/php /var/backups/bin-php55-cli
      fi
      if [ -e "/opt/php53/bin/php" ] ; then
        mv -f /opt/php53/bin/php /var/backups/bin-php53-cli
      fi
      if [ -e "/etc/init.d/php56-fpm" ] ; then
        update-rc.d -f php56-fpm remove &> /dev/null
        mv -f /etc/init.d/php56-fpm /var/backups/initd-php56-fpm
        _FPM_INITD_CLEANUP=YES
      fi
      if [ -e "/etc/init.d/php55-fpm" ] ; then
        update-rc.d -f php55-fpm remove &> /dev/null
        mv -f /etc/init.d/php55-fpm /var/backups/initd-php55-fpm
        _FPM_INITD_CLEANUP=YES
      fi
      if [ -e "/etc/init.d/php53-fpm" ] ; then
        update-rc.d -f php53-fpm remove &> /dev/null
        mv -f /etc/init.d/php53-fpm /var/backups/initd-php53-fpm
        _FPM_INITD_CLEANUP=YES
      fi
    elif [ "${_PHP_SINGLE_INSTALL}" = "5.3" ] ; then
      if [ -e "/opt/php56/bin/php" ] ; then
        mv -f /opt/php56/bin/php /var/backups/bin-php56-cli
      fi
      if [ -e "/opt/php55/bin/php" ] ; then
        mv -f /opt/php55/bin/php /var/backups/bin-php55-cli
      fi
      if [ -e "/opt/php54/bin/php" ] ; then
        mv -f /opt/php54/bin/php /var/backups/bin-php54-cli
      fi
      if [ -e "/etc/init.d/php56-fpm" ] ; then
        update-rc.d -f php56-fpm remove &> /dev/null
        mv -f /etc/init.d/php56-fpm /var/backups/initd-php56-fpm
        _FPM_INITD_CLEANUP=YES
      fi
      if [ -e "/etc/init.d/php55-fpm" ] ; then
        update-rc.d -f php55-fpm remove &> /dev/null
        mv -f /etc/init.d/php55-fpm /var/backups/initd-php55-fpm
        _FPM_INITD_CLEANUP=YES
      fi
      if [ -e "/etc/init.d/php54-fpm" ] ; then
        update-rc.d -f php54-fpm remove &> /dev/null
        mv -f /etc/init.d/php54-fpm /var/backups/initd-php54-fpm
        _FPM_INITD_CLEANUP=YES
      fi
    fi
    if [ "$_FPM_INITD_CLEANUP" = "YES" ] ; then
      killall php-fpm &> /dev/null
    fi
    rm -f /opt/local/bin/php
  fi
}
#
# Fix path to PHP-CLI if needed.
check_php_cli() {
  _PHP_CHECK=$(readlink -n /usr/bin/php 2>&1)
  if [ ! -x "$_PHP_CHECK" ] ; then
    if [ "${_PHP_CLI_VERSION}" = "5.5" ] ; then
      _PHP_CLI_PATH="/opt/php55/bin/php"
    elif [ "${_PHP_CLI_VERSION}" = "5.6" ] ; then
      _PHP_CLI_PATH="/opt/php56/bin/php"
    elif [ "${_PHP_CLI_VERSION}" = "5.4" ] ; then
      _PHP_CLI_PATH="/opt/php54/bin/php"
    elif [ "${_PHP_CLI_VERSION}" = "5.3" ] ; then
      _PHP_CLI_PATH="/opt/php53/bin/php"
    else
      _PHP_CLI_PATH=""
    fi
    if [ -x "$_PHP_CLI_PATH" ] ; then
      _USE_PHP_CLI_PATH=$_PHP_CLI_PATH
    else
      if  [ -x "/opt/php55/bin/php" ] ; then
        _USE_PHP_CLI_PATH=/opt/php55/bin/php
      elif  [ -x "/opt/php56/bin/php" ] ; then
        _USE_PHP_CLI_PATH=/opt/php56/bin/php
      elif  [ -x "/opt/php54/bin/php" ] ; then
        _USE_PHP_CLI_PATH=/opt/php54/bin/php
      elif [ -x "/opt/php53/bin/php" ] ; then
        _USE_PHP_CLI_PATH=/opt/php53/bin/php
      fi
    fi
    if [ -x "$_USE_PHP_CLI_PATH" ] ; then
      ln -sf $_USE_PHP_CLI_PATH /usr/bin/php
    else
      msg "WAIT: I can not find PHP-CLI anywhere!"
    fi
  fi
}
#
# Final cleanup.
finale() {
  ###--------------------###
  if [ "${_STATUS}" = "INIT" ] ; then
    _L_ST="install"
    touch ${pthLog}/SA-CORE-2014-005-fixed-d7.log
  else
    _L_ST="upgrade"
  fi
  msg "CARD: Now charging your credit card for this magic show..."
  mrun "sleep 5"
  msg "CARD: Thank you for entering your correct PIN code..."
  mrun "sleep 5"
  msg "CARD: It will take a moment to process your payment..."
  mrun "sleep 8"
  msg "JOKE: Just kidding !!! Enjoy your Aegir Hosting System :)"
  mrun "sleep 5"
  echo " "
  if [ "$_UP_LNX" = "YES" ] ; then
    msg "ALRT! Your OS kernel has been upgraded!"
    if [ ! -e "/usr/sbin/uptrack-upgrade" ] ; then
      msg "ALRT! You *must* reboot immediately to stay secure!"
    else
      msg "NOTE: You have Ksplice rebootless kernel updates installed"
      msg "HINT: Run uptrack-upgrade -y to make sure that all upgrades \
        are fully applied"
    fi
    echo " "
    mrun "sleep 8"
  fi
  msg "Final post-$_L_ST cleaning, one moment..."
  fix_broken_platforms
  mv -f /etc/motd /var/backups/dragon/t/motd-pre-${_X_VERSION}-${_NOW} &> /dev/null
  mv -f /etc/motd-pre-* /var/backups/dragon/t/ &> /dev/null
  echo > /etc/motd
  echo " Barracuda System managed by Skynet Agent v.${_X_VERSION} \
    welcomes you aboard" >> /etc/motd
  echo >> /etc/motd
  echo > /etc/motd.tail
  echo " Barracuda System managed by Skynet Agent v.${_X_VERSION} \
    welcomes you aboard" >> /etc/motd.tail
  echo >> /etc/motd.tail
  aptitude autoclean -y &> /dev/null
  apt-get clean -qq &> /dev/null
  mkdir -p /data/conf/arch
  mv -f /data/conf/global.inc-pre* /data/conf/arch/     &> /dev/null
  mv -f /data/conf/global.inc-before* /data/conf/arch/  &> /dev/null
  mv -f /data/conf/global.inc-missing* /data/conf/arch/ &> /dev/null
  rm -f /tmp/cache.inc*
  rm -f /var/opt/._zendopcache*
  rm -f -r /var/opt/*
  rm -f -r /opt/tmp/*
  rm -f /var/xdrago/monitor/acrashsql.sh
  rm -f /var/xdrago/acrashsql.sh
  rm -f /var/xdrago/usage.sh
  rm -f /var/xdrago/memcache.sh*
  rm -f /var/xdrago/purge_cruft.sh
  rm -f -r /tmp/drush_make_tmp*
  rm -f -r /tmp/make_tmp*
  rm -f /tmp/pm-updatecode*
  rm -f -r /var/aegir/.tmp/cache
  rm -f /var/run/boa_run.pid
  rm -f /var/run/boa_wait.pid
  rm -f /var/run/manage_ltd_users.pid
  rm -f /var/run/manage_rvm_users.pid
  rm -f /var/aegir/.drush/.alias.drushrc.php
  rm -f /data/disk/*/.drush/.alias.drushrc.php
  rm -f ${pthLog}/protected-vhosts-clean.log
  rm -f /var/backups/.auth.IP.list*
  sed -i "s/### access .*//g; s/allow .*;//g; s/deny .*;//g; s/ *$//g; /^$/d" \
    ${mtrNgx}/vhost.d/chive.* &> /dev/null
  sed -i "s/### access .*//g; s/allow .*;//g; s/deny .*;//g; s/ *$//g; /^$/d" \
    ${mtrNgx}/vhost.d/cgp.* &> /dev/null
  sed -i "s/### access .*//g; s/allow .*;//g; s/deny .*;//g; s/ *$//g; /^$/d" \
    ${mtrNgx}/vhost.d/sqlbuddy.* &> /dev/null
  find /etc/[a-z]*\.lock -maxdepth 1 -type f -exec rm -rf {} \; &> /dev/null
  chmod 700 /root
  if [ ! -e "/etc/init.d/buagent" ] \
    && [ -e "/var/backups/buagent-pre-${_X_VERSION}-${_NOW}" ] ; then
    mv -f /var/backups/buagent-pre-${_X_VERSION}-${_NOW} \
      /etc/init.d/buagent &> /dev/null
  fi
  if [ -e "/etc/csf/csf.deny" ] \
    && [ -e "/usr/sbin/csf" ] \
    && [ -e "/var/xdrago/guest-fire.sh" ] \
    && [ -e "/var/xdrago/guest-water.sh" ] ; then
    sed -i "s/.*fire.*//g" /etc/crontab &> /dev/null
    sed -i "s/.*water.*//g" /etc/crontab &> /dev/null
    if [[ "${_THISHOST}" =~ ".host8." ]] ; then
      if [ "${_VMFAMILY}" = "VS" ] ; then
        _DO_NOTHING=YES
      else
        echo "*  *    * * *   root    bash /var/xdrago/guest-fire.sh >/dev/null 2>&1"  >> /etc/crontab
        echo "01 *    * * *   root    bash /var/xdrago/guest-water.sh >/dev/null 2>&1" >> /etc/crontab
      fi
    else
      echo "*  *    * * *   root    bash /var/xdrago/guest-fire.sh >/dev/null 2>&1"  >> /etc/crontab
      echo "01 *    * * *   root    bash /var/xdrago/guest-water.sh >/dev/null 2>&1" >> /etc/crontab
    fi
    sed -i "/^$/d" /etc/crontab &> /dev/null
  else
    sed -i "s/.*fire.*//g" /etc/crontab &> /dev/null
    sed -i "s/.*water.*//g" /etc/crontab &> /dev/null
    sed -i "/^$/d" /etc/crontab &> /dev/null
  fi
  if [ -e "/root/.dbhd.clstr.cnf" ] ; then
    service clean-boa-env stop &> /dev/null
  fi
  killall -9 memcached     &> /dev/null
  chmod 0750 /sbin/audispd &> /dev/null
  service auditd restart   &> /dev/null
  php_single_initd_cleanup
  if [ ! -e "/root/.upstart.cnf" ] ; then
    service cron start     &> /dev/null
  fi
  if [ -e "/usr/sbin/csf" ] && [ -e "/etc/csf/csf.deny" ] ; then
    csf -x &> /dev/null
    csf -e &> /dev/null
    csf -q &> /dev/null
  fi
  cd /
  chmod 711 bin boot data dev emul etc home lib lib64 lib32 media mnt opt \
    sbin selinux srv sys usr var share run &> /dev/null
  chmod 700 root &> /dev/null
  msg "BYE!"
}


###--------------------###
if [ `whoami` = "root" ] ; then
  chmod a+w /dev/null
  if [ ! -e "/dev/fd" ] ; then
    if [ -e "/proc/self/fd" ] ; then
      rm -rf /dev/fd
      ln -s /proc/self/fd /dev/fd
    fi
  fi
  echo " "
  msg "BOA Skynet welcomes you aboard!"
  echo " "
  sleep 3
  chmod a+rw /dev/null
  rm -f -r /opt/tmp/*
  rm -f -r /tmp/drush_make_tmp*
  rm -f -r /tmp/make_tmp*
  rm -f /tmp/pm-updatecode*
  rm -f /tmp/cache.inc*
  if [ ! -e "/root/.upstart.cnf" ] ; then
    service cron stop &> /dev/null
  fi
  touch /var/run/boa_run.pid
  mkdir -p ${pthLog}
  find /etc/[a-z]*\.lock -maxdepth 1 -type f -exec rm -rf {} \; &> /dev/null
  _AWS_TEST_A=$(grep cloudimg /etc/fstab 2>&1)
  _AWS_TEST_B=$(grep cloudconfig /etc/fstab 2>&1)
  if [[ "${_AWS_TEST_A}" =~ "cloudimg" ]] \
    || [[ "${_AWS_TEST_B}" =~ "cloudconfig" ]] ; then
    _VMFAMILY="AWS"
  fi
  _VM_TEST=$(uname -a 2>&1)
  if [[ "${_VM_TEST}" =~ beng ]] ; then
    _VMFAMILY="VS"
    touch /var/run/cloud_vhost.pid
    if [ -d "/etc/webmin" ] ; then
      mrun "dpkg --configure -a" &> /dev/null
      mrun "apt-get clean -qq"   &> /dev/null
      mrun "apt-get update -qq"  &> /dev/null
      mrun "apt-get remove webmin -y --force-yes -qq" &> /dev/null
      mrun "apt-get purge webmin -y --force-yes -qq"  &> /dev/null
      mrun "apt-get autoremove -y --force-yes -qq"    &> /dev/null
      rm -f -r /usr/share/webmin
    fi
    rm -f /etc/apt/sources.list.d/ksplice.list
    rm -f /etc/apt/sources.list.d/longview.list
    rm -f /etc/apt/sources.list.d/webmin.list
  fi
  sleep 1
else
  msg "ERROR: This script should be ran as a root user - please `sudo -i` first"
  clean_pid_exit
fi


###--------------------###
if [ ! -z "${_LOCAL_NETWORK_IP}" ] ; then
  _LOCAL_NETWORK_IP=${_LOCAL_NETWORK_IP//[^0-9.]/}
fi
if [ ! -z "${_LOCAL_NETWORK_HN}" ] ; then
  _LOCAL_NETWORK_HN=${_LOCAL_NETWORK_HN//[^a-zA-Z0-9-.]/}
  _LOCAL_NETWORK_HN=$(echo -n ${_LOCAL_NETWORK_HN} | tr A-Z a-z 2>&1)
fi
if [ ! -z "${_MY_OWNIP}" ] ; then
  _MY_OWNIP=${_MY_OWNIP//[^0-9.]/}
fi
if [ ! -z "${_MY_HOSTN}" ] ; then
  _MY_HOSTN=${_MY_HOSTN//[^a-zA-Z0-9-.]/}
  _MY_HOSTN=$(echo -n ${_MY_HOSTN} | tr A-Z a-z 2>&1)
fi
if [ ! -z "${_MY_FRONT}" ] ; then
  _MY_FRONT=${_MY_FRONT//[^a-zA-Z0-9-.]/}
  _MY_FRONT=$(echo -n ${_MY_FRONT} | tr A-Z a-z 2>&1)
fi
if [ ! -z "${_SMTP_RELAY_HOST}" ] ; then
  _SMTP_RELAY_HOST=${_SMTP_RELAY_HOST//[^a-zA-Z0-9-.]/}
  _SMTP_RELAY_HOST=$(echo -n ${_SMTP_RELAY_HOST} | tr A-Z a-z 2>&1)
fi


###--------------------###
if [ -e "/var/aegir/.drush/hostmaster.alias.drushrc.php" ] ; then
  _STATUS=UPGRADE
  msg "INFO: UPGRADE"
  barracuda_cnf
  touch /var/run/boa_wait.pid
else
  _STATUS=INIT
  if [ -d "/var/aegir" ] ; then
    msg "INFO: FORCED INIT"
    _FULL_FORCE_REINSTALL=YES
  else
    msg "INFO: NORMAL INIT"
  fi
  _ZOMBIE_HOME="/var/backups/zombie/${_X_VERSION}-${_NOW}"
  mkdir -p $_ZOMBIE_HOME
  mv -f /etc/nginx/conf.d/* $_ZOMBIE_HOME/ &> /dev/null
  mv -f /var/aegir $_ZOMBIE_HOME/ &> /dev/null
  mv -f /var/xdrago $_ZOMBIE_HOME/ &> /dev/null
  mv -f /root/.my.cnf $_ZOMBIE_HOME/ &> /dev/null
  mv -f /root/.my.pass.txt $_ZOMBIE_HOME/ &> /dev/null
  cp -af /etc/sudoers $_ZOMBIE_HOME/ &> /dev/null
  sed -i "s/^aegir.*//g" /etc/sudoers &> /dev/null
  deluser aegir &> /dev/null
  rm -f /usr/bin/drush
  if [ ! -z "${_EASY_SETUP}" ] && [[ ! "${_EASY_SETUP}" =~ "NO" ]] ; then
    if [ "${_EASY_SETUP}" != "LOCAL" ] ; then
      if [ -z "${_EASY_HOSTNAME}" ] \
        || [ "${_EASY_HOSTNAME}" = "wildcard-enabled-hostname" ] ; then
        msg "FATAL ERROR: You must define also _EASY_HOSTNAME"
        clean_pid_exit
      fi
    fi
  fi
  if [ "${_EASY_SETUP}" = "LOCAL" ] ; then
    msg "INFO: Localhost Setup Mode Active"
    _XTRAS_LIST="CHV"
    _AUTOPILOT=YES
    _DEBUG_MODE=NO
    _DB_SERVER=MariaDB
    _SSH_PORT=22
    _DNS_SETUP_TEST=NO
    _SMTP_RELAY_TEST=NO
    _LOCAL_NETWORK_IP="127.0.1.1"
    _LOCAL_NETWORK_HN="aegir.local"
  elif [ "${_EASY_SETUP}" = "PUBLIC" ] ; then
    msg "INFO: Public Setup Mode Active"
    _XTRAS_LIST="CSF CHV FTP"
    _AUTOPILOT=YES
    _DEBUG_MODE=NO
    _DB_SERVER=MariaDB
    _SSH_PORT=22
    _DNS_SETUP_TEST=YES
    _SMTP_RELAY_TEST=YES
    _MY_HOSTN="${_EASY_HOSTNAME}"
    _MY_FRONT="master.${_EASY_HOSTNAME}"
    validate_public_ip &> /dev/null
    _MY_OWNIP="${_THISHTIP}"
  elif [ "${_EASY_SETUP}" = "MSTR" ] ; then
    msg "INFO: Cluster Master Mode Active"
    _XTRAS_LIST=""
    _AUTOPILOT=YES
    _DEBUG_MODE=NO
    _DB_SERVER=MariaDB
    _DB_SERIES=10.0
    _SSH_PORT=22
    _DNS_SETUP_TEST=NO
    _SMTP_RELAY_TEST=NO
    _MY_HOSTN="${_EASY_HOSTNAME}"
    _MY_FRONT="master.${_EASY_HOSTNAME}"
    validate_public_ip &> /dev/null
    _MY_OWNIP="${_THISHTIP}"
    if [ ! -e "/root/.mstr.clstr.cnf" ] ; then
      touch /root/.mstr.clstr.cnf
    fi
  elif [ "${_EASY_SETUP}" = "WBHD" ] ; then
    msg "INFO: Cluster WEB Head Mode Active"
    _XTRAS_LIST=""
    _AUTOPILOT=YES
    _DEBUG_MODE=NO
    _DB_SERVER=MariaDB
    _DB_SERIES=10.0
    _SSH_PORT=22
    _DNS_SETUP_TEST=NO
    _SMTP_RELAY_TEST=NO
    _MY_HOSTN="${_EASY_HOSTNAME}"
    _MY_FRONT="master.${_EASY_HOSTNAME}"
    validate_public_ip &> /dev/null
    _MY_OWNIP="${_THISHTIP}"
    if [ ! -e "/root/.wbhd.clstr.cnf" ] ; then
      touch /root/.wbhd.clstr.cnf
    fi
  elif [ "${_EASY_SETUP}" = "DBHD" ] ; then
    msg "INFO: Cluster DB Head Mode Active"
    _XTRAS_LIST=""
    _AUTOPILOT=YES
    _DEBUG_MODE=NO
    _DB_SERVER=MariaDB
    _DB_SERIES=10.0
    _SSH_PORT=22
    _DNS_SETUP_TEST=NO
    _SMTP_RELAY_TEST=NO
    _MY_HOSTN="${_EASY_HOSTNAME}"
    _MY_FRONT="master.${_EASY_HOSTNAME}"
    validate_public_ip &> /dev/null
    _MY_OWNIP="${_THISHTIP}"
    if [ ! -e "/root/.dbhd.clstr.cnf" ] ; then
      touch /root/.dbhd.clstr.cnf
    fi
  fi
  barracuda_cnf
fi
_INITINS="/usr/bin/apt-get -y --force-yes install"
_INSTALL="/usr/bin/apt-get -y --force-yes --config-file \
  /opt/tmp/apt.conf.noninteractive install"
if [ "${_AEGIR_VERSION}" = "HEAD" ] && [ ! -z "${_FORCE_GIT_MIRROR}" ] ; then
  if [ "${_FORCE_GIT_MIRROR}" = "gitorious" ] ; then
    _INSTAPP="/usr/bin/aptitude-fast -f -y -q \
      -o Dpkg::Options::=--force-confdef \
      -o Dpkg::Options::=--force-confold install"
  else
    _INSTAPP="/usr/bin/aptitude -f -y -q \
      -o Dpkg::Options::=--force-confdef \
      -o Dpkg::Options::=--force-confold install"
  fi
else
  _INSTAPP="/usr/bin/aptitude -f -y -q \
    -o Dpkg::Options::=--force-confdef \
    -o Dpkg::Options::=--force-confold install"
fi
_SRCDIR=/opt/tmp/files
rm -f -r /var/opt/*
mkdir -p ${_SRCDIR}
chmod -R 777 /opt/tmp &> /dev/null
rm -f /var/run/aegir_upgrade.pid
if [ "${_STRICT_BIN_PERMISSIONS}" = "YES" ] ; then
  if [ -x "/bin/dash" ] ; then
    symlink_to_dash
    switch_to_dash
  else
    symlink_to_bash
    switch_to_bash
  fi
fi
_PHP_SV=${_PHP_FPM_VERSION//[^0-9]/}
if [ -z "${_PHP_SV}" ] || [ "${_PHP_SV}" = "52" ] ; then
  _PHP_SV=55
fi
_PHP_CN="www${_PHP_SV}"


###--------------------###
if [ "${_STATUS}" = "UPGRADE" ] ; then
  if [ ! -e "/root/.my.cnf" ] ; then
  msg "EXIT on error due to not found file with your ${_DB_SERVER} root password"
  cat <<EOF

  It appears you don't have required file with your root sql password.
  Create this file first and run this script again:

  echo "[client]" > /root/.my.cnf
  echo "user=root" >> /root/.my.cnf
  echo "password=your_SQL_ROOT_password" >> /root/.my.cnf
  chmod 0600 /root/.my.cnf

EOF
  msg "EXIT on error due to not found file with your ${_DB_SERVER} root password"
  clean_pid_exit
  fi
fi


###--------------------###
if [ "${_DEBUG_MODE}" = "YES" ] ; then
  msg "INFO: Checking your system version..."
fi
_THIS_OS=$(lsb_release -si 2>&1)
_THIS_RV=$(lsb_release -sc 2>&1)
if [ "$_THIS_OS" = "Ubuntu" ] ; then
  if [ "$_THIS_RV" = "trusty" ] ; then
    _REL_VERSION="trusty"
    _DB_SERVER=MariaDB
    _DB_SERIES=10.0
    if [ -e "/root/.mstr.clstr.cnf" ] \
      || [ -e "/root/.wbhd.clstr.cnf" ] \
      || [ -e "/root/.dbhd.clstr.cnf" ] ; then
      _MARIADB_VERSION="${_GALERA_10_VRN}"
    else
      _MARIADB_VERSION="${_MARIADB_10_VRN}"
    fi
  elif [ "$_THIS_RV" = "precise" ] ; then
    _REL_VERSION="precise"
  elif [ "$_THIS_RV" = "lucid" ] ; then
    _REL_VERSION="lucid"
  else
    not_supported_os
  fi
elif [ "$_THIS_OS" = "Debian" ] ; then
  if [ "$_THIS_RV" = "wheezy" ] ; then
    _REL_VERSION="wheezy"
    _DB_SERVER=MariaDB
  elif [ "$_THIS_RV" = "squeeze" ] ; then
    _REL_VERSION="squeeze"
  elif [ "$_THIS_RV" = "lenny" ] ; then
    _REL_VERSION="lenny"
    _DB_SERVER=MariaDB
    _DB_SERIES=5.3
    _MARIADB_VERSION=5.3.12
  else
    not_supported_os
  fi
else
  not_supported_os
fi
echo " "
msg "Aegir on $_THIS_OS/$_REL_VERSION - Skynet Agent v.${_X_VERSION}"
echo " "


###--------------------###
if [ "${_STATUS}" = "INIT" ] ; then
  msg "INFO: Installing some basic tools now, please wait..."
  _BROKEN_KEYRING_TEST=$(apt-get update 2>&1)
  if [[ "$_BROKEN_KEYRING_TEST" =~ "signatures were invalid" ]] \
    || [[ "$_BROKEN_KEYRING_TEST" =~ "GPG error" ]]; then
    msg "WARN: Installed keyring is broken, forced reinstall required"
    if [ "$_THIS_OS" = "Debian" ] ; then
      apt-get install debian-keyring ${forCer} &> /dev/null
      apt-get install debian-archive-keyring ${forCer} &> /dev/null
    else
      apt-get install ubuntu-keyring ${forCer} &> /dev/null
    fi
  fi
  apt-get update &> /dev/null
  ${_INITINS} locales &> /dev/null
  fix_locales
  ${_INITINS} lsb-release &> /dev/null
  ${_INITINS} dnsutils &> /dev/null
  ${_INITINS} netcat &> /dev/null
  ${_INITINS} curl &> /dev/null
  ${_INITINS} wget &> /dev/null
fi


###--------------------###
aptitude autoclean -y &> /dev/null
apt-get clean -qq &> /dev/null
update_sources_list
apt-get update &> /dev/null


###--------------------###
if [ "${_STATUS}" = "INIT" ] ; then
  msg "INFO: Installing more basic tools now, please wait..."
  if [ -e "/etc/debian_version" ] ; then
    _L_DEB_TEST=$(grep "^5." /etc/debian_version 2>&1)
    if [ ! -z "$_L_DEB_TEST" ] ; then
      sed -i "s/^deb.*security.debian.org.*/## security updates no longer \
        available for lenny/g" /etc/apt/sources.list &> /dev/null
      sed -i "s/ftp.*debian.org/archive.debian.org/g" \
        /etc/apt/sources.list &> /dev/null
      sed -i "s/volatile.debian.org/archive.debian.org/g" \
        /etc/apt/sources.list &> /dev/null
    fi
  fi
  apt-get update &> /dev/null
  ${_INITINS} locales &> /dev/null
  fix_locales
  ${_INITINS} git-core &> /dev/null
  ${_INITINS} aptitude &> /dev/null
  ${_INITINS} axel &> /dev/null
fi


###--------------------###
wait_for_connection() {
  echo " "
  msg "I can not connect to github.com on port 9418 at the moment"
  msg "I will try again in 60 seconds, please wait..."
  msg "Waiting for attempt $1..."
  sleep 60
}
check_connection() {
  if ! netcat -w 14 -z github.com 9418 ; then
    wait_for_connection "2/4"
    if ! netcat -w 14 -z github.com 9418 ; then
      wait_for_connection "3/4"
      if ! netcat -w 14 -z github.com 9418 ; then
        wait_for_connection "4/4"
        if ! netcat -w 14 -z github.com 9418 ; then
          echo " "
          msg "Sorry, I gave up."
          msg "EXIT on error due to GitHub git server at 9418 downtime"
          msg "Please try to run this script again in a few minutes"
          msg "You may want to check https://status.github.com/messages"
          msg "Also, make sure that the git port 9418 is open"
          msg "Bye"
          clean_pid_exit
        fi
      fi
    fi
  fi
}

if [ "${_SYSTEM_UPGRADE_ONLY}" = "NO" ] && [ "${_AEGIR_VERSION}" = "HEAD" ] ; then
  rm -f -r /opt/tmp/test-*
  check_connection
  _GITHUB_TEST=$(git clone git://github.com/omega8cc/provision.git \
    /opt/tmp/test-provision 2>&1)
  if [[ "${_GITHUB_TEST}" =~ "fatal" ]] ; then
    echo " "
    msg "EXIT on error (provision) due to GitHub downtime"
    msg "Please try to run this script again in a few minutes"
    msg "You may want to check https://status.github.com/messages"
    msg "Bye"
    rm -f -r /opt/tmp/test-*
    clean_pid_exit
  fi
  _GITHUB_TEST=$(git clone git://github.com/omega8cc/hostmaster.git \
    /opt/tmp/test-hostmaster 2>&1)
  if [[ "${_GITHUB_TEST}" =~ "fatal" ]] ; then
    echo " "
    msg "EXIT on error (hostmaster) due to GitHub downtime"
    msg "Please try to run this script again in a few minutes"
    msg "You may want to check https://status.github.com/messages"
    msg "Bye"
    rm -f -r /opt/tmp/test-*
    clean_pid_exit
  fi
  rm -f -r /opt/tmp/test-*
fi
if [[ "${_X_VERSION}" =~ "-dev" ]] ; then
  rm -f -r /opt/tmp/test-*
  _GITHUB_TEST=$(git clone git://github.com/omega8cc/boa.git \
    /opt/tmp/test-boa 2>&1)
  if [[ "${_GITHUB_TEST}" =~ "fatal" ]] ; then
    echo " "
    msg "EXIT on error (boa) due to GitHub downtime"
    msg "Please try to run this script again in a few minutes"
    msg "You may want to check https://status.github.com/messages"
    msg "Bye"
    rm -f -r /opt/tmp/test-*
    clean_pid_exit
  fi
  rm -f -r /opt/tmp/test-*
fi


###--------------------###
if ! netcat -w 14 -z ${_DB_SERVER_SRC} 80 ; then
  echo " "
  msg "EXIT on error due to ${_DB_SERVER_SRC} downtime"
  msg "Please try to run this script again in a few minutes"
  msg "or better yet, hours"
  msg "Bye"
  clean_pid_exit
fi


###--------------------###
_BOA_REPO_NAME="boa"
_BOA_REPO_GIT_URL="git://github.com/omega8cc"
_BOA_REPO_GIT_URLX=${_BOA_REPO_GIT_URL//\//\\\/}
if [ "${_AEGIR_VERSION}" = "HEAD" ] ; then
  check_git_repos_status
fi


###--------------------###
if [ -d "/usr/share/git-core" ] ; then
  chmod 644 /usr/share/git-core/templates/description &> /dev/null
  chmod 644 /usr/share/git-core/templates/hooks/* &> /dev/null
  chmod 644 /usr/share/git-core/templates/info/* &> /dev/null
fi


###--------------------###
if [ "${_DEBUG_MODE}" = "YES" ] ; then
  msg "INFO: Downloading little helpers..."
fi
sleep 1
#
# Git clone all
cd /opt/tmp
rm -f -r ${pthBld}
if [ "${_AEGIR_VERSION}" = "HEAD" ] ; then
  git clone --branch ${_BRANCH_BOA} $_BOA_REPO_GIT_URL/${_BOA_REPO_NAME}.git \
    ${pthBld} &> /dev/null
else
  curl -L --max-redirs 10 -k -s --retry 10 --retry-delay 15 \
    -A iCab "${urlStb}/tar/boa-${_X_VERSION}.tar.gz" | tar -xzf -
  _BOA_REPO_NAME="boa"
  _THIS_CNF="${pthBld}/aegir/conf"
fi
#
if [ ! -e "${pthBld}/aegir/helpers/apt.conf.noninteractive" ] ; then
  echo " "
  msg "EXIT on error due to missing helpers"
  msg "Please try to run this script again in a few minutes"
  msg "Also, make sure that the git port 9418 is open"
  msg "Bye"
  clean_pid_exit
fi
# Get apt helper
rm -f apt.conf.noninteractive*
cp -af ${pthBld}/aegir/helpers/apt.conf.noninteractive ./
#
# Create tmp stuff
if [ "${_STATUS}" = "INIT" ] ; then
  _LOG=/var/backups/barracuda-install-${_NOW}.log
else
  _LOG=/var/backups/barracuda-upgrade-${_NOW}.log
fi
touch ${_LOG}
chmod 600 ${_LOG}
_SILENT=/opt/tmp/silent.log
cd ${_SRCDIR}
#
# Get spinner
rm -f spinner*
cp -af ${pthBld}/aegir/helpers/spinner ./
chmod +x spinner &> /dev/null
#
# Get axelerator
if [ ! -e "/usr/bin/aptitude-fast" ] ; then
  git clone git://github.com/omega8cc/apt-fast.git /opt/tmp/apt-fast &> /dev/null
  cp -af /opt/tmp/apt-fast/apt-fast /usr/bin/aptitude-fast &> /dev/null
  chmod +x /usr/bin/aptitude-fast &> /dev/null
  cd /opt/tmp
fi


###--------------------###
if [ "${_DEBUG_MODE}" = "YES" ] ; then
  msg "INFO: Checking BARRACUDA version..."
fi
if [ "${_AEGIR_VERSION}" = "HEAD" ] ; then
  _FILE_VERSION=barracuda-release.txt
else
  _FILE_VERSION=barracuda-version.txt
fi
if [ -e "${locCnf}/$_FILE_VERSION" ] ; then
  _VERSIONS_TEST=$(cat ${locCnf}/$_FILE_VERSION 2>&1)
  if [[ "${_VERSIONS_TEST}" =~ "-dev" ]] ; then
    if [[ "${_VERSIONS_TEST}" =~ "${_X_VERSION}" ]] \
      && [ "${_AEGIR_VERSION}" = "HEAD" ] ; then
      _VERSIONS_TEST_RESULT=OK
      if [ "${_DEBUG_MODE}" = "YES" ] ; then
        msg "INFO: BARRACUDA version test: OK"
      fi
    else
      _VERSIONS_TEST_RESULT=FAIL
    fi
  else
    if [[ "${_VERSIONS_TEST}" =~ "${_X_VERSION}" ]] \
      && [[ "${_AEGIR_VERSION}" =~ "BOA" ]] ; then
      _VERSIONS_TEST_RESULT=OK
      if [ "${_DEBUG_MODE}" = "YES" ] ; then
        msg "INFO: BARRACUDA version test: OK"
      fi
    else
      _VERSIONS_TEST_RESULT=FAIL
    fi
  fi
  if [ "${_VERSIONS_TEST_RESULT}" = "FAIL" ] ; then
    msg "ERROR: This BARRACUDA version is outdated and will not work correctly"
    msg "Bye"
    clean_pid_exit
  fi
fi
if [ -e "/var/log/barracuda_log.txt" ] ; then
  _SERIES_TEST=$(cat /var/log/barracuda_log.txt 2>&1)
  if [[ "${_SERIES_TEST}" =~ "BOA-2.4." ]] ; then
    if [[ ! "${_X_VERSION}" =~ "BOA-2.4." ]] ; then
      msg "ERROR: Your system has been already upgraded to modern BOA-2.4.x series"
      msg "ERROR: You can not downgrade back to legacy or previous stable BOA version"
      msg "ERROR: Please use barracuda up-stable to upgrade this system"
      msg "Bye"
      clean_pid_exit
    fi
  fi
fi


###--------------------###
if [ "${_STATUS}" = "INIT" ] ; then
  if [ ! -z "${_LOCAL_NETWORK_IP}" ] ; then
    if [ -z "${_LOCAL_NETWORK_HN}" ] ; then
      msg "FATAL ERROR: you must specify also _LOCAL_NETWORK_HN"
      clean_pid_exit
    else
      _DNS_SETUP_TEST=NO
      _SMTP_RELAY_TEST=NO
      _MY_OWNIP="${_LOCAL_NETWORK_IP}"
      _MY_HOSTN="${_LOCAL_NETWORK_HN}"
      _MY_FRONT="${_LOCAL_NETWORK_HN}"
    fi
  fi
fi


###--------------------###
if [ "${_STATUS}" = "INIT" ] ; then
  if [ "${_VMFAMILY}" = "AWS" ] ; then
    _THIS_DB_HOST=localhost
    _LOC_DOM="${_MY_HOSTN}"
    if [ -z "${_MY_OWNIP}" ] ; then
      find_correct_ip
      _MY_OWNIP="${_LOC_IP}"
    else
      _LOC_IP="${_MY_OWNIP}"
    fi
  fi
  _ETH_TEST=$(ifconfig 2>&1)
  if [[ "${_ETH_TEST}" =~ "venet0" ]] ; then
    _IFCONFIG="venet0"
  elif [ -e "/proc/bean_counters" ] ; then
    _IFCONFIG="venet0"
  else
    _IFCONFIG="eth0"
  fi
  if [ ! -z "${_MY_OWNIP}" ] ; then
    if [ ! -z "${_MY_HOSTN}" ] ; then
      _S_N=${_MY_HOSTN}
      _S_T=${_S_N#*.*}
      _S_Q=${_S_N%%${_S_T}}
      _S_E=${_S_Q%*.*}
      if [ ! -z "${_LOCAL_NETWORK_HN}" ] ; then
        if [ "${_EASY_SETUP}" = "LOCAL" ] ; then
          _DO_NOTHING=YES
        else
          sed -i "s/^${_MY_OWNIP}.*//g" /etc/hosts &> /dev/null
          echo "${_MY_OWNIP} ${_MY_HOSTN} chive.${_MY_HOSTN} sqlbuddy.${_MY_HOSTN} \
            cgp.${_MY_HOSTN} $_S_E" >> /etc/hosts
        fi
      fi
      hostname -b ${_MY_HOSTN} ### force our custom FQDN/local hostname
      echo "${_MY_HOSTN}" > /etc/hostname
      echo "${_MY_HOSTN}" > /etc/mailname
    fi
    _THISHTIP="${_MY_OWNIP}"
    _THISHOST="${_MY_HOSTN}"
    _LOC_DOM="${_THISHOST}"
    find_correct_ip
    _THISRDIP="${_LOC_IP}"
    if [ "$_THISRDIP" = "${_THISHTIP}" ] ; then
      _FQDNTEST="TRUE"
      _LOC_DOM="${_MY_FRONT}"
      find_correct_ip
      _THEFRDIP="${_LOC_IP}"
      if [ "$_THEFRDIP" = "${_THISHTIP}" ] ; then
        _TESTHOST=$(uname -n 2>&1)
        _LOC_DOM="$_TESTHOST"
        find_correct_ip
        _TESTRDIP="${_LOC_IP}"
        if [ "$_TESTRDIP" = "${_THISHTIP}" ] ; then
          _FQDNTEST="TRUE"
          hostname -b $_TESTHOST
        else
         _FQDNTEST="FALSE"
        fi
      else
        _FQDNTEST="FALSE"
      fi
    else
      _FQDNTEST="FALSE"
    fi
  else
    _THISHTIP=$(ifconfig ${_IFCONFIG} \
      | grep 'inet addr:' \
      | cut -d: -f2 \
      | awk '{ print $1}' 2>&1)
    if [[ "${_THISHTIP}" =~ "127.0.0." ]] ; then
      _THISHTIP=$(ifconfig ${_IFCONFIG}:0 \
        | grep 'inet addr:' \
        | cut -d: -f2 \
        | awk '{ print $1}' 2>&1)
    fi
    _FQDNPROB=$(uname -n 2>&1)
    _FQDNTEST="FALSE"
    _THISHOST=$(uname -n 2>&1)
    if [ ! -z "$_FQDNPROB" ] ; then
      _THISHOST=$(uname -n 2>&1)
      _THISHOST=${_THISHOST//[^a-zA-Z0-9-.]/}
      _THISHOST=$(echo -n ${_THISHOST} | tr A-Z a-z 2>&1)
      _LOC_DOM="${_THISHOST}"
      find_correct_ip
      _THISRDIP="${_LOC_IP}"
      if [ "$_THISRDIP" = "${_THISHTIP}" ] ; then
        _FQDNTEST="TRUE"
        hostname -b ${_THISHOST}
      else
        _FQDNTEST="FALSE"
        _REVHOSTN=$(host ${_THISHTIP} | cut -d: -f2 | awk '{ print $5}' 2>&1)
        _REVHOSTN=$(echo -n $_REVHOSTN |sed 's/\(.*\)./\1/' 2>&1)
        _REVHOSTN=${_REVHOSTN//[^a-zA-Z0-9-.]/}
        _REVHOSTN=$(echo -n $_REVHOSTN | tr A-Z a-z 2>&1)
        _LOC_DOM="$_REVHOSTN"
        find_correct_ip
        _REVHSTIP="${_LOC_IP}"
        if [ "$_REVHSTIP" = "${_THISHTIP}" ] ; then
          hostname -b $_REVHOSTN
          _THISHOST="$_REVHOSTN"
          _FQDNTEST="TRUE"
        else
          _FQDNTEST="FALSE"
        fi
      fi
    else
      _REVHOSTN=$(host ${_THISHTIP} | cut -d: -f2 | awk '{ print $5}' 2>&1)
      _REVHOSTN=$(echo -n $_REVHOSTN |sed 's/\(.*\)./\1/' 2>&1)
      _REVHOSTN=${_REVHOSTN//[^a-zA-Z0-9-.]/}
      _REVHOSTN=$(echo -n $_REVHOSTN | tr A-Z a-z 2>&1)
      _LOC_DOM="$_REVHOSTN"
      find_correct_ip
      _REVHSTIP="${_LOC_IP}"
      if [ "$_REVHSTIP" = "${_THISHTIP}" ] ; then
        hostname -b $_REVHOSTN
        _THISHOST="$_REVHOSTN"
        _FQDNTEST="TRUE"
      else
       _FQDNTEST="FALSE"
      fi
    fi
  fi
  if [ ! -z "${_MY_FRONT}" ] ; then
    _THIS_FRONT="${_MY_FRONT}"
  else
    _THIS_FRONT="${_THISHOST}"
  fi
  if [ "${_DNS_SETUP_TEST}" = "NO" ] ; then
    _FQDNTEST=TRUE
  fi
  if [ "${_THISHOST}" = "localhost" ] ; then
    msg "FATAL ERROR: you can't use localhost as your FQDN hostname"
    msg "Please try something like: aegir.local"
    clean_pid_exit
  fi
  if [ "$_FQDNTEST" = "FALSE" ] ; then
    echo " "
    msg "EXIT on error due to invalid DNS setup"
    if [ ! -z "${_MY_OWNIP}" ] ; then
      cat <<EOF

  * Your custom _MY_OWNIP is set to "${_MY_OWNIP}"
  * Your custom _MY_HOSTN is set to "${_MY_HOSTN}"
  * Your custom _MY_FRONT is set to "${_MY_FRONT}"

  * Your _MY_HOSTN and/or _MY_FRONT doesn't match your _MY_OWNIP,
    or your hostname is not set properly yet.

  * Please make sure that below command returns your FQDN hostname "${_MY_HOSTN}":

  $ uname -n

EOF
    fi
    cat <<EOF

  Your server needs a working FQDN hostname pointing to its IP address.
  This means that you have to configure DNS for your hostname before
  trying to install BOA. Reverse DNS is not required, though.
  Make sure that DNS A record for ${_THISHOST} points to ${_THISHTIP} and
  then allow some time for DNS propagation before trying this again.
  Alternatively, disable this check with _DNS_SETUP_TEST=NO

EOF
    msg "EXIT on error due to invalid DNS setup"
    clean_pid_exit
  else
    echo "${_THISHOST}" > /etc/hostname
    echo "${_THISHOST}" > /etc/mailname
    hostname -b ${_THISHOST}
    msg "INFO: DNS test: OK"
  fi
  echo " "
  msg "INSTALL START -> checkpoint: "
  cat <<EOF

  * Your e-mail address is ${_MY_EMAIL}
  * Your IP address is ${_THISHTIP}
  * Your hostname is ${_THISHOST}
EOF
  echo " "
  if prompt_yes_no "Do you want to proceed with the install?" ; then
    true
  else
    echo "Installation aborted by you"
    clean_pid_exit
  fi
else ### if [ "${_STATUS}" = "UPGRADE" ] ; then
  _THISHOST=$(cat /etc/hostname 2>&1)
  _THISHOST=$(echo -n ${_THISHOST} | tr -d "\n" 2>&1)
  _THISHOST=${_THISHOST//[^a-zA-Z0-9-.]/}
  _THISHOST=$(echo -n ${_THISHOST} | tr A-Z a-z 2>&1)
  if [ -e "/var/aegir/.drush/hostmaster.alias.drushrc.php" ] ; then
    _THIS_FRONT=$(cat /var/aegir/.drush/hostmaster.alias.drushrc.php \
      | grep "uri'" \
      | cut -d: -f2 \
      | awk '{ print $3}' \
      | sed "s/[\,']//g" 2>&1)
  elif [ ! -z "${_MY_FRONT}" ] ; then
    _THIS_FRONT="${_MY_FRONT}"
  else
    msg "EXIT on error due to not found or not specified Aegir domain"
    msg "Please specify your working Aegir domain as a value of _MY_FRONT"
    clean_pid_exit
  fi
  if [ "${_DEBUG_MODE}" = "YES" ] ; then
    echo " "
    msg "UPGRADE START -> checkpoint: "
    cat <<EOF

  * Your e-mail address is ${_MY_EMAIL}
  * Your server hostname is ${_THISHOST}
  * Your Aegir control panel URL is https://${_THIS_FRONT}

EOF
    echo " "
  fi
  if [ "${_DEBUG_MODE}" = "YES" ] ; then
    if prompt_yes_no "Do you want to proceed with the upgrade?" ; then
      true
    else
      echo "Upgrade aborted by you"
      clean_pid_exit
    fi
  fi
fi


###--------------------###
if [ "${_DEBUG_MODE}" = "YES" ] ; then
  msg "INFO: Cleaning up temp files in /var/opt/"
fi
rm -f -r /var/opt/*
mkdir -p /var/log/php
chmod 777 /var/log/php* &> /dev/null
mkdir -p /var/backups/dragon/{x,z,t}


###--------------------###
msg "INFO: Installing extra Drush versions"
get_drush_versions


###--------------------###
if [ "${_STATUS}" = "UPGRADE" ] ; then
  if [[ "${_X_VERSION}" =~ "2.2.2" ]] ; then
    cp -af /etc/ssl/private/nginx-wild-ssl.crt \
      /etc/ssl/private/pre-2.2.2-nginx-wild-ssl.crt
    cp -af /etc/ssl/private/nginx-wild-ssl.key \
      /etc/ssl/private/pre-2.2.2-nginx-wild-ssl.key
    openssl req -x509 -nodes -days 7300 \
            -subj "/C=US/ST=New York/O=Aegir/OU=Cloud/L=New York/CN=*.${_THISHOST}" \
            -newkey rsa:4096 -keyout /etc/ssl/private/nginx-wild-ssl.key \
            -out /etc/ssl/private/nginx-wild-ssl.crt -batch 2> /dev/null
    sed -i "s/.*variables_hash_max_size .*//g" ${mtrNgx}.conf &> /dev/null
    sed -i "s/fastcgi_temp_file_write_size .*/fastcgi_temp_file_write_size  \
      256k;\n  variables_hash_max_size       1024;/g" ${mtrNgx}.conf  &> /dev/null
    mrun "service nginx restart" &> /dev/null
  fi
  if [ "${_AEGIR_UPGRADE_ONLY}" = "YES" ] \
    && [ "${_SYSTEM_UPGRADE_ONLY}" = "NO" ] ; then
    echo " "
    upgrade_aegir_master
    mrun "sleep 8"
    mrun "service nginx reload" &> /dev/null
    finale
    exit 0
  fi
fi


###--------------------###
if [ -e "/etc/init.d/buagent" ] ; then
  mv -f /etc/init.d/buagent \
    /var/backups/buagent-pre-${_X_VERSION}-${_NOW} &> /dev/null
fi


###--------------------###
if [ "${_SQUEEZE_TO_WHEEZY}" = "YES" ] \
  && [ "${_LOC_REL_VERSION}" = "squeeze" ] ; then
  msg "WARN: Squeeze to Wheezy upgrade will start in 60 seconds..."
  msg "WARN: Now pray it will work... or hit ctrl-c to stop now!"
  if [ ! -e "/root/.upstart.cnf" ] ; then
    service cron stop &> /dev/null
    mrun "sleep 60"
  fi
  check_dns_settings
  if [ "${_USE_PROVIDER_DNS}" = "NO" ] ; then
    mv -f /etc/resolv.conf /etc/resolv.conf.pre-dist-upgrade
    echo "nameserver 8.8.8.8" >/etc/resolv.conf
    echo "nameserver 8.8.4.4" >>/etc/resolv.conf
    cat /etc/resolv.conf.pre-dist-upgrade >>/etc/resolv.conf
  fi
  mv -f /var/xdrago /var/xdrago_wait &> /dev/null
  mv -f /var/xdrago /var/xdrago_wait &> /dev/null
  msg "WARN: Too late! Squeeze to Wheezy upgrade in progress..."
  msg "HINT: Run tail -f ${_LOG}"
  msg "HINT: in another terminal window to watch details"
  _FULL_FORCE_REINSTALL=YES
  _PURGE_MODE=OFF
  rm -f ${mtrNgx}/pre.d/nginx_speed_purge.conf
  if [ -e "/etc/init.d/bind" ] ; then
    rm -f /etc/init.d/bind
  fi
  if [ -e "/etc/default/tomcat" ] && [ -e "/etc/init.d/tomcat" ] ; then
    service tomcat stop &> /dev/null
    mv /etc/init.d/tomcat /etc/init.d/offtomcat
    kill -9 $(ps aux | grep '[t]omcat' | awk '{print $2}') &> /dev/null
  fi
  echo "curl install" | dpkg --set-selections &> /dev/null
  echo "libssl-dev install" | dpkg --set-selections &> /dev/null
  echo "openssh-client install" | dpkg --set-selections &> /dev/null
  echo "openssh-server install" | dpkg --set-selections &> /dev/null
  echo "openssl install" | dpkg --set-selections &> /dev/null
  echo "ssh install" | dpkg --set-selections &> /dev/null
  echo "zlib1g install" | dpkg --set-selections &> /dev/null
  echo "zlib1g-dev install" | dpkg --set-selections &> /dev/null
  echo "zlibc install" | dpkg --set-selections &> /dev/null
  mrun "apt-get remove collectd -y --force-yes -qq" &> /dev/null
  if [ -e "/etc/php5/conf.d" ] ; then
    touch /etc/php5/conf.d/{opcache.ini,apc.ini,imagick.ini,memcached.ini}
    touch /etc/php5/conf.d/{redis.ini,suhosin.ini,newrelic.ini}
  fi
  mrun "aptitude remove php5 \
                        php5-cgi \
                        php5-curl \
                        php5-fpm \
                        php5-gd \
                        php5-geoip \
                        php5-gmp \
                        php5-imagick \
                        php5-imap \
                        php5-ldap \
                        php5-mcrypt \
                        php5-memcache \
                        php5-mysql \
                        php5-sqlite \
                        php5-xmlrpc \
                        php5-xsl -y" &> /dev/null
  mrun "apt-get autoremove -y --force-yes -qq" &> /dev/null
  mrun "aptitude remove phpunit php-pear php-benchmark -y" &> /dev/null
  mrun "aptitude remove php5-cli php5-common -y" &> /dev/null
  mrun "aptitude remove php5-apc -y" &> /dev/null
  mrun "aptitude remove php-apc -y" &> /dev/null
  if [ -e "/etc/php5/conf.d" ] ; then
    rm -f /etc/php5/conf.d/{opcache.ini,imagick.ini,memcached.ini}
    rm -f /etc/php5/conf.d/{apc.ini,redis.ini,suhosin.ini,newrelic.ini}
  fi
  mrun "apt-get purge svscan -y" &> /dev/null
  mrun "apt-get purge pound -y" &> /dev/null
  mrun "apt-get update -y --force-yes" &> /dev/null
  mrun "apt-get autoremove -y --force-yes -qq" &> /dev/null
  mrun "apt-get install apt dpkg aptitude -f -y --force-yes -q \
    --config-file /opt/tmp/apt.conf.noninteractive" 2> /dev/null
  mrun "apt-get dist-upgrade -f -y --force-yes -q \
    --config-file /opt/tmp/apt.conf.noninteractive" 2> /dev/null
  install_upgrade_nginx
  if [ -e "/etc/init.d/bind9" ] && [ ! -e "/etc/init.d/bind" ] ; then
    ln -sf /etc/init.d/bind9 /etc/init.d/bind
  fi
  if [ -d "/var/www/cgp" ] ; then
    st_runner "apt-get install collectd -y --force-yes" 2> /dev/null
  fi
  _L_VM_TEST=$(uname -a 2>&1)
  if [[ "${_L_VM_TEST}" =~ beng ]] ; then
    _REMOVE_LINKS="halt \
                   hwclock.sh \
                   hwclockfirst.sh \
                   ifupdown \
                   ifupdown-clean \
                   klogd \
                   mountall-bootclean.sh \
                   mountall.sh \
                   mountdevsubfs.sh \
                   mountkernfs.sh \
                   mountnfs-bootclean.sh \
                   mountnfs.sh \
                   mountoverflowtmp \
                   mountvirtfs \
                   mtab.sh \
                   networking \
                   reboot \
                   setserial \
                   umountfs \
                   umountnfs.sh \
                   umountroot \
                   urandom"
    for link in $_REMOVE_LINKS
    do
      update-rc.d -f $link remove &> /dev/null
    done
  fi
  mrun "dpkg --configure --force-all -a" 2> /dev/null
  mrun "apt-get update -y" 2> /dev/null
  mrun "dpkg --configure --force-all -a" 2> /dev/null
  mrun "apt-get install aptitude ${forCer}" 2> /dev/null
  mrun "apt-get install util-linux ${forCer}" 2> /dev/null
  mrun "aptitude full-upgrade -f -y -q -o Dpkg::Options::=--force-confdef \
        -o Dpkg::Options::=--force-confold --allow-unauthenticated" 2> /dev/null
  echo rotate > /var/log/syslog &> /dev/null
  mv -f /var/xdrago_wait /var/xdrago &> /dev/null
  msg "INFO: No errors? Then Squeeze to Wheezy upgrade was successful - congrats!"
  msg "HINT: Please remember to reboot when Barracuda will complete all upgrades"
fi


###--------------------###
if [ "${_LENNY_TO_SQUEEZE}" = "YES" ] && [ "${_LOC_REL_VERSION}" = "lenny" ] ; then
  _FULL_FORCE_REINSTALL=YES
  msg "WARN: Lenny to Squeeze upgrade will start in 60 seconds..."
  msg "WARN: Now pray it will work... or hit ctrl-c to stop now!"
  if [ ! -e "/root/.upstart.cnf" ] ; then
    service cron stop &> /dev/null
    mrun "sleep 60"
  fi
  check_dns_settings
  if [ "${_USE_PROVIDER_DNS}" = "NO" ] ; then
    mv -f /etc/resolv.conf /etc/resolv.conf.pre-dist-upgrade
    echo "nameserver 8.8.8.8" >/etc/resolv.conf
    echo "nameserver 8.8.4.4" >>/etc/resolv.conf
    cat /etc/resolv.conf.pre-dist-upgrade >>/etc/resolv.conf
  fi
  mv -f /var/xdrago /var/xdrago_wait &> /dev/null
  msg "WARN: Too late! Lenny to Squeeze upgrade in progress..."
  msg "HINT: Run tail -f ${_LOG}"
  msg "HINT: in another terminal window to watch details"
  if [ -e "/etc/init.d/bind" ] ; then
    rm -f /etc/init.d/bind
  fi
  if [ -e "/etc/default/tomcat" ] && [ -e "/etc/init.d/tomcat" ] ; then
    service tomcat stop &> /dev/null
    mv /etc/init.d/tomcat /etc/init.d/offtomcat
    kill -9 $(ps aux | grep '[t]omcat' | awk '{print $2}') &> /dev/null
  fi
  mrun "apt-get remove collectd -y --force-yes -qq" &> /dev/null
  mrun "apt-get remove libc-client2007b-dev -y --force-yes -qq" &> /dev/null
  mrun "apt-get purge svscan -y" &> /dev/null
  mrun "apt-get purge pound -y" &> /dev/null
  if [[ "${_L_VM_TEST}" =~ beng ]] ; then
    mrun "apt-get remove udev -y --force-yes -qq" &> /dev/null
  fi
  mrun "apt-get remove lsb-release -y --force-yes -qq" &> /dev/null
  mrun "apt-get update -y --force-yes" &> /dev/null
  mrun "apt-get autoremove -y --force-yes -qq" &> /dev/null
  mrun "apt-get install apt dpkg aptitude -f -y --force-yes -q \
    --config-file /opt/tmp/apt.conf.noninteractive" 2> /dev/null
  mrun "apt-get dist-upgrade -f -y --force-yes -q \
    --config-file /opt/tmp/apt.conf.noninteractive" 2> /dev/null
  mrun "apt-get install libgeoip1 libgeoip-dev geoip-database \
    -y --force-yes" 2> /dev/null
  check_install_latest_git
  install_upgrade_nginx
  if [ -e "/etc/init.d/bind9" ] && [ ! -e "/etc/init.d/bind" ] ; then
    ln -sf /etc/init.d/bind9 /etc/init.d/bind
  fi
  if [ -d "/var/www/cgp" ] ; then
    mrun "apt-get install collectd -y --force-yes" 2> /dev/null
  fi
  mrun "apt-get install udev lsb-release libc-client2007e-dev \
    -y --force-yes" 2> /dev/null
  _L_VM_TEST=$(uname -a 2>&1)
  if [[ "${_L_VM_TEST}" =~ beng ]] ; then
    _REMOVE_LINKS="halt \
                   hwclock.sh \
                   hwclockfirst.sh \
                   ifupdown \
                   ifupdown-clean \
                   klogd \
                   mountall-bootclean.sh \
                   mountall.sh \
                   mountdevsubfs.sh \
                   mountkernfs.sh \
                   mountnfs-bootclean.sh \
                   mountnfs.sh \
                   mountoverflowtmp \
                   mountvirtfs \
                   mtab.sh \
                   networking \
                   reboot \
                   setserial \
                   umountfs \
                   umountnfs.sh \
                   umountroot \
                   urandom"
    for link in $_REMOVE_LINKS
    do
      update-rc.d -f $link remove &> /dev/null
    done
  fi
  mrun "aptitude update -y" &> /dev/null
  mrun "dpkg --configure --force-all -a" 2> /dev/null
  mrun "aptitude full-upgrade -f -y -q -o Dpkg::Options::=--force-confdef \
        -o Dpkg::Options::=--force-confold --allow-unauthenticated" 2> /dev/null
  echo rotate > /var/log/syslog &> /dev/null
  mv -f /var/xdrago_wait /var/xdrago &> /dev/null
  msg "INFO: No errors? Then Lenny to Squeeze upgrade was successful - congrats!"
  msg "HINT: Please remember to reboot when Barracuda will complete all upgrades"
fi


###--------------------###
if [ -d "/etc/webmin" ] ; then
  if [ ! -e "${pthLog}/webmin_update_apt_src.log" ] ; then
    cd /var/opt
    echo "## Webmin APT Repository" > /etc/apt/sources.list.d/webmin.list
    echo "deb http://download.webmin.com/download/repository \
      sarge contrib" >> /etc/apt/sources.list.d/webmin.list
    echo "deb http://webmin.mirror.somersettechsolutions.co.uk/repository \
      sarge contrib" >> /etc/apt/sources.list.d/webmin.list
    _KEYS_SERVER_TEST=FALSE
    until [[ "$_KEYS_SERVER_TEST" =~ "GnuPG" ]] ; do
      rm -f jcameron-key.asc*
      wget -q -U iCab ${urlDev}/jcameron-key.asc
      _KEYS_SERVER_TEST=$(grep GnuPG jcameron-key.asc 2>&1)
      sleep 2
    done
    cat jcameron-key.asc | apt-key add - &> /dev/null
    rm -f jcameron-key.asc*
    touch ${pthLog}/webmin_update_apt_src.log
  fi
fi


###--------------------###
msg "INFO: Running system packages update..."
if [ "$_REL_VERSION" = "lenny" ] ; then
  sed -i "s/^deb.*security.debian.org.*/## security updates no longer \
    available for lenny/g" /etc/apt/sources.list &> /dev/null
  sed -i "s/ftp.*debian.org/archive.debian.org/g" \
    /etc/apt/sources.list &> /dev/null
  sed -i "s/volatile.debian.org/archive.debian.org/g" \
    /etc/apt/sources.list &> /dev/null
  st_runner "aptitude autoclean -y" &> /dev/null
  st_runner "apt-get clean -qq" &> /dev/null
else
  st_runner "dpkg --configure --force-all -a" 2> /dev/null
fi
_BROKEN_KEYRING_TEST=$(apt-get update 2>&1)
if [[ "$_BROKEN_KEYRING_TEST" =~ "signatures were invalid" ]] \
  || [[ "$_BROKEN_KEYRING_TEST" =~ "GPG error" ]]; then
  msg "WARN: Installed keyring is broken, forced reinstall required"
  if [ "$_THIS_OS" = "Debian" ] ; then
    st_runner "apt-get install debian-keyring ${forCer}" 2> /dev/null
    st_runner "apt-get install debian-archive-keyring ${forCer}" 2> /dev/null
  else
    st_runner "apt-get install ubuntu-keyring ${forCer}" 2> /dev/null
  fi
fi
st_runner "aptitude update -y" &> /dev/null
_DB_SERVER_TEST=$(mysql -V 2>&1)
if [ "${_STATUS}" = "INIT" ] ; then
  st_runner "aptitude full-upgrade -f -y -q \
    -o Dpkg::Options::=--force-confdef \
    -o Dpkg::Options::=--force-confold" 2> /dev/null
  st_runner "aptitude update -y" &> /dev/null
  st_runner "aptitude full-upgrade -f -y -q \
    -o Dpkg::Options::=--force-confdef \
    -o Dpkg::Options::=--force-confold" 2> /dev/null
  st_runner "aptitude autoclean -y" &> /dev/null
else
  echo "gnupg-curl install" | dpkg --set-selections &> /dev/null
  if [ -e "/etc/php5/conf.d" ] ; then
    touch /etc/php5/conf.d/{opcache.ini,apc.ini,imagick.ini,memcached.ini}
    touch /etc/php5/conf.d/{redis.ini,suhosin.ini,newrelic.ini}
  fi
  st_runner "aptitude remove php5 \
                             php5-cgi \
                             php5-curl \
                             php5-fpm \
                             php5-gd \
                             php5-geoip \
                             php5-gmp \
                             php5-imagick \
                             php5-imap \
                             php5-ldap \
                             php5-mcrypt \
                             php5-memcache \
                             php5-mysql \
                             php5-sqlite \
                             php5-xmlrpc \
                             php5-xsl -y" &> /dev/null
  st_runner "apt-get autoremove -y --force-yes -qq" &> /dev/null
  st_runner "aptitude remove phpunit php-pear php-benchmark -y" &> /dev/null
  st_runner "aptitude remove php5-cli php5-common -y" &> /dev/null
  st_runner "aptitude remove php5-apc -y" &> /dev/null
  st_runner "aptitude remove php-apc -y" &> /dev/null
  if [ -e "/etc/php5/conf.d" ] ; then
    rm -f /etc/php5/conf.d/{opcache.ini,apc.ini,imagick.ini,memcached.ini}
    rm -f /etc/php5/conf.d/{redis.ini,suhosin.ini,newrelic.ini}
  fi
  if [ "$_REL_VERSION" = "squeeze" ] ; then
    if [ -e "/etc/apt/sources.list.d/dotdeb.list" ] ; then
      rm -f /etc/apt/sources.list.d/dotdeb.list
      st_runner "aptitude autoclean -y" &> /dev/null
      st_runner "apt-get clean -qq" &> /dev/null
      st_runner "apt-get update -y --force-yes" &> /dev/null
    fi
  fi
  rm -f /var/lib/mysql/debian-*.flag &> /dev/null
  _KEYS_SERVER_TEST=FALSE
  if [ ! -e "/root/.upstart.cnf" ] ; then
    service cron stop &> /dev/null
  fi
  if [ -e "/usr/sbin/csf" ] && [ -e "/etc/csf/csf.deny" ] ; then
    csf -x &> /dev/null
  fi
  until [[ "$_KEYS_SERVER_TEST" =~ "MariaDB" ]] ; do
    _KEYS_SERVER_TEST=$(apt-key adv --recv-keys \
      --keyserver hkp://keyserver.ubuntu.com:80 1BB943DB 2>&1)
    sleep 2
  done
  _UP_JDK=NO
  _UP_LNX=NO
  _UP_NRC=NO
  _UP_PHP=NO
  check_apt_updates
fi


###--------------------###
if [ "${_STATUS}" = "INIT" ] ; then
  msg "INFO: Installing required libraries and tools"
else
  msg "INFO: Upgrading required libraries and tools"
  if [ ! -e "/etc/init.d/php5-fpm" ] ; then
    cp -af ${locCnf}/php5-fpm-init-vanilla /etc/init.d/php5-fpm
  fi
fi
msg "NOTE! This step may take a few minutes, please wait..."
if [ "${_STATUS}" = "INIT" ] ; then
  if [[ "${_XTRAS_LIST}" =~ "SR" ]] \
    || [[ "${_THISHOST}" =~ ".host8." ]] \
    || [ -e "/root/.auto.up.cnf" ] \
    || [ -e "/root/.host8.cnf" ] ; then
    if [ "$_REL_VERSION" = "wheezy" ] \
      || [ "$_REL_VERSION" = "trusty" ] \
      || [ "$_REL_VERSION" = "precise" ] ; then
      _APT_XTRA="openjdk-7-jre-headless openjdk-6-jre-headless nginx"
    else
      _APT_XTRA="openjdk-6-jre-headless nginx"
    fi
  else
    _APT_XTRA="nginx"
  fi
  _APT_ELSE="netcat nginx"
else
  _APT_ITEM=$(dpkg --get-selections | grep openjdk-6-jdk | grep install 2>&1)
  if [[ "$_APT_ITEM" =~ "install" ]] ; then
    mrun "apt-get remove openjdk-6-jdk -y --force-yes -qq" &> /dev/null
    mrun "apt-get purge openjdk-6-jdk -y --force-yes -qq" &> /dev/null
    mrun "apt-get autoremove -y --force-yes -qq" &> /dev/null
  fi
  _APT_ITEM=$(dpkg --get-selections | grep openjdk-7-jdk | grep install 2>&1)
  if [[ "$_APT_ITEM" =~ "install" ]] ; then
    mrun "apt-get remove openjdk-7-jdk -y --force-yes -qq" &> /dev/null
    mrun "apt-get purge openjdk-7-jdk -y --force-yes -qq" &> /dev/null
    mrun "apt-get autoremove -y --force-yes -qq" &> /dev/null
  fi
  if [[ "${_XTRAS_LIST}" =~ "SR" ]] \
    || [[ "${_THISHOST}" =~ ".host8." ]] \
    || [ -e "/root/.auto.up.cnf" ] \
    || [ -e "/root/.host8.cnf" ] ; then
    if [ "$_REL_VERSION" = "wheezy" ] \
      || [ "$_REL_VERSION" = "trusty" ] \
      || [ "$_REL_VERSION" = "precise" ] ; then
      _APT_XTRA="openjdk-7-jre-headless openjdk-6-jre-headless"
    else
      _APT_XTRA="openjdk-6-jre-headless"
    fi
  else
    _APT_XTRA=""
  fi
  _APT_ELSE="netcat"
  _BROKEN_KEYRING_TEST=$(apt-get update 2>&1)
  if [[ "$_BROKEN_KEYRING_TEST" =~ "signatures were invalid" ]] \
    || [[ "$_BROKEN_KEYRING_TEST" =~ "GPG error" ]]; then
    msg "WARN: Installed keyring is broken, forced reinstall required"
    if [ "$_THIS_OS" = "Debian" ] ; then
      st_runner "apt-get install debian-keyring ${forCer}" 2> /dev/null
      st_runner "apt-get install debian-archive-keyring ${forCer}" 2> /dev/null
    else
      st_runner "apt-get install ubuntu-keyring ${forCer}" 2> /dev/null
    fi
  fi
  mrun "apt-get -f install -qq"                         &> /dev/null
  mrun "service nginx start"                            &> /dev/null
  mrun "apt-get remove nginx-extras -y --force-yes -qq" &> /dev/null
  mrun "apt-get remove nginx -y --force-yes -qq"        &> /dev/null
  mrun "apt-get remove nginx-common -y --force-yes -qq" &> /dev/null
  mrun "apt-get remove nginx-full -y --force-yes -qq"   &> /dev/null
  mrun "apt-get remove redis-server -y --force-yes -qq" &> /dev/null
  st_runner "apt-get autoremove -y --force-yes -qq"     &> /dev/null
  st_runner "apt-get update -y --force-yes"             &> /dev/null
fi
_EXTRA_LIB_APT="libmcrypt-dev"
if [ ! -z "${_EXTRA_PACKAGES}" ] ; then
  _EXTRA_PACKAGES="screen ${_EXTRA_PACKAGES}"
else
  _EXTRA_PACKAGES="screen"
fi
_ETH_TEST=$(ifconfig 2>&1)
_VM_TEST=$(uname -a 2>&1)
if [[ "${_ETH_TEST}" =~ "venet0" ]] || [ -e "/proc/bean_counters" ] ; then
  _IS_VZ="YES"
else
  _IS_VZ="NO"
fi
if [ "$_IS_VZ" = "YES" ] \
  || [ -e "/root/.use.sysklogd.cnf" ] \
  || [ "$_REL_VERSION" = "trusty" ] \
  || [ "$_REL_VERSION" = "precise" ] ; then
  _SYSLOGD=sysklogd
   mrun "apt-get purge rsyslog -y" &> /dev/null
   mrun "killall -9 rsyslogd" &> /dev/null
else
  _SYSLOGD=rsyslog
fi
if [ "${_NGINX_SPDY}" = "YES" ] \
  || [ "${_SSL_FROM_SOURCES}" = "YES" ] \
  || [ "${_NGINX_FORWARD_SECRECY}" = "YES" ] ; then
  if [ "$_REL_VERSION" = "wheezy" ] \
    || [ "$_REL_VERSION" = "trusty" ] \
    || [ "$_REL_VERSION" = "precise" ] ; then
    _SSB_SRC=NO
  else
    _SSB_SRC=YES
  fi
else
  _SSB_SRC=NO
fi
if [ "$_SSB_SRC" = "YES" ] ; then
  _EXTRA_PACKAGES="libcurl4-openssl-dev \
                   ${_EXTRA_PACKAGES}"
else
  _EXTRA_PACKAGES="curl \
                   libcurl4-openssl-dev \
                   ${_EXTRA_PACKAGES}"
fi
if [ "$_REL_VERSION" = "trusty" ] ; then
  _EXTRA_PACKAGES="libgd2-noxpm-dev \
                   libgd2-xpm-dev \
                   libgd2-dev \
                   libgd3 \
                   libxpm-dev \
                   ${_EXTRA_PACKAGES}"
else
  _EXTRA_PACKAGES="libgd2-xpm \
                   ${_EXTRA_PACKAGES}"
fi

if [[ "_XTRAS_LIST" =~ "IMG" ]] ; then
  _EXTRA_PACKAGES="advancecomp \
                   jpegoptim \
                   libjpeg-progs \
                   optipng \
                   pngcrush \
                   pngquant \
                   ${_EXTRA_PACKAGES}"
fi

if [ "$_REL_VERSION" = "wheezy" ] \
  || [ "$_REL_VERSION" = "squeeze" ] \
  || [ "$_REL_VERSION" = "trusty" ] \
  || [ "$_REL_VERSION" = "precise" ] \
  || [ "$_REL_VERSION" = "lucid" ] ; then
  _DEBDEPS="apticron \
            $_APT_XTRA \
            $_EXTRA_LIB_APT \
            ${_EXTRA_PACKAGES} \
            $_SYSLOGD \
            aptitude \
            auditd \
            autoconf2.13 \
            automake \
            automake1.4 \
            autotools-dev \
            bc \
            bison \
            build-essential \
            catdoc \
            cron \
            cvs \
            cython \
            defoma \
            devscripts \
            dnsutils \
            dstat \
            flex \
            fontconfig-config \
            geoip-database \
            gettext \
            ghostscript \
            gnupg \
            gnupg-curl \
            gnupg2 \
            htop \
            ifstat \
            imagemagick \
            iptables \
            ldap-utils \
            lemon \
            lftp \
            libapr1 \
            libaprutil1 \
            libc-client-dev \
            libc-client2007e \
            libc-client2007e-dev \
            libfilesys-diskspace-perl \
            libfontconfig1 \
            libfreetype6 \
            libfreetype6-dev \
            libfribidi0 \
            libgeoip-dev \
            libgeoip1 \
            libgmp3-dev \
            libhtml-template-perl \
            libjpeg-dev \
            libjpeg62 \
            libmagickwand-dev \
            libnet-daemon-perl \
            libpam-umask \
            libpam-unix2 \
            libpcre3 \
            libpcre3-dev \
            libplrpc-perl \
            libpng12-0 \
            libpng12-dev \
            libpq5 \
            libsasl2-modules \
            libssl-dev \
            libt1-5 \
            libt1-dev \
            libterm-readkey-perl \
            libtool \
            libwww-perl \
            libxcrypt1 \
            libxml2-dev \
            libxpm4 \
            libxslt-dev \
            libxslt1-dbg \
            libxslt1-dev \
            libxslt1.1 \
            m4 \
            makepasswd \
            mc \
            mcrypt \
            nano \
            ncurses-dev \
            ncurses-term \
            netcat \
            ntpdate \
            p7zip-full \
            pdftk \
            postfix \
            postfix-pcre \
            pwgen \
            python-dev \
            python-software-properties \
            re2c \
            rrdtool \
            rsync \
            s3cmd \
            shtool \
            sipcalc \
            ssh \
            ssl-cert \
            subversion \
            sudo \
            symlinks \
            sysstat \
            sysvinit-utils \
            t1lib-bin \
            telnet \
            time \
            ttf-dejavu \
            ttf-dejavu-core \
            ttf-dejavu-extra \
            udev \
            unrtf \
            unzip \
            vim \
            whois \
            xml-core \
            xml2 \
            xpdf \
            zip \
            zlib1g-dev \
            zlibc"
elif [ "$_REL_VERSION" = "lenny" ] ; then
  _DEBDEPS="apticron \
            $_APT_ELSE \
            $_EXTRA_LIB_APT \
            ${_EXTRA_PACKAGES} \
            $_SYSLOGD \
            aptitude \
            auditd \
            autoconf2.13 \
            automake \
            automake1.4 \
            autotools-dev \
            bc \
            bison \
            build-essential \
            catdoc \
            cron \
            cvs \
            cython \
            defoma \
            devscripts \
            dnsutils \
            dstat \
            flex \
            fontconfig-config \
            gettext \
            ghostscript \
            gnupg \
            gnupg-curl \
            gnupg2 \
            htop \
            ifstat \
            imagemagick \
            iptables \
            ldap-utils \
            lemon \
            lftp \
            libapr1 \
            libaprutil1 \
            libc-client-dev \
            libc-client2007b \
            libc-client2007b-dev \
            libfilesys-diskspace-perl \
            libfontconfig1 \
            libfreetype6 \
            libfreetype6-dev \
            libfribidi0 \
            libgeoip-dev \
            libgeoip1 \
            libgmp3-dev \
            libhtml-template-perl \
            libjpeg-dev \
            libjpeg62 \
            libmagick9-dev \
            libnet-daemon-perl \
            libpam-umask \
            libpcre3 \
            libpcre3-dev \
            libplrpc-perl \
            libpng12-0 \
            libpng12-dev \
            libpq5 \
            libsasl2-modules \
            libssl-dev \
            libt1-5 \
            libt1-dev \
            libterm-readkey-perl \
            libtool \
            libwww-perl \
            libxml2-dev \
            libxpm4 \
            libxslt-dev \
            libxslt1-dbg \
            libxslt1-dev \
            libxslt1.1 \
            m4 \
            makepasswd \
            mc \
            mcrypt \
            nano \
            ncurses-dev \
            ncurses-term \
            ntpdate \
            openjdk-6-jre-headless \
            p7zip-full \
            pdftk \
            postfix \
            postfix-pcre \
            pwgen \
            python-dev \
            re2c \
            rrdtool \
            rsync \
            shtool \
            sipcalc \
            ssh \
            ssl-cert \
            subversion \
            sudo \
            symlinks \
            sysstat \
            sysvconfig \
            t1lib-bin \
            telnet \
            time \
            ttf-dejavu \
            ttf-dejavu-core \
            ttf-dejavu-extra \
            udev \
            unrtf \
            unzip \
            vim \
            whois \
            xml-core \
            xml2 \
            xpdf \
            zip \
            zlib1g-dev \
            zlibc"
fi

install_with_aptitude_deps() {
  st_runner "$_INSTAPP ${_DEBDEPS}" 2> /dev/null
  if [ -x "/usr/bin/gpg2" ] ; then
    _GPG=gpg2
  else
    _GPG=gpg
  fi
  if [[ "${_XTRAS_LIST}" =~ "FMG" ]] ; then
    if [ "$_REL_VERSION" = "squeeze" ] ; then
      _EXTRA_APT="tree ffmpeg flvtool2 libavcodec52"
    elif [ "$_REL_VERSION" = "lucid" ] ; then
      _EXTRA_APT="tree ffmpeg flvtool2 libavcodec-extra-52"
    elif [ "$_REL_VERSION" = "wheezy" ] || [ "$_REL_VERSION" = "trusty" ] \
      || [ "$_REL_VERSION" = "precise" ] ; then
      _EXTRA_APT="tree ffmpeg flvtool2 libavcodec-extra-53"
    else
      _EXTRA_APT="tree ffmpeg flvtool2 libavcodec51"
    fi
  else
    _EXTRA_APT="tree"
  fi
  st_runner "apt-get install $_EXTRA_APT -f -y --force-yes -q \
    --config-file /opt/tmp/apt.conf.noninteractive" 2> /dev/null
}
install_mariadb_sql() {
  cd /var/opt
  _KEYS_SERVER_TEST=FALSE
  until [[ "$_KEYS_SERVER_TEST" =~ "MariaDB" ]] ; do
    _KEYS_SERVER_TEST=$(apt-key adv --recv-keys \
      --keyserver hkp://keyserver.ubuntu.com:80 1BB943DB 2>&1)
    sleep 2
  done
  if [ "$_REL_VERSION" = "trusty" ] ; then
    st_runner "$_INSTAPP software-properties-common" 2> /dev/null
  fi
  if [ "$_THIS_OS" = "Debian" ] ; then
    _THIS_OS_NAME=debian
  elif [ "$_THIS_OS" = "Ubuntu" ] ; then
    _THIS_OS_NAME=ubuntu
  fi
  if [ "$_REL_VERSION" = "trusty" ] ; then
    _DB_SERIES=10.0
    if [ -e "/root/.mstr.clstr.cnf" ] \
      || [ -e "/root/.wbhd.clstr.cnf" ] \
      || [ -e "/root/.dbhd.clstr.cnf" ] ; then
      _MARIADB_VERSION="${_GALERA_10_VRN}"
    else
      _MARIADB_VERSION="${_MARIADB_10_VRN}"
    fi
    msg "INFO: Forced MariaDB $_MARIADB_VERSION in $_THIS_OS/$_REL_VERSION"
  elif [ "$_REL_VERSION" = "lenny" ] ; then
    _DB_SERIES=5.3
    _MARIADB_VERSION=5.3.12
    msg "INFO: Forced MariaDB $_MARIADB_VERSION in $_THIS_OS/$_REL_VERSION"
  else
    if [ "${_DB_SERIES}" = "10.0" ] || [ "${_DB_SERIES}" = "5.5" ] ; then
      _DO_NOTHING=YES
    else
      _DB_SERIES=5.5
      _MARIADB_VERSION="${_MARIADB_5_VRN}"
      msg "INFO: Forced MariaDB $_MARIADB_VERSION in $_THIS_OS/$_REL_VERSION"
    fi
    if [ -z "${_DB_SERIES}" ] ; then
      _DB_SERIES=5.5
      _MARIADB_VERSION="${_MARIADB_5_VRN}"
      msg "INFO: Forced MariaDB $_MARIADB_VERSION in $_THIS_OS/$_REL_VERSION"
    fi
  fi
  _THIS_REL_VERSION="$_REL_VERSION"
  echo "## MariaDB APT Repository" > /etc/apt/sources.list.d/mariadb.list
  echo "deb http://${_DB_SERVER_SRC}/pub/mariadb/repo/${_DB_SERIES}/$_THIS_OS_NAME \
    $_THIS_REL_VERSION main" >> /etc/apt/sources.list.d/mariadb.list
  echo "deb-src http://${_DB_SERVER_SRC}/pub/mariadb/repo/${_DB_SERIES}/$_THIS_OS_NAME \
    $_THIS_REL_VERSION main" >> /etc/apt/sources.list.d/mariadb.list
  _BROKEN_KEYRING_TEST=$(apt-get update 2>&1)
  if [[ "$_BROKEN_KEYRING_TEST" =~ "signatures were invalid" ]] \
    || [[ "$_BROKEN_KEYRING_TEST" =~ "GPG error" ]]; then
    msg "WARN: Installed keyring is broken, forced reinstall required"
    if [ "$_THIS_OS" = "Debian" ] ; then
      st_runner "apt-get install debian-keyring ${forCer}" 2> /dev/null
      st_runner "apt-get install debian-archive-keyring ${forCer}" 2> /dev/null
    else
      st_runner "apt-get install ubuntu-keyring ${forCer}" 2> /dev/null
    fi
  fi
  st_runner "aptitude remove mytop -y"                     &> /dev/null
  st_runner "apt-get purge mytop -y"                       &> /dev/null
  rm -f /usr/bin/mytop
  st_runner "apt-get autoremove -y --force-yes -qq"        &> /dev/null
  st_runner "aptitude remove mysql-common -y"              &> /dev/null
  st_runner "apt-get purge mysql-common -y"                &> /dev/null
  st_runner "apt-get autoremove -y --force-yes -qq"        &> /dev/null
  st_runner "apt-get update -y --force-yes"                &> /dev/null
  if [ "${_EASY_SETUP}" = "MSTR" ] \
    || [ "${_EASY_SETUP}" = "DBHD" ] \
    || [ "${_EASY_SETUP}" = "WBHD" ] \
    || [ -e "/etc/mysql/conf.d/galera.cnf" ] \
    || [ -e "/root/.mstr.clstr.cnf" ] \
    || [ -e "/root/.dbhd.clstr.cnf" ] \
    || [ -e "/root/.wbhd.clstr.cnf" ] ; then
    SQLDEB="galera \
            mariadb-galera-server"
  else
    SQLDEB="mariadb-server-${_DB_SERIES} \
            mariadb-client-${_DB_SERIES} \
            mariadb-common"
  fi
  SQLADD="libmariadbclient-dev \
          libmariadbclient16 \
          libmariadbd-dev \
          libdbd-mysql-perl \
          python-mysqldb \
          libdbi-perl"
}
install_with_aptitude_sql() {
  if [ "$_REL_VERSION" = "squeeze" ] \
    || [ "$_REL_VERSION" = "trusty" ] \
    || [ "$_REL_VERSION" = "precise" ] \
    || [ "$_REL_VERSION" = "lucid" ] ; then
    if [ "${_EASY_SETUP}" = "MSTR" ] \
      || [ "${_EASY_SETUP}" = "DBHD" ] \
      || [ "${_EASY_SETUP}" = "WBHD" ] \
      || [ -e "/etc/mysql/conf.d/galera.cnf" ] \
      || [ -e "/root/.mstr.clstr.cnf" ] \
      || [ -e "/root/.dbhd.clstr.cnf" ] \
      || [ -e "/root/.wbhd.clstr.cnf" ] ; then
      msg "INFO: Installing MariaDB Galera Cluster, please wait..."
    else
      msg "INFO: Installing MariaDB, please wait..."
    fi
  else
    if [ "${_EASY_SETUP}" = "MSTR" ] \
      || [ "${_EASY_SETUP}" = "DBHD" ] \
      || [ "${_EASY_SETUP}" = "WBHD" ] \
      || [ -e "/etc/mysql/conf.d/galera.cnf" ] \
      || [ -e "/root/.mstr.clstr.cnf" ] \
      || [ -e "/root/.dbhd.clstr.cnf" ] \
      || [ -e "/root/.wbhd.clstr.cnf" ] ; then
      msg "INFO: Installing MariaDB Galera Cluster, please wait..."
    else
      msg "INFO: Installing MariaDB, please wait..."
    fi
  fi
  install_mariadb_sql
  st_runner "$_INSTAPP mytop" 2> /dev/null
  touch ${pthLog}/fixed-mytop-mariadb.log
  st_runner "$_INSTAPP $SQLDEB" 2> /dev/null
  st_runner "$_INSTAPP $SQLADD" 2> /dev/null
  st_runner "$_INSTAPP $SQLDEB" 2> /dev/null
  if [ "${_EASY_SETUP}" = "DBHD" ] \
    || [ -e "/etc/mysql/conf.d/galera.cnf" ] \
    || [ -e "/root/.dbhd.clstr.cnf" ] ; then
    msg "INFO: Running MariaDB system tables upgrade, please wait..."
    if [ -x "/usr/bin/mariadb_upgrade" ] ; then
      st_runner "mariadb_upgrade --force" &> /dev/null
    elif [ -x "/usr/bin/mysql_upgrade" ] ; then
      st_runner "mysql_upgrade --force" &> /dev/null
    fi
  fi
}


###--------------------###
if [ "${_STATUS}" = "INIT" ] ; then
  st_runner "aptitude remove exim4 exim4-base exim4-config sendmail \
    sendmail-base sendmail-cf sendmail-bin -y" &> /dev/null
  st_runner "apt-get purge exim4 exim4-base exim4-config sendmail \
    sendmail-base sendmail-cf sendmail-bin -y" &> /dev/null
  st_runner "apt-get autoremove -y --force-yes -qq" &> /dev/null
  rm -f /etc/aliases
  rm -f -r /etc/mail
  killall -9 sendmail &> /dev/null
else
  _POSTFIX_TEST=$(grep "fatal: open lock file" /var/log/mail.log 2>&1)
  if [[ "$_POSTFIX_TEST" =~ "fatal: open lock file" ]] ; then
    _BROKEN_KEYRING_TEST=$(apt-get update 2>&1)
    if [[ "$_BROKEN_KEYRING_TEST" =~ "signatures were invalid" ]] \
      || [[ "$_BROKEN_KEYRING_TEST" =~ "GPG error" ]]; then
      msg "WARN: Installed keyring is broken, forced reinstall required"
      if [ "$_THIS_OS" = "Debian" ] ; then
        mrun "apt-get install debian-keyring ${forCer}" 2> /dev/null
        mrun "apt-get install debian-archive-keyring ${forCer}" 2> /dev/null
      else
        mrun "apt-get install ubuntu-keyring ${forCer}" 2> /dev/null
      fi
    fi
    mrun "dpkg --configure -a"      &> /dev/null
    mrun "apt-get clean -qq"        &> /dev/null
    mrun "apt-get update -qq"       &> /dev/null
    mrun "apt-get purge postfix -y" &> /dev/null
    echo > /var/log/mail.log
  fi
fi
install_with_aptitude_deps
fix_locales
if [ "$_LOCALE_TEST" = "BROKEN" ] ; then
  _STRONG_PASSWORDS=NO
fi
if [ ! -e "/etc/aliases" ] ; then
  echo "postmaster:    root" > /etc/aliases
  newaliases &> /dev/null
fi
if [ "${_NGINX_SPDY}" = "YES" ] \
  || [ "${_SSL_FROM_SOURCES}" = "YES" ] \
  || [ "${_NGINX_FORWARD_SECRECY}" = "YES" ] ; then
  if [ "$_REL_VERSION" = "wheezy" ] \
    || [ "$_REL_VERSION" = "trusty" ] \
    || [ "$_REL_VERSION" = "precise" ] ; then
    _DO_NOTHING=YES
  else
    install_ssl_src
    install_ssh_src
    install_curl_src
  fi
fi
if [ "${_SSH_FROM_SOURCES}" = "YES" ] ; then
  if [ "$_REL_VERSION" = "trusty" ] || [ "$_REL_VERSION" = "precise" ] ; then
    _DO_NOTHING=YES
  else
    install_ssh_src
  fi
fi
if [ "${_LENNY_TO_SQUEEZE}" = "NO" ] ; then
  check_install_latest_git
  install_upgrade_nginx
fi


if [ "${_STATUS}" = "INIT" ] ; then
  service cron stop &> /dev/null
  if [ -e "/usr/sbin/csf" ] && [ -e "/etc/csf/csf.deny" ] ; then
    csf -x &> /dev/null
  fi
  install_with_aptitude_sql
else
  if [ "$_UP_NRC" = "YES" ] ; then
    update_newrelic
  fi
  _SQL_UPGRADE=NO
  if [[ "${_DB_SERVER_TEST}" =~ "MariaDB" ]] ; then
    _SQL_TEST_UPGRADE=NO
  else
    _SQL_TEST_UPGRADE=YES
  fi
  if [ "$_SQL_TEST_UPGRADE" = "YES" ] && [ "${_DB_SERVER}" = "MariaDB" ] ; then
    _SQL_UPGRADE=YES
  fi
  if [ "$_REL_VERSION" = "squeeze" ] \
    && [[ "${_DB_SERVER_TEST}" =~ "MariaDB" ]] \
    && [[ "${_DB_SERVER_TEST}" =~ " 5.3." ]] ; then
    _SQL_UPGRADE=YES
  fi
  if [[ "${_DB_SERVER_TEST}" =~ "MariaDB" ]] ; then
    if [[ "${_DB_SERVER_TEST}" =~ " 5.1." ]] \
      || [[ "${_DB_SERVER_TEST}" =~ " 5.2." ]] ; then
      _SQL_UPGRADE=YES
    fi
    if [ "${_DB_SERIES}" = "10.0" ] ; then
      if [[ "${_DB_SERVER_TEST}" =~ "10.0." ]] ; then
        _DO_NOTHING=YES
      else
        _SQL_UPGRADE=YES
      fi
    elif [ "${_DB_SERIES}" = "5.5" ] ; then
      if [[ "${_DB_SERVER_TEST}" =~ "5.5." ]] ; then
        _DO_NOTHING=YES
      else
        _SQL_UPGRADE=YES
      fi
      if [[ "${_DB_SERVER_TEST}" =~ "10.0." ]] ; then
        _SQL_UPGRADE=NO
      fi
    fi
  fi
  if [ "${_SQL_FORCE_REINSTALL}" = "YES" ] \
    || [ "${_FULL_FORCE_REINSTALL}" = "YES" ] ; then
    _SQL_UPGRADE=YES
  fi
  if [ "${_SQUEEZE_TO_WHEEZY}" = "YES" ] \
    && [ "${_LOC_REL_VERSION}" = "squeeze" ] ; then
    _SQL_UPGRADE=NO
  fi
  if [ "${_LENNY_TO_SQUEEZE}" = "YES" ] \
    && [ "${_LOC_REL_VERSION}" = "lenny" ] ; then
    _SQL_UPGRADE=NO
  fi
  _SQL_DEB_SRC_TEST=$(grep ${_DB_SERVER_SRC} \
    /etc/apt/sources.list.d/mariadb.list 2>&1)
  if [[ "$_SQL_DEB_SRC_TEST" =~ "${_DB_SERVER_SRC}" ]] \
    && [ -e "${pthLog}/mariadb-apt-fixed-${_X_VERSION}.log" ] ; then
    _SQL_DEB_SRC_UPDATE=NO
  else
    if [ "$_THIS_OS" = "Debian" ] ; then
      _THIS_OS_NAME=debian
    elif [ "$_THIS_OS" = "Ubuntu" ] ; then
      _THIS_OS_NAME=ubuntu
    fi
    _THIS_REL_VERSION="$_REL_VERSION"
    echo "## MariaDB APT Repository" > /etc/apt/sources.list.d/mariadb.list
    echo "deb http://${_DB_SERVER_SRC}/pub/mariadb/repo/${_DB_SERIES}/$_THIS_OS_NAME \
      $_THIS_REL_VERSION main" >> /etc/apt/sources.list.d/mariadb.list
    echo "deb-src http://${_DB_SERVER_SRC}/pub/mariadb/repo/${_DB_SERIES}/$_THIS_OS_NAME \
      $_THIS_REL_VERSION main" >> /etc/apt/sources.list.d/mariadb.list
    st_runner "aptitude update -y" &> /dev/null
    touch ${pthLog}/mariadb-apt-fixed-${_X_VERSION}.log
  fi
  if [ "$_SQL_UPGRADE" = "YES" ] ; then
    service cron stop &> /dev/null
    if [ -e "/usr/sbin/csf" ] && [ -e "/etc/csf/csf.deny" ] ; then
      csf -x &> /dev/null
    fi
    msg "INFO: Running ${_DB_SERVER} upgrade and then PHP forced rebuild..."
    mrun "sleep 50"
    mrun "service nginx stop" &> /dev/null
    rm -f /etc/apt/sources.list.d/percona.list
    rm -f /etc/apt/sources.list.d/ourdelta.list
    _KEYS_SERVER_TEST=FALSE
    until [[ "$_KEYS_SERVER_TEST" =~ "MariaDB" ]] ; do
      _KEYS_SERVER_TEST=$(apt-key adv --recv-keys \
        --keyserver hkp://keyserver.ubuntu.com:80 1BB943DB 2>&1)
      sleep 2
    done
    st_runner "aptitude autoclean -y" &> /dev/null
    st_runner "apt-get clean -qq" &> /dev/null
    st_runner "apt-get update -y --force-yes" &> /dev/null
    cp -af /etc/mysql/debian-start /etc/mysql/debian-start-mariadb &> /dev/null
    sed -i "s/.*default-table-type/#default-table-type/g" /etc/mysql/my.cnf
    sed -i "s/.*language/#language/g" /etc/mysql/my.cnf
    rm -f /var/lib/mysql/debian-*.flag &> /dev/null
    rm -f /var/lib/mysql/mysql_upgrade_info &> /dev/null
    install_with_aptitude_sql
    _THIS_DB_SERVER_TEST=$(mysql -V 2>&1)
    if [[ "$_THIS_DB_SERVER_TEST" =~ "5.5." ]] \
      || [[ "$_THIS_DB_SERVER_TEST" =~ "10.0" ]] ; then
      _DO_NOTHING=YES
    else
      sed -i "s/.*lc_messages_dir /#lc_messages_dir /g" /etc/mysql/my.cnf
      sed -i "s/.*lc_messages /#lc_messages /g" /etc/mysql/my.cnf
    fi
    if [[ "$_THIS_DB_SERVER_TEST" =~ "MariaDB" ]] ; then
      sed -i "s/.*innodb_lazy_drop_table /#innodb_lazy_drop_table /g" \
        /etc/mysql/my.cnf
    fi
    _PHP_FORCE_REINSTALL=YES
    mrun "sleep 8"
    msg "INFO: Restarting ${_DB_SERVER} server, please wait..."
    mrun "service mysql restart" &> /dev/null
    mrun "service nginx start" &> /dev/null
    if [ -e "/usr/sbin/csf" ] && [ -e "/etc/csf/csf.deny" ] ; then
      mrun "csf -e" &> /dev/null
    fi
    msg "INFO: Restarting ${_DB_SERVER} server completed"
  fi
fi


###--------------------###
run_aptitude_full_upgrade
install_with_aptitude_deps
mrun "service php5-fpm stop" &> /dev/null
st_runner "update-rc.d -f php5-fpm remove" &> /dev/null
check_install_latest_git
install_upgrade_nginx
kill_nash
fix_sftp_ftps_modern
disable_old_purge_cruft_machine
enable_weekly_usage_monitor
install_wkhtmltopdf
install_wkhtmltoimage


###--------------------###
if [ "$_REL_VERSION" = "wheezy" ] \
  || [ "$_REL_VERSION" = "trusty" ] \
  || [ "$_REL_VERSION" = "precise" ] ; then
  if [ ! -L "/usr/lib/libXpm.so" ] ; then
    msg "INFO: Fix #1 for libs in $_THIS_OS $_REL_VERSION"
    _X86_64_TEST=$(uname -m 2>&1)
    if [ "$_X86_64_TEST" = "x86_64" ] ; then
      ln -sf /usr/lib/x86_64-linux-gnu/libgmp.so  /usr/lib/libgmp.so
      ln -sf /usr/lib/x86_64-linux-gnu/libjpeg.so /usr/lib/libjpeg.so
      ln -sf /usr/lib/x86_64-linux-gnu/libkrb5.so /usr/lib/libkrb5.so
      ln -sf /usr/lib/x86_64-linux-gnu/libldap.so /usr/lib/libldap.so
      ln -sf /usr/lib/x86_64-linux-gnu/libpng.so  /usr/lib/libpng.so
      ln -sf /usr/lib/x86_64-linux-gnu/libXpm.so  /usr/lib/libXpm.so
      if [ ! -e "/usr/include/gmp.h" ] \
        && [ -e "/usr/include/x86_64-linux-gnu/gmp.h" ] ; then
        ln -sf /usr/include/x86_64-linux-gnu/gmp.h  /usr/include/gmp.h
      fi
    else
      ln -sf /usr/lib/i386-linux-gnu/libgmp.so  /usr/lib/libgmp.so
      ln -sf /usr/lib/i386-linux-gnu/libjpeg.so /usr/lib/libjpeg.so
      ln -sf /usr/lib/i386-linux-gnu/libkrb5.so /usr/lib/libkrb5.so
      ln -sf /usr/lib/i386-linux-gnu/libldap.so /usr/lib/libldap.so
      ln -sf /usr/lib/i386-linux-gnu/libpng.so  /usr/lib/libpng.so
      ln -sf /usr/lib/i386-linux-gnu/libXpm.so  /usr/lib/libXpm.so
      if [ ! -e "/usr/include/gmp.h" ] \
        && [ -e "/usr/include/i386-linux-gnu/gmp.h" ] ; then
        ln -sf /usr/include/i386-linux-gnu/gmp.h  /usr/include/gmp.h
      fi
    fi
  fi
fi


###--------------------###
if [ "$_REL_VERSION" = "wheezy" ] \
  || [ "$_REL_VERSION" = "trusty" ] \
  || [ "$_REL_VERSION" = "precise" ] ; then
  _SSL_FIX_REQUIRED=YES
  if [ "${_NGINX_SPDY}" = "YES" ] \
    || [ "${_SSL_FROM_SOURCES}" = "YES" ] \
    || [ "${_NGINX_FORWARD_SECRECY}" = "YES" ] ; then
    if [ "$_REL_VERSION" = "wheezy" ] \
      || [ "$_REL_VERSION" = "trusty" ] \
      || [ "$_REL_VERSION" = "precise" ] ; then
      _SSL_FIX_REQUIRED=YES
    else
      _SSL_FIX_REQUIRED=NO
    fi
  fi
  if [ ! -e "/usr/lib/libssl.so.1.0.0" ] \
    && [ "$_SSL_FIX_REQUIRED" = "YES" ] ; then
    msg "INFO: Fix #2 for libs in $_THIS_OS $_REL_VERSION"
    _X86_64_TEST=$(uname -m 2>&1)
    if [ "$_X86_64_TEST" = "x86_64" ] ; then
      if [ -e "/usr/lib/x86_64-linux-gnu/libssl.so.1.0.0" ] \
        && [ ! -e "/usr/lib/libssl.so.1.0.0" ] ; then
        ln -s /usr/lib/x86_64-linux-gnu/libssl.so.1.0.0  \
          /usr/lib/libssl.so.1.0.0
      elif [ -e "/lib/x86_64-linux-gnu/libssl.so.1.0.0" ] \
        && [ ! -e "/usr/lib/libssl.so.1.0.0" ] ; then
        ln -s /lib/x86_64-linux-gnu/libssl.so.1.0.0  \
          /usr/lib/libssl.so.1.0.0
      fi
      if [ -e "/usr/lib/x86_64-linux-gnu/libcrypto.so.1.0.0" ] \
        && [ ! -e "/usr/lib/libcrypto.so.1.0.0" ] ; then
        ln -s /usr/lib/x86_64-linux-gnu/libcrypto.so.1.0.0 \
          /usr/lib/libcrypto.so.1.0.0
      elif [ -e "/lib/x86_64-linux-gnu/libcrypto.so.1.0.0" ] \
        && [ ! -e "/usr/lib/libcrypto.so.1.0.0" ] ; then
        ln -s /lib/x86_64-linux-gnu/libcrypto.so.1.0.0 \
          /usr/lib/libcrypto.so.1.0.0
      fi
    else
      if [ -e "/usr/lib/i386-linux-gnu/libssl.so.1.0.0" ] \
        && [ ! -e "/usr/lib/libssl.so.1.0.0" ] ; then
        ln -s /usr/lib/i386-linux-gnu/libssl.so.1.0.0  \
          /usr/lib/libssl.so.1.0.0
      elif [ -e "/lib/i386-linux-gnu/libssl.so.1.0.0" ] \
        && [ ! -e "/usr/lib/libssl.so.1.0.0" ] ; then
        ln -s /lib/i386-linux-gnu/libssl.so.1.0.0  \
          /usr/lib/libssl.so.1.0.0
      fi
      if [ -e "/usr/lib/i386-linux-gnu/libcrypto.so.1.0.0" ] \
        && [ ! -e "/usr/lib/libcrypto.so.1.0.0" ] ; then
        ln -s /usr/lib/i386-linux-gnu/libcrypto.so.1.0.0 \
          /usr/lib/libcrypto.so.1.0.0
      elif [ -e "/lib/i386-linux-gnu/libcrypto.so.1.0.0" ] \
        && [ ! -e "/usr/lib/libcrypto.so.1.0.0" ] ; then
        ln -s /lib/i386-linux-gnu/libcrypto.so.1.0.0 \
          /usr/lib/libcrypto.so.1.0.0
      fi
    fi
  fi
fi


###--------------------###
if [ "$_THIS_OS" = "Debian" ] ; then
  chmod 644 /usr/share/git-core/templates/description &> /dev/null
  chmod 644 /usr/share/git-core/templates/hooks/* &> /dev/null
  chmod 644 /usr/share/git-core/templates/info/* &> /dev/null
fi


###--------------------###
if [ -z "${_SMTP_RELAY_HOST}" ] && [ "${_SMTP_RELAY_TEST}" = "YES" ] ; then
msg "INFO: Checking SMTP connections..."
if ! netcat -w 14 -z smtp.gmail.com 25 ; then
  WE_NEED_RELAY="YES"
  cat <<EOF

  Your outgoing SMTP port 25 doesn't work
  as expected, so your server can't send out
  any e-mails directly.

  It appears you need a SMTP relayhost added
  in your Postfix /etc/postfix/main.cf config.

  Please enter your SMTP relay host name
  as a value for _SMTP_RELAY_HOST="smtp.your.relay.server"

  Then run this script again.

EOF
  clean_pid_exit
else
  _DO_NOTHING=YES
fi
###
### required if you have closed outgoing smtp port and you have to use smtp relay
###
if [ ! -z "${_SMTP_RELAY_HOST}" ] ; then
  sed -i "s/${_SMTP_RELAY_HOST}//g" /etc/postfix/main.cf &> /dev/null
  sed -i "s/relayhost =/relayhost = ${_SMTP_RELAY_HOST}/g" \
    /etc/postfix/main.cf &> /dev/null
  postfix reload &> /dev/null
fi
###
###
fi


###--------------------###
_X_INIT_TEST=$(cat /etc/init.d/nginx 2>&1)
if [[ "$_X_INIT_TEST" =~ "github" ]] ; then
  _DO_NOTHING=YES
else
  mv -f /etc/init.d/nginx \
    /var/backups/nginx-pre-${_X_VERSION}-${_NOW} &> /dev/null
  cp -af ${locCnf}/nginx /etc/init.d/nginx
  chmod 755 /etc/init.d/nginx &> /dev/null
fi


###--------------------###
if [ ! -e "/var/run/cloud_vhost.pid" ] ; then
  if [ ! -e "${pthLog}/vnstat-${_VNSTAT_VRN}.log" ] \
    || [ ! -e "/usr/bin/vnstat" ] \
    || [ "${_FULL_FORCE_REINSTALL}" = "YES" ] ; then
    msg "INFO: Installing VnStat monitor..."
    cd /var/opt
    rm -f -r vnstat*
    get_dev_src "vnstat-${_VNSTAT_VRN}.tar.gz"
    cd vnstat-${_VNSTAT_VRN}
    st_runner "make --quiet" 2> /dev/null
    st_runner "make --quiet install" 2> /dev/null
    for INF in `vnstat --iflist | sed "s/Available interfaces//g" \
      | cut -d: -f2` ;do vnstat -u -i $INF &> /dev/null;done
    cp -af /var/opt/vnstat-${_VNSTAT_VRN}/examples/init.d/debian/vnstat \
      /etc/init.d/vnstat
    chmod 755 /etc/init.d/vnstat &> /dev/null
    st_runner "update-rc.d vnstat defaults" &> /dev/null
    mrun "service vnstat start" &> /dev/null
    touch ${pthLog}/vnstat-${_VNSTAT_VRN}.log
    mrun "service vnstat restart" &> /dev/null
  fi
fi
if [ -e "/etc/init.d/vnstat" ] \
  && [ "${_VMFAMILY}" = "VS" ] \
  && [ ! -e "/boot/grub/grub.cfg" ] \
  && [ ! -e "/boot/grub/menu.lst" ] ; then
  service vnstat stop &> /dev/null
  update-rc.d -f vnstat remove &> /dev/null
  rm -f /etc/init.d/vnstat
  rm -f /usr/bin/vnstat
  rm -f -r /var/lib/vnstat
fi


###--------------------###
cd /var
if [ -d "/var/xdrago/conf" ] \
  && [ -e "/var/aegir/.drush/hostmaster.alias.drushrc.php" ] ; then
  if [ "${_DEBUG_MODE}" = "YES" ] ; then
    msg "INFO: Upgrading a few more tools..."
  fi
  mv -f /var/xdrago-pre* /var/backups/dragon/x/ &> /dev/null
  rm -f -r ${pthLog}/init.d-pre*
  rm -f -r /var/backups/dragon/z/init.d-pre-*
  rm -f ${pthLog}/cron-root-pre*
  cp -af /var/xdrago \
    /var/backups/dragon/x/xdrago-pre-${_X_VERSION}-${_NOW} &> /dev/null
  rm -f ${pthLog}/VISITOR_ABUSE_ONE.log
  rm -f ${pthLog}/blackIP.log
  rm -f /var/xdrago/{enableStatus,graceful,move_sql,run_all,second,Minute}
  rm -f /var/xdrago/{firewall.sh,stop-mysql-innodb.sh,firewall_restarter}
  rm -f /var/xdrago/{FireStart,memcache,redis}
  cp -af /var/spool/cron/crontabs/root \
    /var/backups/dragon/z/cron-root-pre-${_X_VERSION}-${_NOW} &> /dev/null
  if [ "${_CUSTOM_CONFIG_LSHELL}" = "YES" ] \
    && [ -e "/var/xdrago/conf/lshell.conf" ] ; then
    cp -af /var/xdrago/conf/lshell.conf /var/backups/custom_lshell.conf
  fi
  cp -af ${pthBld}/aegir/tools/system/* /var/xdrago/ &> /dev/null
  if [ "${_CUSTOM_CONFIG_LSHELL}" = "YES" ] \
    && [ -e "/var/backups/custom_lshell.conf" ] ; then
    cp -af /var/backups/custom_lshell.conf /var/xdrago/conf/lshell.conf
  fi
  if [ -z "${_THISHTIP}" ] ; then
    _LOC_DOM="${_THISHOST}"
    find_correct_ip
    _THISHTIP="${_LOC_IP}"
  fi
  if [[ "${_THISHOST}" =~ ".host8." ]] \
    || [ "${_VMFAMILY}" = "VS" ] \
    || [ -e "/root/.auto.up.cnf" ] \
    || [ -e "/root/.host8.cnf" ] ; then
    if [[ "${_THISHOST}" =~ "v251a.ams." ]]; then
      _NGINX_DOS_LIMIT=888
    else
      if [ -z "${_NGINX_DOS_LIMIT}" ] || [ "${_NGINX_DOS_LIMIT}" = "300" ] ; then
        if [ "${_VMFAMILY}" = "VS" ] ; then
          _NGINX_DOS_LIMIT=149
        else
          _NGINX_DOS_LIMIT=188
        fi
      fi
    fi
  fi
  sed -i "s/= 150/= ${_NGINX_DOS_LIMIT}/g" \
    /var/xdrago/monitor/check/scan_nginx &> /dev/null
  sed -i "s/= 200/= ${_NGINX_DOS_LIMIT}/g" \
    /var/xdrago/monitor/check/scan_nginx &> /dev/null
  if [ ! -z "$_NGINX_DOS_KEYWORDS" ] ; then
    _NGINX_DOS_KEYWORDS=${_NGINX_DOS_KEYWORDS//[^a-zA-Z0-9|]/}
    if [ ! -z "$_NGINX_DOS_KEYWORDS" ] ; then
      msg "INFO: Configured _NGINX_DOS_KEYWORDS: $_NGINX_DOS_KEYWORDS"
      sed -i "s/foobar/$_NGINX_DOS_KEYWORDS/g" \
        /var/xdrago/monitor/check/scan_nginx &> /dev/null
    fi
  fi
  mv -f /etc/cron.daily/mlocate /var/backups/ &> /dev/null
  cp -af /var/xdrago/cron/crontabs/root /var/spool/cron/crontabs/ &> /dev/null
  if [ -e "/var/xdrago/cron/custom.txt" ] ; then
    cat /var/xdrago/cron/custom.txt >> /var/spool/cron/crontabs/root
  fi
  chown root:crontab /var/spool/cron/crontabs/root
  chmod 600 /var/spool/cron/crontabs/root
  if [[ "${_THISHOST}" =~ ".host8." ]] || [ "${_VMFAMILY}" = "VS" ] ; then
    if [ -e "/root/.debug.cnf" ] ; then
      _DO_NOTHING=YES
    else
      if [ -e "/root/.high_load.cnf" ] \
        && [ ! -e "/root/.big_db.cnf" ] \
        && [ ! -e "/root/.tg.cnf" ] ; then
        sed -i "s/3600/180/g" /var/xdrago/minute.sh &> /dev/null
      elif [ -e "/root/.big_db.cnf" ] || [ -e "/root/.tg.cnf" ] ; then
        _DO_NOTHING=YES
      else
        sed -i "s/3600/1800/g" /var/xdrago/minute.sh &> /dev/null
      fi
      sed -i "s/rotate 52/rotate 7/g" /etc/logrotate.d/nginx &> /dev/null
      sed -i "s/rotate 1/rotate 7/g" /etc/logrotate.d/nginx &> /dev/null
      sed -i "s/INTERVAL 1 HOUR/INTERVAL 15 MINUTE/g" \
        /var/xdrago/purge_binlogs.sh &> /dev/null
      if [ -e "/usr/share/man/man3/buagent.3.gz" ] ; then
        chmod 644 /usr/share/man/man3/buagent.3.gz
      fi
    fi
  else
    sed -i "s/log\/lshell/log\/lsh/g" /etc/logrotate.d/lshell &> /dev/null
  fi
fi
if [ "${_STATUS}" = "INIT" ] ; then
  msg "INFO: Installing a few more tools..."
  mkdir -p ./xdrago
  cp -af ${pthBld}/aegir/tools/system/* ./xdrago/ &> /dev/null
  cp -af /var/xdrago/cron/crontabs/root /var/spool/cron/crontabs/ &> /dev/null
  chown root:crontab /var/spool/cron/crontabs/root
  chmod 600 /var/spool/cron/crontabs/root
  if [ -z "${_THISHTIP}" ] ; then
    _LOC_DOM="${_THISHOST}"
    find_correct_ip
    _THISHTIP="${_LOC_IP}"
  fi
  if [[ "${_THISHOST}" =~ ".host8." ]] \
    || [ "${_VMFAMILY}" = "VS" ] \
    || [ -e "/root/.auto.up.cnf" ] \
    || [ -e "/root/.host8.cnf" ] ; then
    if [[ "${_THISHOST}" =~ "v251a.ams." ]]; then
      _NGINX_DOS_LIMIT=888
    else
      if [ -z "${_NGINX_DOS_LIMIT}" ] || [ "${_NGINX_DOS_LIMIT}" = "300" ] ; then
        if [ "${_VMFAMILY}" = "VS" ] ; then
          _NGINX_DOS_LIMIT=149
        else
          _NGINX_DOS_LIMIT=188
        fi
      fi
    fi
  fi
  sed -i "s/= 150/= ${_NGINX_DOS_LIMIT}/g" \
    /var/xdrago/monitor/check/scan_nginx &> /dev/null
  sed -i "s/= 200/= ${_NGINX_DOS_LIMIT}/g" \
    /var/xdrago/monitor/check/scan_nginx &> /dev/null
  if [ ! -z "$_NGINX_DOS_KEYWORDS" ] ; then
    _NGINX_DOS_KEYWORDS=${_NGINX_DOS_KEYWORDS//[^a-zA-Z0-9|]/}
    if [ ! -z "$_NGINX_DOS_KEYWORDS" ] ; then
      msg "INFO: Configured _NGINX_DOS_KEYWORDS: $_NGINX_DOS_KEYWORDS"
      sed -i "s/foobar/$_NGINX_DOS_KEYWORDS/g" \
        /var/xdrago/monitor/check/scan_nginx &> /dev/null
    fi
  fi
  mv -f /etc/cron.daily/mlocate /var/backups/ &> /dev/null
  if [[ "${_THISHOST}" =~ ".host8." ]] || [ "${_VMFAMILY}" = "VS" ] ; then
    if [ -e "/root/.debug.cnf" ] ; then
      _DO_NOTHING=YES
    else
      if [ -e "/root/.high_load.cnf" ] \
        && [ ! -e "/root/.big_db.cnf" ] \
        && [ ! -e "/root/.tg.cnf" ] ; then
        sed -i "s/3600/180/g" /var/xdrago/minute.sh &> /dev/null
      elif [ -e "/root/.big_db.cnf" ] || [ -e "/root/.tg.cnf" ] ; then
        _DO_NOTHING=YES
      else
        sed -i "s/3600/1800/g" /var/xdrago/minute.sh &> /dev/null
      fi
      sed -i "s/rotate 52/rotate 7/g" /etc/logrotate.d/nginx &> /dev/null
      sed -i "s/rotate 1/rotate 7/g" /etc/logrotate.d/nginx &> /dev/null
      if [ -e "/usr/share/man/man3/buagent.3.gz" ] ; then
        chmod 644 /usr/share/man/man3/buagent.3.gz
      fi
    fi
  fi
fi
if [ -d "/var/xdrago-pre-${_X_VERSION}-${_NOW}" ] ; then
  cp -af /var/xdrago-pre-${_X_VERSION}-${_NOW}/run-* /var/xdrago/ &> /dev/null
fi
sed -i "s/firewall/monitor/g" /var/xdrago/minute.sh &> /dev/null
chmod -R 700 /var/xdrago/monitor/check &> /dev/null
chmod 700 /var/xdrago/* &> /dev/null
chmod 700 /var/xdrago &> /dev/null


###--------------------###
if [ "${_SQUEEZE_TO_WHEEZY}" = "YES" ] \
  && [ "${_LOC_REL_VERSION}" = "squeeze" ] ; then
  mrun "service nginx stop" &> /dev/null
  killall -9 nginx &> /dev/null
elif [ "${_LENNY_TO_SQUEEZE}" = "YES" ] \
  && [ "${_LOC_REL_VERSION}" = "lenny" ] ; then
  mrun "service nginx stop" &> /dev/null
  killall -9 nginx &> /dev/null
fi


###--------------------###
if [ "${_STATUS}" = "UPGRADE" ] ; then
  if [ "${_DEBUG_MODE}" = "YES" ] ; then
    msg "INFO: Checking if PHP upgrade is available"
  fi
  st_runner "aptitude remove php5-sasl php5-suhosin -y" &> /dev/null
  st_runner "apt-get purge php5-sasl php5-suhosin -y" &> /dev/null
fi
if [ "$_REL_VERSION" = "wheezy" ] \
  || [ "$_REL_VERSION" = "trusty" ] \
  || [ "$_REL_VERSION" = "precise" ] ; then
  _PHP_EXTRA="--with-ldap --with-gmp --with-xpm-dir=/usr"
else
  _PHP_EXTRA="--with-ldap --with-gmp"
fi
if [ ! -z "${_PHP_EXTRA_CONF}" ] ; then
  _PHP_EXTRA="${_PHP_EXTRA} ${_PHP_EXTRA_CONF}"
fi
if [ ! -z "${_PHP_EXTRA}" ] ; then
  if [ "${_DEBUG_MODE}" = "YES" ] ; then
    msg "INFO: PHP EXTRA is ${_PHP_EXTRA}"
  fi
fi
if [ "$_REL_VERSION" = "trusty" ] ; then
  ln -sf /usr/include/freetype2 /usr/include/freetype2/freetype
fi

#
# Install OpenSSH from sources.
switch_php_cli() {
  if [ ! -z $1 ] ; then
    rm -f /usr/bin/php-cli
    ln -s /opt/php$1/bin/php /usr/bin/php-cli
    rm -f /usr/bin/php
    ln -s /opt/php$1/bin/php /usr/bin/php
    rm -f /usr/bin/php-config
    ln -s /opt/php$1/bin/php-config /usr/bin/php-config
  fi
}

if [[ "${_PHP_MULTI_INSTALL}" =~ "5.3" ]] && [ ! -x "/opt/php53/bin/php" ] ; then
  _PHP_VERSION="${_PHP53_VRN}"
  msg "INFO: PHP $_PHP_VERSION will be installed now"
  switch_php_cli "53"
  install_php_multi "53"
  _PHP_VERSION=""
  _T_PHP_VRN=""
  _T_PHP_PTH=""
  _FRESH_PHP53_BUILD=53
fi
if [[ "${_PHP_MULTI_INSTALL}" =~ "5.4" ]] && [ ! -x "/opt/php54/bin/php" ] ; then
  _PHP_VERSION="${_PHP54_VRN}"
  msg "INFO: PHP $_PHP_VERSION will be installed now"
  switch_php_cli "54"
  install_php_multi "54"
  _PHP_VERSION=""
  _T_PHP_VRN=""
  _T_PHP_PTH=""
  _FRESH_PHP54_BUILD=54
fi
if [[ "${_PHP_MULTI_INSTALL}" =~ "5.5" ]] && [ ! -x "/opt/php55/bin/php" ] ; then
  _PHP_VERSION="${_PHP55_VRN}"
  msg "INFO: PHP $_PHP_VERSION will be installed now"
  switch_php_cli "55"
  install_php_multi "55"
  _PHP_VERSION=""
  _T_PHP_VRN=""
  _T_PHP_PTH=""
  _FRESH_PHP55_BUILD=55
fi
if [[ "${_PHP_MULTI_INSTALL}" =~ "5.6" ]] && [ ! -x "/opt/php56/bin/php" ] ; then
  _PHP_VERSION="${_PHP56_VRN}"
  msg "INFO: PHP $_PHP_VERSION will be installed now"
  switch_php_cli "56"
  install_php_multi "56"
  _PHP_VERSION=""
  _T_PHP_VRN=""
  _T_PHP_PTH=""
  _FRESH_PHP56_BUILD=56
fi

php_upgrade_all() {
  if [ -x "/opt/php53/bin/php" ] && [ -z "$_FRESH_PHP53_BUILD" ] ; then
    _PHP_VERSION="${_PHP53_VRN}"
    _PHP_BIN_BROKEN=NO
    _BROKEN_LIBCURL_TEST=""
    switch_php_cli "53"
    check_php_broken "53"
    check_php_rebuild "53"
    update_php_multi "53"
    _PHP_VERSION=""
    _T_PHP_VRN=""
    _T_PHP_PTH=""
  fi
  if [ -x "/opt/php54/bin/php" ] && [ -z "$_FRESH_PHP54_BUILD" ] ; then
    _PHP_VERSION="${_PHP54_VRN}"
    _PHP_BIN_BROKEN=NO
    _BROKEN_LIBCURL_TEST=""
    switch_php_cli "54"
    check_php_broken "54"
    check_php_rebuild "54"
    update_php_multi "54"
    _PHP_VERSION=""
    _T_PHP_VRN=""
    _T_PHP_PTH=""
  fi
  if [ -x "/opt/php55/bin/php" ] && [ -z "$_FRESH_PHP55_BUILD" ] ; then
    _PHP_VERSION="${_PHP55_VRN}"
    _PHP_BIN_BROKEN=NO
    _BROKEN_LIBCURL_TEST=""
    switch_php_cli "55"
    check_php_broken "55"
    check_php_rebuild "55"
    update_php_multi "55"
    _PHP_VERSION=""
    _T_PHP_VRN=""
    _T_PHP_PTH=""
  fi
  if [ -x "/opt/php56/bin/php" ] && [ -z "$_FRESH_PHP56_BUILD" ] ; then
    _PHP_VERSION="${_PHP56_VRN}"
    _PHP_BIN_BROKEN=NO
    _BROKEN_LIBCURL_TEST=""
    switch_php_cli "56"
    check_php_broken "56"
    check_php_rebuild "56"
    update_php_multi "56"
    _PHP_VERSION=""
    _T_PHP_VRN=""
    _T_PHP_PTH=""
  fi
}


###--------------------###
install_curl_src
php_upgrade_all
if [ -x "/opt/php53/bin/php" ] ; then
  _CURLWRAPPERS_TEST=$(/opt/php53/bin/php -i | grep "with-curlwrappers" 2>&1)
  if [[ "$_CURLWRAPPERS_TEST" =~ "with-curlwrappers" ]] ; then
    _CURLWRAPPERS_REBUILD=YES
  fi
fi
if [ -x "/opt/php54/bin/php" ] ; then
  _CURLWRAPPERS_TEST=$(/opt/php54/bin/php -i | grep "with-curlwrappers" 2>&1)
  if [[ "$_CURLWRAPPERS_TEST" =~ "with-curlwrappers" ]] ; then
    _CURLWRAPPERS_REBUILD=YES
  fi
fi
if [ "$_CURLWRAPPERS_REBUILD" = "YES" ] \
  && [[ ! "${_PHP_EXTRA_CONF}" =~ "with-curlwrappers" ]] ; then
  msg "INFO: PHP rebuild required to remove --with-curlwrappers option..."
  _PHP_FORCE_REINSTALL=YES
  php_upgrade_all
fi
_BROKEN_LIBCURL_TEST=$(php -v 2>&1)
if [[ "$_BROKEN_LIBCURL_TEST" =~ "libcurl.so.4" ]] ; then
  msg "INFO: PHP rebuild required to fix broken libcurl..."
  install_curl_src
  php_upgrade_all
fi
install_newrelic
if [ ! -e "${pthLog}/ioncube-${_IONCUBE_VRN}.log" ] \
  || [ "${_PHP_FORCE_REINSTALL}" = "YES" ] \
  || [ "${_FULL_FORCE_REINSTALL}" = "YES" ] ; then
  install_ioncube
fi


###--------------------###
if [ ! -x "/usr/local/bin/composer" ] || [ ! -L "/usr/bin/composer" ] ; then
  rm -f /usr/local/bin/composer
  rm -f /usr/bin/composer
  rm -f -r /root/.composer
  mkdir -p /var/opt
  cd /var/opt
  curl -sS https://getcomposer.org/installer | php &> /dev/null
  mv composer.phar /usr/local/bin/composer
  ln -sf /usr/local/bin/composer /usr/bin/composer
fi


###--------------------###
if [[ "${_XTRAS_LIST}" =~ "BZR" ]] ; then
  if [ "$_REL_VERSION" = "lenny" ] ; then
    _DO_NOTHING=YES
  else
    _PATH_BZR="/usr/local/bin/bzr"
    if [ ! -e "$_PATH_BZR" ] \
      || [ ! -e "${pthLog}/bzr-${_BZR_VRN}.log" ] \
      || [ "${_FULL_FORCE_REINSTALL}" = "YES" ] ; then
      msg "INFO: Installing Bazaar (bzr) ${_BZR_VRN}, please wait..."
      if [ -e "/usr/local/lib/python2.6/dist-packages/bzrlib" ] ; then
        rm -f -r /usr/local/lib/python2.6/dist-packages/bzrlib
      fi
      if [ -e "/usr/local/lib/python2.7/dist-packages/bzrlib" ] ; then
        rm -f -r /usr/local/lib/python2.7/dist-packages/bzrlib
      fi
      cd /var/opt
      rm -f -r bzr*
      get_dev_src "bzr-${_BZR_VRN}.tar.gz"
      cd /var/opt/bzr-${_BZR_VRN}
      st_runner "python setup.py --quiet install build_ext -\
        -allow-python-fallback" 2> /dev/null
      st_runner "make --quiet" 2> /dev/null
      touch ${pthLog}/bzr-${_BZR_VRN}.log
      mkdir -p /root/.bazaar
      echo ignore_missing_extensions=True > /root/.bazaar/bazaar.conf
    fi
  fi
fi


###--------------------###
if [ ! -e "${pthLog}/umask_fixed_new.log" ] ; then
  mkdir -p /var/www/nginx-default
  sed -i "s/^UMASK.*//g" /etc/default/login &> /dev/null
  echo "UMASK=002" >> /etc/default/login
  sed -i "/^$/d" /etc/default/login &> /dev/null
  sed -i "s/^UMASK.*/UMASK 002/g" /etc/login.defs &> /dev/null
  sed -i "s/^umask.*022/umask 002/g" /etc/profile &> /dev/null
  sed -i "s/^session optional pam_umask.*//g" /etc/pam.d/login &> /dev/null
  echo "session optional pam_umask.so umask=0002" >> /etc/pam.d/login
  sed -i "/^$/d" /etc/pam.d/login &> /dev/null
  echo "umask 002" >> /var/www/.profile
  chown www-data:www-data /var/www/.profile &> /dev/null
  chown www-data:www-data /var/www/nginx-default &> /dev/null
  touch ${pthLog}/umask_fixed_new.log
fi


###--------------------###
if [ ! -e "/var/www/nginx-default/profiles/commons/images/avatars" ] ; then
  if [ -e "${pthBld}/aegir/var/commons/images" ] ; then
    mkdir -p /var/www/nginx-default/profiles/commons
    cp -af ${pthBld}/aegir/var/commons/images \
      /var/www/nginx-default/profiles/commons/
    chown -R www-data:www-data /var/www/nginx-default/profiles &> /dev/null
    find /var/www/nginx-default/profiles -type d -exec chmod 0755 {} \; &> /dev/null
    find /var/www/nginx-default/profiles -type f -exec chmod 0644 {} \; &> /dev/null
  fi
fi


###--------------------###
if [ ! -e "${pthLog}/umask_fixed_shell_sftp.log" ] ; then
  if [ "$_REL_VERSION" = "lenny" ] || [ "$_REL_VERSION" = "lucid" ] ; then
    _DO_NOTHING=YES
  else
    sed -e '/Subsystem\ssftp/s:server$:server -u 0002:' -i /etc/ssh/sshd_config
  fi
  echo "session optional pam_umask.so umask=0002" >> /etc/pam.d/sshd
  mrun "service ssh restart" &> /dev/null
  touch ${pthLog}/umask_fixed_shell_sftp.log
fi
if [ ! -e "${pthLog}/src_umask_fixed_shell_sftp.log" ] \
  && [ -e "/usr/etc/sshd_config" ] ; then
  if [ "$_REL_VERSION" = "lenny" ] || [ "$_REL_VERSION" = "lucid" ] ; then
    _DO_NOTHING=YES
  else
    sed -e '/Subsystem\ssftp/s:server$:server -u 0002:' -i /usr/etc/sshd_config
  fi
  mrun "service ssh restart" &> /dev/null
  touch ${pthLog}/src_umask_fixed_shell_sftp.log
fi


###--------------------###
if [ "$_REL_VERSION" = "lenny" ] ; then
  _PATH_LSHELL="/usr/bin/lshell"
else
  _PATH_LSHELL="/usr/local/bin/lshell"
fi
if [ ! -e "/etc/logrotate.d/lshell" ] \
  || [ ! -e "$_PATH_LSHELL" ] \
  || [ ! -e "${pthLog}/lshell-build-${_LSHELL_VRN}" ] \
  || [ "${_FULL_FORCE_REINSTALL}" = "YES" ] \
  || [ "$_SSL_INSTALL_REQUIRED" = "YES" ] ; then
  if [ "${_STATUS}" = "UPGRADE" ] ; then
    msg "INFO: Upgrading Limited Shell to version ${_LSHELL_VRN}..."
    cp -af /etc/lshell.conf /etc/lshell.conf-bak-${_NOW} &> /dev/null
  else
    msg "INFO: Installing Limited Shell ${_LSHELL_VRN}..."
  fi
  cd /var/opt
  rm -f -r lshell*
  get_dev_src "lshell-${_LSHELL_VRN}.tar.gz"
  for Files in `find /var/opt/lshell-${_LSHELL_VRN} -type f` ; do
    sed -i "s/kicked/logged/g" $Files &> /dev/null
    sed -i "s/Kicked/Logged/g" $Files &> /dev/null
  done
  cd /var/opt/lshell-${_LSHELL_VRN}
  rm -f -r /usr/local/lib/python2.6/dist-packages/lshell*
  rm -f -r /usr/local/lib/python2.7/dist-packages/lshell*
  st_runner "python setup.py install --no-compile" 2> /dev/null
  if [ "${_STATUS}" = "UPGRADE" ] ; then
    cp -af /etc/lshell.conf-bak-${_NOW} /etc/lshell.conf &> /dev/null
  else
    cp -af ${pthBld}/aegir/tools/system/conf/lshell.conf /etc/lshell.conf
    echo "$_PATH_LSHELL" >> /etc/shells
  fi
  sed -i "s/log\/lshell/log\/lsh/g" /etc/logrotate.d/lshell &> /dev/null
  addgroup --system lshellg &> /dev/null
  mkdir -p /var/log/lsh
  chown :lshellg /var/log/lsh
  chmod 770 /var/log/lsh &> /dev/null
  touch ${pthLog}/lshell-build-${_LSHELL_VRN}
  if [ -f "/var/xdrago/manage_ltd_users.sh" ] ; then
    if [ "${_STATUS}" = "UPGRADE" ] && [ "${_CUSTOM_CONFIG_LSHELL}" = "NO" ] ; then
      cp -af ${pthBld}/aegir/tools/system/conf/lshell.conf \
        /var/xdrago/conf/lshell.conf
    fi
    st_runner "bash /var/xdrago/manage_ltd_users.sh" &> /dev/null
  fi
fi
if [ -f "/usr/local/bin/lshell" ] ; then
  if [ ! -L "/usr/bin/lshell" ] ; then
    ln -sf /usr/local/bin/lshell /usr/bin/lshell &> /dev/null
  fi
fi
if [[ "${_THISHOST}" =~ ".host8." ]] || [ "${_VMFAMILY}" = "VS" ] ; then
  sed -i "s/rotate 12/rotate 50/g" /etc/logrotate.d/lshell &> /dev/null
fi


###--------------------###
if [[ "${_XTRAS_LIST}" =~ "ALL" ]] || [[ "${_XTRAS_LIST}" =~ "FTP" ]] ; then
  if [ ! -e "/etc/ssl/private/pure-ftpd.pem" ] \
    || [ ! -e "/usr/local/sbin/pure-config.pl" ] \
    || [ ! -e "/usr/local/sbin/pure-ftpd" ] \
    || [ ! -e "${pthLog}/pure-ftpd-build-${_PURE_FTPD_VRN}-${_X_VERSION}.log" ] \
    || [ "${_FULL_FORCE_REINSTALL}" = "YES" ] \
    || [ "$_SSL_INSTALL_REQUIRED" = "YES" ] ; then
    msg "INFO: Installing latest Pure-FTPd server, please wait..."
    if [ ! -e "/usr/local/sbin/pure-config.pl" ] ; then
      echo "/bin/false" >> /etc/shells
      echo "/bin/true" >> /etc/shells
    fi
    mkdir -p /etc/ssl/private/
    rm -f /etc/ssl/private/pure-ftpd.pem
    rm -f /usr/local/sbin/pure-ftpd
    st_runner "openssl req -x509 -nodes -days 7300 -newkey rsa:4096 \
      -keyout /etc/ssl/private/pure-ftpd.pem \
      -out /etc/ssl/private/pure-ftpd.pem -batch" 2> /dev/null
    chmod 600 /etc/ssl/private/pure-ftpd.pem &> /dev/null
    cd /var/opt
    rm -f -r pure-ftpd*
    mkdir -p /usr/local/etc
    get_dev_src "pure-ftpd-${_PURE_FTPD_VRN}.tar.gz"
    cd pure-ftpd-${_PURE_FTPD_VRN}
    st_runner "sh ./configure --with-everything --with-virtualchroot \
      --without-humor --with-tls --with-diraliases --with-pam \
      --with-certfile=/etc/ssl/private/pure-ftpd.pem" 2> /dev/null
    st_runner "make install-strip" 2> /dev/null
    cd /usr/local/sbin/
    cp -af ${locCnf}/pure-config.pl.txt ./
    mv -f pure-config.pl.txt pure-config.pl &> /dev/null
    chmod 755 /usr/local/sbin/pure-config.pl &> /dev/null
    cp -af /var/opt/pure-ftpd-${_PURE_FTPD_VRN}/pam/pure-ftpd /etc/pam.d/
    fix_ftps_pam
    cd /usr/local/etc
    rm -f pure-ftpd.conf
    cp -af ${locCnf}/pure-ftpd.conf ./
    killall -9 pure-ftpd &> /dev/null
    st_runner "/usr/local/sbin/pure-config.pl \
      /usr/local/etc/pure-ftpd.conf" &> /dev/null
    cd /var/opt
    touch ${pthLog}/pure-ftpd-build-${_PURE_FTPD_VRN}-${_X_VERSION}.log
  fi
fi


###--------------------###
if [ "${_STATUS}" = "UPGRADE" ] ; then
  _REDIS_V_INSTALLED=$(redis-server -v 2>&1 \
    | tr -d "\n" \
    | cut -d" " -f4 \
    | awk '{ print $1}' 2>&1)
  if [[ "$_REDIS_V_INSTALLED" =~ "sha" ]] ; then
    _REDIS_V_INSTALLED=$(redis-server -v 2>&1 \
      | tr -d "\n" \
      | tr -d "v=" \
      | cut -d" " -f3 \
      | awk '{ print $1}' 2>&1)
  fi
  if [ "$_REDIS_V_INSTALLED" = "${_REDIS_VRN}" ] ; then
    _REDIS_INSTALL_MISMATCH=NO
    if [ "${_DEBUG_MODE}" = "YES" ] ; then
      msg "INFO: Installed Redis version $_REDIS_V_INSTALLED, OK"
    fi
  else
    _REDIS_INSTALL_MISMATCH=YES
    msg "INFO: Installed Redis version $_REDIS_V_INSTALLED, upgrade required"
  fi
else
  if [ -x "/usr/bin/redis-server" ] ; then
    _REDIS_V_INSTALLED=$(redis-server -v 2>&1 \
      | tr -d "\n" \
      | cut -d" " -f4 \
      | awk '{ print $1}' 2>&1)
    if [[ "$_REDIS_V_INSTALLED" =~ "sha" ]] ; then
      _REDIS_V_INSTALLED=$(redis-server -v 2>&1 \
        | tr -d "\n" \
        | tr -d "v=" \
        | cut -d" " -f3 \
        | awk '{ print $1}' 2>&1)
    fi
    if [ "$_REDIS_V_INSTALLED" = "${_REDIS_VRN}" ] ; then
      _REDIS_INSTALL_MISMATCH=NO
      if [ "${_DEBUG_MODE}" = "YES" ] ; then
        msg "INFO: Installed Redis version $_REDIS_V_INSTALLED, OK"
      fi
    else
      _REDIS_INSTALL_MISMATCH=YES
      msg "INFO: Installed Redis version $_REDIS_V_INSTALLED, rebuild required"
    fi
  fi
fi
if [ "$_REDIS_INSTALL_MISMATCH" = "YES" ] \
  || [ ! -e "${pthLog}/redis-${_REDIS_VRN}-${_X_VERSION}.log" ] \
  || [ ! -d "/var/run/redis" ] \
  || [ ! -x "/usr/bin/redis-server" ] \
  || [ "${_FULL_FORCE_REINSTALL}" = "YES" ] ; then
  if [ "$_REDIS_HOST" = "LOCAL" ] || [ -z "$_REDIS_HOST" ] ; then
    install_redis_src
  fi
fi


###--------------------###
_NEWRELIC_APP_CFG="/etc/newrelic/newrelic.cfg"
if [ -e "$_NEWRELIC_APP_CFG" ] ; then
  _NEWRELIC_KEY_TEST=$(grep "REPLACE_WITH_REAL_KEY" $_NEWRELIC_APP_CFG 2>&1)
  if [[ "${_NEWRELIC_KEY_TEST}" =~ "REPLACE_WITH_REAL_KEY" ]] \
    && [ ! -z "${_NEWRELIC_KEY}" ] ; then
    sed -i "s/REPLACE_WITH_REAL_KEY/${_NEWRELIC_KEY}/g" \
      $_NEWRELIC_APP_CFG &> /dev/null
  fi
  sed -i "s/^loglevel=.*/loglevel=error/g" $_NEWRELIC_APP_CFG &> /dev/null
  mrun "service newrelic-daemon restart" &> /dev/null
fi


###--------------------###
_NEWRELIC_SYS_CFG="/etc/newrelic/nrsysmond.cfg"
if [ -e "$_NEWRELIC_SYS_CFG" ] ; then
  _NEWRELIC_KEY_TEST=$(grep "REPLACE_WITH_REAL_KEY" $_NEWRELIC_SYS_CFG 2>&1)
  if [[ "${_NEWRELIC_KEY_TEST}" =~ "REPLACE_WITH_REAL_KEY" ]] \
    && [ ! -z "${_NEWRELIC_KEY}" ] ; then
    sed -i "s/REPLACE_WITH_REAL_KEY/${_NEWRELIC_KEY}/g" \
      $_NEWRELIC_SYS_CFG &> /dev/null
  fi
  sed -i "s/^loglevel=.*/loglevel=error/g" \
    $_NEWRELIC_SYS_CFG &> /dev/null
  sed -i "s/.*pidfile=.*/pidfile=\/var\/run\/nrsysmond.pid/g" \
    $_NEWRELIC_SYS_CFG &> /dev/null
  if [ -e "/root/.enable.newrelic.sysmond.cnf" ] ; then
    mrun "service newrelic-sysmond restart" &> /dev/null
  else
    mrun "service newrelic-sysmond stop" &> /dev/null
  fi
fi


###--------------------###
if [ ! -e "/usr/lib/jvm/java-6-openjdk" ] \
  && [ -d "/usr/lib/jvm/java-6-openjdk-amd64" ] ; then
  ln -sf /usr/lib/jvm/java-6-openjdk-amd64 /usr/lib/jvm/java-6-openjdk
fi
if [ ! -e "/usr/lib/jvm/java-6-openjdk" ] \
  && [ -d "/usr/lib/jvm/java-6-openjdk-i386" ] ; then
  ln -sf /usr/lib/jvm/java-6-openjdk-i386 /usr/lib/jvm/java-6-openjdk
fi
if [ ! -e "/usr/lib/jvm/java-7-openjdk" ] \
  && [ -d "/usr/lib/jvm/java-7-openjdk-amd64" ] ; then
  ln -sf /usr/lib/jvm/java-7-openjdk-amd64 /usr/lib/jvm/java-7-openjdk
fi
if [ ! -e "/usr/lib/jvm/java-7-openjdk" ] \
  && [ -d "/usr/lib/jvm/java-7-openjdk-i386" ] ; then
  ln -sf /usr/lib/jvm/java-7-openjdk-i386 /usr/lib/jvm/java-7-openjdk
fi
if [ ! -e "/usr/bin/java7" ] \
  && [ -e "/usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java" ] ; then
  ln -sf /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java /usr/bin/java7
fi
if [ ! -e "/usr/bin/java7" ] \
  && [ -e "/usr/lib/jvm/java-7-openjdk-i386/jre/bin/java" ] ; then
  ln -sf /usr/lib/jvm/java-7-openjdk-i386/jre/bin/java /usr/bin/java7
fi


###--------------------###
if [ "$_REL_VERSION" = "wheezy" ] \
  || [ "$_REL_VERSION" = "trusty" ] \
  || [ "$_REL_VERSION" = "precise" ] ; then
  _REAL_JETTY=9
  _JETTY_CTRL="/opt/jetty9/jetty-ctrl-${_JETTY_9_VRN}-version.txt"
else
  _REAL_JETTY=8
  _JETTY_CTRL="/opt/jetty9/jetty-ctrl-${_JETTY_8_VRN}-version.txt"
fi
_SOLR_CTRL="/opt/jetty9/solr-${_SOLR_4_VRN}-version.txt"
if [ -e "/opt/jetty9/start.d/http.ini" ] ; then
  _PORT_CTRL="/opt/jetty9/start.d/.fixed.http.ini.txt"
else
  _PORT_CTRL="$_JETTY_CTRL"
fi
if [[ "${_XTRAS_LIST}" =~ "SR4" ]] \
  || [[ "${_THISHOST}" =~ ".host8." ]] \
  || [ -e "/root/.auto.up.cnf" ] \
  || [ -e "/root/.host8.cnf" ] ; then
  if [ ! -d "/opt/solr4" ] \
    && [ ! -e "/root/.mstr.clstr.cnf" ] \
    && [ ! -e "/root/.wbhd.clstr.cnf" ] \
    && [ ! -e "/root/.dbhd.clstr.cnf" ] ; then
    if [ "$_REL_VERSION" = "wheezy" ] \
      || [ "$_REL_VERSION" = "trusty" ] \
      || [ "$_REL_VERSION" = "precise" ] ; then
      _REAL_JETTY=9
    else
      _REAL_JETTY=8
    fi
    echo " "
    if prompt_yes_no "Do you want to install MultiCore Apache Solr 4 \
      with Jetty $_REAL_JETTY?" ; then
      true
      msg "INFO: Installing MultiCore Apache Solr 4 with Jetty $_REAL_JETTY..."
      cd /var/opt
      rm -f -r jetty-distribution-*
      rm -f -r /opt/solr4
      rm -f -r /opt/jetty9
      rm -f /etc/jetty.conf
      if [ "$_REL_VERSION" = "wheezy" ] \
        || [ "$_REL_VERSION" = "trusty" ] \
        || [ "$_REL_VERSION" = "precise" ] ; then
        get_dev_arch "jetty-distribution-${_JETTY_9_VRN}.tar.gz"
        mv /var/opt/jetty-distribution-${_JETTY_9_VRN} /opt/jetty9
        echo ${_JETTY_9_VRN} > $_JETTY_CTRL
      else
        get_dev_arch "jetty-distribution-${_JETTY_8_VRN}.tar.gz"
        mv /var/opt/jetty-distribution-${_JETTY_8_VRN} /opt/jetty9
        echo ${_JETTY_8_VRN} > $_JETTY_CTRL
      fi
      get_dev_arch "solr-${_SOLR_4_VRN}.tgz"
      cp -af /var/opt/solr-${_SOLR_4_VRN}/dist/solr-${_SOLR_4_VRN}.war \
        /opt/jetty9/webapps/solr.war
      mv -f /var/opt/solr-${_SOLR_4_VRN}/example/multicore \
        /opt/solr4 &> /dev/null
      mkdir -p /opt/solr4/core{0,1,2,3,4,5,6,7,8,9}/conf
      mkdir -p /opt/solr4/core{0,1,2,3,4,5,6,7,8,9}/data
      mkdir -p /var/log/jetty9
      if [ ! -e "/opt/tika9" ] ; then
        cd /var/opt
        rm -f -r apachesolr_attachments*
        get_dev_contrib "apachesolr_attachments-7.x-1.x-dev.tar.gz"
        cd /var/opt/solr-${_SOLR_4_VRN}/example/solr/collection1/conf/
        patch -p0 < \
          /var/opt/apachesolr_attachments/solrconfig.tika.patch &> /dev/null
        ln -sf /opt/jetty9/lib /opt/tika9
        cd /opt/tika9
        wget -q -U iCab ${urlDev}/tika-app-1.3.jar
        wget -q -U iCab ${urlDev}/tika-app-1.1.jar
      fi
      for Dir in `find /opt/solr4/core{0,1,2,3,4,5,6,7,8,9}/ \
        -maxdepth 1 -mindepth 1 -type d | grep conf` ; do
        rm -f -r $Dir/*
        cp -af /var/opt/solr-${_SOLR_4_VRN}/example/solr/collection1/conf/* \
          $Dir/ &> /dev/null
      done
      adduser --system --group --home /opt/solr4 jetty9 &> /dev/null
      if [ ! -e "/opt/solr4/search_api_solr-7.x-1.6.log" ] ; then
        cd /var/opt
        rm -f -r search_api_solr*
        get_dev_contrib "search_api_solr-7.x-1.6.tar.gz"
        for Dir in `find /opt/solr4/core{0,1,2,3,4,5,6,7,8,9}/ \
          -maxdepth 1 -mindepth 1 -type d | grep conf` ; do
          cp -af /var/opt/search_api_solr/solr-conf/4.x/* $Dir/ &> /dev/null
        done
        sed -i "s/8983/8099/g" \
          /opt/solr4/core{0,1,2,3,4,5,6,7,8,9}/conf/solrcore.properties &> /dev/null
        touch /opt/solr4/search_api_solr-7.x-1.6.log
      fi
      cp -af ${pthBld}/docs/SOLR.txt /opt/solr4/README.txt &> /dev/null
      chown -R jetty9:jetty9 /opt/solr4
      chown -R jetty9:jetty9 /opt/jetty9
      chown -R jetty9:jetty9 /var/log/jetty9
      if [ "$_REL_VERSION" = "wheezy" ] || [ "$_REL_VERSION" = "trusty" ] \
        || [ "$_REL_VERSION" = "precise" ] ; then
        echo "JAVA=/usr/bin/java7 # Path to Java 1.7" > /etc/default/jetty9
        echo "JAVA_HOME=/usr/lib/jvm/java-7-openjdk/jre # Path to Java 1.7" >> \
          /etc/default/jetty9
      else
        echo "JAVA=/usr/bin/java # Path to Java 1.6" > /etc/default/jetty9
        echo "JAVA_HOME=/usr/lib/jvm/java-6-openjdk/jre # Path to Java 1.6" >> \
          /etc/default/jetty9
      fi
      echo "NO_START=0 # Start on boot" >> /etc/default/jetty9
      echo "JETTY_HOST=127.0.0.1 # Listen on localhost" >> /etc/default/jetty9
      echo "JETTY_PORT=8099 # Run on this port" >> /etc/default/jetty9
      echo "JETTY_USER=jetty9 # Run as this user" >> /etc/default/jetty9
      echo "JETTY_HOME=/opt/jetty9 # Home directory" >> /etc/default/jetty9
      echo "JETTY_LOGS=/var/log/jetty9 # Logs directory" >> /etc/default/jetty9
      echo "JETTY_RUN=/var/run # Run directory" >> /etc/default/jetty9
      echo "JETTY_PID=\$JETTY_RUN/jetty9.pid # Pid file" >> /etc/default/jetty9
      echo "JAVA_OPTIONS=\"-Xms8m -Xmx128m -Djava.awt.headless=true \
        -Dsolr.solr.home=/opt/solr4 \$JAVA_OPTIONS\" \
        # Options" >> /etc/default/jetty9
      if [ "$_REL_VERSION" = "wheezy" ] \
        || [ "$_REL_VERSION" = "trusty" ] \
        || [ "$_REL_VERSION" = "precise" ] ; then
        _DO_NOTHING=YES
      else
        sed -i "s/8/9/g" /opt/jetty9/bin/jetty.sh &> /dev/null
        sed -i "s/9090/8099/g" /opt/jetty9/bin/jetty.sh &> /dev/null
      fi
      if [ -e "/opt/jetty9/start.d/http.ini" ] ; then
        sed -i "s/8080/8099/g" /opt/jetty9/start.d/http.ini &> /dev/null
        touch /opt/jetty9/start.d/.fixed.http.ini.txt &> /dev/null
      fi
      sed -i "s/8080/8099/g" /opt/jetty9/bin/jetty.sh &> /dev/null
      ln -sf /opt/jetty9/bin/jetty.sh /etc/init.d/jetty9 &> /dev/null
      chmod 755 /etc/init.d/jetty9
      st_runner "update-rc.d jetty9 defaults" &> /dev/null
      mrun "service jetty9 start" &> /dev/null
      echo ${_SOLR_4_VRN} > $_SOLR_CTRL
      msg "INFO: MultiCore Apache Solr 4 with Jetty $_REAL_JETTY \
        installation completed"
    else
      msg "INFO: MultiCore Apache Solr 4 with Jetty $_REAL_JETTY \
        installation skipped"
    fi
  fi
fi
if [ "$_UP_JDK" = "YES" ] && [ -e "/etc/init.d/jetty9" ] ; then
  msg "INFO: Jetty 9 restart in progress - required after java upgrade"
  kill -9 $(ps aux | grep '[j]etty9' | awk '{print $2}') &> /dev/null
  mrun "service jetty9 start" &> /dev/null
  msg "INFO: Jetty 9 restart completed"
fi
if [ -e "/opt/jetty9/VERSION.txt" ] ; then
  if [ "$_REL_VERSION" = "wheezy" ] \
    || [ "$_REL_VERSION" = "trusty" ] \
    || [ "$_REL_VERSION" = "precise" ] ; then
    _JETTY9_JAVA_TEST=$(grep "Path to Java 1.7" /etc/default/jetty9 2>&1)
    if [[ "$_JETTY9_JAVA_TEST" =~ "Path to Java 1.7" ]] ; then
      _DO_NOTHING=YES
    else
      echo "JAVA=/usr/bin/java7 # Path to Java 1.7" > /etc/default/jetty9
      echo "JAVA_HOME=/usr/lib/jvm/java-7-openjdk/jre # Path to Java 1.7" >> \
        /etc/default/jetty9
      echo "NO_START=0 # Start on boot" >> /etc/default/jetty9
      echo "JETTY_HOST=127.0.0.1 # Listen on localhost" >> /etc/default/jetty9
      echo "JETTY_PORT=8099 # Run on this port" >> /etc/default/jetty9
      echo "JETTY_USER=jetty9 # Run as this user" >> /etc/default/jetty9
      echo "JETTY_HOME=/opt/jetty9 # Home directory" >> /etc/default/jetty9
      echo "JETTY_LOGS=/var/log/jetty9 # Logs directory" >> /etc/default/jetty9
      echo "JETTY_RUN=/var/run # Run directory" >> /etc/default/jetty9
      echo "JETTY_PID=\$JETTY_RUN/jetty9.pid # Pid file" >> /etc/default/jetty9
      echo "JAVA_OPTIONS=\"-Xms8m -Xmx128m \
        -Djava.awt.headless=true \
        -Dsolr.solr.home=/opt/solr4 \$JAVA_OPTIONS\" \
        # Options" >> /etc/default/jetty9
    fi
  fi
  if [ ! -e "$_PORT_CTRL" ] \
    || [ ! -e "$_JETTY_CTRL" ] \
    || [ ! -e "$_SOLR_CTRL" ] ; then
    msg "INFO: Upgrading MultiCore Apache Solr 4 with Jetty $_REAL_JETTY..."
    cd /var/opt
    rm -f -r jetty-distribution-*
    kill -9 $(ps aux | grep '[j]etty9' | awk '{print $2}') &> /dev/null
    mv -f /opt/jetty9 /var/backups/jetty9-${_X_VERSION}-${_NOW}
    if [ "$_REL_VERSION" = "wheezy" ] \
      || [ "$_REL_VERSION" = "trusty" ] \
      || [ "$_REL_VERSION" = "precise" ] ; then
      get_dev_arch "jetty-distribution-${_JETTY_9_VRN}.tar.gz"
      mv /var/opt/jetty-distribution-${_JETTY_9_VRN} /opt/jetty9
      echo ${_JETTY_9_VRN} > $_JETTY_CTRL
    else
      get_dev_arch "jetty-distribution-${_JETTY_8_VRN}.tar.gz"
      mv /var/opt/jetty-distribution-${_JETTY_8_VRN} /opt/jetty9
      sed -i "s/8/9/g" /opt/jetty9/bin/jetty.sh &> /dev/null
      sed -i "s/9090/8099/g" /opt/jetty9/bin/jetty.sh &> /dev/null
      echo ${_JETTY_8_VRN} > $_JETTY_CTRL
    fi
    if [ -e "/opt/jetty9/start.d/http.ini" ] ; then
      sed -i "s/8080/8099/g" /opt/jetty9/start.d/http.ini &> /dev/null
      touch /opt/jetty9/start.d/.fixed.http.ini.txt &> /dev/null
    fi
    sed -i "s/8080/8099/g" /opt/jetty9/bin/jetty.sh &> /dev/null
    get_dev_arch "solr-${_SOLR_4_VRN}.tgz"
    cp -af /var/opt/solr-${_SOLR_4_VRN}/dist/solr-${_SOLR_4_VRN}.war \
      /opt/jetty9/webapps/solr.war
    rm -f -r /opt/jetty9/solr
    cd /opt/jetty9/lib/
    wget -q -U iCab ${urlDev}/tika-app-1.3.jar
    wget -q -U iCab ${urlDev}/tika-app-1.1.jar
    cd /var/opt
    chown -R jetty9:jetty9 /opt/jetty9
    mrun "service jetty9 start" &> /dev/null
    echo ${_SOLR_4_VRN} > $_SOLR_CTRL
    msg "INFO: MultiCore Apache Solr 4 with Jetty $_REAL_JETTY upgrade completed"
  fi
fi


###--------------------###
_JETTY_CTRL="/opt/jetty8/jetty-ctrl-${_JETTY_8_VRN}-version.txt"
_SOLR_CTRL="/opt/jetty8/solr-${_SOLR_3_VRN}-version.txt"
if [[ "${_XTRAS_LIST}" =~ "SR3" ]] ; then
  if [ ! -d "/opt/solr3" ] ; then
    echo " "
    if prompt_yes_no "Do you want to install MultiCore Apache Solr 3 \
      with Jetty 8?" ; then
      true
      msg "INFO: Installing MultiCore Apache Solr 3 with Jetty 8..."
      cd /var/opt
      rm -f -r jetty-distribution-*
      rm -f -r /opt/solr3
      rm -f -r /opt/jetty8
      rm -f /etc/jetty.conf
      get_dev_arch "jetty-distribution-${_JETTY_8_VRN}.tar.gz"
      mv /var/opt/jetty-distribution-${_JETTY_8_VRN} /opt/jetty8
      get_dev_arch "apache-solr-${_SOLR_3_VRN}.tgz"
      cp -af /var/opt/apache-solr-${_SOLR_3_VRN}/dist/apache-solr-${_SOLR_3_VRN}.war \
        /opt/jetty8/webapps/solr.war
      mv -f /var/opt/apache-solr-${_SOLR_3_VRN}/example/multicore \
        /opt/solr3 &> /dev/null
      mkdir -p /opt/solr3/core{0,1,2,3,4,5,6,7,8,9}/conf
      mkdir -p /opt/solr3/core{0,1,2,3,4,5,6,7,8,9}/data
      mkdir -p /var/log/jetty8
      if [ ! -e "/opt/tika8" ] ; then
        cd /var/opt
        rm -f -r apachesolr_attachments*
        get_dev_contrib "apachesolr_attachments-7.x-1.x-dev.tar.gz"
        cd /var/opt/apache-solr-${_SOLR_3_VRN}/example/solr/conf
        patch -p0 < \
          /var/opt/apachesolr_attachments/solrconfig.tika.patch &> /dev/null
        ln -sf /opt/jetty8/lib /opt/tika8
        cd /opt/tika8
        wget -q -U iCab ${urlDev}/tika-app-1.3.jar
        wget -q -U iCab ${urlDev}/tika-app-1.1.jar
      fi
      for Dir in `find /opt/solr3/core{0,1,2,3,4,5,6,7,8,9}/ \
        -maxdepth 1 -mindepth 1 -type d | grep conf` ; do
        rm -f -r $Dir/*
        cp -af /var/opt/apache-solr-${_SOLR_3_VRN}/example/solr/conf/* \
          $Dir/ &> /dev/null
      done
      adduser --system --group --home /opt/solr3 jetty8 &> /dev/null
      if [ ! -e "/opt/solr3/search_api_solr-7.x-1.6.log" ] ; then
        cd /var/opt
        rm -f -r search_api_solr*
        get_dev_contrib "search_api_solr-7.x-1.6.tar.gz"
        for Dir in `find /opt/solr3/core{0,1,2,3,4,5,6,7,8,9}/ \
          -maxdepth 1 -mindepth 1 -type d | grep conf` ; do
          cp -af /var/opt/search_api_solr/solr-conf/3.x/* $Dir/ &> /dev/null
        done
        sed -i "s/8983/8088/g" \
          /opt/solr3/core{0,1,2,3,4,5,6,7,8,9}/conf/solrcore.properties &> /dev/null
        touch /opt/solr3/search_api_solr-7.x-1.6.log
      fi
      cp -af ${pthBld}/docs/SOLR.txt /opt/solr3/README.txt &> /dev/null
      chown -R jetty8:jetty8 /opt/solr3
      chown -R jetty8:jetty8 /opt/jetty8
      chown -R jetty8:jetty8 /var/log/jetty8
      echo "JAVA=/usr/bin/java # Path to Java 1.6" > /etc/default/jetty8
      echo "JAVA_HOME=/usr/lib/jvm/java-6-openjdk/jre # Path to Java 1.6" >> \
        /etc/default/jetty8
      echo "NO_START=0 # Start on boot" >> /etc/default/jetty8
      echo "JETTY_HOST=127.0.0.1 # Listen on localhost" >> /etc/default/jetty8
      echo "JETTY_PORT=8088 # Run on this port" >> /etc/default/jetty8
      echo "JETTY_USER=jetty8 # Run as this user" >> /etc/default/jetty8
      echo "JETTY_HOME=/opt/jetty8 # Home directory" >> /etc/default/jetty8
      echo "JETTY_LOGS=/var/log/jetty8 # Logs directory" >> /etc/default/jetty8
      echo "JETTY_RUN=/var/run # Run directory" >> /etc/default/jetty8
      echo "JETTY_PID=\$JETTY_RUN/jetty8.pid # Pid file" >> /etc/default/jetty8
      echo "JAVA_OPTIONS=\"-Xms8m -Xmx128m \
        -Djava.awt.headless=true \
        -Dsolr.solr.home=/opt/solr3 \$JAVA_OPTIONS\" \
        # Options" >> /etc/default/jetty8
      sed -i "s/8080/8088/g" /opt/jetty8/bin/jetty.sh &> /dev/null
      ln -sf /opt/jetty8/bin/jetty.sh /etc/init.d/jetty8 &> /dev/null
      chmod 755 /etc/init.d/jetty8
      st_runner "update-rc.d jetty8 defaults" &> /dev/null
      mrun "service jetty8 start" &> /dev/null
      echo ${_JETTY_8_VRN} > $_JETTY_CTRL
      echo ${_SOLR_3_VRN}  > $_SOLR_CTRL
      msg "INFO: MultiCore Apache Solr 3 with Jetty 8 installation completed"
    else
      msg "INFO: MultiCore Apache Solr 3 with Jetty 8 installation skipped"
    fi
  fi
fi
if [ "$_UP_JDK" = "YES" ] && [ -e "/etc/init.d/jetty8" ] ; then
  msg "INFO: Jetty 8 restart in progress - required after java upgrade"
  kill -9 $(ps aux | grep '[j]etty8' | awk '{print $2}') &> /dev/null
  mrun "service jetty8 start" &> /dev/null
  msg "INFO: Jetty 8 restart completed"
fi
if [ -e "/opt/jetty8/VERSION.txt" ] ; then
  if [ ! -e "$_JETTY_CTRL" ] || [ ! -e "$_SOLR_CTRL" ] ; then
    msg "INFO: Upgrading MultiCore Apache Solr 3 with Jetty 8..."
    cd /var/opt
    rm -f -r jetty-distribution-*
    get_dev_arch "jetty-distribution-${_JETTY_8_VRN}.tar.gz"
    kill -9 $(ps aux | grep '[j]etty8' | awk '{print $2}') &> /dev/null
    mv -f /opt/jetty8 /var/backups/jetty8-${_X_VERSION}-${_NOW}
    mv -f /var/opt/jetty-distribution-${_JETTY_8_VRN} /opt/jetty8
    get_dev_arch "apache-solr-${_SOLR_3_VRN}.tgz"
    cp -af /var/opt/apache-solr-${_SOLR_3_VRN}/dist/apache-solr-${_SOLR_3_VRN}.war \
      /opt/jetty8/webapps/solr.war
    rm -f -r /opt/jetty8/solr
    cd /opt/jetty8/lib/
    wget -q -U iCab ${urlDev}/tika-app-1.3.jar
    wget -q -U iCab ${urlDev}/tika-app-1.1.jar
    cd /var/opt
    chown -R jetty8:jetty8 /opt/jetty8
    mrun "service jetty8 start" &> /dev/null
    echo ${_JETTY_8_VRN} > $_JETTY_CTRL
    echo ${_SOLR_3_VRN}  > $_SOLR_CTRL
    msg "INFO: MultiCore Apache Solr 3 with Jetty 8 upgrade completed"
  fi
fi


###--------------------###
_JETTY_CTRL="/opt/jetty7/jetty-ctrl-${_JETTY_7_VRN}-version.txt"
_SOLR_CTRL="/opt/jetty7/solr-${_SOLR_1_VRN}-version.txt"
if [[ "${_XTRAS_LIST}" =~ "SR1" ]] || [ "${_TOMCAT_TO_JETTY}" = "YES" ] ; then
  if [ ! -d "/opt/solr1" ] ; then
    echo " "
    if prompt_yes_no "Do you want to install MultiCore Apache Solr 1 \
      with Jetty 7?" ; then
      true
      msg "INFO: Installing MultiCore Apache Solr 1 with Jetty 7..."
      cd /var/opt
      rm -f -r jetty-distribution-*
      rm -f -r /opt/solr1
      rm -f -r /opt/jetty7
      rm -f /etc/jetty.conf
      get_dev_arch "jetty-distribution-${_JETTY_7_VRN}.tar.gz"
      mv /var/opt/jetty-distribution-${_JETTY_7_VRN} /opt/jetty7
      get_dev_arch "apache-solr-${_SOLR_1_VRN}.tgz"
      cp -af /var/opt/apache-solr-${_SOLR_1_VRN}/dist/apache-solr-${_SOLR_1_VRN}.war \
        /opt/jetty7/webapps/solr.war
      mv -f /var/opt/apache-solr-${_SOLR_1_VRN}/example/multicore \
        /opt/solr1 &> /dev/null
      mkdir -p /opt/solr1/core{0,1,2,3,4,5,6,7,8,9}/conf
      mkdir -p /opt/solr1/core{0,1,2,3,4,5,6,7,8,9}/data
      mkdir -p /var/log/jetty7
      if [ ! -e "/opt/tika7" ] ; then
        cd /var/opt
        rm -f -r apachesolr_attachments*
        get_dev_contrib "apachesolr_attachments-7.x-1.x-dev.tar.gz"
        cd /var/opt/apache-solr-${_SOLR_1_VRN}/example/solr/conf
        patch -p0 < \
          /var/opt/apachesolr_attachments/solrconfig.tika.patch &> /dev/null
        ln -sf /opt/jetty7/lib /opt/tika7
        cd /opt/tika7
        wget -q -U iCab ${urlDev}/tika-app-1.3.jar
        wget -q -U iCab ${urlDev}/tika-app-1.1.jar
      fi
      for Dir in `find /opt/solr1/core{0,1,2,3,4,5,6,7,8,9}/ \
        -maxdepth 1 -mindepth 1 -type d | grep conf` ; do
        rm -f -r $Dir/*
        cp -af /var/opt/apache-solr-${_SOLR_1_VRN}/example/solr/conf/* \
        $Dir/ &> /dev/null
      done
      adduser --system --group --home /opt/solr1 jetty7 &> /dev/null
      if [ ! -e "/opt/solr1/search_api_solr-7.x-1.6.log" ] ; then
        cd /var/opt
        rm -f -r search_api_solr*
        get_dev_contrib "search_api_solr-7.x-1.6.tar.gz"
        for Dir in `find /opt/solr1/core{0,1,2,3,4,5,6,7,8,9}/ \
          -maxdepth 1 -mindepth 1 -type d | grep conf` ; do
          cp -af /var/opt/search_api_solr/solr-conf/1.4/* \
            $Dir/ &> /dev/null
        done
        sed -i "s/8983/8077/g" \
          /opt/solr1/core{0,1,2,3,4,5,6,7,8,9}/conf/solrcore.properties &> /dev/null
        touch /opt/solr1/search_api_solr-7.x-1.6.log
      fi
      cp -af ${pthBld}/docs/SOLR.txt /opt/solr1/README.txt &> /dev/null
      rm -f -r /opt/jetty7/solr
      chown -R jetty7:jetty7 /opt/solr1
      chown -R jetty7:jetty7 /opt/jetty7
      chown -R jetty7:jetty7 /var/log/jetty7
      echo "JAVA=/usr/bin/java # Path to Java 1.6" > /etc/default/jetty7
      echo "JAVA_HOME=/usr/lib/jvm/java-6-openjdk/jre # Path to Java 1.6" >> \
        /etc/default/jetty7
      echo "NO_START=0 # Start on boot" >> /etc/default/jetty7
      echo "JETTY_HOST=127.0.0.1 # Listen on localhost" >> /etc/default/jetty7
      echo "JETTY_PORT=8077 # Run on this port" >> /etc/default/jetty7
      echo "JETTY_USER=jetty7 # Run as this user" >> /etc/default/jetty7
      echo "JETTY_HOME=/opt/jetty7 # Home directory" >> /etc/default/jetty7
      echo "JETTY_LOGS=/var/log/jetty7 # Logs directory" >> /etc/default/jetty7
      echo "JETTY_RUN=/var/run # Run directory" >> /etc/default/jetty7
      echo "JETTY_PID=\$JETTY_RUN/jetty7.pid # Pid file" >> /etc/default/jetty7
      echo "JAVA_OPTIONS=\"-Xms8m -Xmx128m \
        -Djava.awt.headless=true \
        -Dsolr.solr.home=/opt/solr1 \$JAVA_OPTIONS\" \
        # Options" >> /etc/default/jetty7
      sed -i "s/8080/8077/g" /opt/jetty7/bin/jetty.sh &> /dev/null
      ln -sf /opt/jetty7/bin/jetty.sh /etc/init.d/jetty7 &> /dev/null
      chmod 755 /etc/init.d/jetty7
      st_runner "update-rc.d jetty7 defaults" &> /dev/null
      mrun "service jetty7 start" &> /dev/null
      echo ${_JETTY_7_VRN} > $_JETTY_CTRL
      echo ${_SOLR_1_VRN}  > $_SOLR_CTRL
      msg "INFO: MultiCore Apache Solr 1 with Jetty 7 installation completed"
    else
      msg "INFO: MultiCore Apache Solr 1 with Jetty 7 installation skipped"
    fi
  fi
fi
if [ "$_UP_JDK" = "YES" ] && [ -e "/etc/init.d/jetty7" ] ; then
  msg "INFO: Jetty 7 restart in progress - required after java upgrade"
  kill -9 $(ps aux | grep '[j]etty7' | awk '{print $2}') &> /dev/null
  mrun "service jetty7 start" &> /dev/null
  msg "INFO: Jetty 7 restart completed"
fi
if [ "${_TOMCAT_TO_JETTY}" = "YES" ] \
  && [ -e "/etc/init.d/jetty7" ] \
  && [ -e "/etc/default/tomcat" ] \
  && [ -e "/etc/init.d/tomcat" ] ; then
  msg "INFO: Tomcat 6 to Jetty 7 migration for Apache Solr 1 in progress..."
  mrun "service tomcat stop" &> /dev/null
  st_runner "update-rc.d tomcat remove" &> /dev/null
  mv -f /etc/init.d/tomcat /etc/init.d/offtomcat &> /dev/null
  mv -f /opt/solr1/solr.xml /opt/solr1/vanilla-solr.xml
  mv -f /opt/solr/* /opt/solr1/
  cp -af ${pthBld}/docs/SOLR.txt /opt/solr1/README.txt &> /dev/null
  chown -R jetty7:jetty7 /opt/solr1
  sed -i "s/8077/8080/g" /etc/default/jetty7 &> /dev/null
  sed -i "s/8077/8080/g" \
    /opt/solr1/core{0,1,2,3,4,5,6,7,8,9}/conf/solrcore.properties &> /dev/null
  sed -i "s/8077/8080/g" \
    /opt/solr1/site_00{1,2,3,4,5,6,7,8,9}/conf/solrcore.properties &> /dev/null
  sed -i "s/8077/8080/g" \
    /opt/solr1/conf/solrcore.properties &> /dev/null
  msg "INFO: Jetty 7 restart in progress - required after migration from Tomcat"
  kill -9 $(ps aux | grep '[j]etty7' | awk '{print $2}') &> /dev/null
  mrun "service jetty7 start" &> /dev/null
  sed -i "s/^_TOMCAT_TO_JETTY.*//g" ${barCnf}
  sed -i "/^$/d" ${barCnf}
  msg "INFO: Tomcat 6 to Jetty 7 migration for Apache Solr 1 completed"
fi
if [ -e "/opt/jetty7/VERSION.txt" ] ; then
  if [ ! -e "$_JETTY_CTRL" ] || [ ! -e "$_SOLR_CTRL" ] ; then
    msg "INFO: Upgrading MultiCore Apache Solr 1 with Jetty 7..."
    cd /var/opt
    rm -f -r jetty-distribution-*
    get_dev_arch "jetty-distribution-${_JETTY_7_VRN}.tar.gz"
    kill -9 $(ps aux | grep '[j]etty7' | awk '{print $2}') &> /dev/null
    mv -f /opt/jetty7 /var/backups/jetty7-${_X_VERSION}-${_NOW}
    mv -f /var/opt/jetty-distribution-${_JETTY_7_VRN} /opt/jetty7
    get_dev_arch "apache-solr-${_SOLR_1_VRN}.tgz"
    cp -af /var/opt/apache-solr-${_SOLR_1_VRN}/dist/apache-solr-${_SOLR_1_VRN}.war \
      /opt/jetty7/webapps/solr.war
    rm -f -r /opt/jetty7/solr
    cd /opt/jetty7/lib/
    wget -q -U iCab ${urlDev}/tika-app-1.3.jar
    wget -q -U iCab ${urlDev}/tika-app-1.1.jar
    cd /var/opt
    chown -R jetty7:jetty7 /opt/jetty7
    mrun "service jetty7 start" &> /dev/null
    echo ${_JETTY_7_VRN} > $_JETTY_CTRL
    echo ${_SOLR_1_VRN}  > $_SOLR_CTRL
    msg "INFO: MultiCore Apache Solr 1 with Jetty 7 upgrade completed"
  fi
fi


###--------------------###
if [ ! -e "/root/.my.pass.txt" ] ; then
  if [ "${_THIS_DB_HOST}" = "localhost" ] || [ "${_THIS_DB_HOST}" = "FQDN" ] ; then
    msg "INFO: Generating random password for ${_DB_SERVER}"
  else
    msg "INFO: Using default dummy password for ${_DB_SERVER}"
  fi
  touch /root/.my.pass.txt
  chmod 0600 /root/.my.pass.txt &> /dev/null
  if [ "${_THIS_DB_HOST}" = "localhost" ] || [ "${_THIS_DB_HOST}" = "FQDN" ] ; then
    _ESC_PASS=""
    _LEN_PASS=0
    if [ "${_STRONG_PASSWORDS}" = "YES" ] ; then
      _PWD_CHARS=32
    elif [ "${_STRONG_PASSWORDS}" = "NO" ] ; then
      _PWD_CHARS=8
    else
      _STRONG_PASSWORDS=${_STRONG_PASSWORDS//[^0-9]/}
      if [ ! -z "${_STRONG_PASSWORDS}" ] && [ ${_STRONG_PASSWORDS} -gt "8" ] ; then
        _PWD_CHARS="${_STRONG_PASSWORDS}"
      else
        _PWD_CHARS=8
      fi
      if [ ! -z "$_PWD_CHARS" ] && [ $_PWD_CHARS -gt "128" ] ; then
        _PWD_CHARS=128
      fi
    fi
    if [ "${_STRONG_PASSWORDS}" = "YES" ] || [ $_PWD_CHARS -gt "8" ] ; then
      _ESC_PASS=$(randpass $_PWD_CHARS esc 2>&1)
      _ESC_PASS=$(echo -n $_ESC_PASS | tr -d "\n" 2>&1)
      _LEN_PASS=$(echo ${#_ESC_PASS} 2>&1)
    fi
    if [ -z "$_ESC_PASS" ] || [ $_LEN_PASS -lt 9 ] ; then
      _ESC_PASS=$(pwgen -v -s -1 2>&1)
      _ESC_PASS=$(echo -n $_ESC_PASS | tr -d "\n" 2>&1)
      _ESC_PASS=$(sanitize_string "$_ESC_PASS" 2>&1)
    fi
  else
    _ESC_PASS=sCWL4tgEpyS5cLZITshxSTWRjhsUOeR6
  fi
  echo "$_ESC_PASS" > /root/.my.pass.txt
fi
if [ -e "/root/.my.pass.txt" ] ; then
  for Files in `find /var/xdrago -maxdepth 1 -mindepth 1 -type f` ; do
    sed -i "s/php-fpm nginx php/php-fpm php-cgi nginx php/g" $Files &> /dev/null
  done
  if [ "${_STATUS}" = "INIT" ] ; then
    msg "INFO: Updating ${_DB_SERVER} and PHP configuration"
    update_sql_conf
    update_php_conf
    update_ini_tpl
    tune_memory_limits
    msg "INFO: Restarting ${_DB_SERVER} server"
    mrun "service mysql restart" &> /dev/null
    msg "INFO: OS and services installation completed"
  else
    msg "INFO: Updating ${_DB_SERVER} and PHP configuration"
    update_sql_conf
    update_php_conf
    update_ini_tpl
    tune_memory_limits
    msg "INFO: OS and services upgrade completed"
  fi
else
  msg "EXIT on error due to not found file with your ${_DB_SERVER} root password"
  cat <<EOF

  It appears that you don't have required file with your root sql password.
  Create this file first and run this script again:

  echo "your_working_SQL_ROOT_password" > /root/.my.pass.txt
  chmod 0600 /root/.my.pass.txt

EOF
  msg "EXIT on error due to not found file with your ${_DB_SERVER} root password"
  clean_pid_exit
fi


if [ "${_STATUS}" = "INIT" ] ; then


###--------------------###
  if [ ! -e "/var/run/mysqld/mysqld.pid" ] \
    || [ ! -e "/var/run/mysqld/mysqld.sock" ] ; then
    _DB_SERVER_TEST=$(mysql -V 2>&1)
    if [[ "${_DB_SERVER_TEST}" =~ "MariaDB" ]] ; then
      _DB_SERVER=MariaDB
      msg "ALRT! ${_DB_SERVER} server not running properly!"
      msg "EXIT: We can't proceed with installation and will exit now"
      msg "HINT: Please check ${_LOG} for more information,"
      msg "HINT: (re)start ${_DB_SERVER} server and then run installer again"
      msg "Bye"
    else
      msg "ALRT! ${_DB_SERVER} server not installed properly!"
      msg "EXIT: We can't proceed and will exit now"
      msg "Bye"
    fi
    rm -f /root/.my.pass.txt
    mkdir -p /var/aegir
    clean_pid_exit
  fi

###--------------------###
  msg "INFO: Installing Aegir Master Instance, please wait..."
  if [ -e "/root/.mstr.clstr.cnf" ] \
    || [ -e "/root/.wbhd.clstr.cnf" ] \
    || [ -e "/root/.dbhd.clstr.cnf" ] ; then
    touch /data/conf/clstr.cnf &> /dev/null
  fi
  adduser --system --group --home /var/aegir aegir &> /dev/null
  usermod -aG www-data aegir &> /dev/null
  usermod -aG users aegir &> /dev/null
  echo "aegir ALL=NOPASSWD: /etc/init.d/nginx" >> /etc/sudoers
  ln -sf /var/aegir/config/nginx.conf /etc/nginx/conf.d/aegir.conf &> /dev/null
  update_nginx_conf

  if [ "${_THIS_DB_HOST}" = "localhost" ] || [ "${_THIS_DB_HOST}" = "FQDN" ] ; then
    if [ "${_THIS_DB_HOST}" = "FQDN" ] ; then
      _THIS_DB_HOST=$(uname -n 2>&1)
    else
      _THIS_DB_HOST=localhost
    fi
    _AEGIR_HOST=$(uname -n 2>&1)
    _SQL_CONNECT=localhost
  else
    _AEGIR_HOST=$(uname -n 2>&1)
    ### _SQL_CONNECT="${_THIS_DB_HOST}"
    ### Master Instance will use local DB server
    _SQL_CONNECT=localhost
  fi
  if [ "${_THIS_DB_HOST}" = "${_MY_OWNIP}" ] ; then
    _AEGIR_HOST=$(uname -n 2>&1)
    _SQL_CONNECT=localhost
  fi

  _RESOLVEIP=$(echo $(getent ahostsv4 ${_AEGIR_HOST}) \
    | cut -d: -f2 \
    | awk '{ print $1}' 2>&1)
  if [ -z "$_RESOLVEIP" ] ; then
    msg "FATAL ERROR: DNS looks broken for server ${_AEGIR_HOST}"
    exit 1
  else
    _AEGIR_HOST_IP="$_RESOLVEIP"
  fi

  if [ "${_VMFAMILY}" != "AWS" ] ; then
    _MYSQLTEST=$(mysql -h${_AEGIR_HOST_IP} -uINVALIDLOGIN -pINVALIDPASS 2>&1 >/dev/null | cat)
    if [ -z `echo $_MYSQLTEST | grep -q "ERROR \(2003\|1130\)"` ] ; then
      msg "INFO: ${_DB_SERVER} is listening on ${_AEGIR_HOST_IP}."
    else
      msg "FATAL ERROR: ${_DB_SERVER} is not configured to listen on ${_AEGIR_HOST_IP}"
      exit 1
    fi
  fi

  _AEGIR_DB_USER=aegir_root
  _ESC_APASS=""
  _LEN_APASS=0

  if [ "${_STRONG_PASSWORDS}" = "YES" ] ; then
    _PWD_CHARS=32
  elif [ "${_STRONG_PASSWORDS}" = "NO" ] ; then
    _PWD_CHARS=8
  else
    _STRONG_PASSWORDS=${_STRONG_PASSWORDS//[^0-9]/}
    if [ ! -z "${_STRONG_PASSWORDS}" ] && [ ${_STRONG_PASSWORDS} -gt "8" ] ; then
      _PWD_CHARS="${_STRONG_PASSWORDS}"
    else
      _PWD_CHARS=8
    fi
    if [ ! -z "$_PWD_CHARS" ] && [ $_PWD_CHARS -gt "128" ] ; then
      _PWD_CHARS=128
    fi
  fi

  if [ "${_STRONG_PASSWORDS}" = "YES" ] || [ $_PWD_CHARS -gt "8" ] ; then
    if [ "${_THIS_DB_HOST}" = "localhost" ] || [ "${_THIS_DB_HOST}" = "FQDN" ] ; then
      _ESC_APASS=$(randpass $_PWD_CHARS esc 2>&1)
    else
      if [ -e "/root/.my.pass.txt" ] ; then
        _ESC_APASS=$(cat /root/.my.pass.txt 2>&1)
      else
        _ESC_APASS=sCWL4tgEpyS5cLZITshxSTWRjhsUOeR6
      fi
    fi
    _ESC_APASS=$(echo -n ${_ESC_APASS} | tr -d "\n" 2>&1)
    _LEN_APASS=$(echo ${#_ESC_APASS} 2>&1)
  fi

  if [ -z "${_ESC_APASS}" ] || [ $_LEN_APASS -lt 9 ] ; then
    if [ "${_THIS_DB_HOST}" = "localhost" ] || [ "${_THIS_DB_HOST}" = "FQDN" ] ; then
      _ESC_APASS=$(pwgen -v -s -1 2>&1)
      _ESC_APASS=$(echo -n ${_ESC_APASS} | tr -d "\n" 2>&1)
      _ESC_APASS=$(sanitize_string "${_ESC_APASS}" 2>&1)
    else
      if [ -e "/root/.my.pass.txt" ] ; then
        _ESC_APASS=$(cat /root/.my.pass.txt 2>&1)
      else
        _ESC_APASS=sCWL4tgEpyS5cLZITshxSTWRjhsUOeR6
      fi
    fi
  fi

  _ESC="\`%\`.*"
  mysql -h${_SQL_CONNECT} -uroot mysql<<EOFMYSQL
GRANT ALL PRIVILEGES ON $_ESC TO '${_AEGIR_DB_USER}'@'${_AEGIR_HOST}' IDENTIFIED BY '${_ESC_APASS}' WITH GRANT OPTION;
GRANT ALL PRIVILEGES ON $_ESC TO '${_AEGIR_DB_USER}'@'${_AEGIR_HOST_IP}' IDENTIFIED BY '${_ESC_APASS}' WITH GRANT OPTION;
GRANT ALL PRIVILEGES ON $_ESC TO '${_AEGIR_DB_USER}'@'localhost' IDENTIFIED BY '${_ESC_APASS}' WITH GRANT OPTION;
EOFMYSQL

  if [ "${_THIS_DB_HOST}" = "localhost" ] || [ "${_THIS_DB_HOST}" = "FQDN" ] ; then
    _EXTRA_GRANTS=NO
  else
    _LOCAL_HOST=$(uname -n 2>&1)
    _LOCAL_IP=$(echo $(getent ahostsv4 $_LOCAL_HOST) | cut -d: -f2 | awk '{ print $1}' 2>&1)
    mysql -h${_SQL_CONNECT} -uroot mysql<<EOFMYSQL
GRANT ALL PRIVILEGES ON $_ESC TO '${_AEGIR_DB_USER}'@'${_THIS_DB_HOST}' IDENTIFIED BY '${_ESC_APASS}' WITH GRANT OPTION;
GRANT ALL PRIVILEGES ON $_ESC TO '${_AEGIR_DB_USER}'@'$_LOCAL_HOST' IDENTIFIED BY '${_ESC_APASS}' WITH GRANT OPTION;
GRANT ALL PRIVILEGES ON $_ESC TO '${_AEGIR_DB_USER}'@'$_LOCAL_IP' IDENTIFIED BY '${_ESC_APASS}' WITH GRANT OPTION;
EOFMYSQL
  fi

  cd /var/aegir
  _AEGIR_SCRIPT="AegirSetupM.sh.txt"
  for Files in `find ${pthBld}/aegir/scripts -type f` ; do
    sed -i "s/EDIT_AEGIR_DB_USER/${_AEGIR_DB_USER}/g"         $Files &> /dev/null
    sed -i "s/EDIT_AEGIR_HOST/${_AEGIR_HOST}/g"               $Files &> /dev/null
    sed -i "s/EDIT_AEGIR_VERSION/${_AEGIR_VERSION}/g"         $Files &> /dev/null
    sed -i "s/EDIT_AEGIR_XTS_VERSION/${_AEGIR_XTS_VERSION}/g" $Files &> /dev/null
    sed -i "s/EDIT_BOA_REPO_GIT_URL/${_BOA_REPO_GIT_URLX}/g"  $Files &> /dev/null
    sed -i "s/EDIT_BOA_REPO_NAME/${_BOA_REPO_NAME}/g"         $Files &> /dev/null
    sed -i "s/EDIT_BRANCH_BOA/${_BRANCH_BOA}/g"               $Files &> /dev/null
    sed -i "s/EDIT_BRANCH_PRN/${_BRANCH_PRN}/g"               $Files &> /dev/null
    sed -i "s/EDIT_DEBUG_MODE/${_DEBUG_MODE}/g"               $Files &> /dev/null
    sed -i "s/EDIT_DOMAIN/${_THIS_FRONT}/g"                   $Files &> /dev/null
    sed -i "s/EDIT_DRUSH_VERSION/${_DRUSH_VERSION}/g"         $Files &> /dev/null
    sed -i "s/EDIT_ESC_APASS/${_ESC_APASS}/g"                 $Files &> /dev/null
    sed -i "s/EDIT_LOCAL_NETWORK_IP/${_LOCAL_NETWORK_IP}/g"   $Files &> /dev/null
    sed -i "s/EDIT_MY_OWNIP/${_MY_OWNIP}/g"                   $Files &> /dev/null
    sed -i "s/EDIT_PHP_CLI_VERSION/${_PHP_CLI_VERSION}/g"     $Files &> /dev/null
    sed -i "s/EDIT_PHP_FPM_VERSION/${_PHP_FPM_VERSION}/g"     $Files &> /dev/null
    sed -i "s/EDIT_STRONG_PASSWORDS/${_STRONG_PASSWORDS}/g"   $Files &> /dev/null
    sed -i "s/EDIT_THIS_DB_HOST/${_THIS_DB_HOST}/g"           $Files &> /dev/null
  done

  cp -af ${pthBld}/aegir/scripts/$_AEGIR_SCRIPT ./

  if [ "${_DEBUG_MODE}" = "YES" ] ; then
    su -s /bin/bash - aegir -c "bash $_AEGIR_SCRIPT ${_THIS_FRONT} \
      --http_service_type='nginx' \
      --aegir_db_host='${_THIS_DB_HOST}' \
      --client_email='${_MY_EMAIL}' -y -d"
  else
    su -s /bin/bash - aegir -c "bash $_AEGIR_SCRIPT ${_THIS_FRONT} \
      --http_service_type='nginx' \
      --aegir_db_host='${_THIS_DB_HOST}' \
      --client_email='${_MY_EMAIL}' -y >/var/aegir/install.log 2>&1"
  fi
  if [ -e "/opt/tmp/status-AegirSetupM-FAIL" ] ; then
    msg "FATAL ERROR: AegirSetupM installer failed"
    msg "FATAL ERROR: Aborting Barracuda installer NOW!"
    msg "HINT: Please check /var/aegir/install.log \
      for more information on errors occured"
    touch /opt/tmp/status-Barracuda-FAIL
    clean_pid_exit
  fi
  if [ -e "/var/aegir/.drush/hostmaster.alias.drushrc.php" ] ; then
    _THIS_HM_ROOT=$(cat /var/aegir/.drush/hostmaster.alias.drushrc.php \
      | grep "root'" \
      | cut -d: -f2 \
      | awk '{ print $3}' \
      | sed "s/[\,']//g" 2>&1)
    if [ -e "${_THIS_HM_ROOT}/sites/all" ] \
      && [ ! -e "${_THIS_HM_ROOT}/sites/all/libraries" ] ; then
      mkdir -p ${_THIS_HM_ROOT}/sites/all/{modules,themes,libraries} &> /dev/null
    fi
  fi
  _U_HD="/var/aegir/.drush"
  chattr +i ${_U_HD}/php.ini &> /dev/null
  su -s /bin/bash - aegir -c "drush cache-clear drush &> /dev/null"
  rm -f -r /var/aegir/.tmp/cache
  if [ "${_DEBUG_MODE}" = "YES" ] ; then
    msg "INFO: Running hosting-dispatch (1/3)..."
  fi
  su -s /bin/bash - aegir -c "drush @hostmaster hosting-dispatch &> /dev/null"
  mrun "sleep 5"
  if [ "${_DEBUG_MODE}" = "YES" ] ; then
    msg "INFO: Running hosting-dispatch (2/3)..."
  fi
  su -s /bin/bash - aegir -c "drush @hostmaster hosting-dispatch &> /dev/null"
  mrun "sleep 5"
  if [ "${_DEBUG_MODE}" = "YES" ] ; then
    msg "INFO: Running hosting-dispatch (3/3)..."
  fi
  su -s /bin/bash - aegir -c "drush @hostmaster hosting-dispatch &> /dev/null"
  if [ -e "/var/aegir/.drush/hostmaster.alias.drushrc.php" ] ; then
    _THIS_HM_ROOT=$(cat /var/aegir/.drush/hostmaster.alias.drushrc.php \
      | grep "root'" \
      | cut -d: -f2 \
      | awk '{ print $3}' \
      | sed "s/[\,']//g" 2>&1)
    if [ -e "${_THIS_HM_ROOT}/sites/all" ] \
      && [ ! -e "${_THIS_HM_ROOT}/sites/all/libraries" ] ; then
      mkdir -p ${_THIS_HM_ROOT}/sites/all/{modules,themes,libraries} &> /dev/null
    fi
  fi
  chown -R aegir:aegir ${_THIS_HM_ROOT}/sites/all &> /dev/null
  rm -f /var/aegir/$_AEGIR_SCRIPT


###--------------------###
  if [ -e "${mtrInc}/nginx_vhost_common.conf" ] ; then
    _DO_NOTHING=YES
  else
    msg "FATAL ERROR: Something went wrong, Aegir Master Instance not installed!"
    msg "HINT: Please check /var/aegir/install.log for more information."
    clean_pid_exit
  fi


###--------------------###
  if [ ! -L "${mtrInc}/global.inc" ] && [ -e "${mtrInc}/global.inc" ] ; then
    mv -f ${mtrInc}/global.inc \
      ${mtrInc}/global.inc-pre-${_X_VERSION}-${_NOW} &> /dev/null
  fi
  mkdir -p /data/conf
  cp -af ${locCnf}/global.inc /data/conf/global.inc
  sed -i "s/3600/${_SPEED_VALID_MAX}/g" /data/conf/global.inc &> /dev/null
  if [ -e "${mtrInc}" ] \
    && [ ! -L "${mtrInc}/global.inc" ] \
    && [ -e "/data/conf/global.inc" ] ; then
    ln -sf /data/conf/global.inc ${mtrInc}/global.inc
  fi
  update_redis_password
  force_advanced_nginx_config
  chmod 0711 ${mtrInc} &> /dev/null
  chmod 0711 /var/aegir/config &> /dev/null
  find /var/aegir/host_master/*/profiles/* -type d -exec chmod 0755 {} \; &> /dev/null
  find /var/aegir/host_master/*/profiles/* -type f -exec chmod 0644 {} \; &> /dev/null
  find /var/aegir/*/profiles/* -type d -exec chmod 0755 {} \; &> /dev/null
  find /var/aegir/*/profiles/* -type f -exec chmod 0644 {} \; &> /dev/null
  chown -R aegir:aegir /var/aegir/.drush &> /dev/null
  find /var/aegir/.drush -type d -exec chmod 0755 {} \; &> /dev/null
  find /var/aegir/.drush -type f -exec chmod 0644 {} \; &> /dev/null
  chmod 0440 /var/aegir/.drush/*.php &> /dev/null
  chmod 0711 /var/aegir/.drush &> /dev/null
  cd /var/aegir
  rm -f /etc/nginx/sites-available/default
  rm -f /etc/nginx/sites-enabled/default
  if [ -e "${locCnf}/nginx.conf" ] ; then
    mv -f /etc/nginx/nginx.conf /etc/nginx/nginx.conf-old &> /dev/null
    cp -af ${locCnf}/nginx.conf /etc/nginx/nginx.conf
  fi
  mrun "service nginx reload" &> /dev/null
  msg "INFO: Aegir Master Instance installation completed"
else
  echo " "
  if [ "${_SQUEEZE_TO_WHEEZY}" = "YES" ] \
    && [ "${_LOC_REL_VERSION}" = "squeeze" ] ; then
    msg "INFO: Aegir Master Instance upgrade skipped!"
    echo " "
    msg "NOTE! You *must* reboot the server and then run boa up-stable *again*"
    msg "NOTE! to complete all system upgrades and upgrade also"
    msg "NOTE! Aegir Master Instance securely"
    echo " "
  elif [ "${_LENNY_TO_SQUEEZE}" = "YES" ] \
    && [ "${_LOC_REL_VERSION}" = "lenny" ] ; then
    msg "INFO: Aegir Master Instance upgrade skipped!"
    echo " "
    msg "NOTE! You *must* reboot the server and then run boa up-stable *again*"
    msg "NOTE! to complete all system upgrades and upgrade also"
    msg "NOTE! Aegir Master Instance securely"
    echo " "
  elif [ "${_SYSTEM_UPGRADE_ONLY}" = "YES" ] ; then
    msg "INFO: Aegir Master Instance upgrade skipped"
  else
    msg "INFO: Restarting ${_DB_SERVER} server, please wait..."
    rm -f /var/lib/mysql/mysql_upgrade_info &> /dev/null
    mrun "service mysql restart" &> /dev/null
    mrun "sleep 8"
    msg "INFO: Upgrading ${_DB_SERVER} tables if necessary..."
    mrun "sleep 60"
    if [ ! -e "/var/run/mysqld/mysqld.pid" ] \
      || [ ! -e "/var/run/mysqld/mysqld.sock" ] ; then
      _DB_SERVER_TEST=$(mysql -V 2>&1)
      if [[ "${_DB_SERVER_TEST}" =~ "MariaDB" ]] ; then
        _DB_SERVER=MariaDB
        msg "ALRT! ${_DB_SERVER} server not running properly!"
        msg "EXIT: We can't proceed with upgrade and will exit now"
        msg "HINT: Please check ${_LOG} for more information,"
        msg "HINT: (re)start ${_DB_SERVER} server and then run installer again"
        msg "Bye"
      else
        msg "ALRT! ${_DB_SERVER} server not installed properly!"
        msg "EXIT: We can't proceed and will exit now"
        msg "Bye"
      fi
      clean_pid_exit
    fi
    if [ -e "/root/.mstr.clstr.cnf" ] \
      || [ -e "/root/.wbhd.clstr.cnf" ] \
      || [ -e "/root/.dbhd.clstr.cnf" ] ; then
      touch /data/conf/clstr.cnf &> /dev/null
    fi
    echo " "
    upgrade_aegir_master
  fi
fi
update_php_cli_cron


###--------------------###
if [ -e "${locCnf}/mime.types" ] ; then
  mv -f /etc/nginx/mime.types \
    /etc/nginx/mime.types-pre-${_X_VERSION}-${_NOW} &> /dev/null
  cp -af ${locCnf}/mime.types /etc/nginx/mime.types
  if [ ! -L "/var/www/nginx-default/index.html" ] \
    && [ ! -L "/var/www/nginx-default/under_construction.jpg" ] ; then
    mkdir -p /var/www/nginx-default
    mv -f /var/www/nginx-default/index.html \
      /var/www/nginx-default/index.html-pre-${_X_VERSION}-${_NOW} &> /dev/null
    cp -af ${locCnf}/uc.html /var/www/nginx-default/index.html
    cp -af ${locCnf}/under_construction.jpg \
      /var/www/nginx-default/under_construction.jpg
  fi
  rm -f /etc/nginx/sites-available/default
  rm -f /etc/nginx/sites-enabled/default
  if [ ! -e "/var/run/aegir_upgrade.pid" ] ; then
    mrun "service nginx reload" &> /dev/null
  fi
fi


###--------------------###
_WILD_SSL_VHOST="${mtrNgx}/pre.d/nginx_wild_ssl.conf"
if [ ! -e "$_WILD_SSL_VHOST" ] ; then
  msg "INFO: Installing default SSL Wildcard Nginx Proxy..."
  _HTTPS_TEST=$(netstat -ln | grep :443 2>&1)
  if [[ "$_HTTPS_TEST" =~ "443" ]] ; then
    _HTTPS_TEST=EXIST
    msg "WARNING!"
    cat <<EOF

  We can't enable Wildcard HTTPS Proxy for all your hosted sites,
  including all Aegir Satellite Instances, because you have already
  enabled SSL on the IP address used by your Aegir Master Instance.

  If you wish to use provided now by Barracuda Wildcard HTTPS Proxy,
  please disable the SSL you enabled, or use the built-in Aegir SSL
  feature on another IP address available and not used by the Hostmaster,
  and other hosted sites.

  We will continue in 10 seconds...

EOF
    mrun "sleep 10"
  else
    _HTTPS_TEST=FREE
    validate_public_ip &> /dev/null
    validate_xtras_ip &> /dev/null
    openssl req -x509 -nodes -days 7300 \
      -subj "/C=US/ST=New York/O=Aegir/OU=Cloud/L=New York/CN=*.${_THISHOST}" \
      -newkey rsa:4096 \
      -keyout /etc/ssl/private/nginx-wild-ssl.key \
      -out /etc/ssl/private/nginx-wild-ssl.crt -batch 2> /dev/null
    cp -af ${locCnf}/nginx_wild_ssl.conf $_WILD_SSL_VHOST
    sed -i "s/127.0.0.1:80/localhost:80/g" $_WILD_SSL_VHOST &> /dev/null
    sed -i "s/127.0.0.1:443/$_XTRAS_THISHTIP:443/g" $_WILD_SSL_VHOST &> /dev/null
    mkdir -p /data/conf
    if [ -e "${locCnf}/global.inc" ] ; then
      cp -af ${locCnf}/global.inc /data/conf/global.inc
    fi
    if [ -e "${mtrInc}" ] \
      && [ ! -L "${mtrInc}/global.inc" ] \
      && [ -e "/data/conf/global.inc" ] ; then
      ln -sf /data/conf/global.inc ${mtrInc}/global.inc
    fi
    sed -i "s/3600/${_SPEED_VALID_MAX}/g" /data/conf/global.inc &> /dev/null
    update_redis_password
    killall -9 nginx &> /dev/null
    mrun "service nginx start" &> /dev/null
  fi
else
  _WILDCARD_SSL_TEST=$(grep "localhost:80" $_WILD_SSL_VHOST 2>&1)
  if [[ "$_WILDCARD_SSL_TEST" =~ "localhost:80" ]] ; then
    _DO_NOTHING=YES
  else
    validate_public_ip &> /dev/null
    validate_xtras_ip &> /dev/null
    cp -af ${locCnf}/nginx_wild_ssl.conf $_WILD_SSL_VHOST
    sed -i "s/127.0.0.1:80/localhost:80/g" $_WILD_SSL_VHOST
    sed -i "s/127.0.0.1:443/$_XTRAS_THISHTIP:443/g" $_WILD_SSL_VHOST
  fi
fi


###--------------------###
if [[ "${_XTRAS_LIST}" =~ "ALL" ]] || [[ "${_XTRAS_LIST}" =~ "CHV" ]] ; then
  _CHIVE_VHOST="${mtrNgx}/vhost.d/chive.${_THIS_FRONT}"
  if [ ! -d "/var/www/chive" ] \
    || [ ! -f "$_CHIVE_VHOST" ] \
    || [ ! -f "${pthLog}/chive-${_CHIVE_VRN}.fix-dns-vhost-wildcard.log" ] ; then
    echo " "
    if prompt_yes_no "Do you want to install Chive Manager?" ; then
      true
      msg "INFO: Installing Chive Manager..."
      cd /var/www
      rm -f -r /var/www/chive &> /dev/null
      get_dev_arch "chive_${_CHIVE_VRN}.tar.gz"
      validate_public_ip &> /dev/null
      validate_xtras_ip &> /dev/null
      cp -af ${locCnf}/nginx_sql_chive.conf $_CHIVE_VHOST
      sed -i "s/127.0.0.1:80/$_XTRAS_THISHTIP:80/g"         $_CHIVE_VHOST
      sed -i "s/127.0.0.1:443/$_XTRAS_THISHTIP:443/g"       $_CHIVE_VHOST
      sed -i "s/chive_name/chive.${_THIS_FRONT} ${_THISHTIP}/g" $_CHIVE_VHOST
      touch ${pthLog}/chive-${_CHIVE_VRN}.fix-dns-vhost-wildcard.log
      msg "INFO: Chive Manager installation completed"
    else
      msg "INFO: Chive Manager installation skipped"
    fi
  fi
fi


###--------------------###
if [ -d "/var/www/chive" ] ; then
  if [ ! -z "$_PHP_CN" ] ; then
    if [ "${_DEBUG_MODE}" = "YES" ] ; then
      msg "INFO: _PHP_CN set to $_PHP_CN for Chive Manager"
    fi
    chown -R $_PHP_CN:www-data /var/www/chive
  else
    msg "NOTE: _PHP_CN not set for Chive Manager"
    chown -R www-data:www-data /var/www/chive
  fi
  find /var/www/chive -type d -exec chmod 0775 {} \; &> /dev/null
  find /var/www/chive -type f -exec chmod 0664 {} \; &> /dev/null
fi


###--------------------###
if [[ "${_XTRAS_LIST}" =~ "BDD" ]] ; then
  _SQLBUDDY_VHOST="${mtrNgx}/vhost.d/sqlbuddy.${_THIS_FRONT}"
  if [ ! -d "/var/www/sqlbuddy" ] \
    || [ ! -f "$_SQLBUDDY_VHOST" ] \
    || [ ! -f "${pthLog}/sqlbuddy.fix-dns-vhost-wildcard.log" ] ; then
    echo " "
    if prompt_yes_no "Do you want to install SQL Buddy Manager?" ; then
      true
      msg "INFO: Installing SQL Buddy Manager..."
      rm -f -r /var/www/sqlbuddy
      cd /var/www
      get_dev_arch "sqlbuddy_1_3_3.tar.gz"
      validate_public_ip &> /dev/null
      validate_xtras_ip &> /dev/null
      cp -af ${locCnf}/nginx_sql_buddy.conf $_SQLBUDDY_VHOST
      sed -i "s/127.0.0.1:80/$_XTRAS_THISHTIP:80/g"   $_SQLBUDDY_VHOST
      sed -i "s/127.0.0.1:443/$_XTRAS_THISHTIP:443/g" $_SQLBUDDY_VHOST
      sed -i "s/buddy_name/sqlbuddy.${_THIS_FRONT}/g"   $_SQLBUDDY_VHOST
      touch ${pthLog}/sqlbuddy.fix-dns-vhost-wildcard.log
      msg "INFO: SQL Buddy Manager installation completed"
    else
      msg "INFO: SQL Buddy Manager installation skipped"
    fi
  fi
fi


###--------------------###
if [ -d "/var/www/sqlbuddy" ] ; then
  if [ ! -z "$_PHP_CN" ] ; then
    if [ "${_DEBUG_MODE}" = "YES" ] ; then
      msg "INFO: _PHP_CN set to $_PHP_CN for SQL Buddy Manager"
    fi
    chown -R $_PHP_CN:www-data /var/www/sqlbuddy
  else
    msg "NOTE: _PHP_CN not set for SQL Buddy Manager"
    chown -R www-data:www-data /var/www/sqlbuddy
  fi
  find /var/www/sqlbuddy -type d -exec chmod 0775 {} \; &> /dev/null
  find /var/www/sqlbuddy -type f -exec chmod 0664 {} \; &> /dev/null
fi


###--------------------###
if [[ "${_XTRAS_LIST}" =~ "ALL" ]] || [[ "${_XTRAS_LIST}" =~ "CGP" ]] ; then
  _CGP_VHOST="${mtrNgx}/vhost.d/cgp.${_THIS_FRONT}"
  if [ ! -e "/var/run/cloud_vhost.pid" ] ; then
    if [ ! -d "/var/www/cgp" ] \
      || [ ! -f "$_CGP_VHOST" ] \
      || [ ! -f "${pthLog}/cgp-${_CGP_VRN}.fix-dns-vhost-wildcard.log" ] ; then
      echo " "
      if prompt_yes_no "Do you want to install Collectd Graph Panel?" ; then
        true
        msg "INFO: Installing Collectd Graph Panel..."
        st_runner "$_INSTAPP collectd" 2> /dev/null
        rm -f -r /var/www/cgp
        cd /var/www
        get_dev_arch "cgp-${_CGP_VRN}.tar.gz"
        if [ -e "/var/www/cgp-${_CGP_VRN}" ] ; then
          mv -f cgp-${_CGP_VRN} cgp &> /dev/null
        fi
        sed -i "s/>uncategorized</>Barracuda Server</g" /var/www/cgp/index.php
        sed -i "s/'uncategorized'/'Barracuda Server'/g" /var/www/cgp/index.php
        validate_public_ip &> /dev/null
        validate_xtras_ip &> /dev/null
        cp -af ${locCnf}/nginx_sql_cgp.conf $_CGP_VHOST
        sed -i "s/127.0.0.1:80/$_XTRAS_THISHTIP:80/g"    $_CGP_VHOST
        sed -i "s/127.0.0.1:443/$_XTRAS_THISHTIP:443/g"  $_CGP_VHOST
        sed -i "s/cgp_name/cgp.${_THIS_FRONT}/g"           $_CGP_VHOST
        st_runner "update-rc.d collectd defaults" &> /dev/null
        touch ${pthLog}/cgp-${_CGP_VRN}.fix-dns-vhost-wildcard.log
        msg "INFO: Collectd Graph Panel installation completed"
      else
        msg "INFO: Collectd Graph Panel installation skipped"
      fi
    fi
  fi
fi


###--------------------###
fix_collectd_rrd_syslog_flood() {
  _COLLECTD_CNF="/etc/collectd/collectd.conf"
  if [ -e "$_COLLECTD_CNF" ] ; then
    _COLLECTD_CNF_TEST=$(grep "rootfs" $_COLLECTD_CNF 2>&1)
    if [[ "$_COLLECTD_CNF_TEST" =~ "rootfs" ]] ; then
      _DO_NOTHING=YES
    else
      echo "<Plugin df>"                 >> $_COLLECTD_CNF
      echo "        FSType \"rootfs\""   >> $_COLLECTD_CNF
      echo "        IgnoreSelected true" >> $_COLLECTD_CNF
      echo "</Plugin>"                   >> $_COLLECTD_CNF
      mrun "service collectd restart" &> /dev/null
    fi
  fi
}
### Credit: http://emacstragic.net/collectd-causing-rrd-illegal-attempt-to-update-using-time-errors/


###--------------------###
fix_collectd_nginx() {
  _COLLECTD_CNF="/etc/collectd/collectd.conf"
  if [ -e "$_COLLECTD_CNF" ] ; then
    _COLLECTD_CNF_TEST=$(grep "^LoadPlugin nginx" $_COLLECTD_CNF 2>&1)
    if [[ "$_COLLECTD_CNF_TEST" =~ "LoadPlugin nginx" ]] ; then
      _DO_NOTHING=YES
    else
      echo "<Plugin nginx>"                                >> $_COLLECTD_CNF
      echo "        URL \"http://127.0.0.1/nginx_status\"" >> $_COLLECTD_CNF
      echo "        VerifyPeer false"                      >> $_COLLECTD_CNF
      echo "        VerifyHost false"                      >> $_COLLECTD_CNF
      echo "</Plugin>"                                     >> $_COLLECTD_CNF
      sed -i "s/^#LoadPlugin nginx/LoadPlugin nginx/g"        $_COLLECTD_CNF
      mrun "service collectd restart" &> /dev/null
    fi
  fi
}


###--------------------###
if [ -d "/var/www/cgp" ] \
  && [ "${_VMFAMILY}" = "VS" ] \
  && [ ! -e "/boot/grub/grub.cfg" ] \
  && [ ! -e "/boot/grub/menu.lst" ] ; then
  rm -f ${mtrNgx}/vhost.d/cgp*
  mrun "apt-get remove collectd -y --force-yes -qq" &> /dev/null
  mrun "apt-get purge collectd -y --force-yes -qq" &> /dev/null
  rm -f -r /var/www/cgp
fi


###--------------------###
if [ -d "/var/www/cgp" ] ; then
  if [ ! -z "$_PHP_CN" ] ; then
    if [ "${_DEBUG_MODE}" = "YES" ] ; then
      msg "INFO: _PHP_CN set to $_PHP_CN for Collectd Graph Panel"
    fi
    chown -R $_PHP_CN:www-data /var/www/cgp
  else
    msg "NOTE: _PHP_CN not set for Collectd Graph Panel"
    chown -R www-data:www-data /var/www/cgp
  fi
  find /var/www/cgp -type d -exec chmod 0775 {} \; &> /dev/null
  find /var/www/cgp -type f -exec chmod 0664 {} \; &> /dev/null
  fix_collectd_rrd_syslog_flood
  fix_collectd_nginx
fi


###--------------------###
if [[ "${_XTRAS_LIST}" =~ "HVM" ]] ; then
  if [ "$_REL_VERSION" = "wheezy" ] || [ "$_REL_VERSION" = "trusty" ] ; then
    if [ ! -x "/usr/bin/hhvm" ] ; then
      echo " "
      if prompt_yes_no "Do you want to install HHVM Engine?" ; then
        true
        msg "INFO: Installing HHVM Engine..."
        cd /var/opt
        echo "## HHVM APT Repository" > /etc/apt/sources.list.d/hhvm.list
        if [ "$_REL_VERSION" = "wheezy" ] ; then
          echo "deb http://dl.hhvm.com/debian wheezy main" >> \
            /etc/apt/sources.list.d/hhvm.list
        elif [ "$_REL_VERSION" = "trusty" ] ; then
          echo "deb http://dl.hhvm.com/ubuntu trusty main" >> \
            /etc/apt/sources.list.d/hhvm.list
        fi
        _KEYS_SERVER_TEST=FALSE
        until [[ "$_KEYS_SERVER_TEST" =~ "GnuPG" ]] ; do
          rm -f /var/opt/hhvm.gpg.key*
          cd /var/opt
          wget -q -U iCab http://dl.hhvm.com/conf/hhvm.gpg.key
          _KEYS_SERVER_TEST=$(grep GnuPG /var/opt/hhvm.gpg.key 2>&1)
          sleep 2
        done
        cat /var/opt/hhvm.gpg.key | apt-key add - &> /dev/null
        st_runner "apt-get update -y --force-yes" &> /dev/null
        st_runner "apt-get install hhvm ${forCer}" 2> /dev/null
        msg "INFO: HHVM Engine installation completed"
      else
        msg "INFO: HHVM Engine installation skipped"
      fi
    fi
  fi
fi


###--------------------###
if [[ "${_XTRAS_LIST}" =~ "ALL" ]] || [[ "${_XTRAS_LIST}" =~ "WMN" ]] ; then
  if [ ! -d "/etc/webmin" ] && [ ! -e "/var/run/cloud_vhost.pid" ] ; then
    echo " "
    if prompt_yes_no "Do you want to install Webmin Control Panel?" ; then
      true
      msg "INFO: Installing Webmin Control Panel..."
      cd /var/opt
      echo "## Webmin APT Repository" > /etc/apt/sources.list.d/webmin.list
      echo "deb http://download.webmin.com/download/repository \
        sarge contrib" >> /etc/apt/sources.list.d/webmin.list
      echo "deb http://webmin.mirror.somersettechsolutions.co.uk/repository \
        sarge contrib" >> /etc/apt/sources.list.d/webmin.list
      _KEYS_SERVER_TEST=FALSE
      until [[ "$_KEYS_SERVER_TEST" =~ "GnuPG" ]] ; do
        rm -f jcameron-key.asc*
        wget -q -U iCab ${urlDev}/jcameron-key.asc
        _KEYS_SERVER_TEST=$(grep GnuPG jcameron-key.asc 2>&1)
        sleep 2
      done
      cat jcameron-key.asc | apt-key add - &> /dev/null
      rm -f jcameron-key.asc*
      touch ${pthLog}/webmin_update_apt_src.log
      st_runner "apt-get update -y --force-yes" &> /dev/null
      st_runner "$_INSTAPP webmin \
                           libxml-simple-perl \
                           libcrypt-ssleay-perl" 2> /dev/null
      update-rc.d webmin defaults &> /dev/null
      msg "INFO: Webmin Control Panel installation completed"
    else
      msg "INFO: Webmin Control Panel installation skipped"
    fi
  fi
fi


###--------------------###
_CHECK_OS=$(grep "Ubuntu.*LTS" /etc/issue.net 2>&1)
if [[ "$_CHECK_OS" =~ "Ubuntu" ]] ; then
  _CHECK_OS=ULTS
else
  _CHECK_OS=OTHER
fi
if [[ "${_XTRAS_LIST}" =~ "BND" ]] && [ "$_CHECK_OS" = "OTHER" ] ; then
  if [ ! -e "/usr/sbin/named" ] || [ "${_FULL_FORCE_REINSTALL}" = "YES" ] ; then
    echo " "
    if prompt_yes_no "Do you want to install Bind9 DNS Server?" ; then
      true
      msg "INFO: Installing Bind9 DNS Server..."
      if [ -z "${_THISHTIP}" ] ; then
        _LOC_DOM="${_THISHOST}"
        find_correct_ip
        _THISHTIP="${_LOC_IP}"
      fi
      st_runner "$_INSTAPP bind9" 2> /dev/null
      cp -af /etc/bind/named.conf.options \
        /var/backups/named.conf.options.pre-${_X_VERSION}-${_NOW}
      cp -af ${locCnf}/named.conf.options /etc/bind/named.conf.options
      sed -i "s/127.0.1.1/${_THISHTIP}/g" /etc/bind/named.conf.options &> /dev/null
      mrun "service bind9 restart" &> /dev/null
      if [ ! -e "/etc/init.d/bind" ] ; then
        ln -sf /etc/init.d/bind9 /etc/init.d/bind
      fi
      sed -i "s/.*bind.*//g" /etc/sudoers &> /dev/null
      sed -i "/^$/d" /etc/sudoers &> /dev/null
      msg "INFO: Bind9 DNS Server installation completed"
    else
      msg "INFO: Bind9 DNS Server installation skipped"
    fi
  fi
fi


if [ "$_REL_VERSION" = "lenny" ] || [ "$_REL_VERSION" = "lucid" ] ; then
  _DO_NOTHING=YES
else
  if [[ "${_XTRAS_LIST}" =~ "ALL" ]] \
    || [[ "${_XTRAS_LIST}" =~ "CSS" ]] \
    || [ ! -z "${_SCOUT_KEY}" ] \
    || [[ "${_THISHOST}" =~ ".host8." ]] \
    || [ -e "/root/.host8.cnf" ] \
    || [ "${_VMFAMILY}" = "VS" ] ; then
    if [ "${_STATUS}" = "INIT" ] ; then
      _L_ST="install"
    else
      _L_ST="upgrade"
    fi
    if [ ! -e "${pthLog}/compass-${_X_VERSION}-${_NOW}-ruby-${_RUBY_VRN}.log" ] ; then
      echo " "
      if prompt_yes_no "Do you want to $_L_ST Compass Tools for root?" ; then
        true
        msg "INFO: Running Compass Tools ${_L_ST}..."
        if [ ! -e "${pthLog}/ruby-root-clean-reload.log" ] ; then
          _RUBY_RELOAD=YES
          rm -f -r /usr/local/rvm
          touch ${pthLog}/ruby-root-clean-reload.log
        fi
        $_GPG --keyserver hkp://keys.gnupg.net --recv-keys D39DC0E3 &> /dev/null
        curl -sSL https://rvm.io/mpapis.asc | $_GPG --import - &> /dev/null
        curl -sSL https://get.rvm.io | bash -s stable &> /dev/null
        echo rvm_autoupdate_flag=0 > ~/.rvmrc
        if [ -e "/etc/profile.d/rvm.sh" ] ; then
          source /etc/profile.d/rvm.sh
        fi
        if [ ! -x "/usr/local/rvm/rubies/ruby-${_RUBY_VRN}/bin/gem" ] ; then
          _RUBY_UPGRADE=YES
        fi
        if [ "${_STATUS}" = "INIT" ] \
          || [ "$_RUBY_UPGRADE" = "YES" ] \
          || [ "$_RUBY_RELOAD" = "YES" ] ; then
          mrun "apt-get update -y --force-yes" &> /dev/null
          mrun "apt-get remove rubygems \
                               ruby1.9.1-dev \
                               libruby1.9.1 \
                               ruby1.9.1 \
                               -y --force-yes -qq" &> /dev/null
          mrun "apt-get autoremove -y --force-yes -qq" &> /dev/null
          mrun "rvm install ${_RUBY_VRN}" &> /dev/null
          mrun "rvm use ${_RUBY_VRN} --default" &> /dev/null
          mrun "rvm get stable" 2> /dev/null
          mrun "rvm @global do gem update -q" 2> /dev/null
        else
          mrun "rvm get stable" 2> /dev/null
          mrun "rvm @global do gem update -q" 2> /dev/null
        fi
        _RBY_FILE="/usr/local/rvm/rubies/ruby-${_RUBY_VRN}/bin/ruby"
        _RBY_PATH=${_RBY_FILE//\//\\\/}
        _GEM_FILE="/usr/local/rvm/gems/ruby-${_RUBY_VRN}@global/bin/scout"
        _GEM_PATH=${_GEM_FILE//\//\\\/}
        _GEM_CRON="/etc/crontab"
        _VAR_IF_PRESENT=$(grep "scout" $_GEM_CRON 2>&1)
        if [[ "$_VAR_IF_PRESENT" =~ "scout" ]] ; then
          if [ ! -e "$_GEM_FILE" ] && [ ! -z "${_SCOUT_KEY}" ] ; then
            st_runner "rvm @global do gem install --conservative scout" 2> /dev/null
            adduser --system --group --home /var/scout scout &> /dev/null
            usermod -aG users scout &> /dev/null
            sed -i "s/\* \* \* \* \* scout .*/* * * * * \
              scout $_GEM_PATH ${_SCOUT_KEY}/g" $_GEM_CRON &> /dev/null
          fi
        else
          if [ ! -z "${_SCOUT_KEY}" ] ; then
            st_runner "rvm @global do gem install --conservative scout" 2> /dev/null
            adduser --system --group --home /var/scout scout &> /dev/null
            usermod -aG users scout &> /dev/null
            echo -e "* * * * * scout $_GEM_FILE ${_SCOUT_KEY}" \
              | tee -a $_GEM_CRON >/dev/null 2>&1
          fi
        fi
        if [ -e "$_GEM_FILE" ] ; then
          sed -i "s/^#\!\/.*/#\!$_RBY_PATH/g" $_GEM_FILE &> /dev/null
        fi
        PATH=/usr/local/bin:/usr/local/sbin:/opt/local/bin:/usr/bin:/usr/sbin:/bin:/sbin;export PATH
        touch ${pthLog}/compass-${_X_VERSION}-${_NOW}-ruby-${_RUBY_VRN}.log
        msg "INFO: Compass Tools $_L_ST for root completed"
      else
        msg "INFO: Compass Tools $_L_ST for root skipped"
      fi
    fi
  fi
fi

###--------------------###
if [ -e "/var/scout" ] ; then
  _SCOUT_CRON_OFF=$(grep "OFFscoutOFF" /etc/crontab 2>&1)
  _SCOUT_CRON=$(grep "scout" /etc/crontab 2>&1)
  if [[ ! "$_SCOUT_CRON_OFF" =~ "OFFscoutOFF" ]] \
    && [[ "$_SCOUT_CRON" =~ "scout" ]] ; then
    sed -i "s/scout/OFFscoutOFF/g" /etc/crontab &> /dev/null
  fi
fi

###--------------------###
if [ "${_STATUS}" = "INIT" ] ; then
  msg "INFO: Updating init scripts"
  cp -af ${locCnf}/clean-boa-env /etc/init.d/clean-boa-env
  chmod 755 /etc/init.d/clean-boa-env &> /dev/null
  st_runner "update-rc.d clean-boa-env defaults" &> /dev/null
  _SSH_USEDNS_TEST=$(grep "UseDNS" /etc/ssh/sshd_config 2>&1)
  if [[ "$_SSH_USEDNS_TEST" =~ (^)"UseDNS no" ]] ; then
    _DO_NOTHING=YES
  elif [[ "$_SSH_USEDNS_TEST" =~ "UseDNS" ]] ; then
    sed -i "s/.*UseDNS.*/UseDNS no/g" /etc/ssh/sshd_config &> /dev/null
  else
    echo >> /etc/ssh/sshd_config
    echo "UseDNS no" >> /etc/ssh/sshd_config
  fi
  if [ -e "/usr/etc/sshd_config" ] ; then
    _SSH_USEDNS_TEST=$(grep "UseDNS" /usr/etc/sshd_config 2>&1)
    if [[ "$_SSH_USEDNS_TEST" =~ (^)"UseDNS no" ]] ; then
      _DO_NOTHING=YES
    elif [[ "$_SSH_USEDNS_TEST" =~ "UseDNS" ]] ; then
      sed -i "s/.*UseDNS.*/UseDNS no/g" /usr/etc/sshd_config &> /dev/null
    else
      echo >> /usr/etc/sshd_config
      echo "UseDNS no" >> /usr/etc/sshd_config
    fi
  fi
  mrun "service ssh reload" &> /dev/null
  if [ -e "/etc/default/jetty9" ] && [ -e "/etc/init.d/jetty9" ] ; then
    msg "INFO: Restarting Jetty 9"
    kill -9 $(ps aux | grep '[j]etty9' | awk '{print $2}') &> /dev/null
    mrun "service jetty9 start" &> /dev/null
  fi
  if [ -e "/etc/default/jetty8" ] && [ -e "/etc/init.d/jetty8" ] ; then
    msg "INFO: Restarting Jetty 8"
    kill -9 $(ps aux | grep '[j]etty8' | awk '{print $2}') &> /dev/null
    mrun "service jetty8 start" &> /dev/null
  fi
  if [ -e "/etc/default/jetty7" ] && [ -e "/etc/init.d/jetty7" ] ; then
    msg "INFO: Restarting Jetty 7"
    kill -9 $(ps aux | grep '[j]etty7' | awk '{print $2}') &> /dev/null
    mrun "service jetty7 start" &> /dev/null
  fi
  if [ ! -e "/var/run/aegir_upgrade.pid" ] ; then
    msg "INFO: Starting Redis, PHP-FPM and Nginx"
    mrun "service redis-server start" &> /dev/null
    killall -9 nginx php-cgi php-fpm &> /dev/null
    st_runner "update-rc.d -f php5-fpm remove" &> /dev/null
    st_runner "update-rc.d cron defaults" &> /dev/null
    if [ -e "/etc/init.d/php56-fpm" ] ; then
      st_runner "update-rc.d php56-fpm defaults" &> /dev/null
      mrun "service php56-fpm start" &> /dev/null
    fi
    if [ -e "/etc/init.d/php55-fpm" ] ; then
      st_runner "update-rc.d php55-fpm defaults" &> /dev/null
      mrun "service php55-fpm start" &> /dev/null
    fi
    if [ -e "/etc/init.d/php54-fpm" ] ; then
      st_runner "update-rc.d php54-fpm defaults" &> /dev/null
      mrun "service php54-fpm start" &> /dev/null
    fi
    if [ -e "/etc/init.d/php53-fpm" ] ; then
      st_runner "update-rc.d php53-fpm defaults" &> /dev/null
      mrun "service php53-fpm start" &> /dev/null
    fi
    st_runner "update-rc.d nginx defaults" &> /dev/null
    mrun "service nginx start" &> /dev/null
  fi
else
  if [[ "${_THISHOST}" =~ ".host8." ]] || [ "${_VMFAMILY}" = "VS" ] ; then
    sed -i "s/.*UseDNS.*//g" /etc/ssh/sshd_config &> /dev/null
    sed -i "s/^ClientAliveCountMax.*//g" /etc/ssh/sshd_config &> /dev/null
    sed -i "s/^ClientAliveInterval.*//g" /etc/ssh/sshd_config &> /dev/null
    sed -i "s/^IgnoreUserKnownHosts.*//g" /etc/ssh/sshd_config &> /dev/null
    sed -i "s/^PasswordAuthentication.*//g" /etc/ssh/sshd_config &> /dev/null
    sed -i "s/^PermitRootLogin.*/PermitRootLogin without-password/g" \
      /etc/ssh/sshd_config &> /dev/null
    echo >> /etc/ssh/sshd_config
    echo "IgnoreUserKnownHosts no" >> /etc/ssh/sshd_config
    echo "PasswordAuthentication yes" >> /etc/ssh/sshd_config
    echo "UseDNS no" >> /etc/ssh/sshd_config
    echo "ClientAliveInterval 300" >> /etc/ssh/sshd_config
    echo "ClientAliveCountMax 3" >> /etc/ssh/sshd_config
    sed -i "/^$/d" /etc/ssh/sshd_config &> /dev/null
    if [ -e "/usr/etc/sshd_config" ] ; then
      sed -i "s/.*UseDNS.*//g" /usr/etc/sshd_config &> /dev/null
      sed -i "s/^ClientAliveCountMax.*//g" /usr/etc/sshd_config &> /dev/null
      sed -i "s/^ClientAliveInterval.*//g" /usr/etc/sshd_config &> /dev/null
      sed -i "s/^IgnoreUserKnownHosts.*//g" /usr/etc/sshd_config &> /dev/null
      sed -i "s/^PasswordAuthentication.*//g" /usr/etc/sshd_config &> /dev/null
      sed -i "s/^PermitRootLogin.*/PermitRootLogin without-password/g" \
        /usr/etc/sshd_config &> /dev/null
      echo >> /usr/etc/sshd_config
      echo "IgnoreUserKnownHosts no" >> /usr/etc/sshd_config
      echo "PasswordAuthentication yes" >> /usr/etc/sshd_config
      echo "UseDNS no" >> /usr/etc/sshd_config
      echo "ClientAliveInterval 300" >> /usr/etc/sshd_config
      echo "ClientAliveCountMax 3" >> /usr/etc/sshd_config
      sed -i "/^$/d" /usr/etc/sshd_config &> /dev/null
    fi
    mrun "service ssh reload" &> /dev/null
  else
    _SSH_USEDNS_TEST=$(grep "^UseDNS no" /etc/ssh/sshd_config 2>&1)
    if [[ "$_SSH_USEDNS_TEST" =~ "UseDNS no" ]] ; then
      _DO_NOTHING=YES
    else
      sed -i "s/.*UseDNS.*/UseDNS no/g" /etc/ssh/sshd_config &> /dev/null
    fi
    if [ -e "/usr/etc/sshd_config" ] ; then
      _SSH_USEDNS_TEST=$(grep "^UseDNS no" /usr/etc/sshd_config 2>&1)
      if [[ "$_SSH_USEDNS_TEST" =~ "UseDNS no" ]] ; then
        _DO_NOTHING=YES
      else
        sed -i "s/.*UseDNS.*/UseDNS no/g" /usr/etc/sshd_config &> /dev/null
      fi
    fi
    mrun "service ssh reload" &> /dev/null
  fi
  fix_on_upgrade
  tune_memory_limits
  kill -9 $(ps aux | grep '[j]etty' | awk '{print $2}') &> /dev/null
  kill -9 $(ps aux | grep '[t]omcat' | awk '{print $2}') &> /dev/null
  if [ -e "/etc/default/jetty9" ] && [ -e "/etc/init.d/jetty9" ] ; then
    msg "INFO: Restarting Jetty 9"
    mrun "service jetty9 start" &> /dev/null
  fi
  if [ -e "/etc/default/jetty8" ] && [ -e "/etc/init.d/jetty8" ] ; then
    msg "INFO: Restarting Jetty 8"
    mrun "service jetty8 start" &> /dev/null
  fi
  if [ -e "/etc/default/jetty7" ] && [ -e "/etc/init.d/jetty7" ] ; then
    msg "INFO: Restarting Jetty 7"
    mrun "service jetty7 start" &> /dev/null
  fi
  if [ ! -e "/var/run/aegir_upgrade.pid" ] ; then
    msg "INFO: Restarting Redis, PHP-FPM and Nginx"
    mrun "service redis-server restart" &> /dev/null
    st_runner "update-rc.d -f php5-fpm remove" &> /dev/null
    mrun "service nginx stop" &> /dev/null
    if [ -e "/etc/init.d/php56-fpm" ] ; then
      st_runner "update-rc.d php56-fpm defaults" &> /dev/null
      mrun "service php56-fpm stop" &> /dev/null
    fi
    if [ -e "/etc/init.d/php55-fpm" ] ; then
      st_runner "update-rc.d php55-fpm defaults" &> /dev/null
      mrun "service php55-fpm stop" &> /dev/null
    fi
    if [ -e "/etc/init.d/php54-fpm" ] ; then
      st_runner "update-rc.d php54-fpm defaults" &> /dev/null
      mrun "service php54-fpm stop" &> /dev/null
    fi
    if [ -e "/etc/init.d/php53-fpm" ] ; then
      st_runner "update-rc.d php53-fpm defaults" &> /dev/null
      mrun "service php53-fpm stop" &> /dev/null
    fi
    killall -9 php-fpm &> /dev/null
    killall -9 php-cgi &> /dev/null
    killall -9 pure-ftpd &> /dev/null
    msg "INFO: Restarting ${_DB_SERVER} server"
    mrun "service mysql restart" &> /dev/null
    if [ -e "/etc/init.d/php56-fpm" ] ; then
      mrun "service php56-fpm start" &> /dev/null
    fi
    if [ -e "/etc/init.d/php55-fpm" ] ; then
      mrun "service php55-fpm start" &> /dev/null
    fi
    if [ -e "/etc/init.d/php54-fpm" ] ; then
      mrun "service php54-fpm start" &> /dev/null
    fi
    if [ -e "/etc/init.d/php53-fpm" ] ; then
      mrun "service php53-fpm start" &> /dev/null
    fi
    mrun "service nginx start" &> /dev/null
  fi
fi


#
# Forced MySQL root password update.
forced_mysql_root_password_update() {
  mv -f /root/.my.cnf-pre-* /var/backups/ &> /dev/null
  mv -f /root/.my.pass.txt-pre-* /var/backups/ &> /dev/null
  touch /root/.my.pass.txt
  chmod 0600 /root/.my.pass.txt &> /dev/null
  _ESC_PASS=""
  _LEN_PASS=0
  if [ "${_STRONG_PASSWORDS}" = "YES" ] ; then
    _PWD_CHARS=32
  elif [ "${_STRONG_PASSWORDS}" = "NO" ] ; then
    _PWD_CHARS=8
  else
    _STRONG_PASSWORDS=${_STRONG_PASSWORDS//[^0-9]/}
    if [ ! -z "${_STRONG_PASSWORDS}" ] && [ ${_STRONG_PASSWORDS} -gt "8" ] ; then
      _PWD_CHARS="${_STRONG_PASSWORDS}"
    else
      _PWD_CHARS=8
    fi
    if [ ! -z "$_PWD_CHARS" ] && [ $_PWD_CHARS -gt "128" ] ; then
      _PWD_CHARS=128
    fi
  fi
  if [ "${_STRONG_PASSWORDS}" = "YES" ] || [ $_PWD_CHARS -gt "8" ] ; then
    _ESC_PASS=$(randpass $_PWD_CHARS esc 2>&1)
    _ESC_PASS=$(echo -n $_ESC_PASS | tr -d "\n" 2>&1)
    _LEN_PASS=$(echo ${#_ESC_PASS} 2>&1)
  fi
  if [ -z "$_ESC_PASS" ] || [ $_LEN_PASS -lt 9 ] ; then
    _ESC_PASS=$(pwgen -v -s -1 2>&1)
    _ESC_PASS=$(echo -n $_ESC_PASS | tr -d "\n" 2>&1)
    _ESC_PASS=$(sanitize_string "$_ESC_PASS" 2>&1)
  fi
  if [ ! -z "$_ESC_PASS" ] ; then
    cp -af /root/.my.cnf /root/.my.cnf-pre-${_X_VERSION}-${_NOW}
    cp -af /root/.my.pass.txt /root/.my.pass.txt-pre-${_X_VERSION}-${_NOW}
    mysql -u root -e "FLUSH HOSTS;" &> /dev/null
    mysql -u root -e "DELETE FROM mysql.user WHERE User='';" &> /dev/null
    mysql -u root -e "DELETE FROM mysql.user WHERE User='root' AND Host \
      NOT IN ('localhost', '127.0.0.1', '::1');" &> /dev/null
    mysql -u root -e "DROP DATABASE test;" &> /dev/null
    mysql -u root -e "DELETE FROM mysql.db \
      WHERE Db='test' OR Db='test\\_%';" &> /dev/null
    mysql -u root -e "UPDATE mysql.user SET Password=PASSWORD('$_ESC_PASS') \
      WHERE User='root';" &> /dev/null
    mysql -u root -e "FLUSH PRIVILEGES;" &> /dev/null
    echo "[client]" > /root/.my.cnf
    echo "user=root" >> /root/.my.cnf
    echo "password=$_ESC_PASS" >> /root/.my.cnf
    chmod 0600 /root/.my.cnf
    echo "db=mysql" > /root/.mytop
    chmod 0600 /root/.mytop
    echo "$_ESC_PASS" > /root/.my.pass.txt
    echo " "
    if [ "${_DEBUG_MODE}" = "YES" ] ; then
      if [ "${_STRONG_PASSWORDS}" = "YES" ] ; then
        msg "INFO: New secure random password for ${_DB_SERVER} generated"
      else
        msg "INFO: New random password for ${_DB_SERVER} generated"
      fi
    fi
  fi
}

###--------------------###
if [ ! -e "/root/.my.cnf" ] ; then
  msg "INFO: ${_DB_SERVER} final setup"
  #
  # Let's just do what mysql_secure_installation does, so we can do it non-interactively:
  # - remove anonymous users
  # - remove remote root
  # - remove test database
  # - remove privileges on test database
  # - set auto-generated root password
  # - reload privileges table
  #
  if [ -e "/root/.my.pass.txt" ] ; then
    if [ -z "$_ESC_PASS" ] ; then
      PXSWD=$(cat /root/.my.pass.txt 2>&1)
    else
      PXSWD="$_ESC_PASS"
    fi
    PASWD=$(echo -n $PXSWD | tr -d "\n" 2>&1)
    mysql -u root -e "FLUSH HOSTS;" &> /dev/null
    mysql -u root -e "DELETE FROM mysql.user WHERE User='';" &> /dev/null
    mysql -u root -e "DELETE FROM mysql.user WHERE User='root' AND \
      Host NOT IN ('localhost', '127.0.0.1', '::1');" &> /dev/null
    mysql -u root -e "DROP DATABASE test;" &> /dev/null
    mysql -u root -e "DELETE FROM mysql.db WHERE Db='test' OR \
      Db='test\\_%';" &> /dev/null
    mysql -u root -e "UPDATE mysql.user SET Password=PASSWORD('$PASWD') \
      WHERE User='root';" &> /dev/null
    if [ "${_THIS_DB_HOST}" = "localhost" ] \
      || [ "${_THIS_DB_HOST}" = "FQDN" ] ; then
      _DO_NOTHING=YES
    else
      if [ -e "/etc/mysql/debian.cnf" ] && [ "${_STATUS}" = "INIT" ] ; then
        mysql -u root -e "UPDATE mysql.user SET Password=PASSWORD('${PASWD}') \
          WHERE User='debian-sys-maint';" &> /dev/null
        mkdir -p /var/backups
        cp -af /etc/mysql/debian.cnf \
          /var/backups/debian.cnf-pre-${_X_VERSION}-${_NOW}.txt
        chmod 400 /var/backups/debian.cnf-pre-${_X_VERSION}-${_NOW}.txt
        sed -i "s/^password =.*/password = ${PASWD}/g" \
          /etc/mysql/debian.cnf &> /dev/null
      fi
      if [ -e "/root/.remote.IP.list" ] ; then
        _ESC="\`%\`.*"
        for _IP in `cat /root/.remote.IP.list \
          | cut -d '#' -f1 \
          | sort \
          | uniq \
          | tr -d "\s"`; do
          mysql -u root -e "GRANT ALL PRIVILEGES ON $_ESC \
          TO 'aegir_root'@'$_IP' IDENTIFIED BY '${PASWD}' \
          WITH GRANT OPTION;" &> /dev/null
        done
      fi
      if [ -e "/root/.cluster.IP.list" ] ; then
        for _IP in `cat /root/.cluster.IP.list \
          | cut -d '#' -f1 \
          | sort \
          | uniq \
          | tr -d "\s"`; do
          mysql -u root -e "GRANT ALL ON *.* TO 'root'@'$_IP';" &> /dev/null
        done
        mysql -u root -e "GRANT ALL ON *.* TO 'wsrep'@'%' \
          IDENTIFIED BY '${PASWD}';" &> /dev/null
      fi
      touch ${pthLog}/fixed-cluster-ip-grants.log
    fi
    mysql -u root -e "FLUSH PRIVILEGES;" &> /dev/null
  fi
  echo "[client]" > /root/.my.cnf
  echo "user=root" >> /root/.my.cnf
  echo "password=$PASWD" >> /root/.my.cnf
  chmod 0600 /root/.my.cnf
  echo "db=mysql" > /root/.mytop
  chmod 0600 /root/.mytop
  if [ "${_THIS_DB_HOST}" = "localhost" ] ; then
    echo "skip-name-resolve" > /etc/mysql/skip-name-resolve.txt
  elif [ -e "/root/.mstr.clstr.cnf" ] \
    || [ -e "/root/.wbhd.clstr.cnf" ] \
    || [ -e "/root/.dbhd.clstr.cnf" ] ; then
    echo "skip-name-resolve" > /etc/mysql/skip-name-resolve.txt
  else
    sed -i "s/.*skip-name-resolve/#skip-name-resolve/g" /etc/mysql/my.cnf
  fi
  sed -i "s/.*check_for_crashed_tables/#check_for_crashed_tables/g" \
    /etc/mysql/debian-start &> /dev/null
  mrun "service mysql restart" &> /dev/null
  msg "INFO: ${_DB_SERVER} setup completed"
  msg "INFO: You can now log in as root by typing \
    only 'mysql' on the command line"
else
  if [ ! -e "${pthLog}/fixed-cluster-ip-grants.log" ] \
    && [ -e "/root/.dbhd.clstr.cnf" ] ; then
    PXSWD=$(cat /root/.my.pass.txt 2>&1)
    PASWD=$(echo -n $PXSWD | tr -d "\n" 2>&1)
    if [ -e "/root/.remote.IP.list" ] ; then
      _ESC="\`%\`.*"
      for _IP in `cat /root/.remote.IP.list \
        | cut -d '#' -f1 \
        | sort \
        | uniq \
        | tr -d "\s"`; do
        mysql -u root -e "GRANT ALL PRIVILEGES \
          ON $_ESC TO 'aegir_root'@'$_IP' \
          IDENTIFIED BY '${PASWD}' WITH GRANT OPTION;" &> /dev/null
      done
    fi
    if [ -e "/root/.cluster.IP.list" ] ; then
      for _IP in `cat /root/.cluster.IP.list \
        | cut -d '#' -f1 \
        | sort \
        | uniq \
        | tr -d "\s"`; do
        mysql -u root -e "GRANT ALL ON *.* TO 'root'@'$_IP';" &> /dev/null
      done
      mysql -u root -e "GRANT ALL ON *.* TO 'wsrep'@'%' \
        IDENTIFIED BY '${PASWD}';" &> /dev/null
    fi
    touch ${pthLog}/fixed-cluster-ip-grants.log
  fi
  if [ "${_THIS_DB_HOST}" = "localhost" ] \
    || [ "${_THIS_DB_HOST}" = "FQDN" ] ; then
    if [ ! -e "/root/.mysql.no.new.password.cnf" ] ; then
      forced_mysql_root_password_update
    fi
  fi
fi


###--------------------###
if [ -L "${mtrInc}/barracuda_log.txt" ] ; then
  rm -f ${mtrInc}/barracuda_log.txt
fi
if [ "${_THIS_DB_HOST}" = "localhost" ] ; then
  _LOG_DB_HOST=localhost
elif [ "${_THIS_DB_HOST}" = "FQDN" ] ; then
  _LOG_DB_HOST=FQDN
else
  _LOG_DB_HOST=REMOTE
fi
if [ ! -z "${_FORCE_GIT_MIRROR}" ] ; then
  _LOG_GIT_MIRROR="-${_FORCE_GIT_MIRROR}"
fi
_LOG_DB_V=$(mysql -V 2>&1 \
  | tr -d "\n" \
  | cut -d" " -f6 \
  | awk '{ print $1}' \
  | cut -d"-" -f1 \
  | awk '{ print $1}' \
  | sed "s/[\,']//g" 2>&1)
_BARRACUDA_VERSION_INFO="$(date 2>&1) / \
  $(lsb_release -si 2>&1).$(lsb_release -sc 2>&1) \
  $(uname -m 2>&1) ${_VMFAMILY} / \
  Aegir ${_AEGIR_VERSION} / \
  Barracuda ${_X_VERSION}${_LOG_GIT_MIRROR} / \
  Nginx ${_NGINX_VRN} / \
  PHP ${_PHP_MULTI_INSTALL} / \
  FPM ${_PHP_FPM_VERSION} / \
  CLI ${_PHP_CLI_VERSION} / \
  ${_DB_SERVER}-${_LOG_DB_V} \
  ${_LOG_DB_HOST}"
echo "$_BARRACUDA_VERSION_INFO" >> /var/log/barracuda_log.txt
echo "$_BARRACUDA_VERSION_INFO" >> /var/backups/barracuda_log.txt
if [ "${_DEBUG_MODE}" = "YES" ] ; then
  msg "INFO: New entry added to /var/log/barracuda_log.txt"
fi


###--------------------###
if [ ! -e "${pthLog}/sysctl.conf-${_X_VERSION}-${_NOW}.log" ] ; then
  cp -af /etc/sysctl.conf \
    /var/backups/dragon/t/sysctl.conf-pre-${_X_VERSION}-${_NOW} &> /dev/null
  cp -af ${locCnf}/sysctl.conf /etc/sysctl.conf
  if [ -e "/etc/security/limits.conf" ] ; then
    _IF_NF=$(grep '524288' /etc/security/limits.conf 2>&1)
    if [ -z "$_IF_NF" ] ; then
      echo "*         hard    nofile      524288"  >> /etc/security/limits.conf
      echo "*         soft    nofile      524288"  >> /etc/security/limits.conf
      echo "root      hard    nofile      1048576" >> /etc/security/limits.conf
      echo "root      soft    nofile      1048576" >> /etc/security/limits.conf
    fi
  fi
  if [ -e "/boot/grub/grub.cfg" ] || [ -e "/boot/grub/menu.lst" ] ; then
    sysctl -p /etc/sysctl.conf &> /dev/null
    _IF_CDP=$(ps aux | grep '[c]dp_io' | awk '{print $2}' 2>&1)
    if [ -z "$_IF_CDP" ] && [ ! -e "/root/.no.swap.clear.cnf" ] ; then
      msg "INFO: Cleaning up system swap, it may take a moment, please wait..."
      st_runner "swapoff -a" &> /dev/null
      st_runner "swapon -a" &> /dev/null
    fi
  else
    sysctl -p /etc/sysctl.conf &> /dev/null
  fi
  touch ${pthLog}/sysctl.conf-${_X_VERSION}-${_NOW}.log
fi
XPTEMAIL=${_MY_EMAIL//\@/\\\\\@}
sed -i "s/notify\@omega8.cc/${_MY_EMAIL}/g"  \
  /etc/csf/csf.conf &> /dev/null
sed -i "s/notify\\\@omega8.cc/$XPTEMAIL/g" \
  /var/xdrago/checksql.cgi
sed -i "s/notify\\\@omega8.cc/$XPTEMAIL/g" \
  /var/xdrago/daily.sh
sed -i "s/notify\\\@omega8.cc/$XPTEMAIL/g" \
  /var/xdrago/weekly.sh
sed -i "s/notify\\\@omega8.cc/$XPTEMAIL/g" \
  /var/xdrago/monitor/check/segfault_alert
sed -i "s/notify\\\@omega8.cc/$XPTEMAIL/g" \
  /var/xdrago/monitor/check/escapecheck
if [ -e "/usr/sbin/apticron" ] ; then
  if [ -e "/etc/apticron/apticron.conf" ] ; then
    _APTICRON_TEST=$(grep "NOTIFY_HOLDS" /etc/apticron/apticron.conf 2>&1)
    if [[ "$_APTICRON_TEST" =~ "NOTIFY_HOLDS" ]] ; then
      sed -i "s/^# NOTIFY_HOLDS=\"0\"/NOTIFY_HOLDS=\"0\"/g" \
        /etc/apticron/apticron.conf
      sed -i "s/notify\@omega8.cc/${_MY_EMAIL}/g" \
        /etc/apticron/apticron.conf
      sed -i "s/root/${_MY_EMAIL}/g" \
        /etc/apticron/apticron.conf
    else
      mrun "apt-get remove apticron -y --force-yes -qq" &> /dev/null
      mrun "apt-get purge apticron -y --force-yes -qq"  &> /dev/null
      mrun "apt-get install apticron -y"                &> /dev/null
      sed -i "s/^# NOTIFY_HOLDS=\"0\"/NOTIFY_HOLDS=\"0\"/g" \
        /etc/apticron/apticron.conf
      sed -i "s/notify\@omega8.cc/${_MY_EMAIL}/g" \
        /etc/apticron/apticron.conf
      sed -i "s/root/${_MY_EMAIL}/g" \
        /etc/apticron/apticron.conf
    fi
  fi
  if [[ "${_X_VERSION}" =~ "dev" ]] && [ "${_AEGIR_VERSION}" = "HEAD" ] ; then
    sed -i "s/aptitude full-upgrade/barracuda up-head system/g" \
      /usr/sbin/apticron
    sed -i "s/apt-get dist-upgrade/barracuda up-head system/g" \
      /usr/sbin/apticron
    sed -i "s/barracuda up-head.*/barracuda up-head system/g" \
      /usr/sbin/apticron
  else
    sed -i "s/aptitude full-upgrade/barracuda up-stable system/g" \
      /usr/sbin/apticron
    sed -i "s/apt-get dist-upgrade/barracuda up-stable system/g" \
      /usr/sbin/apticron
    sed -i "s/barracuda up-stable.*/barracuda up-stable system/g" \
      /usr/sbin/apticron
  fi
fi
if [ "${_STATUS}" = "INIT" ] ; then
  if [ "${_EASY_SETUP}" != "LOCAL" ] ; then
    mrun "bash /usr/sbin/apticron" &> /dev/null
  fi
  if [ "${_DEBUG_MODE}" = "YES" ] ; then
    _DO_NOTHING=YES
  else
    _AEGIR_LOGIN_URL=$(grep --text "^http://${_THIS_FRONT}" \
      /var/aegir/install.log 2>&1)
    if [ ! -z "$_AEGIR_LOGIN_URL" ] ; then
      echo " "
      msg "INFO: Congratulations, Aegir backend and frontend have been installed successfully"
      msg "NOTE! Please wait 2 minutes before opening the following link in your web browser:"
      echo " "
      msg "LINK: $_AEGIR_LOGIN_URL"
    else
      msg "ALRT! Something went wrong"
      msg "ALRT! Please check the install log for details:"
      msg "ALRT! /var/aegir/install.log"
    fi
  fi
fi
if [ ! -e "${pthLog}/cron_aegir_off.pid" ] ; then
  touch ${pthLog}/cron_aegir_off.pid
fi


###--------------------###
if [ "${_FORCE_REDIS_RESTART}" = "YES" ] ; then
  service redis-server stop &> /dev/null
  killall -9 redis-server &> /dev/null
  service redis-server start &> /dev/null
fi
if [ "${_STATUS}" = "INIT" ] ; then
  service cron start &> /dev/null
  if [ "${_EASY_SETUP}" = "NO" ] ; then
    echo " "
    msg "Now waiting 2 minutes before restarting Nginx..."
    mrun "sleep 111"
  fi
  force_advanced_nginx_config
  mrun "sleep 8"
  mrun "service nginx restart" &> /dev/null
else
  if [ -e "/var/aegir/config" ] ; then
    sed -i "s/.*listen .*:80;/  listen                       \*:80;/g" /var/aegir/config/server_*/nginx/vhost.d/*          &> /dev/null
    sed -i "s/.*listen .*:443/  listen                       \*:443/g" /var/aegir/config/server_*/nginx/vhost.d/sqlbuddy.* &> /dev/null
    sed -i "s/.*listen .*:443/  listen                       \*:443/g" /var/aegir/config/server_*/nginx/vhost.d/chive.*    &> /dev/null
    sed -i "s/.*listen .*:443/  listen                       \*:443/g" /var/aegir/config/server_*/nginx/vhost.d/cgp.*      &> /dev/null
    sed -i "s/SSLv3 TLSv1;/TLSv1 TLSv1.1 TLSv1.2;/g" /var/aegir/config/server_*/nginx/pre.d/*.conf       &> /dev/null
    sed -i "s/SSLv3 TLSv1 TLSv1.1 TLSv1.2;/TLSv1 TLSv1.1 TLSv1.2;/g" /var/aegir/config/server_*/nginx/pre.d/*.conf &> /dev/null
    sed -i "s/HIGH:\!ADH:\!MD5;/RC4:HIGH:\!aNULL:\!MD5;/g" /var/aegir/config/server_*/nginx/pre.d/*.conf &> /dev/null
    sed -i "s/.*gzip_vary .*//g" /var/aegir/config/server_*/nginx/pre.d/*.conf                           &> /dev/null
    sed -i "s/.*gzip_vary .*//g" /var/aegir/config/server_*/nginx/vhost.d/*                              &> /dev/null
    sed -i "s/.*proxy_buffer_size .*//g" /var/aegir/config/server_*/nginx/pre.d/*.conf                   &> /dev/null
    sed -i "s/.*proxy_buffer_size .*//g" /var/aegir/config/server_*/nginx/vhost.d/*                      &> /dev/null
    sed -i "s/.*proxy_buffers .*//g" /var/aegir/config/server_*/nginx/pre.d/*.conf                       &> /dev/null
    sed -i "s/.*proxy_buffers .*//g" /var/aegir/config/server_*/nginx/vhost.d/*                          &> /dev/null
    sed -i "s/.*proxy_busy_buffers_size .*//g" /var/aegir/config/server_*/nginx/pre.d/*.conf             &> /dev/null
    sed -i "s/.*proxy_busy_buffers_size .*//g" /var/aegir/config/server_*/nginx/vhost.d/*                &> /dev/null
    sed -i "s/.*proxy_temp_file_write_size .*//g" /var/aegir/config/server_*/nginx/pre.d/*.conf          &> /dev/null
    sed -i "s/.*proxy_temp_file_write_size .*//g" /var/aegir/config/server_*/nginx/vhost.d/*             &> /dev/null
    sed -i "s/.*proxy_buffering .*//g" /var/aegir/config/server_*/nginx/pre.d/*.conf                     &> /dev/null
    sed -i "s/.*proxy_buffering .*//g" /var/aegir/config/server_*/nginx/vhost.d/*                        &> /dev/null
    sed -i "s/proxy_redirect .*/proxy_redirect             off;\n    gzip_vary                  off;\n    proxy_buffering            off;/g" /var/aegir/config/server_*/nginx/pre.d/*.conf &> /dev/null
    sed -i "s/proxy_redirect .*/proxy_redirect             off;\n    gzip_vary                  off;\n    proxy_buffering            off;/g" /var/aegir/config/server_*/nginx/vhost.d/*    &> /dev/null
    sed -i "s/ *$//g; /^$/d" /var/aegir/config/server_*/nginx/pre.d/*.conf                               &> /dev/null
    sed -i "s/ *$//g; /^$/d" /var/aegir/config/server_*/nginx/vhost.d/*                                  &> /dev/null
    sed -i "s/add_header Vary .*//g" /var/aegir/config/server_*/nginx.conf                               &> /dev/null
  fi
  if [ "${_NGINX_SPDY}" = "YES" ] ; then
    sed -i "s/:443;/:443 ssl spdy;/g" /var/aegir/config/server_*/nginx/pre.d/*.conf &> /dev/null
    sed -i "s/:443;/:443 ssl spdy;/g" /var/aegir/config/server_*/nginx/vhost.d/*    &> /dev/null
  fi
  _SSL_INSTALLED=$(openssl version 2>&1 | tr -d "\n" | cut -d" " -f2 | awk '{ print $1}' 2>&1)
  if [ "${_SSL_INSTALLED}" = "${_OPENSSL_VRN}" ] &&[ "${_NGINX_FORWARD_SECRECY}" = "YES" ] ; then
    _ALLOW_NGINX_FORWARD_SECRECY=YES
    _SSL_PROTOCOLS="TLSv1 TLSv1.1 TLSv1.2;"
    _SSL_CIPHERS="EECDH+ECDSA+AESGCM: \
      EECDH+aRSA+AESGCM:  \
      EECDH+ECDSA+SHA384: \
      EECDH+ECDSA+SHA256: \
      EECDH+aRSA+SHA384:  \
      EECDH+aRSA+SHA256:  \
      EECDH:    \
      EDH+aRSA: \
      \!aNULL:  \
      \!eNULL:  \
      \!LOW:    \
      \!3DES:   \
      \!MD5:    \
      \!EXP:    \
      \!PSK:    \
      \!SRP:    \
      \!DSS:    \
      \!RC4;"
    _SSL_CIPHERS=$(echo "${_SSL_CIPHERS}" | sed "s/ //g" 2>&1)
  else
    _ALLOW_NGINX_FORWARD_SECRECY=NO
  fi
  if [ "$_ALLOW_NGINX_FORWARD_SECRECY" = "YES" ] ; then
    sed -i "s/ssl_protocols .*/ssl_protocols $_SSL_PROTOCOLS/g" /var/aegir/config/server_*/nginx/pre.d/*.conf  &> /dev/null
    sed -i "s/ssl_protocols .*/ssl_protocols $_SSL_PROTOCOLS/g" /var/aegir/config/server_*/nginx/vhost.d/*     &> /dev/null
    sed -i "s/ssl_ciphers .*/ssl_ciphers $_SSL_CIPHERS/g" /var/aegir/config/server_*/nginx/pre.d/*.conf        &> /dev/null
    sed -i "s/ssl_ciphers .*/ssl_ciphers $_SSL_CIPHERS/g" /var/aegir/config/server_*/nginx/vhost.d/*           &> /dev/null
  fi

  ###
  ### Nginx: Convert all vhosts to wildcard mode on Barracuda upgrade
  ### to avoid extended downtime until all Octopus instances will receive
  ### full upgrade, if IP based listen directive was used before.
  ###
  if [ -e "/var/aegir" ] ; then
    sed -i "s/.*listen.*127.0.0.1:80;.*//g"      /var/aegir/config/server_*/nginx.conf              &> /dev/null
    sed -i "s/listen .*/listen        \*:80;/g"  /var/aegir/config/server_*/nginx.conf              &> /dev/null
  fi
  if [ -e "/data/disk" ] ; then
    sed -i "s/.*listen.*127.0.0.1:80;.*//g"      /data/disk/*/config/server_*/nginx.conf            &> /dev/null
    sed -i "s/listen .*/listen        \*:80;/g"  /data/disk/*/config/server_*/nginx.conf            &> /dev/null
    sed -i "s/listen .*/listen        \*:80;/g"  /data/disk/*/config/server_*/nginx/vhost.d/*       &> /dev/null
    sed -i "s/param db_port.*/param db_port   3306;/g" /data/disk/*/config/server_*/nginx/vhost.d/* &> /dev/null
  fi

  if [ -e "/data/disk" ] ; then
    for _OCT in `find /data/disk/ -maxdepth 1 -mindepth 1 | sort` ; do
      if [ -e "$_OCT/.drush/sys/drush_make" ] ; then
        sed -i "s/\!empty.*';/'*';/g" $_OCT/.drush/sys/provision/http/Provision/Config/Nginx/server.tpl.php         &> /dev/null
        sed -i "s/\!empty.*';/'*';/g" $_OCT/.drush/sys/provision/http/Provision/Config/Nginx/vhost.tpl.php          &> /dev/null
        sed -i "s/\!empty.*';/'*';/g" $_OCT/.drush/sys/provision/http/Provision/Config/Nginx/vhost_disabled.tpl.php &> /dev/null
        sed -i "s/\!empty.*';/'*';/g" $_OCT/.drush/xts/provision_cdn/Provision/Config/cdn.tpl.php                   &> /dev/null
      elif [ -e "$_OCT/.drush/drush_make" ] ; then
        sed -i "s/\!empty.*';/'*';/g" $_OCT/.drush/provision/http/Provision/Config/Nginx/server.tpl.php             &> /dev/null
        sed -i "s/\!empty.*';/'*';/g" $_OCT/.drush/provision/http/Provision/Config/Nginx/vhost.tpl.php              &> /dev/null
        sed -i "s/\!empty.*';/'*';/g" $_OCT/.drush/provision/http/Provision/Config/Nginx/vhost_disabled.tpl.php     &> /dev/null
        sed -i "s/\!empty.*';/'*';/g" $_OCT/.drush/provision_cdn/Provision/Config/cdn.tpl.php                       &> /dev/null
      fi
    done
  fi

  ###
  ### Delete any ghost, outdated or broken config includes and vhosts
  ### in all Octopus instances which could break Nginx restart
  ###
  if [ -e "/data/disk" ] ; then
    for File in `grep will_expire_in /data/disk/*/config/includes/* | cut -d: -f1 | awk '{ print $1}'`; do rm -f $File ;done
    for Vght in `ls /data/disk/*/log/CANCELLED 2> /dev/null | cut -d"/" -f4 | awk '{ print $1}'`; do rm -f /data/disk/$Vght/config/server_*/nginx/vhost.d/* ;done
    sed -i "s/OctopusMicroNoCacheID/NoCacheID/g" /data/disk/*/.drush/sys/provision/http/Provision/Service/http/*.conf &> /dev/null
    sed -i "s/OctopusNCookie/AegirCookie/g" /data/disk/*/.drush/sys/provision/http/Provision/Service/http/*.conf      &> /dev/null
    sed -i "s/OctopusNoCacheID/NoCacheID/g" /data/disk/*/.drush/sys/provision/http/Provision/Service/http/*.conf      &> /dev/null
  fi
  if [ -e "/var/aegir" ] ; then
    sed -i "s/OctopusMicroNoCacheID/NoCacheID/g" /var/aegir/.drush/sys/provision/http/Provision/Service/http/*.conf   &> /dev/null
    sed -i "s/OctopusNCookie/AegirCookie/g" /var/aegir/.drush/sys/provision/http/Provision/Service/http/*.conf        &> /dev/null
    sed -i "s/OctopusNoCacheID/NoCacheID/g" /var/aegir/.drush/sys/provision/http/Provision/Service/http/*.conf        &> /dev/null
    sed -i "s/60/180/g" /var/aegir/config/server_*/nginx.conf  &> /dev/null
    sed -i "s/300/180/g" /var/aegir/config/server_*/nginx.conf &> /dev/null
  fi
  validate_public_ip &> /dev/null
  _CRON_IP=${_THISHTIP//[^0-9.]/}
  if [ ! -e "/root/.local.IP.list" ] ; then
    rm -f /root/.tmp.IP.list*
    rm -f /root/.local.IP.list*
    for _IP in `hostname -I`;do echo $_IP >> /root/.tmp.IP.list;done
    for _IP in `cat /root/.tmp.IP.list | sort | uniq`;do echo "$_IP # local IP address" >> /root/.local.IP.list;done
    rm -f /root/.tmp.IP.list*
  fi
  _IP_IF_PRESENT=$(grep "${_CRON_IP}" /root/.local.IP.list 2>&1)
  if [[ "${_IP_IF_PRESENT}" =~ "${_CRON_IP}" ]] ; then
    _IP_PRESENT=YES
  else
    _IP_PRESENT=NO
  fi
  if [ ! -z "${_CRON_IP}" ] && [ "$_IP_PRESENT" = "YES" ] && [ -e "/root/.local.IP.list" ] ; then
    fix_multi_ip_cron_access
  fi
  mrun "service nginx reload" &> /dev/null
fi


###--------------------###
#
# Fix csf.uidignore file to whitelist important system uids when UID_INTERVAL != 0
fix_lfd_uidignore() {
  _THIS_FILE=/etc/csf/csf.uidignore
  if [ -e "${_THIS_FILE}" ] ; then
    _CSF_UIDIGNORE_TEST=$(grep "pdnsd" ${_THIS_FILE} 2>&1)
    if [[ "$_CSF_UIDIGNORE_TEST" =~ "pdnsd" ]] ; then
      _DO_NOTHING=YES
    else
      echo "#root"          >> /etc/csf/csf.uidignore &> /dev/null
      echo `id -u root`     >> /etc/csf/csf.uidignore &> /dev/null
      echo "#pdnsd"         >> /etc/csf/csf.uidignore &> /dev/null
      echo `id -u pdnsd`    >> /etc/csf/csf.uidignore &> /dev/null
      echo "#postfix"       >> /etc/csf/csf.uidignore &> /dev/null
      echo `id -u postfix`  >> /etc/csf/csf.uidignore &> /dev/null
      echo "#www-data"      >> /etc/csf/csf.uidignore &> /dev/null
      echo `id -u www-data` >> /etc/csf/csf.uidignore &> /dev/null
    fi
    if [ -e "/usr/sbin/named" ] ; then
      _CSF_UIDIGNORE_TEST=$(grep "bind" ${_THIS_FILE} 2>&1)
      if [[ "$_CSF_UIDIGNORE_TEST" =~ "bind" ]] ; then
        _DO_NOTHING=YES
      else
        echo "#bind"        >> /etc/csf/csf.uidignore &> /dev/null
        echo `id -u bind`   >> /etc/csf/csf.uidignore &> /dev/null
      fi
    fi
    sed -i "/^$/d" ${_THIS_FILE} &> /dev/null
  fi
}
#
# Fix csf.fignore file to whitelist /tmp/drush_*
fix_lfd_whitelist() {
  _THIS_FILE=/etc/csf/csf.fignore
  if [ -e "${_THIS_FILE}" ] ; then
    _CSF_WHITELIST_TEST=$(grep "jetty" ${_THIS_FILE} 2>&1)
    if [[ "$_CSF_WHITELIST_TEST" =~ "jetty" ]] ; then
      _DO_NOTHING=YES
    else
      sed -i "s/.*\/tmp\/.*//g" ${_THIS_FILE} &> /dev/null
      sed -i "/^$/d"            ${_THIS_FILE} &> /dev/null
      echo "/tmp/drush_tmp.*"      >> ${_THIS_FILE}
      echo "/tmp/drush_make_tmp.*" >> ${_THIS_FILE}
      echo "/tmp/make_tmp.*"       >> ${_THIS_FILE}
      echo "/tmp/hsperfdata.*"     >> ${_THIS_FILE}
      echo "/tmp/jetty.*"          >> ${_THIS_FILE}
    fi
  fi
}
#
csf_install() {
  if [ "$_CSF_MODE" = "install" ] ; then
    msg "INFO: Installing csf/lfd firewall..."
  else
    msg "INFO: Upgrading csf/lfd firewall..."
  fi
  cd /var/opt
  rm -f ${pthLog}/lastFire
  if ! netcat -w 14 -z www.configserver.com 80 ; then
    get_dev_arch "csf.tgz"
  else
    curl -L --max-redirs 10 -k -s -O --retry 10 --retry-delay 15 \
      -A iCab "http://www.configserver.com/free/csf.tgz"
    extract_archive "csf.tgz"
  fi
  cd csf
  st_runner "sh install.sh" 2> /dev/null
  cd /var/opt
  if [[ "${_THISHOST}" =~ ".host8." ]] || [ "${_VMFAMILY}" = "VS" ] ; then
    _SSH_PORT=22
  fi
  _CSF_COMPATIBILITY_TEST=$(perl /etc/csf/csftest.pl 2>&1)
  if [[ "$_CSF_COMPATIBILITY_TEST" =~ "RESULT: csf should function" ]] ; then
    _CSF_COMPATIBILITY=YES
  elif [[ "$_CSF_COMPATIBILITY_TEST" =~ "some features will not work" ]] ; then
    _CSF_COMPATIBILITY=PARTIAL
    sed -i "s/^PORTFLOOD .*/PORTFLOOD = \"\"/g" /etc/csf/csf.conf &> /dev/null
    sed -i "s/^CONNLIMIT .*/CONNLIMIT = \"\"/g" /etc/csf/csf.conf &> /dev/null
    sed -i "s/^USE_CONNTRACK .*/USE_CONNTRACK = \"0\"/g" /etc/csf/csf.conf &> /dev/null
  elif [[ "$_CSF_COMPATIBILITY_TEST" =~ "FATAL" ]] ; then
    _CSF_COMPATIBILITY=NO
  else
    _CSF_COMPATIBILITY=NO
  fi
  if [ "$_CSF_COMPATIBILITY" = "YES" ] \
    || [ "$_CSF_COMPATIBILITY" = "PARTIAL" ] ; then
    if [ "$_CSF_COMPATIBILITY" = "PARTIAL" ] ; then
      msg "TEST: csf/lfd firewall should mostly work on this system"
    else
      msg "TEST: csf/lfd firewall should work fine on this system"
    fi
    mv -f /etc/csf/csf.conf \
      /etc/csf/csf.conf-pre-${_X_VERSION}-${_NOW} &> /dev/null
    cp -af ${locCnf}/csf.conf /etc/csf/csf.conf
    sed -i "s/notify\@omega8.cc/${_MY_EMAIL}/g" /etc/csf/csf.conf &> /dev/null
    sed -i "s/TCP_IN = \"20,21,22,/TCP_IN = \"20,21,${_SSH_PORT},/g" \
      /etc/csf/csf.conf &> /dev/null
    chmod 600 /etc/csf/csf.conf &> /dev/null
    if [ -e "/etc/ssh/sshd_config" ] ; then
      sed -i "s/^Port.*/Port ${_SSH_PORT}/g"  /etc/ssh/sshd_config
      sed -i "s/^#Port.*/Port ${_SSH_PORT}/g" /etc/ssh/sshd_config
    fi
    if [ -e "/usr/etc/sshd_config" ] ; then
      sed -i "s/^Port.*/Port ${_SSH_PORT}/g"  /usr/etc/sshd_config
      sed -i "s/^#Port.*/Port ${_SSH_PORT}/g" /usr/etc/sshd_config
    fi
    mrun "service ssh restart" &> /dev/null
    if [ "$_CSF_MODE" = "install" ] ; then
      msg "INFO: csf/lfd firewall installation completed"
    else
      msg "INFO: csf/lfd firewall upgrade completed"
    fi
    touch ${pthLog}/csf_${_X_VERSION}.log
  else
    msg "TEST: csf/lfd firewall can not be installed on this system"
  fi
}
if [ -e "/root/.mstr.clstr.cnf" ] \
  || [ -e "/root/.wbhd.clstr.cnf" ] \
  || [ -e "/root/.dbhd.clstr.cnf" ] ; then
  if [ "$_USE_CSF_ON_CLSTR" = "YES" ] ; then
    _CSF_CLSTR=YES
  else
    _CSF_CLSTR=NO
  fi
fi
if [[ "${_XTRAS_LIST}" =~ "ALL" ]] \
  || [[ "${_XTRAS_LIST}" =~ "CSF" ]] \
  || [ "$_CSF_CLSTR" = "YES" ] ; then
  if [ ! -e "/var/run/cloud_vhost.pid" ] ; then
    if [ ! -e "/usr/sbin/csf" ] ; then
      echo " "
      if prompt_yes_no "Do you want to install csf/lfd firewall?" ; then
        true
        _CSF_MODE=install
        csf_install
      else
        msg "INFO: csf/lfd firewall installation skipped"
      fi
    fi
  fi
fi
if [ -e "/usr/sbin/csf" ] \
  || [ -e "/usr/sbin/lfd" ] \
  || [ -e "/etc/cron.d/lfd" ] ; then
  if [ "$_CSF_COMPATIBILITY" = "NO" ] \
    || [ "$_CSF_CLSTR" = "NO" ] ; then
    _REMOVE_CSF=YES
  elif [ "${_VMFAMILY}" = "VS" ] \
    && [ ! -e "/boot/grub/grub.cfg" ] \
    && [ ! -e "/boot/grub/menu.lst" ] ; then
    _REMOVE_CSF=YES
  fi
  if [ "$_REMOVE_CSF" = "YES" ] ; then
    csf -x &> /dev/null
    update-rc.d -f csf remove &> /dev/null
    update-rc.d -f lfd remove &> /dev/null
    rm -f /etc/cron.d/{csf,lfd}*
    rm -f /usr/sbin/{csf,lfd}
    rm -f /etc/init.d/{csf,lfd}
    rm -f -r /etc/csf
  else
    if [ "${_CUSTOM_CONFIG_CSF}" = "YES" ] ; then
      _DO_NOTHING=YES
    else
      _CSF_MODE=upgrade
      csf_install
    fi
    if [ -e "/root/.host8.cnf" ] \
      || [ -e "/root/.auto.up.cnf" ] \
      || [[ "${_CHECK_HOST}" =~ ".host8." ]] ; then
      sed -i "s/^AUTO_UPDATES .*/AUTO_UPDATES = \"1\"/g" \
        /etc/csf/csf.conf &> /dev/null
    fi
    if [ "${_VMFAMILY}" = "VZ" ] ; then
      sed -i "s/^PORTFLOOD .*/PORTFLOOD = \"\"/g" /etc/csf/csf.conf &> /dev/null
      sed -i "s/^CONNLIMIT .*/CONNLIMIT = \"\"/g" /etc/csf/csf.conf &> /dev/null
      sed -i "s/^USE_CONNTRACK .*/USE_CONNTRACK = \"0\"/g" \
        /etc/csf/csf.conf &> /dev/null
    fi
    if [ -e "${pthLog}/lastFire" ] ; then
      rm -f ${pthLog}/lastFire
      mrun "csf -x" &> /dev/null
      mrun "csf -e" &> /dev/null
      mrun "csf -q" &> /dev/null
    fi
  fi
fi


###--------------------###
install_pdnsd_cache() {
  msg "INFO: Installing DNS cache pdnsd server..."
  cp -af /etc/resolv.conf /var/backups/resolv.conf.pre-${_X_VERSION}-${_NOW}
  if [ "${_USE_PROVIDER_DNS}" = "NO" ] ; then
    rm -f /etc/resolv.conf
    echo "nameserver 8.8.8.8" > /etc/resolv.conf
    echo "nameserver 8.8.4.4" >> /etc/resolv.conf
  fi
  st_runner "apt-get update -y --force-yes" &> /dev/null
  st_runner "aptitude purge pdnsd -y" &> /dev/null
  st_runner "aptitude purge resolvconf -y" &> /dev/null
  st_runner "apt-get autoremove -y --force-yes -qq" &> /dev/null
  rm -f -r /lib/init/rw/resolvconf
  rm -f -r /etc/resolvconf
  st_runner "aptitude purge pdnsd -y" &> /dev/null
  st_runner "aptitude purge resolvconf -y" &> /dev/null
  st_runner "apt-get autoremove -y --force-yes -qq" &> /dev/null
  if [ "${_USE_PROVIDER_DNS}" = "NO" ] ; then
    rm -f /etc/resolv.conf
    echo "nameserver 8.8.8.8" > /etc/resolv.conf
    echo "nameserver 8.8.4.4" >> /etc/resolv.conf
  fi
  st_runner "$_INSTALL resolvconf" &> /dev/null
  st_runner "$_INSTALL pdnsd" &> /dev/null
  st_runner "$_INSTALL resolvconf" &> /dev/null
  st_runner "$_INSTALL pdnsd" &> /dev/null
  sed -i "s/START_DAEMON=no/START_DAEMON=yes/g" /etc/default/pdnsd &> /dev/null
  cat ${locCnf}/pdnsd.conf > /etc/pdnsd.conf
  if [ "${_USE_PROVIDER_DNS}" = "YES" ] ; then
    _CUSTOM_DNS_TEST=$(grep 8.8.8.8 /etc/pdnsd.conf 2>&1)
    if [[ "${_CUSTOM_DNS_TEST}" =~ "8.8.8.8" ]] \
      && [ -e "/root/.use.local.nameservers.cnf" ] ; then
      echo "        label = \"google-servers\";" > /root/.local.dns.IP.list
      for _IP in `cat /etc/resolv.conf \
        | sed 's/.*127.0.0.1.*//g; s/.*Dynamic.*//g' \
        | cut -d ' ' -f2 \
        | sort \
        | uniq`;do echo "        ip=$_IP;" >> /root/.local.dns.IP.list;done
      sed -i "s/ip=8.8.*//g; s/ *$//g; /^$/d" /etc/pdnsd.conf
      sed -i '/        label = \"google-servers\";/ {r /root/.local.dns.IP.list
d;};' /etc/pdnsd.conf
    fi
  fi
  if [ ! -L "/etc/resolvconf/run" ] \
    || [ ! -e "/lib/init/rw/resolvconf/enable-updates" ] \
    || [ ! -e "/etc/resolvconf/resolv.conf.d/tail" ] ; then
    rm -f -r /run/resolvconf
    rm -f -r /etc/resolvconf/run
    ln -s /lib/init/rw/resolvconf /etc/resolvconf/run
    if [ ! -e "/lib/init/rw/resolvconf/interface" ] ; then
      mkdir -p /lib/init/rw/resolvconf/interface
    fi
    rm -f /lib/init/rw/resolvconf/postponed-update
    touch /lib/init/rw/resolvconf/enable-updates
    rm -f /etc/resolvconf/resolv.conf.d/tail
    touch /etc/resolvconf/resolv.conf.d/tail
  fi
  if [ "${_USE_PROVIDER_DNS}" = "YES" ] \
    && [ -e "/var/backups/resolv.conf.vanilla" ] ; then
    cat /var/backups/resolv.conf.vanilla > /etc/resolvconf/resolv.conf.d/base
  fi
  resolvconf -u &> /dev/null
  if [ "${_USE_PROVIDER_DNS}" = "NO" ] \
    && [ -e "/etc/resolvconf/run/resolv.conf" ] ; then
    _RESOLV_TEST=$(grep "nameserver 127.0.0.1" /etc/resolv.conf 2>&1)
    if [[ "$_RESOLV_TEST" =~ "nameserver 127.0.0.1" ]] ; then
      _DO_NOTHING=YES
    else
      rm -f /etc/resolv.conf
      ln -s /etc/resolvconf/run/resolv.conf /etc/resolv.conf
      resolvconf -u &> /dev/null
      service pdnsd restart &> /dev/null
    fi
  fi
  if [ ! -e "/etc/resolv.conf" ] ; then
    if [ -e "/var/backups/resolv.conf.vanilla" ] ; then
      cat /var/backups/resolv.conf.vanilla >/etc/resolv.conf
    fi
    echo "nameserver 127.0.0.1" >> /etc/resolv.conf
  fi
  if [ -e "/etc/NetworkManager/NetworkManager.conf" ] ; then
    sed -i "s/^dns=.*/dns=pdnsd/g" \
      /etc/NetworkManager/NetworkManager.conf &> /dev/null
    mrun "service network-manager restart" &> /dev/null
  fi
  mrun "service pdnsd stop" &> /dev/null
  rm -f /var/cache/pdnsd/pdnsd.cache
  mrun "service pdnsd start" &> /dev/null
  mrun "service pdnsd stop" &> /dev/null
  rm -f /var/cache/pdnsd/pdnsd.cache
  mrun "service pdnsd start" &> /dev/null
  resolvconf -u &> /dev/null
}
if [ -f "/etc/default/dhcpcd" ] ; then
  sed -i "s/.*SET_DNS/#SET_DNS/g" /etc/default/dhcpcd &> /dev/null
  sed -i "s/.*SET_HOSTNAME/#SET_HOSTNAME/g" /etc/default/dhcpcd &> /dev/null
fi
check_dns_settings
if [ ! -e "/usr/sbin/pdnsd" ] ; then
  install_pdnsd_cache
else
  if [ "${_USE_PROVIDER_DNS}" = "YES" ] \
    || [ ! -L "/etc/resolvconf/run" ] \
    || [ ! -e "/lib/init/rw/resolvconf/enable-updates" ] \
    || [ ! -e "/etc/resolvconf/run/interface/lo.pdnsd" ] ; then
    msg "INFO: DNS cache pdnsd server re-installation forced"
    install_pdnsd_cache
  fi
fi
fix_lfd_whitelist
fix_lfd_uidignore
fix_cnf_postfix


###--------------------###
if [ "${_STRICT_BIN_PERMISSIONS}" = "YES" ] ; then
  usermod -aG users aegir &> /dev/null
  usermod -aG users man &> /dev/null
  usermod -aG users mysql &> /dev/null
  if [ -x "/bin/dash" ] ; then
    switch_to_dash
  else
    switch_to_bash
  fi
  strict_bin_permissions
fi
check_php_cli
finale
exit 0


###----------------------------------------###
###
###  Barracuda Aegir Installer
###  Copyright (C) 2010-2015 Omega8.cc
###  noc@omega8.cc www.omega8.cc
###
###----------------------------------------###
