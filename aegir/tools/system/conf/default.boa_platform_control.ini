;;
;;  This is platform level control file template  which can be used to modify
;;  the standard BOA system behaviour for all sites hosted on this platform.
;;
;;  Copy this file as boa_platform_control.ini into sites/all/modules directory,
;;  then uncomment lines for any settings you want to modify, to make it active.
;;  All settings are initially listed with system defaults, for reference.
;;
;;  Note that it takes ~60 seconds to see any modification results in action
;;  due to opcode caching enabled in PHP-FPM for all non-dev sites.
;;


[cache_control]
;;
;;  You can disable the fast Redis lock implementation by changing this
;;  to FALSE below. Remember to uncomment the line below if you want to use
;;  this feature. It is enabled by default on the system level for best
;;  performance and normally should be left enabled, unless you have any
;;  confirmed issues and want to use much slower standard database lock.
;;
;redis_lock_enable = TRUE

;;
;;  Normally you should never disable Redis, unless for debugging rare issues.
;;  If you are sure you need to disable Redis for all sites on this platform,
;;  uncomment the line below and set the value to TRUE.
;;
;redis_cache_disable = FALSE

;;
;;  Speed Booster uses Nginx microcaching mode by default, with just 10 seconds
;;  both for anonymous visitors and logged in users. All known robots/crawlers
;;  and search engines spiders are forced to accept up to 24 hours cache TTL.
;;  Below you can modify the (10 seconds) default for human, anonymous visitors.
;;  Uncomment the line below and set any numeric value you prefer (in seconds)
;;  to override system default (10 seconds). You may want to enable Purge and
;;  Expire modules in all sites on this platform, so any new or modified node,
;;  comment added etc will selectively auto-purge related cache entries to avoid
;;  serving stale content for extended time (depending on the TTL configured).
;;  Note that the value must be higher than 10 or it will be ignored.
;;
;speed_booster_anon_cache_ttl = 10


[access_control]
;;
;;  When set to TRUE allows anonymous users to add content. Best practice and
;;  the default is FALSE which results with redirect to the site's homepage.
;;  Note that this option opens also an access to the node edit.
;;
;allow_anon_node_add = FALSE

;;
;;  When set to TRUE allows anonymous users to access the /admin* URL, even if
;;  only to see the 403 Access Denied message. Best practice and the default
;;  is FALSE which results with redirect to the site's homepage. This allows
;;  you to protect the site from DoS attempts, since the /admin* requests are
;;  never cached and always hit Drupal directly. Some sites may experience
;;  issues when your browser has expired session/cookie which redirects you
;;  to the homepage even if you were logged in. If something like this happens,
;;  you may want to disable this protection by changing it to TRUE below.
;;  Remember to uncomment the line below if you want to use this feature.
;;
;disable_admin_dos_protection = FALSE


[config_control]
;;
;;  When set to TRUE allows to use private files mode, so it is useful only
;;  for commerce sites which sell files for download or for intranet sites
;;  where you need to enforce strict access control. All other sites should
;;  never ever use private files mode for obvious performance reasons.
;;
;allow_private_file_downloads = FALSE

;;
;;  When set to TRUE, it forces the cookie_domain to always use main domain,
;;  also when the site is accessed via any domain alias. For example use case
;;  please read: https://gist.github.com/omega8cc/5724528
;;
;server_name_cookie_domain = FALSE

;;
;;  When set to TRUE allows to enable auto-detection and auto-include for
;;  the Drupal for Facebook (fb) module. Supported locations, in the order
;;  of priority are:
;;
;;    sites/all/modules/fb/
;;    sites/all/modules/contrib/fb/
;;    profiles/foo/modules/fb/
;;    profiles/foo/modules/contrib/fb/
;;
;;  IMPORTANT!
;;
;;  This setting on the platform level will be automatically set to TRUE
;;  (but not on the site level) during daily maintenance procedure
;;  if the module will be detected, however it will be completely ignored if
;;  there is boa_site_control.ini file present in the sites/foo.com/modules
;;  directory and this setting is set to FALSE there to improve performance,
;;  if the module is not used in that site even if it exists in the platform.
;;  Remember to uncomment the line below if you want to use this feature.
;;
;auto_detect_facebook_integration = FALSE

;;
;;  When set to TRUE allows to enable auto-detection and auto-include for
;;  the Domain Access module. Supported locations, in the order
;;  of priority are:
;;
;;    sites/all/modules/domain/
;;    sites/all/modules/contrib/domain/
;;    profiles/foo/modules/domain/
;;    profiles/foo/modules/contrib/domain/
;;
;;  IMPORTANT!
;;
;;  This setting on the platform level will be automatically set to TRUE
;;  (but not on the site level) during daily maintenance procedure
;;  if the module will be detected, however it will be completely ignored if
;;  there is boa_site_control.ini file present in the sites/foo.com/modules
;;  directory and this setting is set to FALSE there to improve performance,
;;  if the module is not used in that site even if it exists in the platform.
;;  Remember to uncomment the line below if you want to use this feature.
;;
;auto_detect_domain_access_integration = FALSE


[system_control]
;;
;;  When set to TRUE allows to force protection on all sites globally, unless
;;  the site has its own custom setting for disable_user_register_protection
;;  variable in the site level boa_site_control.ini file, located in the
;;  sites/foo.com/modules directory.
;;
;;  It can be set to TRUE automatically on all platforms if there is an empty
;;  control file: ~/static/control/enable_user_register_protection.info
;;
;;  Note that this setting affects only the maintenance system behaviour.
;;  It doesn't affect the site behaviour directly in a live mode, so you can
;;  modify related settings in the site admin, and they can be overridden,
;;  depending on the value defined below, when the maintenance system runs
;;  again, which happens each morning (in the server time zone).
;;
;enable_user_register_protection = FALSE

;;
;;  When set to TRUE allows to avoid having the entitycache module, which is
;;  included by default, auto-enabled during daily maintenance.
;;
;;  Note that this setting affects only the maintenance system behaviour.
;;  It doesn't affect the site behaviour directly in a live mode, so you can
;;  modify related settings in the site admin, and they can be overridden,
;;  depending on the value defined below, when the maintenance system runs
;;  again, which happens each morning (in the server time zone).
;;
;;  This setting is available only on the platform level, because if the distro
;;  or custom installation profile conflicts with entitycache, you don't want
;;  to have it re-enabled on any site on such platform, even if it is a great
;;  performance improvement for any Drupal 7 based site, and thus is highly
;;  recommended. Maybe you could fix your platform to make it compatible?
;;
;entitycache_dont_enable = FALSE

;;
;;  When set to TRUE allows to avoid having the views_cache_bully module,
;;  which is included by default, auto-enabled during daily maintenance,
;;  but only if there is special, global, non-default control file present:
;;
;;  ~/static/control/enable_views_cache_bully.info
;;
;;  If you didn't create this file to auto-enable views_cache_bully in all
;;  your sites, the variable views_cache_bully_dont_enable below will be
;;  completely ignored and the module will not be enabled. We no longer enable
;;  views_cache_bully by default because we have received enough reports about
;;  issues like broken checkout on a commerce sites or stalled content
;;  displayed on view based pages, etc. This means that you should think twice
;;  and test twice everything before enabling it globally on your instance.
;;
;;  But even if you will create the special, global control file, you can still
;;  stop the system from enabling the module per platform, by changing the
;;  value of views_cache_bully_dont_enable to TRUE and activating the line.
;;
;;  This useful module automatically enables some default caching in all your
;;  views with no caching enabled yet, which is handy for busy webmasters.
;;
;;  Note that this setting affects only the maintenance system behaviour.
;;  It doesn't affect the site behaviour directly in a live mode, so you can
;;  modify related settings in the site admin, and they can be overridden,
;;  depending on the value defined below, when the maintenance system runs
;;  again, which happens each morning (in the server time zone).
;;
;;  This setting is available only on the platform level, because if the distro
;;  or custom installation profile conflicts with this module, you don't want
;;  to have it re-enabled on any site on such platform, even if it is a great
;;  performance improvement for any Drupal 6/7 site, and thus is highly
;;  recommended. Maybe you could fix your platform to make it compatible?
;;  If not, then make sure to configure caching in all your views manually.
;;  You will make your sites visitors and users more happy!
;;
;views_cache_bully_dont_enable = FALSE


;;
;;  When set to TRUE allows to avoid having the views_content_cache module,
;;  which is included by default, auto-enabled during daily maintenance,
;;  but only if there is special, global, non-default control file present:
;;
;;  ~/static/control/enable_views_content_cache.info
;;
;;  If you didn't create this file to auto-enable views_content_cache in all
;;  your sites, the variable views_content_cache_dont_enable below will be
;;  completely ignored and the module will not be enabled.
;;
;;  But even if you will create the special, global control file, you can still
;;  stop the system from enabling the module per platform, by changing the
;;  value of views_content_cache_dont_enable to TRUE and activating the line.
;;
;;  This handy module allows you to configure caching for views and views
;;  based blocks very precisely, which is great if you need to better control
;;  the cache per view and per content type.
;;
;;  Note that this setting affects only the maintenance system behaviour.
;;  It doesn't affect the site behaviour directly in a live mode, so you can
;;  modify related settings in the site admin, and they can be overridden,
;;  depending on the value defined below, when the maintenance system runs
;;  again, which happens each morning (in the server time zone).
;;
;;  This setting is available only on the platform level, because if the distro
;;  or custom installation profile conflicts with this module, you don't want
;;  to have it re-enabled on any site on such platform, even if it is a great
;;  performance improvement for any Drupal 6/7 site, and thus is highly
;;  recommended. Maybe you could fix your platform to make it compatible?
;;  You will make your sites visitors and users even more happy!
;;
;views_content_cache_dont_enable = FALSE
