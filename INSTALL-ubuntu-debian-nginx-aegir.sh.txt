#!/bin/bash


###----------------------------------------###
###
###  Aegir with Nginx on Ubuntu or Debian
###  (GNU/GPL) omega8cc
###  Code: http://github.com/omega8cc
###
###----------------------------------------###


###----------------------------------------###
### EDITME                                 ###
###----------------------------------------###
###
### Enter your valid e-mail address below.
###
_MY_EMAIL="support@omega8.cc"


###----------------------------------------###
### AEGIR VERSION                          ###
###----------------------------------------###
###
### By default the latest release will be
### installed, but if you are brave and want
### to test current HEAD, you can change it
### below to:
###
### _AEGIR_VERSION="HEAD"
###
_AEGIR_VERSION="0.4-alpha11"


###----------------------------------------###
### DNS MANUAL CONFIG - AVOID USING IT     ###
###----------------------------------------###
###
### Starting with release 0.4-alpha9 Aegir
### requires proper DNS configuration
### of your server. Your hostname has to be
### FQDN and has to match your server IP.
###
### This script is trying to discover your
### DNS details and allow or deny the install,
### if something doesn't look correct.
###
### This script will also use your FQDN
### hostname as a web address of your Aegir
### frontend (control panel).
###
### You can try to change the automatic
### defaults by setting up your IP address,
### your FQDN hostname and your Aegir frontend
### web address below.
###
### It can be useful when you are using local
### environment with custom settings in your
### /etc/hosts, when you have more than one
### public IPs on eth0 and you wish to use
### non-default (first) IP address, or when
### you want to use non-hostname (sub)domain
### to access your Aegir frontend.
###
### Please change all 3 values if you wish
### to customize this automatic setup.
###
### Example:
###
### _MY_OWNIP="192.168.0.108"
### _MY_HOSTN="server.mydomain.com"
### _MY_FRONT="aegir.mydomain.com"
###
### NOTE:
###
### If you will use your custom DNS settings,
### they will be still validated, therefore
### make sure your _MY_HOSTN and _MY_FRONT
### both matches your _MY_OWNIP or the script
### will fail to install Aegir.
###
### You can't use "localhost" as your
### _MY_HOSTN and/or _MY_FRONT, because
### there is already default Nginx host
### with this name in every vanilla install
### and we don't want to override it.
###
_MY_OWNIP=""
_MY_HOSTN=""
_MY_FRONT=""


###----------------------------------------###
### DON'T EDIT ANYTHING BELOW THIS LINE    ###
###----------------------------------------###

_INSTALLER_VERSION="A11.A"

###---### Avoid too many questions
#
export DEBIAN_FRONTEND=noninteractive
#
###---### Functions
#
# Noticeable messages
msg () {
  echo "==> $*"
}
# Simple prompt
prompt_yes_no () {
  while true ; do
    printf "$* [Y/n] "
    read answer
    if [ -z "$answer" ] ; then
      return 0
    fi
    case $answer in
      [Yy]|[Yy][Ee][Ss])
        return 0
        ;;
      [Nn]|[Nn][Oo])
        return 1
        ;;
      *)
        echo "Please answer yes or no"
        ;;
    esac
 done 
}
#
# Stop on error
# set -e ### temp disabled for debugging
#
# Success msg
success () {
	msg "$1 Succeeded."
}
#
# Error msg
fatal () {
	echo
	msg "Fatal Error Occurred: $1"
	msg "Cannot continue installation."
	exit 1
}
#
# Not supported OS
not_supported_os () {
    msg "EXIT: Invalid install script or OS used."
    msg "EXIT: It is not any supported Ubuntu or Debian version. Sorry."
    msg "EXIT: You need Debian (Lenny) or Ubuntu (Lucid or Karmic or Jaunty)."
    msg "Ciao... :)"
    exit 1
}
#
# Perform an action, log it, and run the spinner throughout
runner () {
	CMD="$1"
	touch busy
	bash $SRCDIR/spinner busy &
	if $CMD >> $LOG; then
		rm busy
		sleep 1
		success "$CMD:"
		return 0
	else
		rm busy
		sleep 1
		echo "$CMD failed.  Error (if any): $?"
		echo
		echo "Displaying the last 15 lines of $LOG to help troubleshoot this problem:"
		tail -15 $LOG
		return 1
	fi
}
#
# Small spinner
mrun () {
	CMD="$1"
	touch busy
	bash $SRCDIR/spinner busy &
	if $CMD >> $LOG; then
		rm busy
		sleep 1
		return 0
	fi
}
#
# Silent runner
st_runner () {
	CMD="$1"
	touch busy
	bash $SRCDIR/spinner busy &
	if $CMD >> $LOG; then
		rm busy
		sleep 1
		success "$CMD:"
		return 0
	else
		rm busy
		sleep 1
		echo "$CMD failed.  Error (if any): $?"
		echo
		echo "Displaying the last 15 lines of $LOG to help troubleshoot this problem:"
		tail -15 $LOG
		return 1
	fi
}


###--------------------###
msg "`date` INFO: Downloading little helpers, please wait..."
sleep 8
#
# Download apt helper
cd /var/tmp
rm -f apt.conf.noninteractive*
wget -U iCab http://omega8.cc/dev/apt.conf.noninteractive &> /dev/null
#
# Create tmp stuff
SRCDIR=/var/tmp/files
mkdir -p $SRCDIR
LOG=/var/tmp/aegir-install.log
SILENT=/var/tmp/silent.log
cd $SRCDIR
#
# Download spinner
rm -f spinner*
wget -U iCab http://omega8.cc/dev/spinner &> /dev/null
chmod +x spinner
#


###--------------------###
msg "`date` INFO: We need to install lsb-release / dnsutils first, please wait..."
mrun "sleep 8"
INSTALL="/usr/bin/apt-get --config-file /var/tmp/apt.conf.noninteractive -y --force-yes install"
if ! runner "$INSTALL lsb-release dnsutils"; then
  fatal "Installation failed: $?"
fi


###--------------------###
msg "STATUS: Checking your Debian or Ubuntu version..."
mrun "sleep 8"
_THIS_OS=`lsb_release -si`
_THIS_RV=`lsb_release -sc`
if [ $_THIS_OS = "Ubuntu" ] ; then
  if [ $_THIS_RV = "lucid" ] ; then
    _REL_VERSION="lucid"
  elif [ $_THIS_RV = "karmic" ] ; then
    _REL_VERSION="karmic"
  elif [ $_THIS_RV = "jaunty" ] ; then
    _REL_VERSION="jaunty"
  elif [ $_THIS_RV = "hardy" ] ; then
    _REL_VERSION="hardy"
  else
    not_supported_os
  fi
elif [ $_THIS_OS = "Debian" ] ; then
  if [ $_THIS_RV = "lenny" ] ; then
    _REL_VERSION="lenny"
  else
    not_supported_os
  fi
else
  not_supported_os
fi
echo " "
msg "Aegir v.$_AEGIR_VERSION with Nginx on $_THIS_OS/$_REL_VERSION - highly automated install script."
echo " "
mrun "sleep 8"
if [ `whoami` = "root" ] ; then
  msg "STATUS: This script is ran as a root user."
else
  msg "ERROR: This script should be ran as a root user, please su - root first."
  exit 1
fi
	

###--------------------###
if [ ! -z "$_MY_OWNIP" ] ; then
   _THISHTIP="$_MY_OWNIP"
   _THISHOST="$_MY_HOSTN"
   _THISRDIP=`host $_THISHOST | cut -d: -f2 | awk '{ print $4}'`
   if [ "$_THISRDIP" = "$_THISHTIP" ] ; then
      _FQDNTEST="TRUE"
      _THEFRDIP=`host $_MY_FRONT | cut -d: -f2 | awk '{ print $4}'`
      if [ "$_THEFRDIP" = "$_THISHTIP" ] ; then
         _TESTHOST=`hostname -f`
         _TESTRDIP=`host $_TESTHOST | cut -d: -f2 | awk '{ print $4}'`
         if [ "$_TESTRDIP" = "$_THISHTIP" ] ; then
            _FQDNTEST="TRUE"
            hostname -v $_TESTHOST
         else
            _FQDNTEST="FALSE"
         fi
      else
         _FQDNTEST="FALSE"
      fi
   else
      _FQDNTEST="FALSE"
   fi
else
_THISHTIP=`ifconfig eth0 | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}'`
_FQDNPROB=`hostname -f 2> /dev/null`
_FQDNTEST="FALSE"
_THISHOST=`uname -n`
if [ ! -z "$_FQDNPROB" ] ; then
   _THISHOST=`hostname -f`
   _THISRDIP=`host $_THISHOST | cut -d: -f2 | awk '{ print $4}'`
   if [ "$_THISRDIP" = "$_THISHTIP" ] ; then
      _FQDNTEST="TRUE"
      hostname -v $_THISHOST
   else
      _FQDNTEST="FALSE"
      _REVHOSTN=`host $_THISHTIP | cut -d: -f2 | awk '{ print $5}'`
      _REVHOSTN=`echo -n $_REVHOSTN |sed 's/\(.*\)./\1/'`
      _REVHSTIP=`host $_REVHOSTN | cut -d: -f2 | awk '{ print $4}'`
      if [ "$_REVHSTIP" = "$_THISHTIP" ] ; then
         hostname -v $_REVHOSTN
         _THISHOST="$_REVHOSTN"
         _FQDNTEST="TRUE"
      else
         _FQDNTEST="FALSE"
      fi
   fi
else
   _REVHOSTN=`host $_THISHTIP | cut -d: -f2 | awk '{ print $5}'`
   _REVHOSTN=`echo -n $_REVHOSTN |sed 's/\(.*\)./\1/'`
   _REVHSTIP=`host $_REVHOSTN | cut -d: -f2 | awk '{ print $4}'`
   if [ "$_REVHSTIP" = "$_THISHTIP" ] ; then
      hostname -v $_REVHOSTN
      _THISHOST="$_REVHOSTN"
      _FQDNTEST="TRUE"
   else
      _FQDNTEST="FALSE"
   fi
fi
fi
if [ "$_THISHOST" = "localhost" ] ; then
  _FQDNTEST="FALSE"
fi
if [ "$_MY_FRONT" = "localhost" ] ; then
  _FQDNTEST="FALSE"
fi
if [ ! -z "$_MY_FRONT" ] ; then
  _THIS_FRONT="$_MY_FRONT"
else
  _THIS_FRONT="$_THISHOST"
fi
if [ "$_FQDNTEST" = "FALSE" ] ; then
echo " "
msg "EXIT on error due to invalid DNS setup."
if [ ! -z "$_MY_OWNIP" ] ; then
cat <<EOF
   
  * Your custom _MY_OWNIP is set to "$_MY_OWNIP"
  * Your custom _MY_HOSTN is set to "$_MY_HOSTN"
  * Your custom _MY_FRONT is set to "$_MY_FRONT"
  
  * Your _MY_HOSTN and/or _MY_FRONT doesn't match your _MY_OWNIP,
    or your hostname is not set properly yet.
    
  * Please add/check correct line in your /etc/hosts file on the server:
    
  $ echo "$_MY_OWNIP $_MY_HOSTN $_MY_FRONT" >> /etc/hosts

  * Please make sure that below command returns your FQDN hostname "$_MY_HOSTN":
    
  $ hostname -f
    
EOF
fi
cat <<EOF
   
  * Your server has to have already working FQDN hostname matching your IP address.
    This means you _have to_ configure the dns for your server IP/hostname _before_
    trying to use this install script. Reverse dns is _not_ required.
   
  * Your hostname appears to be $_THISHOST - are you sure it's a valid FQDN hostname?
  
  * Are you sure your FQDN hostname matches your IP address: $_THISHTIP?
    
EOF
msg "EXIT on error due to invalid DNS setup."
echo " "
exit 1
else
echo "$_THISHOST" > /etc/hostname
hostname -v $_THISHOST
msg "DNS test OK - your FQDN hostname is $_THISHOST and it matches your IP $_THISHTIP"
msg "Please double check whether this is a valid result of my test."
fi
mrun "sleep 8"
echo " "
msg "START -> checkpoint: "
cat <<EOF

  * Your e-mail address appears to be $_MY_EMAIL - is that correct?
  * Your hostname appears to be $_THISHOST - are you sure it's a valid FQDN hostname?
  * Your Aegir control panel will be available at http://$_THIS_FRONT.
  * Your IP address appears to be $_THISHTIP - are you sure it's a valid IP?
  * If your outgoing SMTP requires using relayhost, uncomment two lines in section:
    'SMTP check' before running this script.
    
EOF
echo " "
if prompt_yes_no "Do you want to proceed with the install?" ; then
  true
else
  echo "Installation aborted by you."
  exit 1
fi


###--------------------###
msg "`date` INFO: Simple security check to avoid overwriting existing Aegir install"
mrun "sleep 8"
if [ -d "/var/aegir" ] ; then
  msg "`date` INFO: Aegir is already installed - exit now"
  exit 1
fi


###--------------------###
msg "`date` INFO: Clean up temp files in /var/opt/"
mrun "sleep 8"
rm -f -r /var/opt/*
mkdir -p /var/log/php
chmod 777 /var/log/php*
mkdir -p /var/tmp
chmod 777 /var/tmp


###--------------------###
msg "`date` INFO: Update apt sources"
mrun "sleep 8"
if [ "$_THIS_OS" = "Ubuntu" ] ; then
  echo "## MAIN REPOSITORIES" > /etc/apt/sources.list
  echo "deb http://us.archive.ubuntu.com/ubuntu/ $_REL_VERSION main restricted universe multiverse" >> /etc/apt/sources.list
  echo "deb-src http://us.archive.ubuntu.com/ubuntu/ $_REL_VERSION main restricted universe multiverse" >> /etc/apt/sources.list
  echo "" >> /etc/apt/sources.list
  echo "## MAJOR BUG FIX UPDATES produced after the final release" >> /etc/apt/sources.list
  echo "deb http://us.archive.ubuntu.com/ubuntu/ $_REL_VERSION-updates main restricted universe multiverse" >> /etc/apt/sources.list
  echo "deb-src http://us.archive.ubuntu.com/ubuntu/ $_REL_VERSION-updates main restricted universe multiverse" >> /etc/apt/sources.list
  echo "" >> /etc/apt/sources.list
  echo "## UBUNTU SECURITY UPDATES" >> /etc/apt/sources.list
  echo "deb http://security.ubuntu.com/ubuntu $_REL_VERSION-security main restricted universe multiverse" >> /etc/apt/sources.list
  echo "deb-src http://security.ubuntu.com/ubuntu $_REL_VERSION-security main restricted universe multiverse" >> /etc/apt/sources.list
  echo "" >> /etc/apt/sources.list
  echo "## BACKPORTS REPOSITORY" >> /etc/apt/sources.list
  echo "deb http://us.archive.ubuntu.com/ubuntu/ $_REL_VERSION-backports main restricted universe multiverse" >> /etc/apt/sources.list
  echo "deb-src http://us.archive.ubuntu.com/ubuntu/ $_REL_VERSION-backports main restricted universe multiverse" >> /etc/apt/sources.list
  echo "" >> /etc/apt/sources.list
  echo "## PROPOSED REPOSITORY" >> /etc/apt/sources.list
  echo "deb http://archive.ubuntu.com/ubuntu $_REL_VERSION-proposed main restricted universe multiverse" >> /etc/apt/sources.list
  echo "deb-src http://archive.ubuntu.com/ubuntu $_REL_VERSION-proposed main restricted universe multiverse" >> /etc/apt/sources.list
elif [ "$_THIS_OS" = "Debian" ] ; then
  echo "deb http://ftp.us.debian.org/debian/ $_REL_VERSION main contrib non-free" > /etc/apt/sources.list
  echo "deb-src http://ftp.us.debian.org/debian/ $_REL_VERSION main contrib non-free" >> /etc/apt/sources.list
  echo "deb http://security.debian.org/ $_REL_VERSION/updates main contrib non-free" >> /etc/apt/sources.list
  echo "deb-src http://security.debian.org/ $_REL_VERSION/updates main contrib non-free" >> /etc/apt/sources.list
  echo "deb http://ftp.us.debian.org/debian experimental main" >> /etc/apt/sources.list
  echo "deb-src http://ftp.us.debian.org/debian/ experimental main" >> /etc/apt/sources.list
fi


###--------------------###
msg "`date` INFO: Add apt sources for MariaDB"
mrun "sleep 8"
cd /var/opt
wget http://ourdelta.org/deb/ourdelta.gpg &> /dev/null
apt-key add ourdelta.gpg 2> /dev/null
wget http://ourdelta.org/deb/sources/$_REL_VERSION-mariadb-ourdelta.list &> /dev/null
cp $_REL_VERSION-mariadb-ourdelta.list /etc/apt/sources.list.d/ourdelta.list &> /dev/null


###--------------------###
msg "`date` INFO: Run apt update, please wait..."
runner "aptitude update"
runner "aptitude clean"
if [ "$_THIS_OS" = "Ubuntu" ] ; then
  runner "apt-get upgrade -y"
  runner "apt-get dist-upgrade"
  runner "apt-get autoclean"
elif [ "$_THIS_OS" = "Debian" ] ; then
  runner "aptitude full-upgrade -y"
fi


###--------------------###
msg "`date` INFO: Run apt update again, please wait..."
runner "aptitude update"
runner "aptitude clean"
if [ "$_THIS_OS" = "Ubuntu" ] ; then
  runner "apt-get upgrade -y"
  runner "apt-get dist-upgrade"
  runner "apt-get autoclean"
elif [ "$_THIS_OS" = "Debian" ] ; then
  runner "aptitude full-upgrade -y"
fi


###--------------------###
msg "`date` INFO: Install and set locales"
runner "aptitude -y install locales"
runner "locale-gen en_US en_US.UTF-8"


###--------------------###
msg "`date` INFO: Installing required libraries and tools, please wait..."
if [ "$_THIS_OS" = "Debian" ] ; then
  DEBDEPS="apticron autoconf2.13 automake automake1.4 autotools-dev bc bison build-essential cron curl cvs defoma devscripts dnsutils dstat flex fontconfig-config git-core graphicsmagick-imagemagick-compat htop ifstat iptables lemon libapr1 libaprutil1 libc-client-dev libc-client2007b libc-client2007b-dev libcurl4-gnutls-dev libdbd-mysql-perl libdbi-perl libfilesys-diskspace-perl libfontconfig1 libfreetype6 libfreetype6-dev libfribidi0 libgd2-xpm libhtml-template-perl libjpeg-dev libjpeg62 libltdl7 libltdl7-dev libmariadbclient-dev libmariadbclient16 libmariadbd-dev libmcrypt-dev libmemcache-dev libnet-daemon-perl libpcre3 libpcre3-dev libplrpc-perl libpng12-dev libpng12-0 libpq5 libsasl2-modules libssl-dev libt1-5 libt1-dev libtool libwww-perl libxml2-dev libxpm4 libxslt-dev libxslt1-dbg libxslt1-dev libxslt1.1 lftp m4 makepasswd mariadb-client-5.1 mariadb-common mariadb-server-5.1 mc mcrypt nano netcat nginx ncurses-dev postfix postfix-pcre pwgen python-dev python-mysqldb re2c rsync shtool ssh ssl-cert subversion sudo sysstat sysvconfig t1lib-bin telnet time ttf-dejavu ttf-dejavu-core ttf-dejavu-extra vim whois xml-core xml2 zlib1g-dev zlibc unzip zip"
elif [ "$_REL_VERSION" = "lucid" ] ; then
  DEBDEPS="apticron autoconf2.13 automake automake1.4 autotools-dev bc bison build-essential cron curl cvs defoma devscripts dnsutils dstat flex fontconfig-config git-core graphicsmagick-imagemagick-compat htop ifstat iptables libapr1 lemon libaprutil1 libc-client-dev libc-client2007e libc-client2007e-dev libcurl4-gnutls-dev libdbd-mysql-perl libdbi-perl libfilesys-diskspace-perl libfontconfig1 libfreetype6 libfreetype6-dev libfribidi0 libgd2-xpm libhtml-template-perl libjpeg-dev libjpeg62 libmariadbclient-dev libmariadbclient16 libmariadbd-dev libmcrypt-dev libmemcache-dev libnet-daemon-perl libpcre3 libpcre3-dev libplrpc-perl libpng12-0 libpng12-dev libpq5 libsasl2-modules libssl-dev libt1-5 libt1-dev libtool libwww-perl libxml2-dev libxpm4 libxslt-dev libxslt1-dbg libxslt1-dev libxslt1.1 lftp m4 makepasswd mariadb-client-5.1 mariadb-common mariadb-server-5.1 mc mcrypt nano netcat ncurses-dev nginx postfix postfix-pcre pwgen python-dev python-mysqldb re2c rsync shtool ssh ssl-cert subversion sudo sysstat sysvinit-utils t1lib-bin telnet time ttf-dejavu ttf-dejavu-core ttf-dejavu-extra unzip vim whois xml-core xml2 zip zlib1g-dev zlibc"
else
  DEBDEPS="apticron autoconf2.13 automake automake1.4 autotools-dev bc bison build-essential cron curl cvs defoma devscripts dnsutils dstat flex fontconfig-config git-core graphicsmagick-imagemagick-compat htop ifstat iptables lemon libapr1 libaprutil1 libc-client-dev libc-client2007b libc-client2007b-dev libcurl4-gnutls-dev libdbd-mysql-perl libdbi-perl libfilesys-diskspace-perl libfontconfig1 libfreetype6 libfreetype6-dev libfribidi0 libgd2-xpm libhtml-template-perl libjpeg-dev libjpeg62 libltdl7 libltdl7-dev libmariadbclient-dev libmariadbclient16 libmariadbd-dev libmcrypt-dev libmemcache-dev libnet-daemon-perl libpcre3 libpcre3-dev libplrpc-perl libpng12-dev libpng12-0 libpq5 libsasl2-modules libssl-dev libt1-5 libt1-dev libtool libwww-perl libxml2-dev libxpm4 libxslt-dev libxslt1-dbg libxslt1-dev libxslt1.1 lftp m4 makepasswd mariadb-client-5.1 mariadb-common mariadb-server-5.1 mc mcrypt nano netcat nginx ncurses-dev postfix postfix-pcre pwgen python-dev python-mysqldb re2c rsync shtool ssh ssl-cert subversion sudo sysstat sysvinit-utils t1lib-bin telnet time ttf-dejavu ttf-dejavu-core ttf-dejavu-extra vim whois xml-core xml2 zlib1g-dev zlibc unzip zip"
fi
install_with_apt () {
	if ! runner "$INSTALL $DEBDEPS"; then
		fatal "Installation failed: $?"
	fi
	return 0
}
install_with_apt


###--------------------###
msg "`date` INFO: SMTP check"
mrun "sleep 8"
if ! netcat -w 8 -z smtp.host8.biz 25 ; then
  WE_NEED_RELAY="YES"
cat <<EOF

  Your outgoing SMTP port 25 doesn't work
  as expected, so your server can't send out
  any e-mails directly.
  
  It appears you need a SMTP relayhost added
  in your Postfix /etc/postfix/main.cf config.
  
  Uncomment 2 lines in the 'SMTP check' section
  and enter there your SMTP relayhost name.
  
  Then run this script again.
    
EOF
  exit 1
else
  true
fi
###
### required if you have closed outgoing smtp port and you have to use smtp relay
### in this example it is for Voxel servers
###
# perl -p -i -e "s/(relayhost =)/relayhost = smtp.cust.voxel.net/g" /etc/postfix/main.cf
# postfix reload
###
###


###--------------------###
msg "`date` INFO: Installing a few more tools, please wait..."
mrun "sleep 8"
cd /var; rm -f -r xdrago*
wget -U iCab http://omega8.cc/dev/auto-healing-monitoring.tar.gz &> /dev/null
tar -xzf auto-healing-monitoring.tar.gz
cp -af /var/xdrago/etc /opt/
cp -f /opt/etc/init.d/* /etc/init.d/
cp -af /var/xdrago/cron/crontabs/root /var/spool/cron/crontabs/
perl -p -i -e "s/(>127.0.0.1<)/\>127.0.0.1,$_THISHTIP\</g" /opt/etc/php-fpm.conf
perl -p -i -e "s/(max_children\">1)/max_children\"\>4/g" /opt/etc/php-fpm.conf
echo $_MY_EMAIL > /tmp/.email.txt
perl -p -i -e "s/(\@)/\\\@/g" /tmp/.email.txt
APTEMAILA=`cat /tmp/.email.txt`
APTEMAIL=`echo -n $APTEMAILA | tr -d "\n"`
perl -p -i -e "s/(root)/$APTEMAIL/g" /etc/apticron/apticron.conf
rm -f /tmp/.email.txt
runner "sh /usr/sbin/apticron"


###--------------------###
msg "`date` INFO: Installing libevent, please wait..."
rm -f -r /var/opt/libevent*
cd /var/opt
wget -U iCab http://www.monkey.org/~provos/libevent-1.4.14b-stable.tar.gz &> /dev/null
tar -xzf libevent-1.4.14b-stable.tar.gz
cd /var/opt/libevent-1.4.14b-stable
st_runner "sh ./configure --prefix=/usr" 2> /dev/null
st_runner "make --quiet" 2> /dev/null
st_runner "make --quiet install" 2> /dev/null
rm -f -r /var/opt/libevent*
cd /var/opt
wget -U iCab http://www.monkey.org/~provos/libevent-1.4.14b-stable.tar.gz &> /dev/null
tar -xzf libevent-1.4.14b-stable.tar.gz
cd /var/opt/libevent-1.4.14b-stable
st_runner "sh ./configure" 2> /dev/null
st_runner "make --quiet" 2> /dev/null
st_runner "make --quiet install" 2> /dev/null
st_runner "ldconfig" 2> /dev/null


###--------------------###
msg "`date` INFO: Installing PHP-FPM"
msg "`date` NOTE: This step can take longer than 8 minutes (depending on your server speed), please wait..."
mrun "sleep 8"
cd /var/opt
rm -f -r /var/opt/php*
mv /etc/init.d/php-fpm /etc/init.d/php-fpm-5-13
wget -U iCab http://www.php.net/distributions/php-5.2.14.tar.gz &> /dev/null
wget -U iCab http://download.suhosin.org/suhosin-patch-5.2.14-0.9.7.patch.gz &> /dev/null
wget -U iCab http://php-fpm.org/downloads/php-5.2.14-fpm-0.5.14.diff.gz &> /dev/null
tar -xzf php-5.2.14.tar.gz
gunzip php-5.2.14-fpm-0.5.14.diff.gz
gunzip suhosin-patch-5.2.14-0.9.7.patch.gz
cat php-5.2.14-fpm-0.5.14.diff | patch -d php-5.2.14 -p1 &> /dev/null
cat suhosin-patch-5.2.14-0.9.7.patch | patch -d php-5.2.14 -p1 &> /dev/null
msg "`date` INFO: Installing PHP-FPM part 1/3"
mrun "sleep 8"
cd /var/opt/php-5.2.14
st_runner "sh ./buildconf --force" 2> /dev/null
msg "`date` INFO: Installing PHP-FPM part 2/3"
mrun "sleep 8"
st_runner "sh ./configure --quiet --enable-fpm --enable-fastcgi --with-mysql --with-mysqli --enable-force-cgi-redirect --enable-discard-path --with-zlib --with-curl --with-curlwrappers --with-gd --enable-gd-native-ttf --with-jpeg-dir=/usr --with-png-dir=/usr --with-freetype-dir=/usr --with-t1lib=/usr --with-pear --with-imap --with-imap-ssl --with-openssl --with-pdo-mysql --enable-exif --enable-soap --enable-ftp --enable-mbstring --enable-pcntl --enable-bcmath --with-kerberos --with-xsl --with-mcrypt" 2> /dev/null
msg "`date` INFO: Installing PHP-FPM part 3/3"
mrun "sleep 8"
st_runner "make --quiet" 2> /dev/null
st_runner "make --quiet install" 2> /dev/null
ln -s /usr/local/sbin/php-fpm /etc/init.d/php-fpm
perl -p -i -e "s/(php_fpm_CONF\")/php_fpm_CONF -c \/opt\/etc\/php.ini\"/g" /usr/local/sbin/php-fpm
perl -p -i -e "s/(\/usr\/local\/etc\/php-fpm.conf)/\/opt\/etc\/php-fpm.conf/g" /usr/local/sbin/php-fpm
perl -p -i -e "s/(\/usr\/local\/logs\/php-fpm.pid)/\/var\/run\/php-fpm.pid/g" /usr/local/sbin/php-fpm


###--------------------###
msg "`date` INFO: Installing memcache for php, please wait..."
mrun "sleep 8"
cd /var/opt
wget -U iCab http://pecl.php.net/get/memcache-3.0.3.tgz &> /dev/null
tar -xzf memcache-3.0.3.tgz
cd /var/opt/memcache-3.0.3
st_runner "/usr/local/bin/phpize" 2> /dev/null
st_runner "sh ./configure --with-php-config=/usr/local/bin/php-config" 2> /dev/null
st_runner "make --quiet" 2> /dev/null
st_runner "make --quiet install" 2> /dev/null


###--------------------###
msg "`date` INFO: Installing suhosin for php, please wait..."
mrun "sleep 8"
cd /var/opt
wget -U iCab http://download.suhosin.org/suhosin-0.9.31.tgz &> /dev/null
tar -xzf suhosin-0.9.31.tgz
cd /var/opt/suhosin-0.9.31
st_runner "/usr/local/bin/phpize" 2> /dev/null
st_runner "sh ./configure --with-php-config=/usr/local/bin/php-config" 2> /dev/null
st_runner "make --quiet" 2> /dev/null
st_runner "make --quiet install" 2> /dev/null


###--------------------###
msg "`date` INFO: Installing uploadprogress for php, please wait..."
mrun "sleep 8"
cd /var/opt
wget -U iCab http://pecl.php.net/get/uploadprogress-1.0.1.tgz &> /dev/null
tar -xzf uploadprogress-1.0.1.tgz
cd /var/opt/uploadprogress-1.0.1
st_runner "/usr/local/bin/phpize" 2> /dev/null
st_runner "sh ./configure --with-php-config=/usr/local/bin/php-config" 2> /dev/null
st_runner "make --quiet" 2> /dev/null
st_runner "make --quiet install" 2> /dev/null


###--------------------###
msg "`date` INFO: Installing apc for php, please wait..."
mrun "sleep 8"
cd /var/opt
wget -U iCab http://pecl.php.net/get/APC-3.1.3p1.tgz &> /dev/null
tar -xzf APC-3.1.3p1.tgz
cd /var/opt/APC-3.1.3p1
st_runner "/usr/local/bin/phpize" 2> /dev/null
st_runner "sh ./configure --with-php-config=/usr/local/bin/php-config" 2> /dev/null
st_runner "make --quiet" 2> /dev/null
st_runner "make --quiet install" 2> /dev/null


###--------------------###
mkdir -p /usr/local/ioncube
_X86_64_TEST=`uname -m`
if [ "$_X86_64_TEST" = "x86_64" ] ; then
  SYSTEMARCH="x86_64"
  msg "`date` INFO: Installing ioncube $SYSTEMARCH version for php, please wait..."
  mrun "sleep 8"
  cd /var/opt
wget -U iCab http://downloads2.ioncube.com/loader_downloads/ioncube_loaders_lin_x86-64.tar.gz &> /dev/null
tar -xzf ioncube_loaders_lin_x86-64.tar.gz
else
  SYSTEMARCH="x86"
  msg "`date` INFO: Installing ioncube $SYSTEMARCH version for php, please wait..."
  mrun "sleep 8"
  cd /var/opt
wget -U iCab http://downloads2.ioncube.com/loader_downloads/ioncube_loaders_lin_x86.tar.gz &> /dev/null
tar -xzf ioncube_loaders_lin_x86.tar.gz
fi
cp -af /var/opt/ioncube/* /usr/local/ioncube/


###--------------------###
msg "`date` INFO: Installing bzr, please wait..."
mrun "sleep 8"
cd /var/opt
wget -U iCab http://launchpad.net/bzr/2.2/2.2b4/+download/bzr-2.2b4.tar.gz &> /dev/null
tar -xzf bzr-2.2b4.tar.gz
cd /var/opt/bzr-2.2b4
st_runner "python setup.py --quiet install build_ext --allow-python-fallback" 2> /dev/null


###--------------------###
msg "`date` INFO: Installing Nginx, please wait..."
mrun "sleep 8"
cd /var/opt; rm -f -r nginx*
git clone git://github.com/masterzen/nginx-upload-progress-module.git &> /dev/null
cd /var/opt
wget -U iCab http://sysoev.ru/nginx/nginx-0.8.49.tar.gz &> /dev/null
tar -xzf nginx-0.8.49.tar.gz
cd /var/opt/nginx-0.8.49
st_runner "sh ./configure --prefix=/usr --sbin-path=/usr/sbin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/lock/nginx.lock --user=www-data --group=www-data --with-http_realip_module --with-rtsig_module --with-http_gzip_static_module --with-http_stub_status_module --with-http_ssl_module --without-mail_pop3_module --without-mail_imap_module --without-mail_smtp_module --add-module=/var/opt/nginx-upload-progress-module/" 2> /dev/null
st_runner "make --quiet" 2> /dev/null
st_runner "make --quiet install" 2> /dev/null


###--------------------###
msg "`date` INFO: Update rc.d"
mrun "sleep 8"
echo "UseDNS no" >> /etc/ssh/sshd_config
cp -a /opt/etc/php.ini /usr/local/lib/
killall nginx php-cgi php-fpm &> /dev/null
runner "invoke-rc.d ssh restart" &> /dev/null
runner "update-rc.d cron defaults" &> /dev/null
runner "update-rc.d php-fpm defaults" &> /dev/null
runner "update-rc.d nginx defaults" &> /dev/null
runner "invoke-rc.d php-fpm start" &> /dev/null
runner "invoke-rc.d nginx start" &> /dev/null
cd /etc/mysql
mv -f my.cnf my.cnf.bak.copy
wget -U iCab http://omega8.cc/dev/my.cnf.txt &> /dev/null
mv my.cnf.txt my.cnf
runner "invoke-rc.d mysql restart" &> /dev/null


###--------------------###
msg "`date` INFO: Clean up temp files"
mrun "sleep 8"
rm -f -r /var/opt/*


###--------------------###
msg "`date` INFO: Generate random password for MariaDB"
mrun "sleep 8"
touch /root/.my.pass.txt
chmod 0600 /root/.my.pass.txt
pwgen -c -v -s > /root/.my.pass.txt
PXSWD=`cat /root/.my.pass.txt`
PASWD=`echo -n $PXSWD | tr -d "\n"`
for Files in `find /var/xdrago -type f`
do
  perl -p -i -e "s/(NdKBu34erty325r6mUHxWy)/$PASWD/g" $Files
  perl -p -i -e "s/(php-fpm nginx php)/php-cgi php-fpm nginx php/g" $Files
done
msg "`date` INFO: OS and services installation completed"
mrun "sleep 8"


###--------------------###
msg "`date` INFO: Installing Aegir, please wait..."
mrun "sleep 8"
runner "adduser --system --group --home /var/aegir aegir"
runner "adduser aegir www-data"
echo "aegir ALL=NOPASSWD: /etc/init.d/nginx" >> /etc/sudoers
ln -s /var/aegir/config/nginx.conf /etc/nginx/conf.d/aegir.conf
cd /var/aegir
if [ "$_AEGIR_VERSION" = "HEAD" ] ; then
  _AEGIR_SCRIPT="aegir-head-install"
elif [ "$_AEGIR_VERSION" = "TEST" ] ; then
  _AEGIR_SCRIPT="aegir-test-install"
else
  _AEGIR_SCRIPT="aegir-alpha-install"
fi
wget -U iCab http://omega8.cc/dev/$_AEGIR_SCRIPT.sh.txt &> /dev/null
msg "`date` INFO: Now running Aegir installer for backend and frontend"
mrun "sleep 8"
su -s /bin/bash aegir -c "bash $_AEGIR_SCRIPT.sh.txt $_THIS_FRONT --http_service_type='nginx' --db_service_type='mysql' --client_email='$_MY_EMAIL' >/var/aegir/install.log 2>&1"
mrun "sleep 8"


###--------------------###
msg "`date` INFO: Simple check if Aegir install went as expected"
mrun "sleep 8"
if [ -f "/var/aegir/config/includes/nginx_advanced_include.conf" ] ; then
  msg "`date` INFO: Aegir installation almost completed"
else
  msg "`date` FATAL ERROR: Something went wrong, Aegir is not installed - exit now"
  exit 1
fi


###--------------------###
msg "`date` INFO: Fix for access to global.inc for www-data user issue"
mrun "sleep 8"
chmod 755 /var/aegir/config/includes
chmod 755 /var/aegir/config
runner "invoke-rc.d cron restart" &> /dev/null
mrun "sleep 8"


###--------------------###
msg "`date` INFO: Fix for advanced Nginx config and Drush path"
mrun "sleep 8"
ln -s /var/aegir/drush/drush /usr/bin/drush
cd /var/aegir/config/includes
wget -U iCab http://omega8.cc/dev/tiny-global.inc.txt &> /dev/null
rm -f global.inc
mv tiny-global.inc.txt global.inc
mv nginx_simple_include.conf nginx_simple_include.conf.orig
ln -s nginx_advanced_include.conf nginx_simple_include.conf
cd /var/aegir
if [ ! -f "/var/aegir/config/server_master/nginx/conf.d/custom_nginx.conf" ] ; then
  echo "  gzip_static       on;" > /var/aegir/config/server_master/nginx/conf.d/custom_nginx.conf
  echo "  upload_progress uploads 1m;" >> /var/aegir/config/server_master/nginx/conf.d/custom_nginx.conf
fi
echo "`date` $_AEGIR_VERSION.$_INSTALLER_VERSION" > /var/aegir/config/includes/installer_version.txt
perl -p -i -e "s/(access_log)/\#access_log/g" /etc/nginx/nginx.conf
perl -p -i -e "s/(worker_connections\s+1024)/worker_connections  4096/g" /etc/nginx/nginx.conf
perl -p -i -e "s/(worker_processes\s+1\;)/worker_processes  4\;\nworker_rlimit_nofile  8192\;/g" /etc/nginx/nginx.conf
killall nginx &> /dev/null
runner "invoke-rc.d nginx start" &> /dev/null
mrun "sleep 8"
msg "`date` INFO: AEGIR installation completed"
mrun "sleep 8"


###--------------------###
msg "`date` INFO: MariaDB final setup"
mrun "sleep 8"
echo " "
msg "Please COPY it NOW and set it as your MariaDB root password during mysql_secure_installation"
echo " "
echo --------vvvvvvvv--------
echo ------- $PASWD -------
echo --------^^^^^^^^--------
echo " "
msg "Please remember, you don't have the root password for MariaDB set yet."
cat <<EOF

 * You have to hit Enter _without_ entering the password on the first question you will see.
 * On the second question say Y and then enter your root password '$PASWD' twice.
 * Then say Y on all remaining questions.

EOF
echo " "
msg "...waiting now 30 sec before running interactive mysql_secure_installation..."
echo " "
echo " "
mrun "sleep 30"
mysql_secure_installation
mrun "sleep 8"
echo "[client]" >> /root/.my.cnf
echo "user=root" >> /root/.my.cnf
echo "password=$PASWD" >> /root/.my.cnf
chmod 0600 /root/.my.cnf


###--------------------###
msg "`date` INFO: MariaDB setup completed"
msg "`date` INFO: You can now log in as root by typing only 'mysql' on the command line"
mrun "sleep 8"
echo " "
_AEGIR_LOGIN_URL=`grep "Aegir is now installed" /var/aegir/install.log 2> /dev/null`
msg "ACCESS -> $_AEGIR_LOGIN_URL"
echo " "
mrun "sleep 8"
msg "`date` CARD: Now charging your credit card for this automated install service..."
mrun "sleep 8"
msg "`date` JOKE: Just kidding! Enjoy your Aegir Hosting System :)"
mrun "sleep 8"
msg "`date` BYE!"
exit 0


###----------------------------------------###
###
###  Aegir with Nginx on Ubuntu or Debian
###  (GNU/GPL) omega8cc
###  Code: http://github.com/omega8cc
###
###----------------------------------------###

#EOF
