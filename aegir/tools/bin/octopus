#!/bin/bash

PATH=/usr/local/bin:/usr/local/sbin:/opt/local/bin:/usr/bin:/usr/sbin:/bin:/sbin
SHELL=/bin/bash

_TODAY=`date +%y%m%d`
_NOW=`date +%y%m%d-%H%M`
_CHECK_HOST=`uname -n`
_LOG_DIR="/var/backups/reports/up/$(basename "$0")/$_TODAY"
_UP_CONTRIB_PID="$_LOG_DIR/$(basename "$0")-contrib-up.pid"
_L_VMFAMILY=XEN
_L_VM_TEST=`uname -a 2>&1`
if [[ "$_L_VM_TEST" =~ beng ]] ; then
  _L_VMFAMILY="VS"
fi

clean_pid_exit () {
  rm -f /var/run/boa_wait.pid
  rm -f /var/run/boa_run.pid
  service cron start &> /dev/null
  exit 1
}

fix_dns_settings () {
  mkdir -p /var/backups
  rm -f /var/backups/resolv.conf.tmp
  if [ -e "/etc/resolv.conf" ] ; then
    cp -a /etc/resolv.conf /var/backups/resolv.conf.tmp
  fi
  if [ ! -e "/var/backups/resolv.conf.vanilla" ] ; then
    for Pre in `ls -la /var/backups/resolv.conf.pre-*` ; do
      if [ -e "$Pre" ] && [ -f "$Pre" ] && [ ! -L "$Pre" ] ; then
        cp -a $Pre /var/backups/resolv.conf.vanilla
      fi
    done
  fi
  if [ ! -e "/var/backups/resolv.conf.vanilla" ] ; then
    rm -f /etc/resolv.conf
    cp -a /var/backups/resolv.conf.tmp /etc/resolv.conf
    cp -a /var/backups/resolv.conf.tmp /var/backups/resolv.conf.vanilla
  fi
  sed -i "/^$/d" /var/backups/resolv.conf.vanilla &> /dev/null
  rm -f /etc/resolv.conf
  echo "nameserver 8.8.8.8" > /etc/resolv.conf
  echo "nameserver 8.8.4.4" >> /etc/resolv.conf
  _BROKEN_DNS_TEST=$(host -a omega8.cc 8.8.8.8 -w 10 2>&1)
  if [[ "$_BROKEN_DNS_TEST" =~ "no servers could be reached" ]] && [ -e "/var/backups/resolv.conf.vanilla" ] ; then
    touch /root/.use.local.nameservers.cnf
    rm -f /etc/resolv.conf
    cp -a /var/backups/resolv.conf.vanilla /etc/resolv.conf
    echo "nameserver 8.8.8.8" >> /etc/resolv.conf
    echo "nameserver 8.8.4.4" >> /etc/resolv.conf
  else
    rm -f /etc/resolv.conf
    cp -a /var/backups/resolv.conf.tmp /etc/resolv.conf
  fi
  if [ -e "/etc/pdnsd.conf" ] ; then
    if [ -e "/root/.local.dns.IP.list" ] ; then
      sed -i "s/.*127.0.0.1.*//g; s/ *$//g; /^$/d" /root/.local.dns.IP.list
      sed -i "s/.*Dynamic.*//g; s/ *$//g; /^$/d"   /root/.local.dns.IP.list
      _BROKEN_DNS_TEST=$(grep "\." /root/.local.dns.IP.list 2>&1)
      if [ -z "$_BROKEN_DNS_TEST" ] ; then
        echo "        label = \"google-servers\";" > /root/.local.dns.IP.list
        echo "        ip=8.8.8.8;" >> /root/.local.dns.IP.list
        echo "        ip=8.8.4.4;" >> /root/.local.dns.IP.list
      fi
    fi
    _CUSTOM_DNS_TEST=$(grep 8.8.8.8 /etc/pdnsd.conf 2>&1)
    _BROKEN_DNS_CONF=$(grep "ip=Dynamic" /etc/pdnsd.conf 2>&1)
    if [[ "$_CUSTOM_DNS_TEST" =~ "8.8.8.8" ]] || [[ "$_BROKEN_DNS_CONF" =~ "Dynamic" ]] ; then
      if [ -e "/root/.use.local.nameservers.cnf" ] ; then
        echo "        label = \"google-servers\";" > /root/.local.dns.IP.list
        for _IP in `cat /etc/resolv.conf | sed 's/.*127.0.0.1.*//g; s/.*Dynamic.*//g' | cut -d ' ' -f2 | sort | uniq`;do echo "        ip=$_IP;" >> /root/.local.dns.IP.list;done
        sed -i "s/ip=8.8.*//g; s/ *$//g; /^$/d" /etc/pdnsd.conf
        sed -i "s/ip=127.*//g; s/ *$//g; /^$/d" /etc/pdnsd.conf
        sed -i "s/ip=Dyn.*//g; s/ *$//g; /^$/d" /etc/pdnsd.conf
        sed -i "s/.*127.0.0.1.*//g; s/ *$//g; /^$/d" /root/.local.dns.IP.list
        sed -i "s/.*Dynamic.*//g; s/ *$//g; /^$/d"   /root/.local.dns.IP.list
        _BROKEN_DNS_TEST=$(grep "\." /root/.local.dns.IP.list 2>&1)
        if [ -z "$_BROKEN_DNS_TEST" ] ; then
           echo "        ip=8.8.8.8;" >> /root/.local.dns.IP.list
           echo "        ip=8.8.4.4;" >> /root/.local.dns.IP.list
        fi
        sed -i '/        label = \"google-servers\";/ {r /root/.local.dns.IP.list
d;};' /etc/pdnsd.conf
        resolvconf -u                      &> /dev/null
        service pdnsd stop                 &> /dev/null
        rm -f /var/cache/pdnsd/pdnsd.cache &> /dev/null
        service pdnsd start                &> /dev/null
        service pdnsd stop                 &> /dev/null
        rm -f /var/cache/pdnsd/pdnsd.cache &> /dev/null
        service pdnsd start                &> /dev/null
      fi
    fi
  fi
}

check_dns_settings () {
  _BROKEN_DNS_TEST=$(host -a omega8.cc 8.8.8.8 -w 10 2>&1)
  if [[ "$_BROKEN_DNS_TEST" =~ "no servers could be reached" ]] || [ -e "/root/.use.local.nameservers.cnf" ] ; then
    _USE_PROVIDER_DNS=YES
    fix_dns_settings
  else
    _USE_PROVIDER_DNS=NO
  fi
}

extract_archive () {
  if [ ! -z $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1    ;;
      *.tar.gz)    tar xzf $1    ;;
      *.bz2)       bunzip2 $1    ;;
      *.rar)       unrar x $1    ;;
      *.gz)        gunzip -q $1  ;;
      *.tar)       tar xf $1     ;;
      *.tbz2)      tar xjf $1    ;;
      *.tgz)       tar xzf $1    ;;
      *.zip)       unzip -qq $1  ;;
      *.Z)         uncompress $1 ;;
      *.7z)        7z x $1       ;;
      *)           echo "'$1' cannot be extracted via >extract<" ;;
    esac
    rm -f $1
  fi
}

get_dev_ext () {
  if [ ! -z $1 ] ; then
    curl -L --max-redirs 10 -k -s -O --retry 10 --retry-delay 15 -A iCab "http://files.aegir.cc/dev/HEAD/$1"
    extract_archive "$1"
  fi
}

send_report ()
{
  if [ -e "/root/.barracuda.cnf" ] ; then
    source /root/.barracuda.cnf
    if [ -e "/root/.auto.up.cnf" ] || [ -e "/root/.host8.cnf" ] || [[ "$_CHECK_HOST" =~ ".host8." ]] || [ "$_L_VMFAMILY" = "VS" ] ; then
      _MY_EMAIL="$(basename "$0")@omega8.cc"
    fi
    if [ ! -z "$_MY_EMAIL" ] ; then
      cat $_UP_LOG | mail -e -s "REPORT: Successful Octopus upgrade for $_THIS_HM_USER on $_CHECK_HOST at $_NOW" $_MY_EMAIL
      echo "REPORT: Successful Octopus upgrade for $_THIS_HM_USER on $_CHECK_HOST sent to $_MY_EMAIL"
    fi
  fi
}

send_alert ()
{
  if [ -e "/root/.barracuda.cnf" ] ; then
    source /root/.barracuda.cnf
    if [ -e "/root/.auto.up.cnf" ] || [ -e "/root/.host8.cnf" ] || [[ "$_CHECK_HOST" =~ ".host8." ]] || [ "$_L_VMFAMILY" = "VS" ] ; then
      _MY_EMAIL="$(basename "$0")@omega8.cc"
    fi
    if [ ! -z "$_MY_EMAIL" ] ; then
      cat $_UP_LOG | mail -e -s "ALERT: Failed Octopus upgrade for $_THIS_HM_USER on $_CHECK_HOST at $_NOW" $_MY_EMAIL
      echo "ALERT: Failed Octopus upgrade for $_THIS_HM_USER on $_CHECK_HOST sent to $_MY_EMAIL"
    fi
  fi
}

check_report ()
{
  _SEND_ALERT=NO
  _RESULT_BYE=$(grep "BYE" $_UP_LOG 2>&1)
  if [[ "$_RESULT_BYE" =~ "BYE" ]] ; then
    _DO_NOTHING=YES
  else
    _SEND_ALERT=YES
  fi
  _RESULT_ALRT=$(grep "ALRT" $_UP_LOG 2>&1)
  if [[ "$_RESULT_ALRT" =~ "ALRT" ]] ; then
    _SEND_ALERT=YES
  fi
  _RESULT_ABORTING=$(grep "Aborting" $_UP_LOG 2>&1)
  if [[ "$_RESULT_ABORTING" =~ "Aborting" ]] ; then
    _SEND_ALERT=YES
  fi
  _RESULT_ALREADY=$(grep "This Aegir Instance is already up to date" $_UP_LOG 2>&1)
  if [[ "$_RESULT_ALREADY" =~ "This Aegir Instance is already up to date" ]] ; then
    _SEND_ALERT=NO
  fi
  if [ "$_SEND_ALERT" = "YES" ] ; then
    send_alert
  else
    send_report
  fi
}

up_mode ()
{
  if [ "$mcmode" = "aegir" ] ; then
    sed -i "s/^_HM_ONLY=NO/_HM_ONLY=YES/g" /var/backups/OCTOPUS.sh.$_THIS_HM_USER
    bash /var/backups/OCTOPUS.sh.$_THIS_HM_USER
    touch $User/log/up-$_TODAY
  elif [ "$mcmode" = "platforms" ] ; then
    sed -i "s/^_PLATFORMS_ONLY=NO/_PLATFORMS_ONLY=YES/g" /var/backups/OCTOPUS.sh.$_THIS_HM_USER
    bash /var/backups/OCTOPUS.sh.$_THIS_HM_USER
    touch $User/log/up-$_TODAY
  elif [ "$mcmode" = "both" ] ; then
    sed -i "s/^_HM_ONLY=YES/_HM_ONLY=NO/g" /var/backups/OCTOPUS.sh.$_THIS_HM_USER
    sed -i "s/^_HM_ONLY=YES/_HM_ONLY=NO/g" /root/.$_THIS_HM_USER.octopus.cnf
    sed -i "s/^_PLATFORMS_ONLY=YES/_PLATFORMS_ONLY=NO/g" /var/backups/OCTOPUS.sh.$_THIS_HM_USER
    sed -i "s/^_PLATFORMS_ONLY=YES/_PLATFORMS_ONLY=NO/g" /root/.$_THIS_HM_USER.octopus.cnf
    bash /var/backups/OCTOPUS.sh.$_THIS_HM_USER
    touch $User/log/up-$_TODAY
  else
    bash /var/backups/OCTOPUS.sh.$_THIS_HM_USER
    touch $User/log/up-$_TODAY
  fi
}

up_one ()
{
  if [ -e "/var/backups/OCTOPUS.sh.txt" ] ; then
    cp -af /var/backups/OCTOPUS.sh.txt /var/backups/OCTOPUS.sh.$_THIS_HM_USER
    if [ "$cmmand" = "up-vanilla" ] ; then
      sed -i "s/^_BRANCH_PROVISION=.*/_BRANCH_PROVISION=6.x-2.x/g"   /var/backups/OCTOPUS.sh.$_THIS_HM_USER
    elif [ "$cmmand" = "up-modern" ] ; then
      sed -i "s/^_BRANCH_PROVISION=.*/_BRANCH_PROVISION=2.4.x-dev/g" /var/backups/OCTOPUS.sh.$_THIS_HM_USER
    else
      sed -i "s/^_BRANCH_PROVISION=.*/_BRANCH_PROVISION=2.3.x-dev/g" /var/backups/OCTOPUS.sh.$_THIS_HM_USER
    fi
    if [ "$cmmand" = "up-cluster" ] ; then
      sed -i "s/^_BRANCH_BOA=.*/_BRANCH_BOA=cluster/g"   /var/backups/OCTOPUS.sh.$_THIS_HM_USER
    elif [ "$cmmand" = "up-head" ] ; then
      sed -i "s/^_BRANCH_BOA=.*/_BRANCH_BOA=master/g"    /var/backups/OCTOPUS.sh.$_THIS_HM_USER
    elif [ "$cmmand" = "up-stable" ] ; then
      sed -i "s/^_BRANCH_BOA=.*/_BRANCH_BOA=2.3.x-dev/g" /var/backups/OCTOPUS.sh.$_THIS_HM_USER
    elif [ "$cmmand" = "up-modern" ] ; then
      sed -i "s/^_BRANCH_BOA=.*/_BRANCH_BOA=2.4.x-dev/g" /var/backups/OCTOPUS.sh.$_THIS_HM_USER
    elif [ "$cmmand" = "up-vanilla" ] ; then
      sed -i "s/^_BRANCH_BOA=.*/_BRANCH_BOA=master/g"    /var/backups/OCTOPUS.sh.$_THIS_HM_USER
    else
      sed -i "s/^_BRANCH_BOA=.*/_BRANCH_BOA=2.3.x-dev/g" /var/backups/OCTOPUS.sh.$_THIS_HM_USER
    fi
    sed -i "s/^_AUTOPILOT=NO/_AUTOPILOT=YES/g"           /var/backups/OCTOPUS.sh.$_THIS_HM_USER
    sed -i "s/^_DNS_SETUP_TEST=YES/_DNS_SETUP_TEST=NO/g" /var/backups/OCTOPUS.sh.$_THIS_HM_USER
    sed -i "s/^_USER=o1/_USER=$_THIS_HM_USER/g"          /var/backups/OCTOPUS.sh.$_THIS_HM_USER
    if [ -e "/root/.auto.up.cnf" ] || [ -e "/root/.host8.cnf" ] || [[ "$_CHECK_HOST" =~ ".host8." ]] || [ "$_L_VMFAMILY" = "VS" ] ; then
      if [[ "$_CHECK_HOST" =~ ".qq.o8.io" ]] ; then
        _DO_NOTHING=YES
      else
        sed -i "s/^_STRONG_PASSWORDS=NO/_STRONG_PASSWORDS=YES/g" /var/backups/OCTOPUS.sh.$_THIS_HM_USER
        sed -i "s/^_PLATFORMS_LIST=.*/_PLATFORMS_LIST=ALL/g"     /var/backups/OCTOPUS.sh.$_THIS_HM_USER
        sed -i "s/^_PLATFORMS_LIST=.*/_PLATFORMS_LIST=ALL/g"     /root/.$_THIS_HM_USER.octopus.cnf
        sed -i "s/^_AUTOPILOT=NO/_AUTOPILOT=YES/g"               /root/.$_THIS_HM_USER.octopus.cnf
        sed -i "s/^_DNS_SETUP_TEST=YES/_DNS_SETUP_TEST=NO/g"     /root/.$_THIS_HM_USER.octopus.cnf
        sed -i "s/^_STRONG_PASSWORDS=NO/_STRONG_PASSWORDS=YES/g" /root/.$_THIS_HM_USER.octopus.cnf
      fi
    fi
    if [ ! -e "$_UP_CONTRIB_PID" ] ; then
      sed -i "s/^_O_CONTRIB_UP=NO/_O_CONTRIB_UP=YES/g" /var/backups/OCTOPUS.sh.$_THIS_HM_USER
      sed -i "s/^_O_CONTRIB_UP=NO/_O_CONTRIB_UP=YES/g" /root/.$_THIS_HM_USER.octopus.cnf
    else
      sed -i "s/^_O_CONTRIB_UP=YES/_O_CONTRIB_UP=NO/g" /var/backups/OCTOPUS.sh.$_THIS_HM_USER
      sed -i "s/^_O_CONTRIB_UP=YES/_O_CONTRIB_UP=NO/g" /root/.$_THIS_HM_USER.octopus.cnf
    fi
    if [ -e "/var/backups/OCTOPUS.sh.$_THIS_HM_USER" ] ; then
      if [ -e "$User/.drush/sys/provision" ] ; then
        _IS_OLD=`find $User/.drush/sys/provision/ -maxdepth 1 -mindepth 1 -mtime +0 -type d | grep example`
      elif [ -e "$User/.drush/provision" ] ; then
        _IS_OLD=`find $User/.drush/provision/ -maxdepth 1 -mindepth 1 -mtime +0 -type d | grep example`
      fi
      if [ -z "$_IS_OLD" ] && [ -z "$mcmode" ] && [ -e "$User/.drush/sys/provision" ] ; then
        echo
        echo "This Aegir Instance is already up to date!"
        echo "If you wish to run/force the upgrade again,"
        echo "please specify desired upgrade mode:"
        echo "aegir, platforms or both - as shown below"
        echo
        echo "Usage: $(basename "$0") $cmmand $second {aegir|platforms|both}"
        echo
      else
        if [ -e "$User/.drush/sys/provision" ] ; then
          up_mode
        elif [ -e "$User/.drush/provision" ] ; then
          up_mode
        else
          echo "$User/.drush/sys/provision does not exist!"
          rm -f -r $User/.drush/{sys,xts,usr}
          rm -f -r $User/.drush/{provision,drush_make}
          mkdir -p $User/.drush/{sys,xts,usr}
          if [ "$cmmand" = "up-modern" ] ; then
            git clone --branch 2.4.x-dev git://github.com/omega8cc/provision.git $User/.drush/sys/provision &> /dev/null
          elif [ "$cmmand" = "up-vanilla" ] ; then
            git clone --branch 6.x-2.x git://github.com/omega8cc/provision.git $User/.drush/sys/provision &> /dev/null
          else
            cd $User/.drush/sys
            curl -L --max-redirs 10 -k -s --retry 10 --retry-delay 15 -A iCab "http://files.aegir.cc/versions/stable/tar/provision-HEAD.tar.gz" | tar -xzf -
            get_dev_ext "drush_make.tar.gz"
          fi
          chown -R $_THIS_HM_USER:users $User/.drush/sys
        fi
      fi
      if [ -e "$User/log/cores.txt" ] && [ ! -e "$User/log/CANCELLED" ] ; then
        if [ -e "$User/.drush/bm.patch" ] && [ ! -e "$User/.drush/sys/bm.patch" ] && [ -e "$User/.drush/sys" ] ; then
          mv -f $User/.drush/bm.patch $User/.drush/sys/bm.patch
        fi
        if [ -e "$User/.drush/sys/bm.patch" ] ; then
          cd $User/.drush/sys
          patch -p1 < bm.patch &> /dev/null
        fi
        if [ -e "$User/.drush/custom.patch" ] && [ ! -e "$User/.drush/sys/custom.patch" ] && [ -e "$User/.drush/sys" ] ; then
          mv -f $User/.drush/custom.patch $User/.drush/sys/custom.patch
        fi
        if [ -e "$User/.drush/sys/custom.patch" ] ; then
          cd $User/.drush/sys
          patch -p1 < custom.patch &> /dev/null
        fi
        if [ -e "$User/.drush/uberdrupal.patch" ] && [ ! -e "$User/.drush/sys/uberdrupal.patch" ] && [ -e "$User/.drush/sys" ] ; then
          mv -f $User/.drush/uberdrupal.patch $User/.drush/sys/uberdrupal.patch
        fi
        if [ -e "$User/.drush/sys/uberdrupal.patch" ] ; then
          cd $User/.drush/sys
          patch -p1 < uberdrupal.patch &> /dev/null
        fi
        cd /var/backups
      fi
    else
      echo "OCTOPUS.sh.txt installer not available - try again"
      service cron start &> /dev/null
      exit 1
    fi
  fi
}

count_cpu()
{
  _CPU_INFO=$(grep -c processor /proc/cpuinfo)
  _CPU_INFO=${_CPU_INFO//[^0-9]/}
  _NPROC_TEST=$(which nproc)
  if [ -z "$_NPROC_TEST" ] ; then
    _CPU_NR="$_CPU_INFO"
  else
    _CPU_NR=`nproc`
  fi
  _CPU_NR=${_CPU_NR//[^0-9]/}
  if [ ! -z "$_CPU_NR" ] && [ ! -z "$_CPU_INFO" ] && [ "$_CPU_NR" -gt "$_CPU_INFO" ] && [ "$_CPU_INFO" -gt "0" ] ; then
    _CPU_NR="$_CPU_INFO"
  fi
  if [ -z "$_CPU_NR" ] || [ "$_CPU_NR" -lt "1" ] ; then
    _CPU_NR=1
  fi
}

load_control()
{
  if [ -e "/root/.barracuda.cnf" ] ; then
    source /root/.barracuda.cnf
    _CPU_MAX_RATIO=${_CPU_MAX_RATIO//[^0-9]/}
  fi
  if [ -z "$_CPU_MAX_RATIO" ] ; then
    _CPU_MAX_RATIO=6
  fi
  _O_LOAD=`awk '{print $1*100}' /proc/loadavg`
  let "_O_LOAD = (($_O_LOAD / $_CPU_NR))"
  let "_O_LOAD_MAX = ((100 * $_CPU_MAX_RATIO))"
}

up_action_all ()
{
  for User in `find /data/disk/ -maxdepth 1 | sort`
  do
    count_cpu
    load_control
    if [ -d "$User/config/server_master/nginx/vhost.d" ] && [ -e "$User/log/cores.txt" ] && [ ! -e "$User/log/CANCELLED" ] ; then
      if [ $_O_LOAD -lt $_O_LOAD_MAX ] ; then
        _THIS_HM_USER=`echo $User | cut -d'/' -f4 | awk '{ print $1}'`
        echo load is $_O_LOAD while maxload is $_O_LOAD_MAX
        echo Octopus upgrade for User $User
        n=$((RANDOM%9+2))
        echo Waiting $n seconds...
        sleep $n
        if [ "$silent" = "log" ] ; then
          _UP_LOG="$_LOG_DIR/$(basename "$0")-up-$_THIS_HM_USER-$_NOW.log"
          echo
          echo "Preparing the upgrade in silent mode..."
          echo
          echo "NOTE: There will be no progress displayed in the console"
          echo "but you will receive an e-mail once the upgrade is complete"
          echo
          sleep 5
          echo "You could watch the progress in another window with command:"
          echo "  tail -f $_UP_LOG"
          echo "or wait until you will see the line: OCTOPUS upgrade completed"
          echo
          echo "Starting the upgrade in silent mode now..."
          echo
          sed -i "s/^_SPINNER=YES/_SPINNER=NO/g" /var/backups/OCTOPUS.sh.txt &> /dev/null
          up_one >>$_UP_LOG 2>&1
          check_report
        else
          up_one
        fi
        n=$((RANDOM%9+2))
        echo Waiting $n seconds...
        sleep $n
        rm -f /var/backups/OCTOPUS.sh.$_THIS_HM_USER
        echo Done for $User
        if [ ! -e "$_UP_CONTRIB_PID" ] ; then
          touch $_UP_CONTRIB_PID
        fi
      else
        echo load is $_O_LOAD while maxload is $_O_LOAD_MAX
        echo ...we have to wait...
      fi
      echo
      echo
    fi
  done
}

up_action_one ()
{
  User="/data/disk/$second"
  count_cpu
  load_control
  if [ -d "$User/config/server_master/nginx/vhost.d" ] && [ -e "$User/log/cores.txt" ] && [ ! -e "$User/log/CANCELLED" ] ; then
    if [ $_O_LOAD -lt $_O_LOAD_MAX ] ; then
      _THIS_HM_USER=`echo $User | cut -d'/' -f4 | awk '{ print $1}'`
      echo load is $_O_LOAD while maxload is $_O_LOAD_MAX
      echo Octopus upgrade for User $User
      sleep 3
      if [ "$silent" = "log" ] ; then
        _UP_LOG="$_LOG_DIR/$(basename "$0")-up-$_THIS_HM_USER-$_NOW.log"
        echo
        echo "Preparing the upgrade in silent mode..."
        echo
        echo "NOTE: There will be no progress displayed in the console"
        echo "but you will receive an e-mail once the upgrade is complete"
        echo
        sleep 5
        echo "You could watch the progress in another window with command:"
        echo "  tail -f $_UP_LOG"
        echo "or wait until you will see the line: OCTOPUS upgrade completed"
        echo
        echo "Starting the upgrade in silent mode now..."
        echo
        sed -i "s/^_SPINNER=YES/_SPINNER=NO/g" /var/backups/OCTOPUS.sh.txt &> /dev/null
        up_one >>$_UP_LOG 2>&1
        check_report
      else
        up_one
      fi
      sleep 3
      rm -f /var/backups/OCTOPUS.sh.$_THIS_HM_USER
      echo Done for $User
      if [ ! -e "$_UP_CONTRIB_PID" ] ; then
        touch $_UP_CONTRIB_PID
      fi
    else
      echo load is $_O_LOAD while maxload is $_O_LOAD_MAX
      echo try again later
    fi
    echo
    echo
  fi
}

up_start ()
{
  if [ -e "/var/run/boa_run.pid" ] ; then
    echo Another BOA installer is running probably - /var/run/boa_run.pid exists
    exit 1
  elif [ -e "/var/run/boa_wait.pid" ] ; then
    echo Some important system task is running probably - /var/run/boa_wait.pid exists
    exit 1
  else
    touch /var/run/boa_run.pid
    touch /var/run/boa_wait.pid
    mkdir -p $_LOG_DIR
    cd /var/backups
    rm -f /var/backups/OCTOPUS.sh*
  fi
  if [ "$cmmode" = "log" ] ; then
    silent="$cmmode"
  fi
  if [ ! -z "$cmmode" ] && [ "$cmmode" != "log" ] ; then
    mcmode="$cmmode"
  fi
  if [ -e "/opt/local/bin/php" ] || [ -e "/usr/local/bin/php" ] ; then
    rm -f /opt/local/bin/php
    rm -f /usr/local/bin/php
  fi
  if [ -d "/opt/local/bin" ] ; then
    if [ -x "/opt/php53/bin/php" ] ; then
      ln -s /opt/php53/bin/php /opt/local/bin/php
    elif [ -x "/opt/php54/bin/php" ] ; then
      ln -s /opt/php54/bin/php /opt/local/bin/php
    elif [ -x "/opt/php55/bin/php" ] ; then
      ln -s /opt/php55/bin/php /opt/local/bin/php
    else
      ln -s /opt/php53/bin/php /opt/local/bin/php &> /dev/null
    fi
  fi
  if [ "$cmmand" = "up-cluster" ] ; then
    if [ ! -e "/var/run/mysqld/mysqld.pid" ] && [ ! -e "/root/.dbhd.clstr.cnf" ] && [ -e "/etc/init.d/mysql" ] ; then
      rm -f /root/.remote.db.cnf
      sleep 5
      service mysql start &> /dev/null
    fi
  fi
}

up_finish ()
{
  rm -f /var/run/boa_run.pid
  rm -f /var/run/boa_wait.pid
  rm -f /var/run/manage_ltd_users.pid
  rm -f /var/run/manage_rvm_users.pid
  rm -f /var/backups/OCTOPUS.sh*
  rm -f /root/BOA.sh*
  if [ -e "/opt/local/bin/php" ] || [ -e "/usr/local/bin/php" ] ; then
    rm -f /opt/local/bin/php
    rm -f /usr/local/bin/php
  fi
  echo
  echo OCTOPUS upgrade completed
  echo Bye
  echo
  if [ "$_NEEDS_UPDATE" = "YES" ] ; then
    rm -f /var/backups/BOA.sh.txt-*
    curl -L --max-redirs 10 -k -s --retry 10 --retry-delay 5 -A iCab "http://files.aegir.cc/BOA.sh.txt" -o /var/backups/BOA.sh.txt-$_NOW
    exec bash /var/backups/BOA.sh.txt-$_NOW &> /dev/null
    rm -f /var/backups/BOA.sh.txt-$_NOW
  fi
  exit 0
}

up_stable ()
{
  up_start
  curl -L --max-redirs 10 -k -s --retry 10 --retry-delay 5 -A iCab "http://files.aegir.cc/versions/stable/txt/OCTOPUS.sh.txt" -o OCTOPUS.sh.txt
  if [ "$second" = "all" ] ; then
    up_action_all
  else
    up_action_one
  fi
  up_finish
}

up_head ()
{
  up_start
  curl -L --max-redirs 10 -k -s --retry 10 --retry-delay 5 -A iCab "https://raw.githubusercontent.com/omega8cc/boa/master/OCTOPUS.sh.txt" -o OCTOPUS.sh.txt
  if [ "$second" = "all" ] ; then
    up_action_all
  else
    up_action_one
  fi
  up_finish
}

up_cluster ()
{
  up_start
  curl -L --max-redirs 10 -k -s --retry 10 --retry-delay 5 -A iCab "https://raw.githubusercontent.com/omega8cc/boa/cluster/OCTOPUS.sh.txt" -o OCTOPUS.sh.txt
  if [ "$second" = "all" ] ; then
    up_action_all
  else
    up_action_one
  fi
  up_finish
}

up_modern ()
{
  up_start
  curl -L --max-redirs 10 -k -s --retry 10 --retry-delay 5 -A iCab "https://raw.githubusercontent.com/omega8cc/boa/2.4.x-dev/OCTOPUS.sh.txt" -o OCTOPUS.sh.txt
  if [ "$second" = "all" ] ; then
    up_action_all
  else
    up_action_one
  fi
  up_finish
}

up_legacy ()
{
  up_start
  curl -L --max-redirs 10 -k -s --retry 10 --retry-delay 5 -A iCab "http://files.aegir.cc/versions/legacy/txt/OCTOPUS.sh.txt" -o OCTOPUS.sh.txt
  if [ "$second" = "all" ] ; then
    up_action_all
  else
    up_action_one
  fi
  up_finish
}

up_vanilla ()
{
  up_start
  curl -L --max-redirs 10 -k -s --retry 10 --retry-delay 5 -A iCab "https://raw.githubusercontent.com/omega8cc/boa/master/OCTOPUS.sh.txt" -o OCTOPUS.sh.txt
  if [ "$second" = "all" ] ; then
    up_action_all
  else
    up_action_one
  fi
  up_finish
}

check_wrapper ()
{
  mkdir -p /var/backups
  rm -f /var/backups/$(basename "$0")-now-*
  _THIS_FILE="/var/backups/$(basename "$0")-now-$_NOW"
  curl -L --max-redirs 10 -k -s --retry 10 --retry-delay 5 -A iCab "http://files.aegir.cc/versions/master/aegir/tools/bin/$(basename "$0")" -o $_THIS_FILE
  if [ ! -e "$_THIS_FILE" ] ; then
    echo "I can not download required installers from files.aegir.cc at the moment."
    echo "Please check http://stats.pingdom.com/x0s6yrbopal6/646562 and try again later."
    clean_pid_exit
  fi
  _BIN_FILE="/usr/local/bin/$(basename "$0")"
  _DATE_TEST=$(grep "### $_TODAY ###" $_THIS_FILE 2>&1)
  if [[ "$_DATE_TEST" =~ "### $_TODAY ###" ]] ; then
    _NEEDS_UPDATE=NO
  else
    _NEEDS_UPDATE=YES
  fi
}

check_dns_curl ()
{
  if [ ! -e "/etc/resolv.conf" ] ; then
    if [ -e "/var/backups/resolv.conf.vanilla" ] ; then
      cat /var/backups/resolv.conf.vanilla >/etc/resolv.conf
    fi
    echo "nameserver 8.8.8.8" >>/etc/resolv.conf
    echo "nameserver 8.8.4.4" >>/etc/resolv.conf
    check_dns_settings
  else
    check_dns_settings
  fi
  if [ -d "/var/cache/pdnsd" ] ; then
    service pdnsd stop &> /dev/null
    sleep 1
    rm -f /var/cache/pdnsd/pdnsd.cache
    sleep 1
    service pdnsd start &> /dev/null
  fi
  _CURL_TEST=$(curl -L --max-redirs 10 -k -s --retry 3 --retry-delay 10 -I "http://files.aegir.cc" 2> /dev/null)
  if [[ "$_CURL_TEST" =~ "200 OK" ]] ; then
    _DO_NOTHING=YES
  else
    apt-get clean -qq &> /dev/null
    apt-get update -qq &> /dev/null
    apt-get install curl -y --force-yes --reinstall &> /dev/null
  fi
}

check_root ()
{
  if [ `whoami` = "root" ] ; then
    chmod a+w /dev/null
    if [ ! -e "/dev/fd" ] ; then
      if [ -e "/proc/self/fd" ] ; then
        rm -rf /dev/fd
        ln -s /proc/self/fd /dev/fd
      fi
    fi
    sed -i "s/.*173.231.133.190.*//g" /etc/hosts
    sed -i "s/^127.0.0.1.*/127.0.0.1 localhost/g" /etc/hosts
    sed -i "s/.*files.aegir.cc.*//g" /etc/hosts
    echo >>/etc/hosts
    sed -i "/^$/d" /etc/hosts
  else
    echo "ERROR: This script should be ran as a root user - please `sudo -i` first"
    clean_pid_exit
  fi
  _DF_TEST=$(df -kTh / -l | grep '/'| sed 's/\%//g'| awk '{print $6}' 2> /dev/null)
  _DF_TEST=${_DF_TEST//[^0-9]/}
  if [ ! -z "$_DF_TEST" ] && [ "$_DF_TEST" -gt "90" ] ; then
    echo "ERROR: Your disk space is almost full - we can not proceed until it is below 90/100"
    clean_pid_exit
  fi
}

case "$1" in
  up-stable) cmmand="$1"
             second="$2"
             cmmode="$3"
             silent="$4"
             check_root
             check_dns_curl
             check_wrapper
             up_stable
  ;;
  up-head)   cmmand="$1"
             second="$2"
             cmmode="$3"
             silent="$4"
             check_root
             check_dns_curl
             check_wrapper
             up_head
  ;;
  up-cluster) cmmand="$1"
             second="$2"
             cmmode="$3"
             silent="$4"
             check_root
             check_dns_curl
             check_wrapper
             up_cluster
  ;;
  up-modern) cmmand="$1"
             second="$2"
             cmmode="$3"
             silent="$4"
             check_root
             check_dns_curl
             check_wrapper
             up_modern
  ;;
  up-legacy) cmmand="$1"
             second="$2"
             cmmode="$3"
             silent="$4"
             check_root
             check_dns_curl
             check_wrapper
             up_legacy
  ;;
  up-vanilla) cmmand="$1"
             second="$2"
             cmmode="$3"
             silent="$4"
             check_root
             check_dns_curl
             check_wrapper
             up_vanilla
  ;;
  *)         echo
             echo "Usage: $(basename "$0") {up-stable|up-head|up-legacy} {all|o1} {aegir|platforms|both}"
             echo
             clean_pid_exit
  ;;
esac
