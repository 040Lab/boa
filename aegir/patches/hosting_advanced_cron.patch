diff -urp a/hosting_advanced_cron/hosting_advanced_cron.module b/hosting_advanced_cron/hosting_advanced_cron.module
--- a/hosting_advanced_cron/hosting_advanced_cron.module	2012-05-27 13:12:12.000000000 +0100
+++ b/hosting_advanced_cron/hosting_advanced_cron.module	2012-05-27 15:09:14.000000000 +0100
@@ -1,7 +1,7 @@
 <?php
 
 // Use the default cron interval for this site.
-define('HOSTING_ADVANCED_CRON_SITE_DEFAULT', 0);
+define('HOSTING_ADVANCED_CRON_SITE_DEFAULT', 10800);
 
 // Do not run cron for this site.
 define('HOSTING_ADVANCED_CRON_SITE_DISABLED', -1);
@@ -54,19 +54,29 @@ function hosting_advanced_cron_queue($co
 
   foreach ($sites as $site) {
     $site_name = hosting_context_name($site->nid);
-    if (variable_get('hosting_cron_use_backend', TRUE)) {
-      provision_backend_invoke($site_name, "cron");
-    }
-    else {
-      $cmd = sprintf("wget -O - -q %s  > /dev/null", escapeshellarg(_hosting_site_url($site) . '/cron.php'));
-      drush_shell_exec($cmd);
-    }
+    if (!preg_match("/(?:dev\.|devel\.)/", $site_name)) {
+      if (variable_get('hosting_cron_use_backend', TRUE)) {
+        provision_backend_invoke($site_name, "cron");
+      }
+      else {
+        // Optionally add the cron_key querystring key if the site has one.
+        $url =_hosting_site_url($site) . '/cron.php';
+        if (!empty($site->cron_key)) {
+          $url .= '?cron_key=' . rawurlencode($site->cron_key);
+        }
+        $cmd = sprintf("wget -O - -q %s  > /dev/null", escapeshellarg($url));
+        drush_shell_exec($cmd);
+      }
+
+      // We are updating the site table here directly to avoid a possible race condition,
+      // with the task queue. There exists a chance that they might both try to save the
+      // same node at the same time, and then an old record from the cron queue might
+      // replace the newly updated record.
+      db_query("UPDATE {hosting_site} SET last_cron=%d WHERE nid=%d", time(), $site->nid);
 
-    // We are updating the site table here directly to avoid a possible race condition,
-    // with the task queue. There exists a chance that they might both try to save the
-    // same node at the same time, and then an old record from the cron queue might
-    // replace the newly updated record.
-    db_query("UPDATE {hosting_site} SET last_cron = %d WHERE nid = %d", time(), $site->nid);
+      // A small trick to avoid high load when still too many crons are started at once.
+      sleep(5);
+    }
   }
 }
 
@@ -99,7 +109,7 @@ function hosting_advanced_cron_nodeapi(&
         if (!$result) {
           $result = array('cron_interval' => variable_get('hosting_advanced_cron_default_interval', 3600));
         }
-  
+
         return $result;
 
       case 'delete':
@@ -125,8 +135,8 @@ function hosting_advanced_cron_get_sites
     $cron_interval = $site->cron_interval ? $site->cron_interval : variable_get('hosting_advanced_cron_default_interval', 3600);
 
     // Run cron if it has never ran before for this site, or if the cron
-    // interval since last cron run has been exceeded. 
-    if ($cron_interval != HOSTING_ADVANCED_CRON_SITE_DISABLED && (!$site->last_cron || ($site->last_cron + $site->cron_interval < time()))) {
+    // interval since last cron run has been exceeded.
+    if ($cron_interval != HOSTING_ADVANCED_CRON_SITE_DISABLED && (!$site->last_cron || ($site->last_cron + $cron_interval < time()))) {
       $sites[$site->nid] = node_load($site->nid);
     }
   }
@@ -191,9 +201,9 @@ function hosting_advanced_cron_form_site
 function hosting_advanced_cron_interval_options() {
   $options = array(
     HOSTING_ADVANCED_CRON_SITE_DISABLED => t('Disabled'),
-    HOSTING_ADVANCED_CRON_SITE_DEFAULT => t('Default'),
+    HOSTING_ADVANCED_CRON_SITE_DEFAULT => t('3h (default)'),
   );
-  $options += drupal_map_assoc(array(60, 300, 900, 1800, 3600, 21600, 86400), 'format_interval');
+  $options += drupal_map_assoc(array(60, 180, 300, 600, 900, 1800, 3600, 10800, 21600, 43200, 86400), 'format_interval');
 
   return $options;
 }
