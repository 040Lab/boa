#!/bin/bash


###----------------------------------------###
###
###  Barracuda Aegir Installer
###
###  Copyright (C) 2010-2015 Omega8.cc
###  noc@omega8.cc www.omega8.cc
###
###  This program is free software. You can
###  redistribute it and/or modify it under
###  the terms of the GNU GPL as published by
###  the Free Software Foundation, version 2
###  or later.
###
###  This program is distributed in the hope
###  that it will be useful, but WITHOUT ANY
###  WARRANTY; without even the implied
###  warranty of MERCHANTABILITY or FITNESS
###  FOR A PARTICULAR PURPOSE. See the GNU GPL
###  for more details.
###
###  You should have received a copy of the
###  GNU GPL along with this program.
###  If not, see http://www.gnu.org/licenses/
###
###  Code: https://code.aegir.cc/aegir
###
###----------------------------------------###


###----------------------------------------###
### DON'T EDIT ANYTHING BELOW THIS LINE    ###
###----------------------------------------###

###
### Software versions
###
_BZR_VRN=2.6.0
_CGP_VRN=master-30-03-2014
_CHIVE_VRN=1.3
_CURL_VRN=7.40.0
_DB_SRC=ftp.osuosl.org
_DRUSH4_VRN=mini-4-26-08-2014
_DRUSH6_VRN=mini-6-30-10-2014
_DRUSH7_VRN=mini-7-14-01-2015
_GALERA_10_VRN=10.0.15
_GEOS_VRN=3.4.2
_GIT_VRN=2.2.1
_IMAGICK_VRN=3.1.2
_IONCUBE_VRN=4.7.3
_JETTY_7_VRN=7.6.16.v20140903
_JETTY_8_VRN=8.1.16.v20140903
_JETTY_9_VRN=9.2.3.v20140905
_LSHELL_VRN=0.9.16.5-om8
_MAILPARSE_VRN=2.1.6
_MARIADB_10_VRN=10.0.15
_MARIADB_5_VRN=5.5.41
_MONGO_VRN=1.4.5
_MSS_VRN=1.33
_NGINX_VRN=1.7.9
_OPCACHE_VRN=master-08-11-2014
_OPENSSH_VRN=6.7p1
_OPENSSL_VRN=1.0.1j
_PHP53_API=20090626
_PHP53_VRN=5.3.29
_PHP54_API=20100525
_PHP54_VRN=5.4.36
_PHP55_API=20121212
_PHP55_VRN=5.5.20
_PHP56_API=20131226
_PHP56_VRN=5.6.4
_PHPREDIS_VRN=master-03-10-2014
_PURE_FTPD_VRN=1.0.36
_REDIS_VRN=2.8.19
_RUBY_VRN=2.2.0
_SOLR_1_VRN=1.4.1
_SOLR_3_VRN=3.6.2
_SOLR_4_VRN=4.2.0
_UPROGRESS_VRN=1.0.3.1
_VNSTAT_VRN=1.11
_ZLIB_VRN=1.2.8

###
### Default variables
###
_CUSTOM_NAME="nginx"
_DRUSH_VERSION="${_DRUSH7_VRN}"
_FORCE_REDIS_RESTART=NO
_LOC_OSV=""
_NOW=$(date +%y%m%d-%H%M 2>&1)
_PURGE_ALL_THISHTIP=NO
_PURGE_MODE=ON
_SPINNER=YES
PATH=/usr/local/bin:/usr/local/sbin:/opt/local/bin:/usr/bin:/usr/sbin:/bin:/sbin
SHELL=/bin/bash
if [ -n "${STY+x}" ]; then
  _SPINNER=NO
fi

###
### Helper variables
###
aptLiSys="/etc/apt/sources.list"
barCnf="/root/.barracuda.cnf"
bldPth="/opt/tmp/boa"
crlGet="-L --max-redirs 10 -k -s --retry 10 --retry-delay 5 -A iCab"
filIncB="barracuda.sh.cnf"
forCer="-f -y --force-yes --reinstall"
gitHub="git://github.com/omega8cc"
libFnc="${bldPth}/lib/functions"
locCnf="/opt/tmp/boa/aegir/conf"
mtrInc="/var/aegir/config/includes"
mtrNgx="/var/aegir/config/server_master/nginx"
mtrTpl="/var/aegir/.drush/sys/provision/http/Provision/Config/Nginx"
pthLog="/var/xdrago/log"
vBs="/var/backups"

###
### SA variables
###
saCoreN="SA-CORE-2014-005"
saCoreS="${saCoreN}-D7"
saIncDb="includes/database/database.inc"
saPatch="/var/xdrago/conf/${saCoreS}.patch"

###
### Avoid too many questions
###
export DEBIAN_FRONTEND=noninteractive
if [ -z "${TERM+x}" ]; then
  export TERM=vt100
fi

###
### Clean pid files on exit.
###
clean_pid_exit() {
  rm -f /var/run/boa_wait.pid
  rm -f /var/run/boa_run.pid
  service cron start &> /dev/null
  exit 1
}

###
### Panic on missing include.
###
panic_exit() {
  echo
  echo " EXIT: Required lib file not available?"
  echo " EXIT: $1"
  echo " EXIT: Cannot continue"
  echo " EXIT: Bye (0)"
  echo
  clean_pid_exit
}

###
### Include shared functions
###
[ -r "${libFnc}/helper.sh.inc" ]     || panic_exit "helper"
  source "${libFnc}/helper.sh.inc"
[ -r "${libFnc}/dns.sh.inc" ]        || panic_exit "dns"
  source "${libFnc}/dns.sh.inc"
[ -r "${libFnc}/system.sh.inc" ]     || panic_exit "system"
  source "${libFnc}/system.sh.inc"
[ -r "${libFnc}/sql.sh.inc" ]        || panic_exit "sql"
  source "${libFnc}/sql.sh.inc"
[ -r "${libFnc}/redis.sh.inc" ]      || panic_exit "redis"
  source "${libFnc}/redis.sh.inc"
[ -r "${libFnc}/nginx.sh.inc" ]      || panic_exit "nginx"
  source "${libFnc}/nginx.sh.inc"
[ -r "${libFnc}/php.sh.inc" ]        || panic_exit "php"
  source "${libFnc}/php.sh.inc"
[ -r "${libFnc}/master.sh.inc" ]     || panic_exit "master"
  source "${libFnc}/master.sh.inc"
[ -r "${libFnc}/xtra.sh.inc" ]       || panic_exit "xtra"
  source "${libFnc}/xtra.sh.inc"
[ -r "${libFnc}/firewall.sh.inc" ]   || panic_exit "firewall"
  source "${libFnc}/firewall.sh.inc"
[ -r "${libFnc}/hotfix.sh.inc" ]     || panic_exit "hotfix"
  source "${libFnc}/hotfix.sh.inc"

###--------------------###
if [ `whoami` = "root" ]; then
  chmod a+w /dev/null
  if [ ! -e "/dev/fd" ]; then
    if [ -e "/proc/self/fd" ]; then
      rm -rf /dev/fd
      ln -s /proc/self/fd /dev/fd
    fi
  fi
  chmod a+rw /dev/null
  rm -f -r /opt/tmp/*
  rm -f -r /tmp/drush_make_tmp*
  rm -f -r /tmp/make_tmp*
  rm -f /tmp/pm-updatecode*
  rm -f /tmp/cache.inc*
  if [ ! -e "/root/.upstart.cnf" ]; then
    service cron stop &> /dev/null
  fi
  touch /var/run/boa_run.pid
  mkdir -p ${pthLog}
  find /etc/[a-z]*\.lock -maxdepth 1 -type f -exec rm -rf {} \; &> /dev/null
  _AWS_TEST_A=$(grep cloudimg /etc/fstab 2>&1)
  _AWS_TEST_B=$(grep cloudconfig /etc/fstab 2>&1)
  if [[ "${_AWS_TEST_A}" =~ "cloudimg" ]] \
    || [[ "${_AWS_TEST_B}" =~ "cloudconfig" ]]; then
    _VMFAMILY="AWS"
  fi
  _VM_TEST=$(uname -a 2>&1)
  if [[ "${_VM_TEST}" =~ beng ]]; then
    _VMFAMILY="VS"
    touch /var/run/cloud_vhost.pid
    if [ -d "/etc/webmin" ]; then
      mrun "dpkg --configure -a" &> /dev/null
      mrun "apt-get clean -qq"   &> /dev/null
      mrun "apt-get update -qq"  &> /dev/null
      mrun "apt-get remove webmin -y --force-yes -qq" &> /dev/null
      mrun "apt-get purge webmin -y --force-yes -qq"  &> /dev/null
      mrun "apt-get autoremove -y --force-yes -qq"    &> /dev/null
      rm -f -r /usr/share/webmin
    fi
    rm -f ${aptLiSys}.d/ksplice.list
    rm -f ${aptLiSys}.d/longview.list
    rm -f ${aptLiSys}.d/webmin.list
  fi
  sleep 1
else
  msg "ERROR: This script should be ran as a root user"
  clean_pid_exit
fi

###
### Include default settings
###
[ -r "${vBs}/${filIncB}" ] || panic_exit "${vBs}/${filIncB}"
  source "${vBs}/${filIncB}"

###
### Restart pdnsd server
###
if [ -d "/var/cache/pdnsd" ]; then
  service pdnsd stop &> /dev/null
  sleep 1
  rm -f /var/cache/pdnsd/pdnsd.cache
  sleep 1
  service pdnsd start &> /dev/null
fi
find_mirror

echo " "
msg "Skynet Agent v.${_X_VERSION} welcomes you aboard!"
echo " "
sleep 3

###--------------------###
if [ ! -z "${_LOCAL_NETWORK_IP}" ]; then
  _LOCAL_NETWORK_IP=${_LOCAL_NETWORK_IP//[^0-9.]/}
fi
if [ ! -z "${_LOCAL_NETWORK_HN}" ]; then
  _LOCAL_NETWORK_HN=${_LOCAL_NETWORK_HN//[^a-zA-Z0-9-.]/}
  _LOCAL_NETWORK_HN=$(echo -n ${_LOCAL_NETWORK_HN} | tr A-Z a-z 2>&1)
fi
if [ ! -z "${_MY_OWNIP}" ]; then
  _MY_OWNIP=${_MY_OWNIP//[^0-9.]/}
fi
if [ ! -z "${_MY_HOSTN}" ]; then
  _MY_HOSTN=${_MY_HOSTN//[^a-zA-Z0-9-.]/}
  _MY_HOSTN=$(echo -n ${_MY_HOSTN} | tr A-Z a-z 2>&1)
fi
if [ ! -z "${_MY_FRONT}" ]; then
  _MY_FRONT=${_MY_FRONT//[^a-zA-Z0-9-.]/}
  _MY_FRONT=$(echo -n ${_MY_FRONT} | tr A-Z a-z 2>&1)
fi
if [ ! -z "${_SMTP_RELAY_HOST}" ]; then
  _SMTP_RELAY_HOST=${_SMTP_RELAY_HOST//[^a-zA-Z0-9-.]/}
  _SMTP_RELAY_HOST=$(echo -n ${_SMTP_RELAY_HOST} | tr A-Z a-z 2>&1)
fi


###--------------------###
if [ -e "/var/aegir/.drush/hostmaster.alias.drushrc.php" ]; then
  _STATUS=UPGRADE
  msg "INFO: UPGRADE"
  barracuda_cnf
  touch /var/run/boa_wait.pid
else
  _STATUS=INIT
  if [ -d "/var/aegir" ]; then
    msg "INFO: FORCED INIT"
    _FULL_FORCE_REINSTALL=YES
  else
    msg "INFO: NORMAL INIT"
  fi
  _ZOMBIE_HOME="${vBs}/zombie/${_X_VERSION}-${_NOW}"
  mkdir -p $_ZOMBIE_HOME
  mv -f /etc/nginx/conf.d/* $_ZOMBIE_HOME/ &> /dev/null
  mv -f /var/aegir $_ZOMBIE_HOME/ &> /dev/null
  mv -f /var/xdrago $_ZOMBIE_HOME/ &> /dev/null
  mv -f /root/.my.cnf $_ZOMBIE_HOME/ &> /dev/null
  mv -f /root/.my.pass.txt $_ZOMBIE_HOME/ &> /dev/null
  cp -af /etc/sudoers $_ZOMBIE_HOME/ &> /dev/null
  sed -i "s/^aegir.*//g" /etc/sudoers &> /dev/null
  deluser aegir &> /dev/null
  rm -f /usr/bin/drush
  if [ ! -z "${_EASY_SETUP}" ] && [[ ! "${_EASY_SETUP}" =~ "NO" ]]; then
    if [ "${_EASY_SETUP}" != "LOCAL" ]; then
      if [ -z "${_EASY_HOSTNAME}" ] \
        || [ "${_EASY_HOSTNAME}" = "wildcard-enabled-hostname" ]; then
        msg "FATAL ERROR: You must define also _EASY_HOSTNAME"
        clean_pid_exit
      fi
    fi
  fi
  if [ "${_EASY_SETUP}" = "LOCAL" ]; then
    msg "INFO: Localhost Setup Mode Active"
    _XTRAS_LIST="CHV"
    _AUTOPILOT=YES
    _DEBUG_MODE=NO
    _DB_SERVER=MariaDB
    _SSH_PORT=22
    _DNS_SETUP_TEST=NO
    _SMTP_RELAY_TEST=NO
    _LOCAL_NETWORK_IP="127.0.1.1"
    _LOCAL_NETWORK_HN="aegir.local"
  elif [ "${_EASY_SETUP}" = "PUBLIC" ]; then
    msg "INFO: Public Setup Mode Active"
    _XTRAS_LIST="CSF CHV FTP"
    _AUTOPILOT=YES
    _DEBUG_MODE=NO
    _DB_SERVER=MariaDB
    _SSH_PORT=22
    _DNS_SETUP_TEST=YES
    _SMTP_RELAY_TEST=YES
    _MY_HOSTN="${_EASY_HOSTNAME}"
    _MY_FRONT="master.${_EASY_HOSTNAME}"
    validate_public_ip &> /dev/null
    _MY_OWNIP="${_THISHTIP}"
  elif [ "${_EASY_SETUP}" = "MSTR" ]; then
    msg "INFO: Cluster Master Mode Active"
    _XTRAS_LIST=""
    _AUTOPILOT=YES
    _DEBUG_MODE=NO
    _DB_SERVER=MariaDB
    _DB_SERIES=10.0
    _SSH_PORT=22
    _DNS_SETUP_TEST=NO
    _SMTP_RELAY_TEST=NO
    _MY_HOSTN="${_EASY_HOSTNAME}"
    _MY_FRONT="master.${_EASY_HOSTNAME}"
    validate_public_ip &> /dev/null
    _MY_OWNIP="${_THISHTIP}"
    if [ ! -e "/root/.mstr.clstr.cnf" ]; then
      touch /root/.mstr.clstr.cnf
    fi
  elif [ "${_EASY_SETUP}" = "WBHD" ]; then
    msg "INFO: Cluster WEB Head Mode Active"
    _XTRAS_LIST=""
    _AUTOPILOT=YES
    _DEBUG_MODE=NO
    _DB_SERVER=MariaDB
    _DB_SERIES=10.0
    _SSH_PORT=22
    _DNS_SETUP_TEST=NO
    _SMTP_RELAY_TEST=NO
    _MY_HOSTN="${_EASY_HOSTNAME}"
    _MY_FRONT="master.${_EASY_HOSTNAME}"
    validate_public_ip &> /dev/null
    _MY_OWNIP="${_THISHTIP}"
    if [ ! -e "/root/.wbhd.clstr.cnf" ]; then
      touch /root/.wbhd.clstr.cnf
    fi
  elif [ "${_EASY_SETUP}" = "DBHD" ]; then
    msg "INFO: Cluster DB Head Mode Active"
    _XTRAS_LIST=""
    _AUTOPILOT=YES
    _DEBUG_MODE=NO
    _DB_SERVER=MariaDB
    _DB_SERIES=10.0
    _SSH_PORT=22
    _DNS_SETUP_TEST=NO
    _SMTP_RELAY_TEST=NO
    _MY_HOSTN="${_EASY_HOSTNAME}"
    _MY_FRONT="master.${_EASY_HOSTNAME}"
    validate_public_ip &> /dev/null
    _MY_OWNIP="${_THISHTIP}"
    if [ ! -e "/root/.dbhd.clstr.cnf" ]; then
      touch /root/.dbhd.clstr.cnf
    fi
  fi
  barracuda_cnf
fi
_INITINS="/usr/bin/apt-get -y --force-yes install"
_INSTALL="/usr/bin/apt-get -y --force-yes --config-file \
  /opt/tmp/apt.conf.noninteractive install"
if [ "${_AEGIR_VERSION}" = "HEAD" ] && [ ! -z "${_FORCE_GIT_MIRROR}" ]; then
  if [ "${_FORCE_GIT_MIRROR}" = "gitorious" ]; then
    _INSTAPP="/usr/bin/aptitude-fast -f -y -q \
      -o Dpkg::Options::=--force-confdef \
      -o Dpkg::Options::=--force-confold install"
  else
    _INSTAPP="/usr/bin/aptitude -f -y -q \
      -o Dpkg::Options::=--force-confdef \
      -o Dpkg::Options::=--force-confold install"
  fi
else
  _INSTAPP="/usr/bin/aptitude -f -y -q \
    -o Dpkg::Options::=--force-confdef \
    -o Dpkg::Options::=--force-confold install"
fi
_SRCDIR=/opt/tmp/files
rm -f -r /var/opt/*
mkdir -p ${_SRCDIR}
chmod -R 777 /opt/tmp &> /dev/null
rm -f /var/run/aegir_upgrade.pid
if [ "${_STRICT_BIN_PERMISSIONS}" = "YES" ]; then
  if [ -x "/bin/dash" ]; then
    symlink_to_dash
    switch_to_dash
  else
    symlink_to_bash
    switch_to_bash
  fi
fi
_PHP_SV=${_PHP_FPM_VERSION//[^0-9]/}
if [ -z "${_PHP_SV}" ] || [ "${_PHP_SV}" = "52" ]; then
  _PHP_SV=55
fi
_PHP_CN="www${_PHP_SV}"


###--------------------###
if [ "${_STATUS}" = "UPGRADE" ]; then
  if [ ! -e "/root/.my.cnf" ]; then
  msg "EXIT on error due to not found file with your ${_DB_SERVER} root password"
  cat <<EOF

  It appears you don't have required file with your root sql password.
  Create this file first and run this script again:

  echo "[client]" > /root/.my.cnf
  echo "user=root" >> /root/.my.cnf
  echo "password=your_SQL_ROOT_password" >> /root/.my.cnf
  chmod 0600 /root/.my.cnf

EOF
  msg "EXIT on error due to not found file with your ${_DB_SERVER} root password"
  clean_pid_exit
  fi
fi


###--------------------###
_THIS_OS=$(lsb_release -si 2>&1)
_THIS_RV=$(lsb_release -sc 2>&1)
if [ "${_THIS_OS}" = "Ubuntu" ]; then
  if [ "$_THIS_RV" = "trusty" ]; then
    _OSV="trusty"
    _DB_SERVER=MariaDB
    _DB_SERIES=10.0
    if [ -e "/root/.mstr.clstr.cnf" ] \
      || [ -e "/root/.wbhd.clstr.cnf" ] \
      || [ -e "/root/.dbhd.clstr.cnf" ]; then
      _MARIADB_VRN="${_GALERA_10_VRN}"
    else
      _MARIADB_VRN="${_MARIADB_10_VRN}"
    fi
  elif [ "$_THIS_RV" = "precise" ]; then
    _OSV="precise"
  elif [ "$_THIS_RV" = "lucid" ]; then
    _OSV="lucid"
  else
    not_supported_os
  fi
elif [ "${_THIS_OS}" = "Debian" ]; then
  if [ "$_THIS_RV" = "wheezy" ]; then
    _OSV="wheezy"
    _DB_SERVER=MariaDB
  elif [ "$_THIS_RV" = "squeeze" ]; then
    _OSV="squeeze"
  elif [ "$_THIS_RV" = "lenny" ]; then
    _OSV="lenny"
    _DB_SERVER=MariaDB
    _DB_SERIES=5.3
    _MARIADB_VRN=5.3.12
  else
    not_supported_os
  fi
else
  not_supported_os
fi
echo " "
thiSys="$(lsb_release -si 2>&1)/$(lsb_release -sc 2>&1) $(uname -m 2>&1)"
thiSys="$(uname -n 2>&1) ${thiSys} PHP ${_PHP_FPM_VERSION}"
msg "Aegir on ${thiSys}"
echo " "


###--------------------###
if [ "${_STATUS}" = "INIT" ]; then
  msg "INFO: Installing some basic tools now, please wait..."
  _BROKEN_KEYRING_TEST=$(apt-get update 2>&1)
  if [[ "$_BROKEN_KEYRING_TEST" =~ "signatures were invalid" ]] \
    || [[ "$_BROKEN_KEYRING_TEST" =~ "GPG error" ]]; then
    msg "WARN: Installed keyring is broken, forced reinstall required"
    if [ "${_THIS_OS}" = "Debian" ]; then
      apt-get install debian-keyring ${forCer} &> /dev/null
      apt-get install debian-archive-keyring ${forCer} &> /dev/null
    else
      apt-get install ubuntu-keyring ${forCer} &> /dev/null
    fi
  fi
  apt-get update &> /dev/null
  ${_INITINS} locales &> /dev/null
  fix_locales
  ${_INITINS} lsb-release &> /dev/null
  ${_INITINS} dnsutils &> /dev/null
  ${_INITINS} netcat &> /dev/null
  ${_INITINS} curl &> /dev/null
  ${_INITINS} wget &> /dev/null
fi


###--------------------###
aptitude autoclean -y &> /dev/null
apt-get clean -qq &> /dev/null
update_sources_list
apt-get update &> /dev/null


###--------------------###
if [ "${_STATUS}" = "INIT" ]; then
  msg "INFO: Installing more basic tools now, please wait..."
  if [ -e "/etc/debian_version" ]; then
    _L_DEB_TEST=$(grep "^5." /etc/debian_version 2>&1)
    if [ ! -z "$_L_DEB_TEST" ]; then
      sed -i "s/^deb.*security.debian.org.*/## security updates no longer \
        available for lenny/g" ${aptLiSys} &> /dev/null
      sed -i "s/ftp.*debian.org/archive.debian.org/g" \
        ${aptLiSys} &> /dev/null
      sed -i "s/volatile.debian.org/archive.debian.org/g" \
        ${aptLiSys} &> /dev/null
    fi
  fi
  apt-get update &> /dev/null
  ${_INITINS} locales &> /dev/null
  fix_locales
  ${_INITINS} git-core &> /dev/null
  ${_INITINS} aptitude &> /dev/null
  ${_INITINS} axel &> /dev/null
fi


###--------------------###
wait_for_connection() {
  echo " "
  msg "I can not connect to github.com on port 9418 at the moment"
  msg "I will try again in 60 seconds, please wait..."
  msg "Waiting for attempt $1..."
  sleep 60
}
check_connection() {
  if ! netcat -w 14 -z github.com 9418 ; then
    wait_for_connection "2/4"
    if ! netcat -w 14 -z github.com 9418 ; then
      wait_for_connection "3/4"
      if ! netcat -w 14 -z github.com 9418 ; then
        wait_for_connection "4/4"
        if ! netcat -w 14 -z github.com 9418 ; then
          echo " "
          msg "Sorry, I gave up."
          msg "EXIT on error due to GitHub git server at 9418 downtime"
          msg "Please try to run this script again in a few minutes"
          msg "You may want to check https://status.github.com/messages"
          msg "Also, make sure that the git port 9418 is open"
          msg "Bye"
          clean_pid_exit
        fi
      fi
    fi
  fi
}

if [ "${_SYSTEM_UPGRADE_ONLY}" = "NO" ] && [ "${_AEGIR_VERSION}" = "HEAD" ]; then
  rm -f -r /opt/tmp/test-*
  check_connection
  _GITHUB_TEST=$(git clone ${gitHub}/provision.git \
    /opt/tmp/test-provision 2>&1)
  if [[ "${_GITHUB_TEST}" =~ "fatal" ]]; then
    echo " "
    msg "EXIT on error (provision) due to GitHub downtime"
    msg "Please try to run this script again in a few minutes"
    msg "You may want to check https://status.github.com/messages"
    msg "Bye"
    rm -f -r /opt/tmp/test-*
    clean_pid_exit
  fi
  _GITHUB_TEST=$(git clone ${gitHub}/hostmaster.git \
    /opt/tmp/test-hostmaster 2>&1)
  if [[ "${_GITHUB_TEST}" =~ "fatal" ]]; then
    echo " "
    msg "EXIT on error (hostmaster) due to GitHub downtime"
    msg "Please try to run this script again in a few minutes"
    msg "You may want to check https://status.github.com/messages"
    msg "Bye"
    rm -f -r /opt/tmp/test-*
    clean_pid_exit
  fi
  rm -f -r /opt/tmp/test-*
fi
if [[ "${_X_VERSION}" =~ "-dev" ]]; then
  rm -f -r /opt/tmp/test-*
  _GITHUB_TEST=$(git clone ${gitHub}/boa.git \
    /opt/tmp/test-boa 2>&1)
  if [[ "${_GITHUB_TEST}" =~ "fatal" ]]; then
    echo " "
    msg "EXIT on error (boa) due to GitHub downtime"
    msg "Please try to run this script again in a few minutes"
    msg "You may want to check https://status.github.com/messages"
    msg "Bye"
    rm -f -r /opt/tmp/test-*
    clean_pid_exit
  fi
  rm -f -r /opt/tmp/test-*
fi


###--------------------###
if ! netcat -w 14 -z ${_DB_SRC} 80 ; then
  echo " "
  msg "EXIT on error due to ${_DB_SRC} downtime"
  msg "Please try to run this script again in a few minutes"
  msg "or better yet, hours"
  msg "Bye"
  clean_pid_exit
fi


###--------------------###
_BOA_REPO_NAME="boa"
_BOA_REPO_GIT_URL="${gitHub}"
_BOA_REPO_GIT_URLX=${_BOA_REPO_GIT_URL//\//\\\/}
if [ "${_AEGIR_VERSION}" = "HEAD" ]; then
  check_git_repos_status
fi


###--------------------###
if [ -d "/usr/share/git-core" ]; then
  chmod 644 /usr/share/git-core/templates/description &> /dev/null
  chmod 644 /usr/share/git-core/templates/hooks/* &> /dev/null
  chmod 644 /usr/share/git-core/templates/info/* &> /dev/null
fi


###--------------------###
if [ "${_DEBUG_MODE}" = "YES" ]; then
  msg "INFO: Downloading little helpers..."
fi
sleep 1
#
# Git clone all
cd /opt/tmp
rm -f -r ${bldPth}
if [ "${_AEGIR_VERSION}" = "HEAD" ]; then
  git clone --branch ${_BRANCH_BOA} \
    ${_BOA_REPO_GIT_URL}/${_BOA_REPO_NAME}.git \
    ${bldPth} &> /dev/null
else
  curl ${crlGet} "${urlStb}/tar/boa-${_X_VERSION}.tar.gz" | tar -xzf -
  _BOA_REPO_NAME="boa"
  _THIS_CNF="${bldPth}/aegir/conf"
fi
#
if [ ! -e "${bldPth}/aegir/helpers/apt.conf.noninteractive" ]; then
  echo " "
  msg "EXIT on error due to missing helpers"
  msg "Please try to run this script again in a few minutes"
  msg "Also, make sure that the git port 9418 is open"
  msg "Bye"
  clean_pid_exit
fi
# Get apt helper
rm -f apt.conf.noninteractive*
cp -af ${bldPth}/aegir/helpers/apt.conf.noninteractive ./
#
# Create tmp stuff
if [ "${_STATUS}" = "INIT" ]; then
  _LOG=${vBs}/barracuda-install-${_NOW}.log
else
  _LOG=${vBs}/barracuda-upgrade-${_NOW}.log
fi
touch ${_LOG}
chmod 600 ${_LOG}
_SILENT=/opt/tmp/silent.log
cd ${_SRCDIR}
#
# Get spinner
rm -f spinner*
cp -af ${bldPth}/aegir/helpers/spinner ./
chmod +x spinner &> /dev/null
#
# Get axelerator
if [ ! -e "/usr/bin/aptitude-fast" ]; then
  git clone ${gitHub}/apt-fast.git /opt/tmp/apt-fast &> /dev/null
  cp -af /opt/tmp/apt-fast/apt-fast /usr/bin/aptitude-fast &> /dev/null
  chmod +x /usr/bin/aptitude-fast &> /dev/null
  cd /opt/tmp
fi


###--------------------###
if [ "${_DEBUG_MODE}" = "YES" ]; then
  msg "INFO: Checking BARRACUDA version..."
fi
if [ "${_AEGIR_VERSION}" = "HEAD" ]; then
  _FILE_VERSION=barracuda-release.txt
else
  _FILE_VERSION=barracuda-version.txt
fi
if [ -e "${locCnf}/${_FILE_VERSION}" ]; then
  _VERSIONS_TEST=$(cat ${locCnf}/${_FILE_VERSION} 2>&1)
  if [[ "${_VERSIONS_TEST}" =~ "-dev" ]]; then
    if [[ "${_VERSIONS_TEST}" =~ "${_X_VERSION}" ]] \
      && [ "${_AEGIR_VERSION}" = "HEAD" ]; then
      _VERSIONS_TEST_RESULT=OK
      if [ "${_DEBUG_MODE}" = "YES" ]; then
        msg "INFO: BARRACUDA version test: OK"
      fi
    else
      _VERSIONS_TEST_RESULT=FAIL
    fi
  else
    if [[ "${_VERSIONS_TEST}" =~ "${_X_VERSION}" ]] \
      && [[ "${_AEGIR_VERSION}" =~ "BOA" ]]; then
      _VERSIONS_TEST_RESULT=OK
      if [ "${_DEBUG_MODE}" = "YES" ]; then
        msg "INFO: BARRACUDA version test: OK"
      fi
    else
      _VERSIONS_TEST_RESULT=FAIL
    fi
  fi
  if [ "${_VERSIONS_TEST_RESULT}" = "FAIL" ]; then
    msg "ERROR: This BARRACUDA version is outdated and will not work correctly"
    msg "Bye"
    clean_pid_exit
  fi
fi
if [ -e "/var/log/barracuda_log.txt" ]; then
  _SERIES_TEST=$(cat /var/log/barracuda_log.txt 2>&1)
  if [[ "${_SERIES_TEST}" =~ "BOA-2.4." ]]; then
    if [[ ! "${_X_VERSION}" =~ "BOA-2.4." ]]; then
      msg "ERROR: Your system has been already upgraded to modern BOA-2.4.x series"
      msg "ERROR: You can not downgrade back to legacy or previous stable BOA version"
      msg "ERROR: Please use barracuda up-stable to upgrade this system"
      msg "Bye"
      clean_pid_exit
    fi
  fi
fi


###--------------------###
if [ "${_STATUS}" = "INIT" ]; then
  if [ ! -z "${_LOCAL_NETWORK_IP}" ]; then
    if [ -z "${_LOCAL_NETWORK_HN}" ]; then
      msg "FATAL ERROR: you must specify also _LOCAL_NETWORK_HN"
      clean_pid_exit
    else
      _DNS_SETUP_TEST=NO
      _SMTP_RELAY_TEST=NO
      _MY_OWNIP="${_LOCAL_NETWORK_IP}"
      _MY_HOSTN="${_LOCAL_NETWORK_HN}"
      _MY_FRONT="${_LOCAL_NETWORK_HN}"
    fi
  fi
fi


###--------------------###
if [ "${_STATUS}" = "INIT" ]; then
  if [ "${_VMFAMILY}" = "AWS" ]; then
    _THIS_DB_HOST=localhost
    _LOC_DOM="${_MY_HOSTN}"
    if [ -z "${_MY_OWNIP}" ]; then
      find_correct_ip
      _MY_OWNIP="${_LOC_IP}"
    else
      _LOC_IP="${_MY_OWNIP}"
    fi
  fi
  _ETH_TEST=$(ifconfig 2>&1)
  if [[ "${_ETH_TEST}" =~ "venet0" ]]; then
    _IFCONFIG="venet0"
  elif [ -e "/proc/bean_counters" ]; then
    _IFCONFIG="venet0"
  else
    _IFCONFIG="eth0"
  fi
  if [ ! -z "${_MY_OWNIP}" ]; then
    if [ ! -z "${_MY_HOSTN}" ]; then
      _S_N=${_MY_HOSTN}
      _S_T=${_S_N#*.*}
      _S_Q=${_S_N%%${_S_T}}
      _S_E=${_S_Q%*.*}
      if [ ! -z "${_LOCAL_NETWORK_HN}" ]; then
        if [ "${_EASY_SETUP}" = "LOCAL" ]; then
          _DO_NOTHING=YES
        else
          sed -i "s/^${_MY_OWNIP}.*//g" /etc/hosts &> /dev/null
          echo "${_MY_OWNIP} ${_MY_HOSTN} chive.${_MY_HOSTN} sqlbuddy.${_MY_HOSTN} \
            cgp.${_MY_HOSTN} $_S_E" >> /etc/hosts
        fi
      fi
      hostname -b ${_MY_HOSTN} ### force our custom FQDN/local hostname
      echo "${_MY_HOSTN}" > /etc/hostname
      echo "${_MY_HOSTN}" > /etc/mailname
    fi
    _THISHTIP="${_MY_OWNIP}"
    _THISHOST="${_MY_HOSTN}"
    _LOC_DOM="${_THISHOST}"
    find_correct_ip
    _THISRDIP="${_LOC_IP}"
    if [ "$_THISRDIP" = "${_THISHTIP}" ]; then
      _FQDNTEST="TRUE"
      _LOC_DOM="${_MY_FRONT}"
      find_correct_ip
      _THEFRDIP="${_LOC_IP}"
      if [ "$_THEFRDIP" = "${_THISHTIP}" ]; then
        _TESTHOST=$(uname -n 2>&1)
        _LOC_DOM="$_TESTHOST"
        find_correct_ip
        _TESTRDIP="${_LOC_IP}"
        if [ "$_TESTRDIP" = "${_THISHTIP}" ]; then
          _FQDNTEST="TRUE"
          hostname -b $_TESTHOST
        else
         _FQDNTEST="FALSE"
        fi
      else
        _FQDNTEST="FALSE"
      fi
    else
      _FQDNTEST="FALSE"
    fi
  else
    _THISHTIP=$(ifconfig ${_IFCONFIG} \
      | grep 'inet addr:' \
      | cut -d: -f2 \
      | awk '{ print $1}' 2>&1)
    if [[ "${_THISHTIP}" =~ "127.0.0." ]]; then
      _THISHTIP=$(ifconfig ${_IFCONFIG}:0 \
        | grep 'inet addr:' \
        | cut -d: -f2 \
        | awk '{ print $1}' 2>&1)
    fi
    _FQDNPROB=$(uname -n 2>&1)
    _FQDNTEST="FALSE"
    _THISHOST=$(uname -n 2>&1)
    if [ ! -z "$_FQDNPROB" ]; then
      _THISHOST=$(uname -n 2>&1)
      _THISHOST=${_THISHOST//[^a-zA-Z0-9-.]/}
      _THISHOST=$(echo -n ${_THISHOST} | tr A-Z a-z 2>&1)
      _LOC_DOM="${_THISHOST}"
      find_correct_ip
      _THISRDIP="${_LOC_IP}"
      if [ "$_THISRDIP" = "${_THISHTIP}" ]; then
        _FQDNTEST="TRUE"
        hostname -b ${_THISHOST}
      else
        _FQDNTEST="FALSE"
        _REVHOSTN=$(host ${_THISHTIP} | cut -d: -f2 | awk '{ print $5}' 2>&1)
        _REVHOSTN=$(echo -n $_REVHOSTN |sed 's/\(.*\)./\1/' 2>&1)
        _REVHOSTN=${_REVHOSTN//[^a-zA-Z0-9-.]/}
        _REVHOSTN=$(echo -n $_REVHOSTN | tr A-Z a-z 2>&1)
        _LOC_DOM="$_REVHOSTN"
        find_correct_ip
        _REVHSTIP="${_LOC_IP}"
        if [ "$_REVHSTIP" = "${_THISHTIP}" ]; then
          hostname -b $_REVHOSTN
          _THISHOST="$_REVHOSTN"
          _FQDNTEST="TRUE"
        else
          _FQDNTEST="FALSE"
        fi
      fi
    else
      _REVHOSTN=$(host ${_THISHTIP} | cut -d: -f2 | awk '{ print $5}' 2>&1)
      _REVHOSTN=$(echo -n $_REVHOSTN |sed 's/\(.*\)./\1/' 2>&1)
      _REVHOSTN=${_REVHOSTN//[^a-zA-Z0-9-.]/}
      _REVHOSTN=$(echo -n $_REVHOSTN | tr A-Z a-z 2>&1)
      _LOC_DOM="$_REVHOSTN"
      find_correct_ip
      _REVHSTIP="${_LOC_IP}"
      if [ "$_REVHSTIP" = "${_THISHTIP}" ]; then
        hostname -b $_REVHOSTN
        _THISHOST="$_REVHOSTN"
        _FQDNTEST="TRUE"
      else
       _FQDNTEST="FALSE"
      fi
    fi
  fi
  if [ ! -z "${_MY_FRONT}" ]; then
    _THIS_FRONT="${_MY_FRONT}"
  else
    _THIS_FRONT="${_THISHOST}"
  fi
  if [ "${_DNS_SETUP_TEST}" = "NO" ]; then
    _FQDNTEST=TRUE
  fi
  if [ "${_THISHOST}" = "localhost" ]; then
    msg "FATAL ERROR: you can't use localhost as your FQDN hostname"
    msg "Please try something like: aegir.local"
    clean_pid_exit
  fi
  if [ "$_FQDNTEST" = "FALSE" ]; then
    echo " "
    msg "EXIT on error due to invalid DNS setup"
    if [ ! -z "${_MY_OWNIP}" ]; then
      cat <<EOF

  * Your custom _MY_OWNIP is set to "${_MY_OWNIP}"
  * Your custom _MY_HOSTN is set to "${_MY_HOSTN}"
  * Your custom _MY_FRONT is set to "${_MY_FRONT}"

  * Your _MY_HOSTN and/or _MY_FRONT doesn't match your _MY_OWNIP,
    or your hostname is not set properly yet.

  * Please make sure that below command returns your FQDN hostname "${_MY_HOSTN}":

  $ uname -n

EOF
    fi
    cat <<EOF

  Your server needs a working FQDN hostname pointing to its IP address.
  This means that you have to configure DNS for your hostname before
  trying to install BOA. Reverse DNS is not required, though.
  Make sure that DNS A record for ${_THISHOST} points to ${_THISHTIP} and
  then allow some time for DNS propagation before trying this again.
  Alternatively, disable this check with _DNS_SETUP_TEST=NO

EOF
    msg "EXIT on error due to invalid DNS setup"
    clean_pid_exit
  else
    echo "${_THISHOST}" > /etc/hostname
    echo "${_THISHOST}" > /etc/mailname
    hostname -b ${_THISHOST}
    msg "INFO: DNS test: OK"
  fi
  echo " "
  msg "INSTALL START -> checkpoint: "
  cat <<EOF

  * Your e-mail address is ${_MY_EMAIL}
  * Your IP address is ${_THISHTIP}
  * Your hostname is ${_THISHOST}
EOF
  echo " "
  if prompt_yes_no "Do you want to proceed with the install?" ; then
    true
  else
    echo "Installation aborted by you"
    clean_pid_exit
  fi
else ### if [ "${_STATUS}" = "UPGRADE" ]; then
  _THISHOST=$(cat /etc/hostname 2>&1)
  _THISHOST=$(echo -n ${_THISHOST} | tr -d "\n" 2>&1)
  _THISHOST=${_THISHOST//[^a-zA-Z0-9-.]/}
  _THISHOST=$(echo -n ${_THISHOST} | tr A-Z a-z 2>&1)
  if [ -e "/var/aegir/.drush/hostmaster.alias.drushrc.php" ]; then
    _THIS_FRONT=$(cat /var/aegir/.drush/hostmaster.alias.drushrc.php \
      | grep "uri'" \
      | cut -d: -f2 \
      | awk '{ print $3}' \
      | sed "s/[\,']//g" 2>&1)
  elif [ ! -z "${_MY_FRONT}" ]; then
    _THIS_FRONT="${_MY_FRONT}"
  else
    msg "EXIT on error due to not found or not specified Aegir domain"
    msg "Please specify your working Aegir domain as a value of _MY_FRONT"
    clean_pid_exit
  fi
  if [ "${_DEBUG_MODE}" = "YES" ]; then
    echo " "
    msg "UPGRADE START -> checkpoint: "
    cat <<EOF

  * Your e-mail address is ${_MY_EMAIL}
  * Your server hostname is ${_THISHOST}
  * Your Aegir control panel URL is https://${_THIS_FRONT}
EOF
    echo " "
  fi
  if [ "${_DEBUG_MODE}" = "YES" ]; then
    if prompt_yes_no "Do you want to proceed with the upgrade?" ; then
      true
    else
      echo "Upgrade aborted by you"
      clean_pid_exit
    fi
  fi
fi


###--------------------###
if [ "${_DEBUG_MODE}" = "YES" ]; then
  msg "INFO: Cleaning up temp files in /var/opt/"
fi
rm -f -r /var/opt/*
mkdir -p /var/log/php
chmod 777 /var/log/php* &> /dev/null
mkdir -p ${vBs}/dragon/{x,z,t}


###--------------------###
msg "INFO: Installing extra Drush versions..."
get_drush_versions


###--------------------###
if [ "${_STATUS}" = "UPGRADE" ]; then
  if [[ "${_X_VERSION}" =~ "2.2.2" ]]; then
    cp -af /etc/ssl/private/nginx-wild-ssl.crt \
      /etc/ssl/private/pre-2.2.2-nginx-wild-ssl.crt
    cp -af /etc/ssl/private/nginx-wild-ssl.key \
      /etc/ssl/private/pre-2.2.2-nginx-wild-ssl.key
    openssl req -x509 -nodes -days 7300 \
            -subj "/C=US/ST=New York/O=Aegir/OU=Cloud/L=New York/CN=*.${_THISHOST}" \
            -newkey rsa:4096 -keyout /etc/ssl/private/nginx-wild-ssl.key \
            -out /etc/ssl/private/nginx-wild-ssl.crt -batch 2> /dev/null
    sed -i "s/.*variables_hash_max_size .*//g" ${mtrNgx}.conf &> /dev/null
    sed -i "s/fastcgi_temp_file_write_size .*/fastcgi_temp_file_write_size  \
      256k;\n  variables_hash_max_size       1024;/g" ${mtrNgx}.conf  &> /dev/null
    mrun "service nginx restart" &> /dev/null
  fi
  if [ "${_AEGIR_UPGRADE_ONLY}" = "YES" ] \
    && [ "${_SYSTEM_UPGRADE_ONLY}" = "NO" ]; then
    echo " "
    upgrade_aegir_master
    mrun "sleep 8"
    mrun "service nginx reload" &> /dev/null
    finale
    exit 0
  fi
fi


###--------------------###
if [ -e "/etc/init.d/buagent" ]; then
  mv -f /etc/init.d/buagent \
    ${vBs}/buagent-pre-${_X_VERSION}-${_NOW} &> /dev/null
fi


###--------------------###
if [ "${_SQUEEZE_TO_WHEEZY}" = "YES" ] \
  && [ "${_LOC_OSV}" = "squeeze" ]; then
  msg "WARN: Squeeze to Wheezy upgrade will start in 60 seconds..."
  msg "WARN: Now pray it will work... or hit ctrl-c to stop now!"
  if [ ! -e "/root/.upstart.cnf" ]; then
    service cron stop &> /dev/null
    mrun "sleep 60"
  fi
  check_dns_settings
  if [ "${_USE_PROVIDER_DNS}" = "NO" ]; then
    mv -f /etc/resolv.conf /etc/resolv.conf.pre-dist-upgrade
    echo "nameserver 8.8.8.8" >/etc/resolv.conf
    echo "nameserver 8.8.4.4" >>/etc/resolv.conf
    cat /etc/resolv.conf.pre-dist-upgrade >>/etc/resolv.conf
  fi
  mv -f /var/xdrago /var/xdrago_wait &> /dev/null
  mv -f /var/xdrago /var/xdrago_wait &> /dev/null
  msg "WARN: Too late! Squeeze to Wheezy upgrade in progress..."
  msg "HINT: Run tail -f ${_LOG}"
  msg "HINT: in another terminal window to watch details"
  _FULL_FORCE_REINSTALL=YES
  _PURGE_MODE=OFF
  rm -f ${mtrNgx}/pre.d/nginx_speed_purge.conf
  if [ -e "/etc/init.d/bind" ]; then
    rm -f /etc/init.d/bind
  fi
  if [ -e "/etc/default/tomcat" ] && [ -e "/etc/init.d/tomcat" ]; then
    service tomcat stop &> /dev/null
    mv /etc/init.d/tomcat /etc/init.d/offtomcat
    kill -9 $(ps aux | grep '[t]omcat' | awk '{print $2}') &> /dev/null
  fi
  echo "curl install" | dpkg --set-selections &> /dev/null
  echo "libssl-dev install" | dpkg --set-selections &> /dev/null
  echo "openssh-client install" | dpkg --set-selections &> /dev/null
  echo "openssh-server install" | dpkg --set-selections &> /dev/null
  echo "openssl install" | dpkg --set-selections &> /dev/null
  echo "ssh install" | dpkg --set-selections &> /dev/null
  echo "zlib1g install" | dpkg --set-selections &> /dev/null
  echo "zlib1g-dev install" | dpkg --set-selections &> /dev/null
  echo "zlibc install" | dpkg --set-selections &> /dev/null
  mrun "apt-get remove collectd -y --force-yes -qq" &> /dev/null
  if [ -e "/etc/php5/conf.d" ]; then
    touch /etc/php5/conf.d/{opcache.ini,apc.ini,imagick.ini,memcached.ini}
    touch /etc/php5/conf.d/{redis.ini,suhosin.ini,newrelic.ini}
  fi
  mrun "aptitude remove php5 \
                        php5-cgi \
                        php5-curl \
                        php5-fpm \
                        php5-gd \
                        php5-geoip \
                        php5-gmp \
                        php5-imagick \
                        php5-imap \
                        php5-ldap \
                        php5-mcrypt \
                        php5-memcache \
                        php5-mysql \
                        php5-sqlite \
                        php5-xmlrpc \
                        php5-xsl -y" &> /dev/null
  mrun "apt-get autoremove -y --force-yes -qq" &> /dev/null
  mrun "aptitude remove phpunit php-pear php-benchmark -y" &> /dev/null
  mrun "aptitude remove php5-cli php5-common -y" &> /dev/null
  mrun "aptitude remove php5-apc -y" &> /dev/null
  mrun "aptitude remove php-apc -y" &> /dev/null
  if [ -e "/etc/php5/conf.d" ]; then
    rm -f /etc/php5/conf.d/{opcache.ini,imagick.ini,memcached.ini}
    rm -f /etc/php5/conf.d/{apc.ini,redis.ini,suhosin.ini,newrelic.ini}
  fi
  mrun "apt-get purge svscan -y" &> /dev/null
  mrun "apt-get purge pound -y" &> /dev/null
  mrun "apt-get update -y --force-yes" &> /dev/null
  mrun "apt-get autoremove -y --force-yes -qq" &> /dev/null
  mrun "apt-get install apt dpkg aptitude -f -y --force-yes -q \
    --config-file /opt/tmp/apt.conf.noninteractive" 2> /dev/null
  mrun "apt-get dist-upgrade -f -y --force-yes -q \
    --config-file /opt/tmp/apt.conf.noninteractive" 2> /dev/null
  install_upgrade_nginx
  if [ -e "/etc/init.d/bind9" ] && [ ! -e "/etc/init.d/bind" ]; then
    ln -sf /etc/init.d/bind9 /etc/init.d/bind
  fi
  if [ -d "/var/www/cgp" ]; then
    st_runner "apt-get install collectd -y --force-yes" 2> /dev/null
  fi
  _L_VM_TEST=$(uname -a 2>&1)
  if [[ "${_L_VM_TEST}" =~ beng ]]; then
    _REMOVE_LINKS="halt \
                   hwclock.sh \
                   hwclockfirst.sh \
                   ifupdown \
                   ifupdown-clean \
                   klogd \
                   mountall-bootclean.sh \
                   mountall.sh \
                   mountdevsubfs.sh \
                   mountkernfs.sh \
                   mountnfs-bootclean.sh \
                   mountnfs.sh \
                   mountoverflowtmp \
                   mountvirtfs \
                   mtab.sh \
                   networking \
                   reboot \
                   setserial \
                   umountfs \
                   umountnfs.sh \
                   umountroot \
                   urandom"
    for link in ${_REMOVE_LINKS}; do
      update-rc.d -f $link remove &> /dev/null
    done
  fi
  mrun "dpkg --configure --force-all -a" 2> /dev/null
  mrun "apt-get update -y" 2> /dev/null
  mrun "dpkg --configure --force-all -a" 2> /dev/null
  mrun "apt-get install aptitude ${forCer}" 2> /dev/null
  mrun "apt-get install util-linux ${forCer}" 2> /dev/null
  mrun "aptitude full-upgrade -f -y -q -o Dpkg::Options::=--force-confdef \
        -o Dpkg::Options::=--force-confold --allow-unauthenticated" 2> /dev/null
  echo rotate > /var/log/syslog &> /dev/null
  mv -f /var/xdrago_wait /var/xdrago &> /dev/null
  msg "INFO: No errors? Then Squeeze to Wheezy upgrade was successful - congrats!"
  msg "HINT: Please remember to reboot when Barracuda will complete all upgrades"
fi


###--------------------###
if [ "${_LENNY_TO_SQUEEZE}" = "YES" ] && [ "${_LOC_OSV}" = "lenny" ]; then
  _FULL_FORCE_REINSTALL=YES
  msg "WARN: Lenny to Squeeze upgrade will start in 60 seconds..."
  msg "WARN: Now pray it will work... or hit ctrl-c to stop now!"
  if [ ! -e "/root/.upstart.cnf" ]; then
    service cron stop &> /dev/null
    mrun "sleep 60"
  fi
  check_dns_settings
  if [ "${_USE_PROVIDER_DNS}" = "NO" ]; then
    mv -f /etc/resolv.conf /etc/resolv.conf.pre-dist-upgrade
    echo "nameserver 8.8.8.8" >/etc/resolv.conf
    echo "nameserver 8.8.4.4" >>/etc/resolv.conf
    cat /etc/resolv.conf.pre-dist-upgrade >>/etc/resolv.conf
  fi
  mv -f /var/xdrago /var/xdrago_wait &> /dev/null
  msg "WARN: Too late! Lenny to Squeeze upgrade in progress..."
  msg "HINT: Run tail -f ${_LOG}"
  msg "HINT: in another terminal window to watch details"
  if [ -e "/etc/init.d/bind" ]; then
    rm -f /etc/init.d/bind
  fi
  if [ -e "/etc/default/tomcat" ] && [ -e "/etc/init.d/tomcat" ]; then
    service tomcat stop &> /dev/null
    mv /etc/init.d/tomcat /etc/init.d/offtomcat
    kill -9 $(ps aux | grep '[t]omcat' | awk '{print $2}') &> /dev/null
  fi
  mrun "apt-get remove collectd -y --force-yes -qq" &> /dev/null
  mrun "apt-get remove libc-client2007b-dev -y --force-yes -qq" &> /dev/null
  mrun "apt-get purge svscan -y" &> /dev/null
  mrun "apt-get purge pound -y" &> /dev/null
  if [[ "${_L_VM_TEST}" =~ beng ]]; then
    mrun "apt-get remove udev -y --force-yes -qq" &> /dev/null
  fi
  mrun "apt-get remove lsb-release -y --force-yes -qq" &> /dev/null
  mrun "apt-get update -y --force-yes" &> /dev/null
  mrun "apt-get autoremove -y --force-yes -qq" &> /dev/null
  mrun "apt-get install apt dpkg aptitude -f -y --force-yes -q \
    --config-file /opt/tmp/apt.conf.noninteractive" 2> /dev/null
  mrun "apt-get dist-upgrade -f -y --force-yes -q \
    --config-file /opt/tmp/apt.conf.noninteractive" 2> /dev/null
  mrun "apt-get install libgeoip1 libgeoip-dev geoip-database \
    -y --force-yes" 2> /dev/null
  check_install_latest_git
  install_upgrade_nginx
  if [ -e "/etc/init.d/bind9" ] && [ ! -e "/etc/init.d/bind" ]; then
    ln -sf /etc/init.d/bind9 /etc/init.d/bind
  fi
  if [ -d "/var/www/cgp" ]; then
    mrun "apt-get install collectd -y --force-yes" 2> /dev/null
  fi
  mrun "apt-get install udev lsb-release libc-client2007e-dev \
    -y --force-yes" 2> /dev/null
  _L_VM_TEST=$(uname -a 2>&1)
  if [[ "${_L_VM_TEST}" =~ beng ]]; then
    _REMOVE_LINKS="halt \
                   hwclock.sh \
                   hwclockfirst.sh \
                   ifupdown \
                   ifupdown-clean \
                   klogd \
                   mountall-bootclean.sh \
                   mountall.sh \
                   mountdevsubfs.sh \
                   mountkernfs.sh \
                   mountnfs-bootclean.sh \
                   mountnfs.sh \
                   mountoverflowtmp \
                   mountvirtfs \
                   mtab.sh \
                   networking \
                   reboot \
                   setserial \
                   umountfs \
                   umountnfs.sh \
                   umountroot \
                   urandom"
    for link in ${_REMOVE_LINKS}; do
      update-rc.d -f $link remove &> /dev/null
    done
  fi
  mrun "aptitude update -y" &> /dev/null
  mrun "dpkg --configure --force-all -a" 2> /dev/null
  mrun "aptitude full-upgrade -f -y -q -o Dpkg::Options::=--force-confdef \
        -o Dpkg::Options::=--force-confold --allow-unauthenticated" 2> /dev/null
  echo rotate > /var/log/syslog &> /dev/null
  mv -f /var/xdrago_wait /var/xdrago &> /dev/null
  msg "INFO: No errors? Then Lenny to Squeeze upgrade was successful - congrats!"
  msg "HINT: Please remember to reboot when Barracuda will complete all upgrades"
fi


###--------------------###
if [ -d "/etc/webmin" ]; then
  if [ ! -e "${pthLog}/webmin_update_apt_src.log" ]; then
    cd /var/opt
    echo "## Webmin APT Repository" > ${aptLiSys}.d/webmin.list
    echo "deb http://download.webmin.com/download/repository \
      sarge contrib" | fmt -su -w 2500 >> ${aptLiSys}.d/webmin.list
    echo "deb http://webmin.mirror.somersettechsolutions.co.uk/repository \
      sarge contrib" | fmt -su -w 2500 >> ${aptLiSys}.d/webmin.list
    _KEYS_SERVER_TEST=FALSE
    until [[ "$_KEYS_SERVER_TEST" =~ "GnuPG" ]]; do
      rm -f jcameron-key.asc*
      wget -q -U iCab ${urlDev}/jcameron-key.asc
      _KEYS_SERVER_TEST=$(grep GnuPG jcameron-key.asc 2>&1)
      sleep 2
    done
    cat jcameron-key.asc | apt-key add - &> /dev/null
    rm -f jcameron-key.asc*
    touch ${pthLog}/webmin_update_apt_src.log
  fi
fi


###--------------------###
msg "INFO: Running system packages update..."
if [ "${_OSV}" = "lenny" ]; then
  sed -i "s/^deb.*security.debian.org.*/## security updates no longer \
    available for lenny/g" ${aptLiSys} &> /dev/null
  sed -i "s/ftp.*debian.org/archive.debian.org/g" \
    ${aptLiSys} &> /dev/null
  sed -i "s/volatile.debian.org/archive.debian.org/g" \
    ${aptLiSys} &> /dev/null
  st_runner "aptitude autoclean -y" &> /dev/null
  st_runner "apt-get clean -qq" &> /dev/null
else
  st_runner "dpkg --configure --force-all -a" 2> /dev/null
fi
_BROKEN_KEYRING_TEST=$(apt-get update 2>&1)
if [[ "$_BROKEN_KEYRING_TEST" =~ "signatures were invalid" ]] \
  || [[ "$_BROKEN_KEYRING_TEST" =~ "GPG error" ]]; then
  msg "WARN: Installed keyring is broken, forced reinstall required"
  if [ "${_THIS_OS}" = "Debian" ]; then
    st_runner "apt-get install debian-keyring ${forCer}" 2> /dev/null
    st_runner "apt-get install debian-archive-keyring ${forCer}" 2> /dev/null
  else
    st_runner "apt-get install ubuntu-keyring ${forCer}" 2> /dev/null
  fi
fi
st_runner "aptitude update -y" &> /dev/null
_DB_SERVER_TEST=$(mysql -V 2>&1)
if [ "${_STATUS}" = "INIT" ]; then
  st_runner "aptitude full-upgrade -f -y -q \
    -o Dpkg::Options::=--force-confdef \
    -o Dpkg::Options::=--force-confold" 2> /dev/null
  st_runner "aptitude update -y" &> /dev/null
  st_runner "aptitude full-upgrade -f -y -q \
    -o Dpkg::Options::=--force-confdef \
    -o Dpkg::Options::=--force-confold" 2> /dev/null
  st_runner "aptitude autoclean -y" &> /dev/null
else
  echo "gnupg-curl install" | dpkg --set-selections &> /dev/null
  if [ -e "/etc/php5/conf.d" ]; then
    touch /etc/php5/conf.d/{opcache.ini,apc.ini,imagick.ini,memcached.ini}
    touch /etc/php5/conf.d/{redis.ini,suhosin.ini,newrelic.ini}
  fi
  st_runner "aptitude remove php5 \
                             php5-cgi \
                             php5-curl \
                             php5-fpm \
                             php5-gd \
                             php5-geoip \
                             php5-gmp \
                             php5-imagick \
                             php5-imap \
                             php5-ldap \
                             php5-mcrypt \
                             php5-memcache \
                             php5-mysql \
                             php5-sqlite \
                             php5-xmlrpc \
                             php5-xsl -y" &> /dev/null
  st_runner "apt-get autoremove -y --force-yes -qq" &> /dev/null
  st_runner "aptitude remove phpunit php-pear php-benchmark -y" &> /dev/null
  st_runner "aptitude remove php5-cli php5-common -y" &> /dev/null
  st_runner "aptitude remove php5-apc -y" &> /dev/null
  st_runner "aptitude remove php-apc -y" &> /dev/null
  if [ -e "/etc/php5/conf.d" ]; then
    rm -f /etc/php5/conf.d/{opcache.ini,apc.ini,imagick.ini,memcached.ini}
    rm -f /etc/php5/conf.d/{redis.ini,suhosin.ini,newrelic.ini}
  fi
  if [ "${_OSV}" = "squeeze" ]; then
    if [ -e "${aptLiSys}.d/dotdeb.list" ]; then
      rm -f ${aptLiSys}.d/dotdeb.list
      st_runner "aptitude autoclean -y" &> /dev/null
      st_runner "apt-get clean -qq" &> /dev/null
      st_runner "apt-get update -y --force-yes" &> /dev/null
    fi
  fi
  rm -f /var/lib/mysql/debian-*.flag &> /dev/null
  _KEYS_SERVER_TEST=FALSE
  if [ ! -e "/root/.upstart.cnf" ]; then
    service cron stop &> /dev/null
  fi
  if [ -e "/usr/sbin/csf" ] && [ -e "/etc/csf/csf.deny" ]; then
    csf -x &> /dev/null
  fi
  until [[ "$_KEYS_SERVER_TEST" =~ "MariaDB" ]]; do
    _KEYS_SERVER_TEST=$(apt-key adv --recv-keys \
      --keyserver hkp://keyserver.ubuntu.com:80 1BB943DB 2>&1)
    sleep 2
  done
  _UP_JDK=NO
  _UP_LNX=NO
  _UP_NRC=NO
  _UP_PHP=NO
  check_apt_updates
fi


###--------------------###
if [ "${_STATUS}" = "INIT" ]; then
  msg "INFO: Installing required libraries and tools, please wait..."
else
  msg "INFO: Upgrading required libraries and tools..."
  if [ ! -e "/etc/init.d/php5-fpm" ]; then
    cp -af ${locCnf}/php5-fpm-init-vanilla /etc/init.d/php5-fpm
  fi
fi
if [ "${_STATUS}" = "INIT" ]; then
  if [[ "${_XTRAS_LIST}" =~ "SR" ]] \
    || [[ "${_THISHOST}" =~ ".host8." ]] \
    || [ -e "/root/.auto.up.cnf" ] \
    || [ -e "/root/.host8.cnf" ]; then
    if [ "${_OSV}" = "wheezy" ] \
      || [ "${_OSV}" = "trusty" ] \
      || [ "${_OSV}" = "precise" ]; then
      _APT_XTRA="openjdk-7-jre-headless openjdk-6-jre-headless nginx"
    else
      _APT_XTRA="openjdk-6-jre-headless nginx"
    fi
  else
    _APT_XTRA="nginx"
  fi
  _APT_ELSE="netcat nginx"
else
  _APT_ITEM=$(dpkg --get-selections | grep openjdk-6-jdk | grep install 2>&1)
  if [[ "$_APT_ITEM" =~ "install" ]]; then
    mrun "apt-get remove openjdk-6-jdk -y --force-yes -qq" &> /dev/null
    mrun "apt-get purge openjdk-6-jdk -y --force-yes -qq" &> /dev/null
    mrun "apt-get autoremove -y --force-yes -qq" &> /dev/null
  fi
  _APT_ITEM=$(dpkg --get-selections | grep openjdk-7-jdk | grep install 2>&1)
  if [[ "$_APT_ITEM" =~ "install" ]]; then
    mrun "apt-get remove openjdk-7-jdk -y --force-yes -qq" &> /dev/null
    mrun "apt-get purge openjdk-7-jdk -y --force-yes -qq" &> /dev/null
    mrun "apt-get autoremove -y --force-yes -qq" &> /dev/null
  fi
  if [[ "${_XTRAS_LIST}" =~ "SR" ]] \
    || [[ "${_THISHOST}" =~ ".host8." ]] \
    || [ -e "/root/.auto.up.cnf" ] \
    || [ -e "/root/.host8.cnf" ]; then
    if [ "${_OSV}" = "wheezy" ] \
      || [ "${_OSV}" = "trusty" ] \
      || [ "${_OSV}" = "precise" ]; then
      _APT_XTRA="openjdk-7-jre-headless openjdk-6-jre-headless"
    else
      _APT_XTRA="openjdk-6-jre-headless"
    fi
  else
    _APT_XTRA=""
  fi
  _APT_ELSE="netcat"
  _BROKEN_KEYRING_TEST=$(apt-get update 2>&1)
  if [[ "$_BROKEN_KEYRING_TEST" =~ "signatures were invalid" ]] \
    || [[ "$_BROKEN_KEYRING_TEST" =~ "GPG error" ]]; then
    msg "WARN: Installed keyring is broken, forced reinstall required"
    if [ "${_THIS_OS}" = "Debian" ]; then
      st_runner "apt-get install debian-keyring ${forCer}" 2> /dev/null
      st_runner "apt-get install debian-archive-keyring ${forCer}" 2> /dev/null
    else
      st_runner "apt-get install ubuntu-keyring ${forCer}" 2> /dev/null
    fi
  fi
  mrun "apt-get -f install -qq"                         &> /dev/null
  mrun "service nginx start"                            &> /dev/null
  mrun "apt-get remove nginx-extras -y --force-yes -qq" &> /dev/null
  mrun "apt-get remove nginx -y --force-yes -qq"        &> /dev/null
  mrun "apt-get remove nginx-common -y --force-yes -qq" &> /dev/null
  mrun "apt-get remove nginx-full -y --force-yes -qq"   &> /dev/null
  mrun "apt-get remove redis-server -y --force-yes -qq" &> /dev/null
  st_runner "apt-get autoremove -y --force-yes -qq"     &> /dev/null
  st_runner "apt-get update -y --force-yes"             &> /dev/null
fi
_EXTRA_LIB_APT="libmcrypt-dev"
if [ ! -z "${_EXTRA_PACKAGES}" ]; then
  _EXTRA_PACKAGES="screen ${_EXTRA_PACKAGES}"
else
  _EXTRA_PACKAGES="screen"
fi
_ETH_TEST=$(ifconfig 2>&1)
_VM_TEST=$(uname -a 2>&1)
if [[ "${_ETH_TEST}" =~ "venet0" ]] || [ -e "/proc/bean_counters" ]; then
  _IS_VZ=YES
else
  _IS_VZ=NO
fi
if [ "$_IS_VZ" = "YES" ] \
  || [ -e "/root/.use.sysklogd.cnf" ] \
  || [ "${_OSV}" = "trusty" ] \
  || [ "${_OSV}" = "precise" ]; then
  _SYSLOGD=sysklogd
   mrun "apt-get purge rsyslog -y" &> /dev/null
   mrun "killall -9 rsyslogd" &> /dev/null
else
  _SYSLOGD=rsyslog
fi
if [ "${_NGINX_SPDY}" = "YES" ] \
  || [ "${_SSL_FROM_SOURCES}" = "YES" ] \
  || [ "${_NGINX_FORWARD_SECRECY}" = "YES" ]; then
  if [ "${_OSV}" = "wheezy" ] \
    || [ "${_OSV}" = "trusty" ] \
    || [ "${_OSV}" = "precise" ]; then
    _SSB_SRC=NO
  else
    _SSB_SRC=YES
  fi
else
  _SSB_SRC=NO
fi
if [ "$_SSB_SRC" = "YES" ]; then
  _EXTRA_PACKAGES="libcurl4-openssl-dev \
                   ${_EXTRA_PACKAGES}"
else
  _EXTRA_PACKAGES="curl \
                   libcurl4-openssl-dev \
                   ${_EXTRA_PACKAGES}"
fi
if [ "${_OSV}" = "trusty" ]; then
  _EXTRA_PACKAGES="libgd2-noxpm-dev \
                   libgd2-xpm-dev \
                   libgd2-dev \
                   libgd3 \
                   libxpm-dev \
                   ${_EXTRA_PACKAGES}"
else
  _EXTRA_PACKAGES="libgd2-xpm \
                   ${_EXTRA_PACKAGES}"
fi

if [[ "_XTRAS_LIST" =~ "IMG" ]]; then
  _EXTRA_PACKAGES="advancecomp \
                   jpegoptim \
                   libjpeg-progs \
                   optipng \
                   pngcrush \
                   pngquant \
                   ${_EXTRA_PACKAGES}"
fi

if [ "${_OSV}" = "wheezy" ] \
  || [ "${_OSV}" = "squeeze" ] \
  || [ "${_OSV}" = "trusty" ] \
  || [ "${_OSV}" = "precise" ] \
  || [ "${_OSV}" = "lucid" ]; then
  _DEBDEPS="apticron \
            $_APT_XTRA \
            $_EXTRA_LIB_APT \
            ${_EXTRA_PACKAGES} \
            $_SYSLOGD \
            aptitude \
            auditd \
            autoconf2.13 \
            automake \
            automake1.4 \
            autotools-dev \
            bc \
            bison \
            build-essential \
            catdoc \
            cron \
            cvs \
            cython \
            defoma \
            devscripts \
            dnsutils \
            dstat \
            flex \
            fontconfig-config \
            geoip-database \
            gettext \
            ghostscript \
            gnupg \
            gnupg-curl \
            gnupg2 \
            htop \
            ifstat \
            imagemagick \
            iptables \
            ldap-utils \
            lemon \
            lftp \
            libapr1 \
            libaprutil1 \
            libc-client-dev \
            libc-client2007e \
            libc-client2007e-dev \
            libfilesys-diskspace-perl \
            libfontconfig1 \
            libfreetype6 \
            libfreetype6-dev \
            libfribidi0 \
            libgeoip-dev \
            libgeoip1 \
            libgmp3-dev \
            libhtml-template-perl \
            libjpeg-dev \
            libjpeg62 \
            libmagickwand-dev \
            libnet-daemon-perl \
            libpam-umask \
            libpam-unix2 \
            libpcre3 \
            libpcre3-dev \
            libplrpc-perl \
            libpng12-0 \
            libpng12-dev \
            libpq5 \
            libsasl2-modules \
            libssl-dev \
            libt1-5 \
            libt1-dev \
            libterm-readkey-perl \
            libtool \
            libwww-perl \
            libxcrypt1 \
            libxml2-dev \
            libxpm4 \
            libxslt-dev \
            libxslt1-dbg \
            libxslt1-dev \
            libxslt1.1 \
            m4 \
            makepasswd \
            mc \
            mcrypt \
            nano \
            ncurses-dev \
            ncurses-term \
            netcat \
            ntpdate \
            p7zip-full \
            pdftk \
            postfix \
            postfix-pcre \
            pwgen \
            python-dev \
            python-software-properties \
            re2c \
            rrdtool \
            rsync \
            s3cmd \
            shtool \
            sipcalc \
            ssh \
            ssl-cert \
            subversion \
            sudo \
            symlinks \
            sysstat \
            sysvinit-utils \
            t1lib-bin \
            telnet \
            time \
            ttf-dejavu \
            ttf-dejavu-core \
            ttf-dejavu-extra \
            udev \
            unrtf \
            unzip \
            vim \
            whois \
            xml-core \
            xml2 \
            xpdf \
            zip \
            zlib1g-dev \
            zlibc"
elif [ "${_OSV}" = "lenny" ]; then
  _DEBDEPS="apticron \
            $_APT_ELSE \
            $_EXTRA_LIB_APT \
            ${_EXTRA_PACKAGES} \
            $_SYSLOGD \
            aptitude \
            auditd \
            autoconf2.13 \
            automake \
            automake1.4 \
            autotools-dev \
            bc \
            bison \
            build-essential \
            catdoc \
            cron \
            cvs \
            cython \
            defoma \
            devscripts \
            dnsutils \
            dstat \
            flex \
            fontconfig-config \
            gettext \
            ghostscript \
            gnupg \
            gnupg-curl \
            gnupg2 \
            htop \
            ifstat \
            imagemagick \
            iptables \
            ldap-utils \
            lemon \
            lftp \
            libapr1 \
            libaprutil1 \
            libc-client-dev \
            libc-client2007b \
            libc-client2007b-dev \
            libfilesys-diskspace-perl \
            libfontconfig1 \
            libfreetype6 \
            libfreetype6-dev \
            libfribidi0 \
            libgeoip-dev \
            libgeoip1 \
            libgmp3-dev \
            libhtml-template-perl \
            libjpeg-dev \
            libjpeg62 \
            libmagick9-dev \
            libnet-daemon-perl \
            libpam-umask \
            libpcre3 \
            libpcre3-dev \
            libplrpc-perl \
            libpng12-0 \
            libpng12-dev \
            libpq5 \
            libsasl2-modules \
            libssl-dev \
            libt1-5 \
            libt1-dev \
            libterm-readkey-perl \
            libtool \
            libwww-perl \
            libxml2-dev \
            libxpm4 \
            libxslt-dev \
            libxslt1-dbg \
            libxslt1-dev \
            libxslt1.1 \
            m4 \
            makepasswd \
            mc \
            mcrypt \
            nano \
            ncurses-dev \
            ncurses-term \
            ntpdate \
            openjdk-6-jre-headless \
            p7zip-full \
            pdftk \
            postfix \
            postfix-pcre \
            pwgen \
            python-dev \
            re2c \
            rrdtool \
            rsync \
            shtool \
            sipcalc \
            ssh \
            ssl-cert \
            subversion \
            sudo \
            symlinks \
            sysstat \
            sysvconfig \
            t1lib-bin \
            telnet \
            time \
            ttf-dejavu \
            ttf-dejavu-core \
            ttf-dejavu-extra \
            udev \
            unrtf \
            unzip \
            vim \
            whois \
            xml-core \
            xml2 \
            xpdf \
            zip \
            zlib1g-dev \
            zlibc"
fi

install_with_aptitude_deps() {
  st_runner "$_INSTAPP ${_DEBDEPS}" 2> /dev/null
  if [ -x "/usr/bin/gpg2" ]; then
    _GPG=gpg2
  else
    _GPG=gpg
  fi
  if [[ "${_XTRAS_LIST}" =~ "FMG" ]]; then
    if [ "${_OSV}" = "squeeze" ]; then
      _EXTRA_APT="tree ffmpeg flvtool2 libavcodec52"
    elif [ "${_OSV}" = "lucid" ]; then
      _EXTRA_APT="tree ffmpeg flvtool2 libavcodec-extra-52"
    elif [ "${_OSV}" = "wheezy" ] || [ "${_OSV}" = "trusty" ] \
      || [ "${_OSV}" = "precise" ]; then
      _EXTRA_APT="tree ffmpeg flvtool2 libavcodec-extra-53"
    else
      _EXTRA_APT="tree ffmpeg flvtool2 libavcodec51"
    fi
  else
    _EXTRA_APT="tree"
  fi
  st_runner "apt-get install $_EXTRA_APT -f -y --force-yes -q \
    --config-file /opt/tmp/apt.conf.noninteractive" 2> /dev/null
}
install_mariadb_sql() {
  cd /var/opt
  _KEYS_SERVER_TEST=FALSE
  until [[ "$_KEYS_SERVER_TEST" =~ "MariaDB" ]]; do
    _KEYS_SERVER_TEST=$(apt-key adv --recv-keys \
      --keyserver hkp://keyserver.ubuntu.com:80 1BB943DB 2>&1)
    sleep 2
  done
  if [ "${_OSV}" = "trusty" ]; then
    st_runner "$_INSTAPP software-properties-common" 2> /dev/null
  fi
  if [ "${_THIS_OS}" = "Debian" ]; then
    _OSN=debian
  elif [ "${_THIS_OS}" = "Ubuntu" ]; then
    _OSN=ubuntu
  fi
  if [ "${_OSV}" = "trusty" ]; then
    _DB_SERIES=10.0
    if [ -e "/root/.mstr.clstr.cnf" ] \
      || [ -e "/root/.wbhd.clstr.cnf" ] \
      || [ -e "/root/.dbhd.clstr.cnf" ]; then
      _MARIADB_VRN="${_GALERA_10_VRN}"
    else
      _MARIADB_VRN="${_MARIADB_10_VRN}"
    fi
    msg "INFO: Forced MariaDB $_MARIADB_VRN in ${_THIS_OS}/${_OSV}"
  elif [ "${_OSV}" = "lenny" ]; then
    _DB_SERIES=5.3
    _MARIADB_VRN=5.3.12
    msg "INFO: Forced MariaDB $_MARIADB_VRN in ${_THIS_OS}/${_OSV}"
  else
    if [ "${_DB_SERIES}" = "10.0" ] || [ "${_DB_SERIES}" = "5.5" ]; then
      _DO_NOTHING=YES
    else
      _DB_SERIES=5.5
      _MARIADB_VRN="${_MARIADB_5_VRN}"
      msg "INFO: Forced MariaDB $_MARIADB_VRN in ${_THIS_OS}/${_OSV}"
    fi
    if [ -z "${_DB_SERIES}" ]; then
      _DB_SERIES=5.5
      _MARIADB_VRN="${_MARIADB_5_VRN}"
      msg "INFO: Forced MariaDB $_MARIADB_VRN in ${_THIS_OS}/${_OSV}"
    fi
  fi
  aptRepo="${_DB_SRC}/pub/mariadb/repo/${_DB_SERIES}"
  aptLiDb="${aptLiSys}.d/mariadb.list"
  echo "## MariaDB APT Repository" > ${aptLiDb}
  echo "deb http://${aptRepo}/${_OSN} ${_OSV} main" >> ${aptLiDb}
  echo "deb-src http://${aptRepo}/${_OSN} ${_OSV} main" >> ${aptLiDb}
  _BROKEN_KEYRING_TEST=$(apt-get update 2>&1)
  if [[ "$_BROKEN_KEYRING_TEST" =~ "signatures were invalid" ]] \
    || [[ "$_BROKEN_KEYRING_TEST" =~ "GPG error" ]]; then
    msg "WARN: Installed keyring is broken, forced reinstall required"
    if [ "${_THIS_OS}" = "Debian" ]; then
      st_runner "apt-get install debian-keyring ${forCer}" 2> /dev/null
      st_runner "apt-get install debian-archive-keyring ${forCer}" 2> /dev/null
    else
      st_runner "apt-get install ubuntu-keyring ${forCer}" 2> /dev/null
    fi
  fi
  st_runner "aptitude remove mytop -y"                     &> /dev/null
  st_runner "apt-get purge mytop -y"                       &> /dev/null
  rm -f /usr/bin/mytop
  st_runner "apt-get autoremove -y --force-yes -qq"        &> /dev/null
  st_runner "aptitude remove mysql-common -y"              &> /dev/null
  st_runner "apt-get purge mysql-common -y"                &> /dev/null
  st_runner "apt-get autoremove -y --force-yes -qq"        &> /dev/null
  st_runner "apt-get update -y --force-yes"                &> /dev/null
  if [ "${_EASY_SETUP}" = "MSTR" ] \
    || [ "${_EASY_SETUP}" = "DBHD" ] \
    || [ "${_EASY_SETUP}" = "WBHD" ] \
    || [ -e "/etc/mysql/conf.d/galera.cnf" ] \
    || [ -e "/root/.mstr.clstr.cnf" ] \
    || [ -e "/root/.dbhd.clstr.cnf" ] \
    || [ -e "/root/.wbhd.clstr.cnf" ]; then
    SQLDEB="galera \
            mariadb-galera-server"
  else
    SQLDEB="mariadb-server-${_DB_SERIES} \
            mariadb-client-${_DB_SERIES} \
            mariadb-common"
  fi
  SQLADD="libmariadbclient-dev \
          libmariadbclient16 \
          libmariadbd-dev \
          libdbd-mysql-perl \
          python-mysqldb \
          libdbi-perl"
}
install_with_aptitude_sql() {
  if [ "${_OSV}" = "squeeze" ] \
    || [ "${_OSV}" = "trusty" ] \
    || [ "${_OSV}" = "precise" ] \
    || [ "${_OSV}" = "lucid" ]; then
    if [ "${_EASY_SETUP}" = "MSTR" ] \
      || [ "${_EASY_SETUP}" = "DBHD" ] \
      || [ "${_EASY_SETUP}" = "WBHD" ] \
      || [ -e "/etc/mysql/conf.d/galera.cnf" ] \
      || [ -e "/root/.mstr.clstr.cnf" ] \
      || [ -e "/root/.dbhd.clstr.cnf" ] \
      || [ -e "/root/.wbhd.clstr.cnf" ]; then
      msg "INFO: Installing MariaDB Galera Cluster..."
    else
      msg "INFO: Installing MariaDB..."
    fi
  else
    if [ "${_EASY_SETUP}" = "MSTR" ] \
      || [ "${_EASY_SETUP}" = "DBHD" ] \
      || [ "${_EASY_SETUP}" = "WBHD" ] \
      || [ -e "/etc/mysql/conf.d/galera.cnf" ] \
      || [ -e "/root/.mstr.clstr.cnf" ] \
      || [ -e "/root/.dbhd.clstr.cnf" ] \
      || [ -e "/root/.wbhd.clstr.cnf" ]; then
      msg "INFO: Installing MariaDB Galera Cluster..."
    else
      msg "INFO: Installing MariaDB..."
    fi
  fi
  install_mariadb_sql
  st_runner "$_INSTAPP mytop" 2> /dev/null
  touch ${pthLog}/fixed-mytop-mariadb.log
  st_runner "$_INSTAPP $SQLDEB" 2> /dev/null
  st_runner "$_INSTAPP $SQLADD" 2> /dev/null
  st_runner "$_INSTAPP $SQLDEB" 2> /dev/null
  if [ "${_EASY_SETUP}" = "DBHD" ] \
    || [ -e "/etc/mysql/conf.d/galera.cnf" ] \
    || [ -e "/root/.dbhd.clstr.cnf" ]; then
    msg "INFO: Running MariaDB system tables upgrade, please wait..."
    if [ -x "/usr/bin/mariadb_upgrade" ]; then
      st_runner "mariadb_upgrade --force" &> /dev/null
    elif [ -x "/usr/bin/mysql_upgrade" ]; then
      st_runner "mysql_upgrade --force" &> /dev/null
    fi
  fi
}


###--------------------###
if [ "${_STATUS}" = "INIT" ]; then
  st_runner "aptitude remove exim4 exim4-base exim4-config sendmail \
    sendmail-base sendmail-cf sendmail-bin -y" &> /dev/null
  st_runner "apt-get purge exim4 exim4-base exim4-config sendmail \
    sendmail-base sendmail-cf sendmail-bin -y" &> /dev/null
  st_runner "apt-get autoremove -y --force-yes -qq" &> /dev/null
  rm -f /etc/aliases
  rm -f -r /etc/mail
  killall -9 sendmail &> /dev/null
else
  _POSTFIX_TEST=$(grep "fatal: open lock file" /var/log/mail.log 2>&1)
  if [[ "$_POSTFIX_TEST" =~ "fatal: open lock file" ]]; then
    _BROKEN_KEYRING_TEST=$(apt-get update 2>&1)
    if [[ "$_BROKEN_KEYRING_TEST" =~ "signatures were invalid" ]] \
      || [[ "$_BROKEN_KEYRING_TEST" =~ "GPG error" ]]; then
      msg "WARN: Installed keyring is broken, forced reinstall required"
      if [ "${_THIS_OS}" = "Debian" ]; then
        mrun "apt-get install debian-keyring ${forCer}" 2> /dev/null
        mrun "apt-get install debian-archive-keyring ${forCer}" 2> /dev/null
      else
        mrun "apt-get install ubuntu-keyring ${forCer}" 2> /dev/null
      fi
    fi
    mrun "dpkg --configure -a"      &> /dev/null
    mrun "apt-get clean -qq"        &> /dev/null
    mrun "apt-get update -qq"       &> /dev/null
    mrun "apt-get purge postfix -y" &> /dev/null
    echo > /var/log/mail.log
  fi
fi
install_with_aptitude_deps
fix_locales
if [ "$_LOCALE_TEST" = "BROKEN" ]; then
  _STRONG_PASSWORDS=NO
fi
if [ ! -e "/etc/aliases" ]; then
  echo "postmaster:    root" > /etc/aliases
  newaliases &> /dev/null
fi
if [ "${_NGINX_SPDY}" = "YES" ] \
  || [ "${_SSL_FROM_SOURCES}" = "YES" ] \
  || [ "${_NGINX_FORWARD_SECRECY}" = "YES" ]; then
  if [ "${_OSV}" = "wheezy" ] \
    || [ "${_OSV}" = "trusty" ] \
    || [ "${_OSV}" = "precise" ]; then
    _DO_NOTHING=YES
  else
    install_ssl_src
    install_ssh_src
    install_curl_src
  fi
fi
if [ "${_SSH_FROM_SOURCES}" = "YES" ]; then
  if [ "${_OSV}" = "trusty" ] || [ "${_OSV}" = "precise" ]; then
    _DO_NOTHING=YES
  else
    install_ssh_src
  fi
fi
if [ "${_LENNY_TO_SQUEEZE}" = "NO" ]; then
  check_install_latest_git
  install_upgrade_nginx
fi


if [ "${_STATUS}" = "INIT" ]; then
  service cron stop &> /dev/null
  if [ -e "/usr/sbin/csf" ] && [ -e "/etc/csf/csf.deny" ]; then
    csf -x &> /dev/null
  fi
  install_with_aptitude_sql
else
  if [ "$_UP_NRC" = "YES" ]; then
    update_newrelic
  fi
  _SQL_UPGRADE=NO
  if [[ "${_DB_SERVER_TEST}" =~ "MariaDB" ]]; then
    _SQL_TEST_UPGRADE=NO
  else
    _SQL_TEST_UPGRADE=YES
  fi
  if [ "$_SQL_TEST_UPGRADE" = "YES" ] && [ "${_DB_SERVER}" = "MariaDB" ]; then
    _SQL_UPGRADE=YES
  fi
  if [ "${_OSV}" = "squeeze" ] \
    && [[ "${_DB_SERVER_TEST}" =~ "MariaDB" ]] \
    && [[ "${_DB_SERVER_TEST}" =~ " 5.3." ]]; then
    _SQL_UPGRADE=YES
  fi
  if [[ "${_DB_SERVER_TEST}" =~ "MariaDB" ]]; then
    if [[ "${_DB_SERVER_TEST}" =~ " 5.1." ]] \
      || [[ "${_DB_SERVER_TEST}" =~ " 5.2." ]]; then
      _SQL_UPGRADE=YES
    fi
    if [ "${_DB_SERIES}" = "10.0" ]; then
      if [[ "${_DB_SERVER_TEST}" =~ "10.0." ]]; then
        _DO_NOTHING=YES
      else
        _SQL_UPGRADE=YES
      fi
    elif [ "${_DB_SERIES}" = "5.5" ]; then
      if [[ "${_DB_SERVER_TEST}" =~ "5.5." ]]; then
        _DO_NOTHING=YES
      else
        _SQL_UPGRADE=YES
      fi
      if [[ "${_DB_SERVER_TEST}" =~ "10.0." ]]; then
        _SQL_UPGRADE=NO
      fi
    fi
  fi
  if [ "${_SQL_FORCE_REINSTALL}" = "YES" ] \
    || [ "${_FULL_FORCE_REINSTALL}" = "YES" ]; then
    _SQL_UPGRADE=YES
  fi
  if [ "${_SQUEEZE_TO_WHEEZY}" = "YES" ] \
    && [ "${_LOC_OSV}" = "squeeze" ]; then
    _SQL_UPGRADE=NO
  fi
  if [ "${_LENNY_TO_SQUEEZE}" = "YES" ] \
    && [ "${_LOC_OSV}" = "lenny" ]; then
    _SQL_UPGRADE=NO
  fi
  _SQL_DEB_SRC_TEST=$(grep ${_DB_SRC} \
    ${aptLiSys}.d/mariadb.list 2>&1)
  if [[ "$_SQL_DEB_SRC_TEST" =~ "${_DB_SRC}" ]] \
    && [ -e "${pthLog}/mariadb-apt-fixed-${_X_VERSION}.log" ]; then
    _SQL_DEB_SRC_UPDATE=NO
  else
    if [ "${_THIS_OS}" = "Debian" ]; then
      _OSN=debian
    elif [ "${_THIS_OS}" = "Ubuntu" ]; then
      _OSN=ubuntu
    fi
    aptRepo="${_DB_SRC}/pub/mariadb/repo/${_DB_SERIES}"
    aptLiDb="${aptLiSys}.d/mariadb.list"
    echo "## MariaDB APT Repository" > ${aptLiDb}
    echo "deb http://${aptRepo}/${_OSN} ${_OSV} main" >> ${aptLiDb}
    echo "deb-src http://${aptRepo}/${_OSN} ${_OSV} main" >> ${aptLiDb}
    st_runner "aptitude update -y" &> /dev/null
    touch ${pthLog}/mariadb-apt-fixed-${_X_VERSION}.log
  fi
  if [ "$_SQL_UPGRADE" = "YES" ]; then
    service cron stop &> /dev/null
    if [ -e "/usr/sbin/csf" ] && [ -e "/etc/csf/csf.deny" ]; then
      csf -x &> /dev/null
    fi
    msg "INFO: Running ${_DB_SERVER} upgrade and then PHP forced rebuild..."
    mrun "sleep 50"
    mrun "service nginx stop" &> /dev/null
    rm -f ${aptLiSys}.d/percona.list
    rm -f ${aptLiSys}.d/ourdelta.list
    _KEYS_SERVER_TEST=FALSE
    until [[ "$_KEYS_SERVER_TEST" =~ "MariaDB" ]]; do
      _KEYS_SERVER_TEST=$(apt-key adv --recv-keys \
        --keyserver hkp://keyserver.ubuntu.com:80 1BB943DB 2>&1)
      sleep 2
    done
    st_runner "aptitude autoclean -y" &> /dev/null
    st_runner "apt-get clean -qq" &> /dev/null
    st_runner "apt-get update -y --force-yes" &> /dev/null
    cp -af /etc/mysql/debian-start /etc/mysql/debian-start-mariadb &> /dev/null
    sed -i "s/.*default-table-type/#default-table-type/g" /etc/mysql/my.cnf
    sed -i "s/.*language/#language/g" /etc/mysql/my.cnf
    rm -f /var/lib/mysql/debian-*.flag &> /dev/null
    rm -f /var/lib/mysql/mysql_upgrade_info &> /dev/null
    install_with_aptitude_sql
    _THIS_DB_SERVER_TEST=$(mysql -V 2>&1)
    if [[ "${_THIS_DB_SERVER_TEST}" =~ "5.5." ]] \
      || [[ "${_THIS_DB_SERVER_TEST}" =~ "10.0" ]]; then
      _DO_NOTHING=YES
    else
      sed -i "s/.*lc_messages_dir /#lc_messages_dir /g" /etc/mysql/my.cnf
      sed -i "s/.*lc_messages /#lc_messages /g" /etc/mysql/my.cnf
    fi
    if [[ "${_THIS_DB_SERVER_TEST}" =~ "MariaDB" ]]; then
      sed -i "s/.*innodb_lazy_drop_table /#innodb_lazy_drop_table /g" \
        /etc/mysql/my.cnf
    fi
    _PHP_FORCE_REINSTALL=YES
    mrun "sleep 8"
    msg "INFO: Restarting ${_DB_SERVER} server..."
    mrun "service mysql restart" &> /dev/null
    mrun "service nginx start" &> /dev/null
    if [ -e "/usr/sbin/csf" ] && [ -e "/etc/csf/csf.deny" ]; then
      mrun "csf -e" &> /dev/null
    fi
    msg "INFO: ${_DB_SERVER} server restart completed"
  fi
fi


###--------------------###
run_aptitude_full_upgrade
install_with_aptitude_deps
mrun "service php5-fpm stop" &> /dev/null
st_runner "update-rc.d -f php5-fpm remove" &> /dev/null
check_install_latest_git
install_upgrade_nginx
kill_nash
fix_sftp_ftps_modern
disable_old_purge_cruft_machine
enable_weekly_usage_monitor
install_wkhtmltopdf
install_wkhtmltoimage


###--------------------###
if [ "${_OSV}" = "wheezy" ] \
  || [ "${_OSV}" = "trusty" ] \
  || [ "${_OSV}" = "precise" ]; then
  if [ ! -L "/usr/lib/libXpm.so" ]; then
    msg "INFO: Fix #1 for libs in ${_THIS_OS} ${_OSV}"
    _X86_64_TEST=$(uname -m 2>&1)
    if [ "$_X86_64_TEST" = "x86_64" ]; then
      ln -sf /usr/lib/x86_64-linux-gnu/libgmp.so  /usr/lib/libgmp.so
      ln -sf /usr/lib/x86_64-linux-gnu/libjpeg.so /usr/lib/libjpeg.so
      ln -sf /usr/lib/x86_64-linux-gnu/libkrb5.so /usr/lib/libkrb5.so
      ln -sf /usr/lib/x86_64-linux-gnu/libldap.so /usr/lib/libldap.so
      ln -sf /usr/lib/x86_64-linux-gnu/libpng.so  /usr/lib/libpng.so
      ln -sf /usr/lib/x86_64-linux-gnu/libXpm.so  /usr/lib/libXpm.so
      if [ ! -e "/usr/include/gmp.h" ] \
        && [ -e "/usr/include/x86_64-linux-gnu/gmp.h" ]; then
        ln -sf /usr/include/x86_64-linux-gnu/gmp.h  /usr/include/gmp.h
      fi
    else
      ln -sf /usr/lib/i386-linux-gnu/libgmp.so  /usr/lib/libgmp.so
      ln -sf /usr/lib/i386-linux-gnu/libjpeg.so /usr/lib/libjpeg.so
      ln -sf /usr/lib/i386-linux-gnu/libkrb5.so /usr/lib/libkrb5.so
      ln -sf /usr/lib/i386-linux-gnu/libldap.so /usr/lib/libldap.so
      ln -sf /usr/lib/i386-linux-gnu/libpng.so  /usr/lib/libpng.so
      ln -sf /usr/lib/i386-linux-gnu/libXpm.so  /usr/lib/libXpm.so
      if [ ! -e "/usr/include/gmp.h" ] \
        && [ -e "/usr/include/i386-linux-gnu/gmp.h" ]; then
        ln -sf /usr/include/i386-linux-gnu/gmp.h  /usr/include/gmp.h
      fi
    fi
  fi
fi


###--------------------###
if [ "${_OSV}" = "wheezy" ] \
  || [ "${_OSV}" = "trusty" ] \
  || [ "${_OSV}" = "precise" ]; then
  _SSL_FIX_REQUIRED=YES
  if [ "${_NGINX_SPDY}" = "YES" ] \
    || [ "${_SSL_FROM_SOURCES}" = "YES" ] \
    || [ "${_NGINX_FORWARD_SECRECY}" = "YES" ]; then
    if [ "${_OSV}" = "wheezy" ] \
      || [ "${_OSV}" = "trusty" ] \
      || [ "${_OSV}" = "precise" ]; then
      _SSL_FIX_REQUIRED=YES
    else
      _SSL_FIX_REQUIRED=NO
    fi
  fi
  if [ ! -e "/usr/lib/libssl.so.1.0.0" ] \
    && [ "$_SSL_FIX_REQUIRED" = "YES" ]; then
    msg "INFO: Fix #2 for libs in ${_THIS_OS} ${_OSV}"
    _X86_64_TEST=$(uname -m 2>&1)
    if [ "$_X86_64_TEST" = "x86_64" ]; then
      if [ -e "/usr/lib/x86_64-linux-gnu/libssl.so.1.0.0" ] \
        && [ ! -e "/usr/lib/libssl.so.1.0.0" ]; then
        ln -s /usr/lib/x86_64-linux-gnu/libssl.so.1.0.0  \
          /usr/lib/libssl.so.1.0.0
      elif [ -e "/lib/x86_64-linux-gnu/libssl.so.1.0.0" ] \
        && [ ! -e "/usr/lib/libssl.so.1.0.0" ]; then
        ln -s /lib/x86_64-linux-gnu/libssl.so.1.0.0  \
          /usr/lib/libssl.so.1.0.0
      fi
      if [ -e "/usr/lib/x86_64-linux-gnu/libcrypto.so.1.0.0" ] \
        && [ ! -e "/usr/lib/libcrypto.so.1.0.0" ]; then
        ln -s /usr/lib/x86_64-linux-gnu/libcrypto.so.1.0.0 \
          /usr/lib/libcrypto.so.1.0.0
      elif [ -e "/lib/x86_64-linux-gnu/libcrypto.so.1.0.0" ] \
        && [ ! -e "/usr/lib/libcrypto.so.1.0.0" ]; then
        ln -s /lib/x86_64-linux-gnu/libcrypto.so.1.0.0 \
          /usr/lib/libcrypto.so.1.0.0
      fi
    else
      if [ -e "/usr/lib/i386-linux-gnu/libssl.so.1.0.0" ] \
        && [ ! -e "/usr/lib/libssl.so.1.0.0" ]; then
        ln -s /usr/lib/i386-linux-gnu/libssl.so.1.0.0  \
          /usr/lib/libssl.so.1.0.0
      elif [ -e "/lib/i386-linux-gnu/libssl.so.1.0.0" ] \
        && [ ! -e "/usr/lib/libssl.so.1.0.0" ]; then
        ln -s /lib/i386-linux-gnu/libssl.so.1.0.0  \
          /usr/lib/libssl.so.1.0.0
      fi
      if [ -e "/usr/lib/i386-linux-gnu/libcrypto.so.1.0.0" ] \
        && [ ! -e "/usr/lib/libcrypto.so.1.0.0" ]; then
        ln -s /usr/lib/i386-linux-gnu/libcrypto.so.1.0.0 \
          /usr/lib/libcrypto.so.1.0.0
      elif [ -e "/lib/i386-linux-gnu/libcrypto.so.1.0.0" ] \
        && [ ! -e "/usr/lib/libcrypto.so.1.0.0" ]; then
        ln -s /lib/i386-linux-gnu/libcrypto.so.1.0.0 \
          /usr/lib/libcrypto.so.1.0.0
      fi
    fi
  fi
fi


###--------------------###
if [ "${_THIS_OS}" = "Debian" ]; then
  chmod 644 /usr/share/git-core/templates/description &> /dev/null
  chmod 644 /usr/share/git-core/templates/hooks/* &> /dev/null
  chmod 644 /usr/share/git-core/templates/info/* &> /dev/null
fi


###--------------------###
if [ -z "${_SMTP_RELAY_HOST}" ] && [ "${_SMTP_RELAY_TEST}" = "YES" ]; then
msg "INFO: Checking SMTP connections..."
if ! netcat -w 14 -z smtp.gmail.com 25 ; then
  WE_NEED_RELAY=YES
  cat <<EOF

  Your outgoing SMTP port 25 doesn't work
  as expected, so your server can't send out
  any e-mails directly.

  It appears you need a SMTP relayhost added
  in your Postfix /etc/postfix/main.cf config.

  Please enter your SMTP relay host name
  as a value for _SMTP_RELAY_HOST="smtp.your.relay.server"

  Then run this script again.

EOF
  clean_pid_exit
else
  _DO_NOTHING=YES
fi
###
### Required if outgoing smtp port is closed and smtp relay is in use
###
if [ ! -z "${_SMTP_RELAY_HOST}" ]; then
  sed -i "s/${_SMTP_RELAY_HOST}//g" /etc/postfix/main.cf &> /dev/null
  sed -i "s/relayhost =/relayhost = ${_SMTP_RELAY_HOST}/g" \
    /etc/postfix/main.cf &> /dev/null
  postfix reload &> /dev/null
fi
###
###
fi


###--------------------###
_X_INIT_TEST=$(cat /etc/init.d/nginx 2>&1)
if [[ "$_X_INIT_TEST" =~ "github" ]]; then
  _DO_NOTHING=YES
else
  mv -f /etc/init.d/nginx \
    ${vBs}/nginx-pre-${_X_VERSION}-${_NOW} &> /dev/null
  cp -af ${locCnf}/nginx /etc/init.d/nginx
  chmod 755 /etc/init.d/nginx &> /dev/null
fi


###--------------------###
if [ ! -e "/var/run/cloud_vhost.pid" ]; then
  if [ ! -e "${pthLog}/vnstat-${_VNSTAT_VRN}.log" ] \
    || [ ! -e "/usr/bin/vnstat" ] \
    || [ "${_FULL_FORCE_REINSTALL}" = "YES" ]; then
    msg "INFO: Installing VnStat monitor..."
    cd /var/opt
    rm -f -r vnstat*
    get_dev_src "vnstat-${_VNSTAT_VRN}.tar.gz"
    cd vnstat-${_VNSTAT_VRN}
    st_runner "make --quiet" 2> /dev/null
    st_runner "make --quiet install" 2> /dev/null
    for INF in `vnstat --iflist | sed "s/Available interfaces//g" \
      | cut -d: -f2` ;do vnstat -u -i $INF &> /dev/null;done
    cp -af /var/opt/vnstat-${_VNSTAT_VRN}/examples/init.d/debian/vnstat \
      /etc/init.d/vnstat
    chmod 755 /etc/init.d/vnstat &> /dev/null
    st_runner "update-rc.d vnstat defaults" &> /dev/null
    mrun "service vnstat start" &> /dev/null
    touch ${pthLog}/vnstat-${_VNSTAT_VRN}.log
    mrun "service vnstat restart" &> /dev/null
  fi
fi
if [ -e "/etc/init.d/vnstat" ] \
  && [ "${_VMFAMILY}" = "VS" ] \
  && [ ! -e "/boot/grub/grub.cfg" ] \
  && [ ! -e "/boot/grub/menu.lst" ]; then
  service vnstat stop &> /dev/null
  update-rc.d -f vnstat remove &> /dev/null
  rm -f /etc/init.d/vnstat
  rm -f /usr/bin/vnstat
  rm -f -r /var/lib/vnstat
fi


###--------------------###
cd /var
if [ -d "/var/xdrago/conf" ] \
  && [ -e "/var/aegir/.drush/hostmaster.alias.drushrc.php" ]; then
  if [ "${_DEBUG_MODE}" = "YES" ]; then
    msg "INFO: Upgrading a few more tools..."
  fi
  mv -f /var/xdrago-pre* ${vBs}/dragon/x/ &> /dev/null
  rm -f -r ${pthLog}/init.d-pre*
  rm -f -r ${vBs}/dragon/z/init.d-pre-*
  rm -f ${pthLog}/cron-root-pre*
  cp -af /var/xdrago \
    ${vBs}/dragon/x/xdrago-pre-${_X_VERSION}-${_NOW} &> /dev/null
  rm -f ${pthLog}/VISITOR_ABUSE_ONE.log
  rm -f ${pthLog}/blackIP.log
  rm -f /var/xdrago/{enableStatus,graceful,move_sql,run_all,second,Minute}
  rm -f /var/xdrago/{firewall.sh,stop-mysql-innodb.sh,firewall_restarter}
  rm -f /var/xdrago/{FireStart,memcache,redis}
  cp -af /var/spool/cron/crontabs/root \
    ${vBs}/dragon/z/cron-root-pre-${_X_VERSION}-${_NOW} &> /dev/null
  if [ "${_CUSTOM_CONFIG_LSHELL}" = "YES" ] \
    && [ -e "/var/xdrago/conf/lshell.conf" ]; then
    cp -af /var/xdrago/conf/lshell.conf ${vBs}/custom_lshell.conf
  fi
  cp -af ${bldPth}/aegir/tools/system/* /var/xdrago/ &> /dev/null
  if [ "${_CUSTOM_CONFIG_LSHELL}" = "YES" ] \
    && [ -e "${vBs}/custom_lshell.conf" ]; then
    cp -af ${vBs}/custom_lshell.conf /var/xdrago/conf/lshell.conf
  fi
  if [ -z "${_THISHTIP}" ]; then
    _LOC_DOM="${_THISHOST}"
    find_correct_ip
    _THISHTIP="${_LOC_IP}"
  fi
  if [[ "${_THISHOST}" =~ ".host8." ]] \
    || [ "${_VMFAMILY}" = "VS" ] \
    || [ -e "/root/.auto.up.cnf" ] \
    || [ -e "/root/.host8.cnf" ]; then
    if [[ "${_THISHOST}" =~ "v251a.ams." ]]; then
      _NGINX_DOS_LIMIT=888
    else
      if [ -z "${_NGINX_DOS_LIMIT}" ] \
        || [ "${_NGINX_DOS_LIMIT}" = "300" ]; then
        if [ "${_VMFAMILY}" = "VS" ]; then
          _NGINX_DOS_LIMIT=149
        else
          _NGINX_DOS_LIMIT=188
        fi
      fi
    fi
  fi
  sed -i "s/= 150/= ${_NGINX_DOS_LIMIT}/g" \
    /var/xdrago/monitor/check/scan_nginx &> /dev/null
  sed -i "s/= 200/= ${_NGINX_DOS_LIMIT}/g" \
    /var/xdrago/monitor/check/scan_nginx &> /dev/null
  if [ ! -z "$_NGINX_DOS_KEYWORDS" ]; then
    _NGINX_DOS_KEYWORDS=${_NGINX_DOS_KEYWORDS//[^a-zA-Z0-9|]/}
    if [ ! -z "$_NGINX_DOS_KEYWORDS" ]; then
      msg "INFO: Configured _NGINX_DOS_KEYWORDS: $_NGINX_DOS_KEYWORDS"
      sed -i "s/foobar/$_NGINX_DOS_KEYWORDS/g" \
        /var/xdrago/monitor/check/scan_nginx &> /dev/null
    fi
  fi
  mv -f /etc/cron.daily/mlocate ${vBs}/ &> /dev/null
  cp -af /var/xdrago/cron/crontabs/root /var/spool/cron/crontabs/ &> /dev/null
  if [ -e "/var/xdrago/cron/custom.txt" ]; then
    cat /var/xdrago/cron/custom.txt >> /var/spool/cron/crontabs/root
  fi
  chown root:crontab /var/spool/cron/crontabs/root
  chmod 600 /var/spool/cron/crontabs/root
  if [[ "${_THISHOST}" =~ ".host8." ]] || [ "${_VMFAMILY}" = "VS" ]; then
    if [ -e "/root/.debug.cnf" ]; then
      _DO_NOTHING=YES
    else
      if [ -e "/root/.high_load.cnf" ] \
        && [ ! -e "/root/.big_db.cnf" ] \
        && [ ! -e "/root/.tg.cnf" ]; then
        sed -i "s/3600/180/g" /var/xdrago/minute.sh &> /dev/null
      elif [ -e "/root/.big_db.cnf" ] || [ -e "/root/.tg.cnf" ]; then
        _DO_NOTHING=YES
      else
        sed -i "s/3600/1800/g" /var/xdrago/minute.sh &> /dev/null
      fi
      sed -i "s/rotate 52/rotate 7/g" /etc/logrotate.d/nginx &> /dev/null
      sed -i "s/rotate 1/rotate 7/g" /etc/logrotate.d/nginx &> /dev/null
      sed -i "s/INTERVAL 1 HOUR/INTERVAL 15 MINUTE/g" \
        /var/xdrago/purge_binlogs.sh &> /dev/null
      if [ -e "/usr/share/man/man3/buagent.3.gz" ]; then
        chmod 644 /usr/share/man/man3/buagent.3.gz
      fi
    fi
  else
    sed -i "s/log\/lshell/log\/lsh/g" /etc/logrotate.d/lshell &> /dev/null
  fi
fi
if [ "${_STATUS}" = "INIT" ]; then
  msg "INFO: Installing a few more tools..."
  mkdir -p ./xdrago
  cp -af ${bldPth}/aegir/tools/system/* ./xdrago/ &> /dev/null
  cp -af /var/xdrago/cron/crontabs/root /var/spool/cron/crontabs/ &> /dev/null
  chown root:crontab /var/spool/cron/crontabs/root
  chmod 600 /var/spool/cron/crontabs/root
  if [ -z "${_THISHTIP}" ]; then
    _LOC_DOM="${_THISHOST}"
    find_correct_ip
    _THISHTIP="${_LOC_IP}"
  fi
  if [[ "${_THISHOST}" =~ ".host8." ]] \
    || [ "${_VMFAMILY}" = "VS" ] \
    || [ -e "/root/.auto.up.cnf" ] \
    || [ -e "/root/.host8.cnf" ]; then
    if [[ "${_THISHOST}" =~ "v251a.ams." ]]; then
      _NGINX_DOS_LIMIT=888
    else
      if [ -z "${_NGINX_DOS_LIMIT}" ] \
        || [ "${_NGINX_DOS_LIMIT}" = "300" ]; then
        if [ "${_VMFAMILY}" = "VS" ]; then
          _NGINX_DOS_LIMIT=149
        else
          _NGINX_DOS_LIMIT=188
        fi
      fi
    fi
  fi
  sed -i "s/= 150/= ${_NGINX_DOS_LIMIT}/g" \
    /var/xdrago/monitor/check/scan_nginx &> /dev/null
  sed -i "s/= 200/= ${_NGINX_DOS_LIMIT}/g" \
    /var/xdrago/monitor/check/scan_nginx &> /dev/null
  if [ ! -z "$_NGINX_DOS_KEYWORDS" ]; then
    _NGINX_DOS_KEYWORDS=${_NGINX_DOS_KEYWORDS//[^a-zA-Z0-9|]/}
    if [ ! -z "$_NGINX_DOS_KEYWORDS" ]; then
      msg "INFO: Configured _NGINX_DOS_KEYWORDS: $_NGINX_DOS_KEYWORDS"
      sed -i "s/foobar/$_NGINX_DOS_KEYWORDS/g" \
        /var/xdrago/monitor/check/scan_nginx &> /dev/null
    fi
  fi
  mv -f /etc/cron.daily/mlocate ${vBs}/ &> /dev/null
  if [[ "${_THISHOST}" =~ ".host8." ]] || [ "${_VMFAMILY}" = "VS" ]; then
    if [ -e "/root/.debug.cnf" ]; then
      _DO_NOTHING=YES
    else
      if [ -e "/root/.high_load.cnf" ] \
        && [ ! -e "/root/.big_db.cnf" ] \
        && [ ! -e "/root/.tg.cnf" ]; then
        sed -i "s/3600/180/g" /var/xdrago/minute.sh &> /dev/null
      elif [ -e "/root/.big_db.cnf" ] || [ -e "/root/.tg.cnf" ]; then
        _DO_NOTHING=YES
      else
        sed -i "s/3600/1800/g" /var/xdrago/minute.sh &> /dev/null
      fi
      sed -i "s/rotate 52/rotate 7/g" /etc/logrotate.d/nginx &> /dev/null
      sed -i "s/rotate 1/rotate 7/g" /etc/logrotate.d/nginx &> /dev/null
      if [ -e "/usr/share/man/man3/buagent.3.gz" ]; then
        chmod 644 /usr/share/man/man3/buagent.3.gz
      fi
    fi
  fi
fi
if [ -d "/var/xdrago-pre-${_X_VERSION}-${_NOW}" ]; then
  cp -af /var/xdrago-pre-${_X_VERSION}-${_NOW}/run-* /var/xdrago/ &> /dev/null
fi
sed -i "s/firewall/monitor/g" /var/xdrago/minute.sh &> /dev/null
chmod -R 700 /var/xdrago/monitor/check &> /dev/null
chmod 700 /var/xdrago/* &> /dev/null
chmod 700 /var/xdrago &> /dev/null


###--------------------###
if [ "${_SQUEEZE_TO_WHEEZY}" = "YES" ] \
  && [ "${_LOC_OSV}" = "squeeze" ]; then
  mrun "service nginx stop" &> /dev/null
  killall -9 nginx &> /dev/null
elif [ "${_LENNY_TO_SQUEEZE}" = "YES" ] \
  && [ "${_LOC_OSV}" = "lenny" ]; then
  mrun "service nginx stop" &> /dev/null
  killall -9 nginx &> /dev/null
fi


###--------------------###
if [ "${_STATUS}" = "UPGRADE" ]; then
  if [ "${_DEBUG_MODE}" = "YES" ]; then
    msg "INFO: Checking if PHP upgrade is available"
  fi
  st_runner "aptitude remove php5-sasl php5-suhosin -y" &> /dev/null
  st_runner "apt-get purge php5-sasl php5-suhosin -y" &> /dev/null
fi
if [ "${_OSV}" = "wheezy" ] \
  || [ "${_OSV}" = "trusty" ] \
  || [ "${_OSV}" = "precise" ]; then
  _PHP_EXTRA="--with-ldap --with-gmp --with-xpm-dir=/usr"
else
  _PHP_EXTRA="--with-ldap --with-gmp"
fi
if [ ! -z "${_PHP_EXTRA_CONF}" ]; then
  _PHP_EXTRA="${_PHP_EXTRA} ${_PHP_EXTRA_CONF}"
fi
if [ ! -z "${_PHP_EXTRA}" ]; then
  if [ "${_DEBUG_MODE}" = "YES" ]; then
    msg "INFO: PHP EXTRA is ${_PHP_EXTRA}"
  fi
fi
if [ "${_OSV}" = "trusty" ]; then
  ln -sf /usr/include/freetype2 /usr/include/freetype2/freetype
fi

#
# Install OpenSSH from sources.
switch_php_cli() {
  if [ ! -z "$1" ]; then
    rm -f /usr/bin/php-cli
    ln -s /opt/php$1/bin/php /usr/bin/php-cli
    rm -f /usr/bin/php
    ln -s /opt/php$1/bin/php /usr/bin/php
    rm -f /usr/bin/php-config
    ln -s /opt/php$1/bin/php-config /usr/bin/php-config
  fi
}

if [[ "${_PHP_MULTI_INSTALL}" =~ "5.3" ]] \
  && [ ! -x "/opt/php53/bin/php" ]; then
  _PHP_VERSION="${_PHP53_VRN}"
  msg "INFO: PHP ${_PHP_VERSION} will be installed now"
  switch_php_cli "53"
  install_php_multi "53"
  _PHP_VERSION=""
  _T_PHP_VRN=""
  _T_PHP_PTH=""
  _FRESH_PHP53_BUILD=53
fi
if [[ "${_PHP_MULTI_INSTALL}" =~ "5.4" ]] \
  && [ ! -x "/opt/php54/bin/php" ]; then
  _PHP_VERSION="${_PHP54_VRN}"
  msg "INFO: PHP ${_PHP_VERSION} will be installed now"
  switch_php_cli "54"
  install_php_multi "54"
  _PHP_VERSION=""
  _T_PHP_VRN=""
  _T_PHP_PTH=""
  _FRESH_PHP54_BUILD=54
fi
if [[ "${_PHP_MULTI_INSTALL}" =~ "5.5" ]] \
  && [ ! -x "/opt/php55/bin/php" ]; then
  _PHP_VERSION="${_PHP55_VRN}"
  msg "INFO: PHP ${_PHP_VERSION} will be installed now"
  switch_php_cli "55"
  install_php_multi "55"
  _PHP_VERSION=""
  _T_PHP_VRN=""
  _T_PHP_PTH=""
  _FRESH_PHP55_BUILD=55
fi
if [[ "${_PHP_MULTI_INSTALL}" =~ "5.6" ]] \
  && [ ! -x "/opt/php56/bin/php" ]; then
  _PHP_VERSION="${_PHP56_VRN}"
  msg "INFO: PHP ${_PHP_VERSION} will be installed now"
  switch_php_cli "56"
  install_php_multi "56"
  _PHP_VERSION=""
  _T_PHP_VRN=""
  _T_PHP_PTH=""
  _FRESH_PHP56_BUILD=56
fi

php_upgrade_all() {
  if [ -x "/opt/php53/bin/php" ] \
    && [ -z "$_FRESH_PHP53_BUILD" ]; then
    _PHP_VERSION="${_PHP53_VRN}"
    _PHP_BIN_BROKEN=NO
    _BROKEN_LIBCURL_TEST=""
    switch_php_cli "53"
    check_php_broken "53"
    check_php_rebuild "53"
    update_php_multi "53"
    _PHP_VERSION=""
    _T_PHP_VRN=""
    _T_PHP_PTH=""
  fi
  if [ -x "/opt/php54/bin/php" ] \
    && [ -z "$_FRESH_PHP54_BUILD" ]; then
    _PHP_VERSION="${_PHP54_VRN}"
    _PHP_BIN_BROKEN=NO
    _BROKEN_LIBCURL_TEST=""
    switch_php_cli "54"
    check_php_broken "54"
    check_php_rebuild "54"
    update_php_multi "54"
    _PHP_VERSION=""
    _T_PHP_VRN=""
    _T_PHP_PTH=""
  fi
  if [ -x "/opt/php55/bin/php" ] \
    && [ -z "$_FRESH_PHP55_BUILD" ]; then
    _PHP_VERSION="${_PHP55_VRN}"
    _PHP_BIN_BROKEN=NO
    _BROKEN_LIBCURL_TEST=""
    switch_php_cli "55"
    check_php_broken "55"
    check_php_rebuild "55"
    update_php_multi "55"
    _PHP_VERSION=""
    _T_PHP_VRN=""
    _T_PHP_PTH=""
  fi
  if [ -x "/opt/php56/bin/php" ] \
    && [ -z "$_FRESH_PHP56_BUILD" ]; then
    _PHP_VERSION="${_PHP56_VRN}"
    _PHP_BIN_BROKEN=NO
    _BROKEN_LIBCURL_TEST=""
    switch_php_cli "56"
    check_php_broken "56"
    check_php_rebuild "56"
    update_php_multi "56"
    _PHP_VERSION=""
    _T_PHP_VRN=""
    _T_PHP_PTH=""
  fi
}


###--------------------###
install_curl_src
php_upgrade_all
if [ -x "/opt/php53/bin/php" ]; then
  _CURLWRAPPERS_TEST=$(/opt/php53/bin/php -i | grep "with-curlwrappers" 2>&1)
  if [[ "$_CURLWRAPPERS_TEST" =~ "with-curlwrappers" ]]; then
    _CURLWRAPPERS_REBUILD=YES
  fi
fi
if [ -x "/opt/php54/bin/php" ]; then
  _CURLWRAPPERS_TEST=$(/opt/php54/bin/php -i | grep "with-curlwrappers" 2>&1)
  if [[ "$_CURLWRAPPERS_TEST" =~ "with-curlwrappers" ]]; then
    _CURLWRAPPERS_REBUILD=YES
  fi
fi
if [ "$_CURLWRAPPERS_REBUILD" = "YES" ] \
  && [[ ! "${_PHP_EXTRA_CONF}" =~ "with-curlwrappers" ]]; then
  msg "INFO: PHP rebuild required to remove --with-curlwrappers option..."
  _PHP_FORCE_REINSTALL=YES
  php_upgrade_all
fi
_BROKEN_LIBCURL_TEST=$(php -v 2>&1)
if [[ "$_BROKEN_LIBCURL_TEST" =~ "libcurl.so.4" ]]; then
  msg "INFO: PHP rebuild required to fix broken libcurl..."
  install_curl_src
  php_upgrade_all
fi
install_newrelic
if [ ! -e "${pthLog}/ioncube-${_IONCUBE_VRN}.log" ] \
  || [ "${_PHP_FORCE_REINSTALL}" = "YES" ] \
  || [ "${_FULL_FORCE_REINSTALL}" = "YES" ]; then
  install_ioncube
fi


###--------------------###
if [ ! -x "/usr/local/bin/composer" ] || [ ! -L "/usr/bin/composer" ]; then
  rm -f /usr/local/bin/composer
  rm -f /usr/bin/composer
  rm -f -r /root/.composer
  mkdir -p /var/opt
  cd /var/opt
  curl -sS https://getcomposer.org/installer | php &> /dev/null
  mv composer.phar /usr/local/bin/composer
  ln -sf /usr/local/bin/composer /usr/bin/composer
fi


###--------------------###
if [[ "${_XTRAS_LIST}" =~ "BZR" ]]; then
  if [ "${_OSV}" = "lenny" ]; then
    _DO_NOTHING=YES
  else
    _PATH_BZR="/usr/local/bin/bzr"
    if [ ! -e "$_PATH_BZR" ] \
      || [ ! -e "${pthLog}/bzr-${_BZR_VRN}.log" ] \
      || [ "${_FULL_FORCE_REINSTALL}" = "YES" ]; then
      msg "INFO: Building Bazaar (bzr) ${_BZR_VRN} from sources, please wait..."
      if [ -e "/usr/local/lib/python2.6/dist-packages/bzrlib" ]; then
        rm -f -r /usr/local/lib/python2.6/dist-packages/bzrlib
      fi
      if [ -e "/usr/local/lib/python2.7/dist-packages/bzrlib" ]; then
        rm -f -r /usr/local/lib/python2.7/dist-packages/bzrlib
      fi
      cd /var/opt
      rm -f -r bzr*
      get_dev_src "bzr-${_BZR_VRN}.tar.gz"
      cd /var/opt/bzr-${_BZR_VRN}
      st_runner "python setup.py --quiet install build_ext -\
        -allow-python-fallback" 2> /dev/null
      st_runner "make --quiet" 2> /dev/null
      touch ${pthLog}/bzr-${_BZR_VRN}.log
      mkdir -p /root/.bazaar
      echo ignore_missing_extensions=True > /root/.bazaar/bazaar.conf
    fi
  fi
fi


###--------------------###
if [ ! -e "${pthLog}/umask_fixed_new.log" ]; then
  mkdir -p /var/www/nginx-default
  sed -i "s/^UMASK.*//g" /etc/default/login &> /dev/null
  echo "UMASK=002" >> /etc/default/login
  sed -i "/^$/d" /etc/default/login &> /dev/null
  sed -i "s/^UMASK.*/UMASK 002/g" /etc/login.defs &> /dev/null
  sed -i "s/^umask.*022/umask 002/g" /etc/profile &> /dev/null
  sed -i "s/^session optional pam_umask.*//g" /etc/pam.d/login &> /dev/null
  echo "session optional pam_umask.so umask=0002" >> /etc/pam.d/login
  sed -i "/^$/d" /etc/pam.d/login &> /dev/null
  echo "umask 002" >> /var/www/.profile
  chown www-data:www-data /var/www/.profile &> /dev/null
  chown www-data:www-data /var/www/nginx-default &> /dev/null
  touch ${pthLog}/umask_fixed_new.log
fi


###--------------------###
if [ ! -e "/var/www/nginx-default/profiles/commons/images/avatars" ]; then
  if [ -e "${bldPth}/aegir/var/commons/images" ]; then
    mkdir -p /var/www/nginx-default/profiles/commons
    cp -af ${bldPth}/aegir/var/commons/images \
      /var/www/nginx-default/profiles/commons/
    chown -R www-data:www-data /var/www/nginx-default/profiles &> /dev/null
    find /var/www/nginx-default/profiles -type d -exec chmod 0755 {} \; &> /dev/null
    find /var/www/nginx-default/profiles -type f -exec chmod 0644 {} \; &> /dev/null
  fi
fi


###--------------------###
if [ ! -e "${pthLog}/umask_fixed_shell_sftp.log" ]; then
  if [ "${_OSV}" = "lenny" ] || [ "${_OSV}" = "lucid" ]; then
    _DO_NOTHING=YES
  else
    sed -e '/Subsystem\ssftp/s:server$:server -u 0002:' -i /etc/ssh/sshd_config
  fi
  echo "session optional pam_umask.so umask=0002" >> /etc/pam.d/sshd
  mrun "service ssh restart" &> /dev/null
  touch ${pthLog}/umask_fixed_shell_sftp.log
fi
if [ ! -e "${pthLog}/src_umask_fixed_shell_sftp.log" ] \
  && [ -e "/usr/etc/sshd_config" ]; then
  if [ "${_OSV}" = "lenny" ] || [ "${_OSV}" = "lucid" ]; then
    _DO_NOTHING=YES
  else
    sed -e '/Subsystem\ssftp/s:server$:server -u 0002:' -i /usr/etc/sshd_config
  fi
  mrun "service ssh restart" &> /dev/null
  touch ${pthLog}/src_umask_fixed_shell_sftp.log
fi


###--------------------###
if [ "${_OSV}" = "lenny" ]; then
  _PATH_LSHELL="/usr/bin/lshell"
else
  _PATH_LSHELL="/usr/local/bin/lshell"
fi
if [ ! -e "/etc/logrotate.d/lshell" ] \
  || [ ! -e "$_PATH_LSHELL" ] \
  || [ ! -e "${pthLog}/lshell-build-${_LSHELL_VRN}" ] \
  || [ "${_FULL_FORCE_REINSTALL}" = "YES" ] \
  || [ "${_SSL_INSTALL_REQUIRED}" = "YES" ]; then
  if [ "${_STATUS}" = "UPGRADE" ]; then
    msg "INFO: Upgrading Limited Shell to version ${_LSHELL_VRN}..."
    cp -af /etc/lshell.conf /etc/lshell.conf-bak-${_NOW} &> /dev/null
  else
    msg "INFO: Installing Limited Shell ${_LSHELL_VRN}..."
  fi
  cd /var/opt
  rm -f -r lshell*
  get_dev_src "lshell-${_LSHELL_VRN}.tar.gz"
  for Files in `find /var/opt/lshell-${_LSHELL_VRN} -type f`; do
    sed -i "s/kicked/logged/g" $Files &> /dev/null
    sed -i "s/Kicked/Logged/g" $Files &> /dev/null
  done
  cd /var/opt/lshell-${_LSHELL_VRN}
  rm -f -r /usr/local/lib/python2.6/dist-packages/lshell*
  rm -f -r /usr/local/lib/python2.7/dist-packages/lshell*
  st_runner "python setup.py install --no-compile" 2> /dev/null
  if [ "${_STATUS}" = "UPGRADE" ]; then
    cp -af /etc/lshell.conf-bak-${_NOW} /etc/lshell.conf &> /dev/null
  else
    cp -af ${bldPth}/aegir/tools/system/conf/lshell.conf /etc/lshell.conf
    echo "$_PATH_LSHELL" >> /etc/shells
  fi
  sed -i "s/log\/lshell/log\/lsh/g" /etc/logrotate.d/lshell &> /dev/null
  addgroup --system lshellg &> /dev/null
  mkdir -p /var/log/lsh
  chown :lshellg /var/log/lsh
  chmod 770 /var/log/lsh &> /dev/null
  touch ${pthLog}/lshell-build-${_LSHELL_VRN}
  if [ -f "/var/xdrago/manage_ltd_users.sh" ]; then
    if [ "${_STATUS}" = "UPGRADE" ] \
      && [ "${_CUSTOM_CONFIG_LSHELL}" = "NO" ]; then
      cp -af ${bldPth}/aegir/tools/system/conf/lshell.conf \
        /var/xdrago/conf/lshell.conf
    fi
    st_runner "bash /var/xdrago/manage_ltd_users.sh" &> /dev/null
  fi
fi
if [ -f "/usr/local/bin/lshell" ]; then
  if [ ! -L "/usr/bin/lshell" ]; then
    ln -sf /usr/local/bin/lshell /usr/bin/lshell &> /dev/null
  fi
fi
if [[ "${_THISHOST}" =~ ".host8." ]] || [ "${_VMFAMILY}" = "VS" ]; then
  sed -i "s/rotate 12/rotate 50/g" /etc/logrotate.d/lshell &> /dev/null
fi


###--------------------###
if [[ "${_XTRAS_LIST}" =~ "ALL" ]] || [[ "${_XTRAS_LIST}" =~ "FTP" ]]; then
  if [ ! -e "/etc/ssl/private/pure-ftpd.pem" ] \
    || [ ! -e "/usr/local/sbin/pure-config.pl" ] \
    || [ ! -e "/usr/local/sbin/pure-ftpd" ] \
    || [ ! -e "${pthLog}/pure-ftpd-build-${_PURE_FTPD_VRN}-${_X_VERSION}.log" ] \
    || [ "${_FULL_FORCE_REINSTALL}" = "YES" ] \
    || [ "${_SSL_INSTALL_REQUIRED}" = "YES" ]; then
    msg "INFO: Building Pure-FTPd server from sources, please wait..."
    if [ ! -e "/usr/local/sbin/pure-config.pl" ]; then
      echo "/bin/false" >> /etc/shells
      echo "/bin/true" >> /etc/shells
    fi
    mkdir -p /etc/ssl/private/
    rm -f /etc/ssl/private/pure-ftpd.pem
    rm -f /usr/local/sbin/pure-ftpd
    st_runner "openssl req -x509 -nodes -days 7300 -newkey rsa:4096 \
      -keyout /etc/ssl/private/pure-ftpd.pem \
      -out /etc/ssl/private/pure-ftpd.pem -batch" 2> /dev/null
    chmod 600 /etc/ssl/private/pure-ftpd.pem &> /dev/null
    cd /var/opt
    rm -f -r pure-ftpd*
    mkdir -p /usr/local/etc
    get_dev_src "pure-ftpd-${_PURE_FTPD_VRN}.tar.gz"
    cd pure-ftpd-${_PURE_FTPD_VRN}
    st_runner "sh ./configure --with-everything --with-virtualchroot \
      --without-humor --with-tls --with-diraliases --with-pam \
      --with-certfile=/etc/ssl/private/pure-ftpd.pem" 2> /dev/null
    st_runner "make install-strip" 2> /dev/null
    cd /usr/local/sbin/
    cp -af ${locCnf}/pure-config.pl.txt ./
    mv -f pure-config.pl.txt pure-config.pl &> /dev/null
    chmod 755 /usr/local/sbin/pure-config.pl &> /dev/null
    cp -af /var/opt/pure-ftpd-${_PURE_FTPD_VRN}/pam/pure-ftpd /etc/pam.d/
    fix_ftps_pam
    cd /usr/local/etc
    rm -f pure-ftpd.conf
    cp -af ${locCnf}/pure-ftpd.conf ./
    killall -9 pure-ftpd &> /dev/null
    st_runner "/usr/local/sbin/pure-config.pl \
      /usr/local/etc/pure-ftpd.conf" &> /dev/null
    cd /var/opt
    touch ${pthLog}/pure-ftpd-build-${_PURE_FTPD_VRN}-${_X_VERSION}.log
  fi
fi


###--------------------###
if [ "${_STATUS}" = "UPGRADE" ]; then
  _REDIS_V_ITD=$(redis-server -v 2>&1 \
    | tr -d "\n" \
    | cut -d" " -f4 \
    | awk '{ print $1}' 2>&1)
  if [[ "$_REDIS_V_ITD" =~ "sha" ]]; then
    _REDIS_V_ITD=$(redis-server -v 2>&1 \
      | tr -d "\n" \
      | tr -d "v=" \
      | cut -d" " -f3 \
      | awk '{ print $1}' 2>&1)
  fi
  if [ "$_REDIS_V_ITD" = "${_REDIS_VRN}" ]; then
    _REDIS_INSTALL_MISMATCH=NO
    if [ "${_DEBUG_MODE}" = "YES" ]; then
      msg "INFO: Installed Redis version $_REDIS_V_ITD, OK"
    fi
  else
    _REDIS_INSTALL_MISMATCH=YES
    msg "INFO: Installed Redis version $_REDIS_V_ITD, upgrade required"
  fi
else
  if [ -x "/usr/bin/redis-server" ]; then
    _REDIS_V_ITD=$(redis-server -v 2>&1 \
      | tr -d "\n" \
      | cut -d" " -f4 \
      | awk '{ print $1}' 2>&1)
    if [[ "$_REDIS_V_ITD" =~ "sha" ]]; then
      _REDIS_V_ITD=$(redis-server -v 2>&1 \
        | tr -d "\n" \
        | tr -d "v=" \
        | cut -d" " -f3 \
        | awk '{ print $1}' 2>&1)
    fi
    if [ "$_REDIS_V_ITD" = "${_REDIS_VRN}" ]; then
      _REDIS_INSTALL_MISMATCH=NO
      if [ "${_DEBUG_MODE}" = "YES" ]; then
        msg "INFO: Installed Redis version $_REDIS_V_ITD, OK"
      fi
    else
      _REDIS_INSTALL_MISMATCH=YES
      msg "INFO: Installed Redis version $_REDIS_V_ITD, rebuild required"
    fi
  fi
fi
if [ "$_REDIS_INSTALL_MISMATCH" = "YES" ] \
  || [ ! -e "${pthLog}/redis-${_REDIS_VRN}-${_X_VERSION}.log" ] \
  || [ ! -d "/var/run/redis" ] \
  || [ ! -x "/usr/bin/redis-server" ] \
  || [ "${_FULL_FORCE_REINSTALL}" = "YES" ]; then
  if [ "$_REDIS_HOST" = "LOCAL" ] || [ -z "$_REDIS_HOST" ]; then
    install_redis_src
  fi
fi


###--------------------###
_NEWRELIC_APP_CFG="/etc/newrelic/newrelic.cfg"
if [ -e "$_NEWRELIC_APP_CFG" ]; then
  _NEWRELIC_KEY_TEST=$(grep "REPLACE_WITH_REAL_KEY" $_NEWRELIC_APP_CFG 2>&1)
  if [[ "${_NEWRELIC_KEY_TEST}" =~ "REPLACE_WITH_REAL_KEY" ]] \
    && [ ! -z "${_NEWRELIC_KEY}" ]; then
    sed -i "s/REPLACE_WITH_REAL_KEY/${_NEWRELIC_KEY}/g" \
      $_NEWRELIC_APP_CFG &> /dev/null
  fi
  sed -i "s/^loglevel=.*/loglevel=error/g" $_NEWRELIC_APP_CFG &> /dev/null
  mrun "service newrelic-daemon restart" &> /dev/null
fi


###--------------------###
_NEWRELIC_SYS_CFG="/etc/newrelic/nrsysmond.cfg"
if [ -e "$_NEWRELIC_SYS_CFG" ]; then
  _NEWRELIC_KEY_TEST=$(grep "REPLACE_WITH_REAL_KEY" $_NEWRELIC_SYS_CFG 2>&1)
  if [[ "${_NEWRELIC_KEY_TEST}" =~ "REPLACE_WITH_REAL_KEY" ]] \
    && [ ! -z "${_NEWRELIC_KEY}" ]; then
    sed -i "s/REPLACE_WITH_REAL_KEY/${_NEWRELIC_KEY}/g" \
      $_NEWRELIC_SYS_CFG &> /dev/null
  fi
  sed -i "s/^loglevel=.*/loglevel=error/g" \
    $_NEWRELIC_SYS_CFG &> /dev/null
  sed -i "s/.*pidfile=.*/pidfile=\/var\/run\/nrsysmond.pid/g" \
    $_NEWRELIC_SYS_CFG &> /dev/null
  if [ -e "/root/.enable.newrelic.sysmond.cnf" ]; then
    mrun "service newrelic-sysmond restart" &> /dev/null
  else
    mrun "service newrelic-sysmond stop" &> /dev/null
  fi
fi


###--------------------###
if [ ! -e "/usr/lib/jvm/java-6-openjdk" ] \
  && [ -d "/usr/lib/jvm/java-6-openjdk-amd64" ]; then
  ln -sf /usr/lib/jvm/java-6-openjdk-amd64 /usr/lib/jvm/java-6-openjdk
fi
if [ ! -e "/usr/lib/jvm/java-6-openjdk" ] \
  && [ -d "/usr/lib/jvm/java-6-openjdk-i386" ]; then
  ln -sf /usr/lib/jvm/java-6-openjdk-i386 /usr/lib/jvm/java-6-openjdk
fi
if [ ! -e "/usr/lib/jvm/java-7-openjdk" ] \
  && [ -d "/usr/lib/jvm/java-7-openjdk-amd64" ]; then
  ln -sf /usr/lib/jvm/java-7-openjdk-amd64 /usr/lib/jvm/java-7-openjdk
fi
if [ ! -e "/usr/lib/jvm/java-7-openjdk" ] \
  && [ -d "/usr/lib/jvm/java-7-openjdk-i386" ]; then
  ln -sf /usr/lib/jvm/java-7-openjdk-i386 /usr/lib/jvm/java-7-openjdk
fi
if [ ! -e "/usr/bin/java7" ] \
  && [ -e "/usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java" ]; then
  ln -sf /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java /usr/bin/java7
fi
if [ ! -e "/usr/bin/java7" ] \
  && [ -e "/usr/lib/jvm/java-7-openjdk-i386/jre/bin/java" ]; then
  ln -sf /usr/lib/jvm/java-7-openjdk-i386/jre/bin/java /usr/bin/java7
fi


###--------------------###
if [ "${_OSV}" = "wheezy" ] \
  || [ "${_OSV}" = "trusty" ] \
  || [ "${_OSV}" = "precise" ]; then
  _REAL_JETTY=9
  _JETTY_CTRL="/opt/jetty9/jetty-ctrl-${_JETTY_9_VRN}-version.txt"
else
  _REAL_JETTY=8
  _JETTY_CTRL="/opt/jetty9/jetty-ctrl-${_JETTY_8_VRN}-version.txt"
fi
_SOLR_CTRL="/opt/jetty9/solr-${_SOLR_4_VRN}-version.txt"
if [ -e "/opt/jetty9/start.d/http.ini" ]; then
  _PORT_CTRL="/opt/jetty9/start.d/.fixed.http.ini.txt"
else
  _PORT_CTRL="$_JETTY_CTRL"
fi
if [[ "${_XTRAS_LIST}" =~ "SR4" ]] \
  || [[ "${_THISHOST}" =~ ".host8." ]] \
  || [ -e "/root/.auto.up.cnf" ] \
  || [ -e "/root/.host8.cnf" ]; then
  if [ ! -d "/opt/solr4" ] \
    && [ ! -e "/root/.mstr.clstr.cnf" ] \
    && [ ! -e "/root/.wbhd.clstr.cnf" ] \
    && [ ! -e "/root/.dbhd.clstr.cnf" ]; then
    if [ "${_OSV}" = "wheezy" ] \
      || [ "${_OSV}" = "trusty" ] \
      || [ "${_OSV}" = "precise" ]; then
      _REAL_JETTY=9
    else
      _REAL_JETTY=8
    fi
    echo " "
    if prompt_yes_no "Do you want to install MultiCore Apache Solr 4 \
      with Jetty $_REAL_JETTY?" ; then
      true
      msg "INFO: Installing MultiCore Apache Solr 4 with Jetty $_REAL_JETTY..."
      cd /var/opt
      rm -f -r jetty-distribution-*
      rm -f -r /opt/solr4
      rm -f -r /opt/jetty9
      rm -f /etc/jetty.conf
      if [ "${_OSV}" = "wheezy" ] \
        || [ "${_OSV}" = "trusty" ] \
        || [ "${_OSV}" = "precise" ]; then
        get_dev_arch "jetty-distribution-${_JETTY_9_VRN}.tar.gz"
        mv /var/opt/jetty-distribution-${_JETTY_9_VRN} /opt/jetty9
        echo ${_JETTY_9_VRN} > $_JETTY_CTRL
      else
        get_dev_arch "jetty-distribution-${_JETTY_8_VRN}.tar.gz"
        mv /var/opt/jetty-distribution-${_JETTY_8_VRN} /opt/jetty9
        echo ${_JETTY_8_VRN} > $_JETTY_CTRL
      fi
      get_dev_arch "solr-${_SOLR_4_VRN}.tgz"
      cp -af /var/opt/solr-${_SOLR_4_VRN}/dist/solr-${_SOLR_4_VRN}.war \
        /opt/jetty9/webapps/solr.war
      mv -f /var/opt/solr-${_SOLR_4_VRN}/example/multicore \
        /opt/solr4 &> /dev/null
      mkdir -p /opt/solr4/core{0,1,2,3,4,5,6,7,8,9}/conf
      mkdir -p /opt/solr4/core{0,1,2,3,4,5,6,7,8,9}/data
      mkdir -p /var/log/jetty9
      if [ ! -e "/opt/tika9" ]; then
        cd /var/opt
        rm -f -r apachesolr_attachments*
        get_dev_contrib "apachesolr_attachments-7.x-1.x-dev.tar.gz"
        cd /var/opt/solr-${_SOLR_4_VRN}/example/solr/collection1/conf/
        patch -p0 < \
          /var/opt/apachesolr_attachments/solrconfig.tika.patch &> /dev/null
        ln -sf /opt/jetty9/lib /opt/tika9
        cd /opt/tika9
        wget -q -U iCab ${urlDev}/tika-app-1.3.jar
        wget -q -U iCab ${urlDev}/tika-app-1.1.jar
      fi
      for Dir in `find /opt/solr4/core{0,1,2,3,4,5,6,7,8,9}/ \
        -maxdepth 1 -mindepth 1 -type d | grep conf`; do
        rm -f -r $Dir/*
        cp -af /var/opt/solr-${_SOLR_4_VRN}/example/solr/collection1/conf/* \
          $Dir/ &> /dev/null
      done
      adduser --system --group --home /opt/solr4 jetty9 &> /dev/null
      if [ ! -e "/opt/solr4/search_api_solr-7.x-1.6.log" ]; then
        cd /var/opt
        rm -f -r search_api_solr*
        get_dev_contrib "search_api_solr-7.x-1.6.tar.gz"
        for Dir in `find /opt/solr4/core{0,1,2,3,4,5,6,7,8,9}/ \
          -maxdepth 1 -mindepth 1 -type d | grep conf`; do
          cp -af /var/opt/search_api_solr/solr-conf/4.x/* $Dir/ &> /dev/null
        done
        sed -i "s/8983/8099/g" \
          /opt/solr4/core{0,1,2,3,4,5,6,7,8,9}/conf/solrcore.properties &> /dev/null
        touch /opt/solr4/search_api_solr-7.x-1.6.log
      fi
      cp -af ${bldPth}/docs/SOLR.txt /opt/solr4/README.txt &> /dev/null
      chown -R jetty9:jetty9 /opt/solr4
      chown -R jetty9:jetty9 /opt/jetty9
      chown -R jetty9:jetty9 /var/log/jetty9
      if [ "${_OSV}" = "wheezy" ] || [ "${_OSV}" = "trusty" ] \
        || [ "${_OSV}" = "precise" ]; then
        echo "JAVA=/usr/bin/java7 # Path to Java 1.7" > /etc/default/jetty9
        echo "JAVA_HOME=/usr/lib/jvm/java-7-openjdk/jre # Path to Java 1.7" >> \
          /etc/default/jetty9
      else
        echo "JAVA=/usr/bin/java # Path to Java 1.6" > /etc/default/jetty9
        echo "JAVA_HOME=/usr/lib/jvm/java-6-openjdk/jre # Path to Java 1.6" >> \
          /etc/default/jetty9
      fi
      echo "NO_START=0 # Start on boot" >> /etc/default/jetty9
      echo "JETTY_HOST=127.0.0.1 # Listen on localhost" >> /etc/default/jetty9
      echo "JETTY_PORT=8099 # Run on this port" >> /etc/default/jetty9
      echo "JETTY_USER=jetty9 # Run as this user" >> /etc/default/jetty9
      echo "JETTY_HOME=/opt/jetty9 # Home directory" >> /etc/default/jetty9
      echo "JETTY_LOGS=/var/log/jetty9 # Logs directory" >> /etc/default/jetty9
      echo "JETTY_RUN=/var/run # Run directory" >> /etc/default/jetty9
      echo "JETTY_PID=\$JETTY_RUN/jetty9.pid # Pid file" >> /etc/default/jetty9
      echo "JAVA_OPTIONS=\"-Xms8m -Xmx128m -Djava.awt.headless=true \
        -Dsolr.solr.home=/opt/solr4 \$JAVA_OPTIONS\" \
        # Options" | fmt -su -w 2500 >> /etc/default/jetty9
      if [ "${_OSV}" = "wheezy" ] \
        || [ "${_OSV}" = "trusty" ] \
        || [ "${_OSV}" = "precise" ]; then
        _DO_NOTHING=YES
      else
        sed -i "s/8/9/g" /opt/jetty9/bin/jetty.sh &> /dev/null
        sed -i "s/9090/8099/g" /opt/jetty9/bin/jetty.sh &> /dev/null
      fi
      if [ -e "/opt/jetty9/start.d/http.ini" ]; then
        sed -i "s/8080/8099/g" /opt/jetty9/start.d/http.ini &> /dev/null
        touch /opt/jetty9/start.d/.fixed.http.ini.txt &> /dev/null
      fi
      sed -i "s/8080/8099/g" /opt/jetty9/bin/jetty.sh &> /dev/null
      ln -sf /opt/jetty9/bin/jetty.sh /etc/init.d/jetty9 &> /dev/null
      chmod 755 /etc/init.d/jetty9
      st_runner "update-rc.d jetty9 defaults" &> /dev/null
      mrun "service jetty9 start" &> /dev/null
      echo ${_SOLR_4_VRN} > $_SOLR_CTRL
      msg "INFO: MultiCore Apache Solr 4 with Jetty $_REAL_JETTY installed"
    else
      msg "INFO: MultiCore Apache Solr 4 with Jetty $_REAL_JETTY not installed"
    fi
  fi
fi
if [ "$_UP_JDK" = "YES" ] && [ -e "/etc/init.d/jetty9" ]; then
  msg "INFO: Jetty 9 restart in progress - required after java upgrade"
  kill -9 $(ps aux | grep '[j]etty9' | awk '{print $2}') &> /dev/null
  mrun "service jetty9 start" &> /dev/null
  msg "INFO: Jetty 9 restart completed"
fi
if [ -e "/opt/jetty9/VERSION.txt" ]; then
  if [ "${_OSV}" = "wheezy" ] \
    || [ "${_OSV}" = "trusty" ] \
    || [ "${_OSV}" = "precise" ]; then
    _JETTY9_JAVA_TEST=$(grep "Path to Java 1.7" /etc/default/jetty9 2>&1)
    if [[ "$_JETTY9_JAVA_TEST" =~ "Path to Java 1.7" ]]; then
      _DO_NOTHING=YES
    else
      echo "JAVA=/usr/bin/java7 # Path to Java 1.7" > /etc/default/jetty9
      echo "JAVA_HOME=/usr/lib/jvm/java-7-openjdk/jre # Path to Java 1.7" >> \
        /etc/default/jetty9
      echo "NO_START=0 # Start on boot" >> /etc/default/jetty9
      echo "JETTY_HOST=127.0.0.1 # Listen on localhost" >> /etc/default/jetty9
      echo "JETTY_PORT=8099 # Run on this port" >> /etc/default/jetty9
      echo "JETTY_USER=jetty9 # Run as this user" >> /etc/default/jetty9
      echo "JETTY_HOME=/opt/jetty9 # Home directory" >> /etc/default/jetty9
      echo "JETTY_LOGS=/var/log/jetty9 # Logs directory" >> /etc/default/jetty9
      echo "JETTY_RUN=/var/run # Run directory" >> /etc/default/jetty9
      echo "JETTY_PID=\$JETTY_RUN/jetty9.pid # Pid file" >> /etc/default/jetty9
      echo "JAVA_OPTIONS=\"-Xms8m -Xmx128m \
        -Djava.awt.headless=true \
        -Dsolr.solr.home=/opt/solr4 \$JAVA_OPTIONS\" \
        # Options" | fmt -su -w 2500 >> /etc/default/jetty9
    fi
  fi
  if [ ! -e "$_PORT_CTRL" ] \
    || [ ! -e "$_JETTY_CTRL" ] \
    || [ ! -e "$_SOLR_CTRL" ]; then
    msg "INFO: Upgrading MultiCore Apache Solr 4 with Jetty $_REAL_JETTY..."
    cd /var/opt
    rm -f -r jetty-distribution-*
    kill -9 $(ps aux | grep '[j]etty9' | awk '{print $2}') &> /dev/null
    mv -f /opt/jetty9 ${vBs}/jetty9-${_X_VERSION}-${_NOW}
    if [ "${_OSV}" = "wheezy" ] \
      || [ "${_OSV}" = "trusty" ] \
      || [ "${_OSV}" = "precise" ]; then
      get_dev_arch "jetty-distribution-${_JETTY_9_VRN}.tar.gz"
      mv /var/opt/jetty-distribution-${_JETTY_9_VRN} /opt/jetty9
      echo ${_JETTY_9_VRN} > $_JETTY_CTRL
    else
      get_dev_arch "jetty-distribution-${_JETTY_8_VRN}.tar.gz"
      mv /var/opt/jetty-distribution-${_JETTY_8_VRN} /opt/jetty9
      sed -i "s/8/9/g" /opt/jetty9/bin/jetty.sh &> /dev/null
      sed -i "s/9090/8099/g" /opt/jetty9/bin/jetty.sh &> /dev/null
      echo ${_JETTY_8_VRN} > $_JETTY_CTRL
    fi
    if [ -e "/opt/jetty9/start.d/http.ini" ]; then
      sed -i "s/8080/8099/g" /opt/jetty9/start.d/http.ini &> /dev/null
      touch /opt/jetty9/start.d/.fixed.http.ini.txt &> /dev/null
    fi
    sed -i "s/8080/8099/g" /opt/jetty9/bin/jetty.sh &> /dev/null
    get_dev_arch "solr-${_SOLR_4_VRN}.tgz"
    cp -af /var/opt/solr-${_SOLR_4_VRN}/dist/solr-${_SOLR_4_VRN}.war \
      /opt/jetty9/webapps/solr.war
    rm -f -r /opt/jetty9/solr
    cd /opt/jetty9/lib/
    wget -q -U iCab ${urlDev}/tika-app-1.3.jar
    wget -q -U iCab ${urlDev}/tika-app-1.1.jar
    cd /var/opt
    chown -R jetty9:jetty9 /opt/jetty9
    mrun "service jetty9 start" &> /dev/null
    echo ${_SOLR_4_VRN} > $_SOLR_CTRL
    msg "INFO: MultiCore Apache Solr 4 with Jetty $_REAL_JETTY upgrade completed"
  fi
fi


###--------------------###
_JETTY_CTRL="/opt/jetty8/jetty-ctrl-${_JETTY_8_VRN}-version.txt"
_SOLR_CTRL="/opt/jetty8/solr-${_SOLR_3_VRN}-version.txt"
if [[ "${_XTRAS_LIST}" =~ "SR3" ]]; then
  if [ ! -d "/opt/solr3" ]; then
    echo " "
    if prompt_yes_no "Do you want to install MultiCore Apache Solr 3 \
      with Jetty 8?" ; then
      true
      msg "INFO: Installing MultiCore Apache Solr 3 with Jetty 8..."
      cd /var/opt
      rm -f -r jetty-distribution-*
      rm -f -r /opt/solr3
      rm -f -r /opt/jetty8
      rm -f /etc/jetty.conf
      get_dev_arch "jetty-distribution-${_JETTY_8_VRN}.tar.gz"
      mv /var/opt/jetty-distribution-${_JETTY_8_VRN} /opt/jetty8
      get_dev_arch "apache-solr-${_SOLR_3_VRN}.tgz"
      cp -af /var/opt/apache-solr-${_SOLR_3_VRN}/dist/apache-solr-${_SOLR_3_VRN}.war \
        /opt/jetty8/webapps/solr.war
      mv -f /var/opt/apache-solr-${_SOLR_3_VRN}/example/multicore \
        /opt/solr3 &> /dev/null
      mkdir -p /opt/solr3/core{0,1,2,3,4,5,6,7,8,9}/conf
      mkdir -p /opt/solr3/core{0,1,2,3,4,5,6,7,8,9}/data
      mkdir -p /var/log/jetty8
      if [ ! -e "/opt/tika8" ]; then
        cd /var/opt
        rm -f -r apachesolr_attachments*
        get_dev_contrib "apachesolr_attachments-7.x-1.x-dev.tar.gz"
        cd /var/opt/apache-solr-${_SOLR_3_VRN}/example/solr/conf
        patch -p0 < \
          /var/opt/apachesolr_attachments/solrconfig.tika.patch &> /dev/null
        ln -sf /opt/jetty8/lib /opt/tika8
        cd /opt/tika8
        wget -q -U iCab ${urlDev}/tika-app-1.3.jar
        wget -q -U iCab ${urlDev}/tika-app-1.1.jar
      fi
      for Dir in `find /opt/solr3/core{0,1,2,3,4,5,6,7,8,9}/ \
        -maxdepth 1 -mindepth 1 -type d | grep conf`; do
        rm -f -r $Dir/*
        cp -af /var/opt/apache-solr-${_SOLR_3_VRN}/example/solr/conf/* \
          $Dir/ &> /dev/null
      done
      adduser --system --group --home /opt/solr3 jetty8 &> /dev/null
      if [ ! -e "/opt/solr3/search_api_solr-7.x-1.6.log" ]; then
        cd /var/opt
        rm -f -r search_api_solr*
        get_dev_contrib "search_api_solr-7.x-1.6.tar.gz"
        for Dir in `find /opt/solr3/core{0,1,2,3,4,5,6,7,8,9}/ \
          -maxdepth 1 -mindepth 1 -type d | grep conf`; do
          cp -af /var/opt/search_api_solr/solr-conf/3.x/* $Dir/ &> /dev/null
        done
        sed -i "s/8983/8088/g" \
          /opt/solr3/core{0,1,2,3,4,5,6,7,8,9}/conf/solrcore.properties &> /dev/null
        touch /opt/solr3/search_api_solr-7.x-1.6.log
      fi
      cp -af ${bldPth}/docs/SOLR.txt /opt/solr3/README.txt &> /dev/null
      chown -R jetty8:jetty8 /opt/solr3
      chown -R jetty8:jetty8 /opt/jetty8
      chown -R jetty8:jetty8 /var/log/jetty8
      echo "JAVA=/usr/bin/java # Path to Java 1.6" > /etc/default/jetty8
      echo "JAVA_HOME=/usr/lib/jvm/java-6-openjdk/jre # Path to Java 1.6" >> \
        /etc/default/jetty8
      echo "NO_START=0 # Start on boot" >> /etc/default/jetty8
      echo "JETTY_HOST=127.0.0.1 # Listen on localhost" >> /etc/default/jetty8
      echo "JETTY_PORT=8088 # Run on this port" >> /etc/default/jetty8
      echo "JETTY_USER=jetty8 # Run as this user" >> /etc/default/jetty8
      echo "JETTY_HOME=/opt/jetty8 # Home directory" >> /etc/default/jetty8
      echo "JETTY_LOGS=/var/log/jetty8 # Logs directory" >> /etc/default/jetty8
      echo "JETTY_RUN=/var/run # Run directory" >> /etc/default/jetty8
      echo "JETTY_PID=\$JETTY_RUN/jetty8.pid # Pid file" >> /etc/default/jetty8
      echo "JAVA_OPTIONS=\"-Xms8m -Xmx128m \
        -Djava.awt.headless=true \
        -Dsolr.solr.home=/opt/solr3 \$JAVA_OPTIONS\" \
        # Options" | fmt -su -w 2500 >> /etc/default/jetty8
      sed -i "s/8080/8088/g" /opt/jetty8/bin/jetty.sh &> /dev/null
      ln -sf /opt/jetty8/bin/jetty.sh /etc/init.d/jetty8 &> /dev/null
      chmod 755 /etc/init.d/jetty8
      st_runner "update-rc.d jetty8 defaults" &> /dev/null
      mrun "service jetty8 start" &> /dev/null
      echo ${_JETTY_8_VRN} > $_JETTY_CTRL
      echo ${_SOLR_3_VRN}  > $_SOLR_CTRL
      msg "INFO: MultiCore Apache Solr 3 with Jetty 8 installation completed"
    else
      msg "INFO: MultiCore Apache Solr 3 with Jetty 8 installation skipped"
    fi
  fi
fi
if [ "$_UP_JDK" = "YES" ] && [ -e "/etc/init.d/jetty8" ]; then
  msg "INFO: Jetty 8 restart in progress - required after java upgrade"
  kill -9 $(ps aux | grep '[j]etty8' | awk '{print $2}') &> /dev/null
  mrun "service jetty8 start" &> /dev/null
  msg "INFO: Jetty 8 restart completed"
fi
if [ -e "/opt/jetty8/VERSION.txt" ]; then
  if [ ! -e "$_JETTY_CTRL" ] || [ ! -e "$_SOLR_CTRL" ]; then
    msg "INFO: Upgrading MultiCore Apache Solr 3 with Jetty 8..."
    cd /var/opt
    rm -f -r jetty-distribution-*
    get_dev_arch "jetty-distribution-${_JETTY_8_VRN}.tar.gz"
    kill -9 $(ps aux | grep '[j]etty8' | awk '{print $2}') &> /dev/null
    mv -f /opt/jetty8 ${vBs}/jetty8-${_X_VERSION}-${_NOW}
    mv -f /var/opt/jetty-distribution-${_JETTY_8_VRN} /opt/jetty8
    get_dev_arch "apache-solr-${_SOLR_3_VRN}.tgz"
    cp -af /var/opt/apache-solr-${_SOLR_3_VRN}/dist/apache-solr-${_SOLR_3_VRN}.war \
      /opt/jetty8/webapps/solr.war
    rm -f -r /opt/jetty8/solr
    cd /opt/jetty8/lib/
    wget -q -U iCab ${urlDev}/tika-app-1.3.jar
    wget -q -U iCab ${urlDev}/tika-app-1.1.jar
    cd /var/opt
    chown -R jetty8:jetty8 /opt/jetty8
    mrun "service jetty8 start" &> /dev/null
    echo ${_JETTY_8_VRN} > $_JETTY_CTRL
    echo ${_SOLR_3_VRN}  > $_SOLR_CTRL
    msg "INFO: MultiCore Apache Solr 3 with Jetty 8 upgrade completed"
  fi
fi


###--------------------###
_JETTY_CTRL="/opt/jetty7/jetty-ctrl-${_JETTY_7_VRN}-version.txt"
_SOLR_CTRL="/opt/jetty7/solr-${_SOLR_1_VRN}-version.txt"
if [[ "${_XTRAS_LIST}" =~ "SR1" ]] || [ "${_TOMCAT_TO_JETTY}" = "YES" ]; then
  if [ ! -d "/opt/solr1" ]; then
    echo " "
    if prompt_yes_no "Do you want to install MultiCore Apache Solr 1 \
      with Jetty 7?" ; then
      true
      msg "INFO: Installing MultiCore Apache Solr 1 with Jetty 7..."
      cd /var/opt
      rm -f -r jetty-distribution-*
      rm -f -r /opt/solr1
      rm -f -r /opt/jetty7
      rm -f /etc/jetty.conf
      get_dev_arch "jetty-distribution-${_JETTY_7_VRN}.tar.gz"
      mv /var/opt/jetty-distribution-${_JETTY_7_VRN} /opt/jetty7
      get_dev_arch "apache-solr-${_SOLR_1_VRN}.tgz"
      cp -af /var/opt/apache-solr-${_SOLR_1_VRN}/dist/apache-solr-${_SOLR_1_VRN}.war \
        /opt/jetty7/webapps/solr.war
      mv -f /var/opt/apache-solr-${_SOLR_1_VRN}/example/multicore \
        /opt/solr1 &> /dev/null
      mkdir -p /opt/solr1/core{0,1,2,3,4,5,6,7,8,9}/conf
      mkdir -p /opt/solr1/core{0,1,2,3,4,5,6,7,8,9}/data
      mkdir -p /var/log/jetty7
      if [ ! -e "/opt/tika7" ]; then
        cd /var/opt
        rm -f -r apachesolr_attachments*
        get_dev_contrib "apachesolr_attachments-7.x-1.x-dev.tar.gz"
        cd /var/opt/apache-solr-${_SOLR_1_VRN}/example/solr/conf
        patch -p0 < \
          /var/opt/apachesolr_attachments/solrconfig.tika.patch &> /dev/null
        ln -sf /opt/jetty7/lib /opt/tika7
        cd /opt/tika7
        wget -q -U iCab ${urlDev}/tika-app-1.3.jar
        wget -q -U iCab ${urlDev}/tika-app-1.1.jar
      fi
      for Dir in `find /opt/solr1/core{0,1,2,3,4,5,6,7,8,9}/ \
        -maxdepth 1 -mindepth 1 -type d | grep conf`; do
        rm -f -r $Dir/*
        cp -af /var/opt/apache-solr-${_SOLR_1_VRN}/example/solr/conf/* \
        $Dir/ &> /dev/null
      done
      adduser --system --group --home /opt/solr1 jetty7 &> /dev/null
      if [ ! -e "/opt/solr1/search_api_solr-7.x-1.6.log" ]; then
        cd /var/opt
        rm -f -r search_api_solr*
        get_dev_contrib "search_api_solr-7.x-1.6.tar.gz"
        for Dir in `find /opt/solr1/core{0,1,2,3,4,5,6,7,8,9}/ \
          -maxdepth 1 -mindepth 1 -type d | grep conf`; do
          cp -af /var/opt/search_api_solr/solr-conf/1.4/* \
            $Dir/ &> /dev/null
        done
        sed -i "s/8983/8077/g" \
          /opt/solr1/core{0,1,2,3,4,5,6,7,8,9}/conf/solrcore.properties &> /dev/null
        touch /opt/solr1/search_api_solr-7.x-1.6.log
      fi
      cp -af ${bldPth}/docs/SOLR.txt /opt/solr1/README.txt &> /dev/null
      rm -f -r /opt/jetty7/solr
      chown -R jetty7:jetty7 /opt/solr1
      chown -R jetty7:jetty7 /opt/jetty7
      chown -R jetty7:jetty7 /var/log/jetty7
      echo "JAVA=/usr/bin/java # Path to Java 1.6" > /etc/default/jetty7
      echo "JAVA_HOME=/usr/lib/jvm/java-6-openjdk/jre # Path to Java 1.6" >> \
        /etc/default/jetty7
      echo "NO_START=0 # Start on boot" >> /etc/default/jetty7
      echo "JETTY_HOST=127.0.0.1 # Listen on localhost" >> /etc/default/jetty7
      echo "JETTY_PORT=8077 # Run on this port" >> /etc/default/jetty7
      echo "JETTY_USER=jetty7 # Run as this user" >> /etc/default/jetty7
      echo "JETTY_HOME=/opt/jetty7 # Home directory" >> /etc/default/jetty7
      echo "JETTY_LOGS=/var/log/jetty7 # Logs directory" >> /etc/default/jetty7
      echo "JETTY_RUN=/var/run # Run directory" >> /etc/default/jetty7
      echo "JETTY_PID=\$JETTY_RUN/jetty7.pid # Pid file" >> /etc/default/jetty7
      echo "JAVA_OPTIONS=\"-Xms8m -Xmx128m \
        -Djava.awt.headless=true \
        -Dsolr.solr.home=/opt/solr1 \$JAVA_OPTIONS\" \
        # Options" | fmt -su -w 2500 >> /etc/default/jetty7
      sed -i "s/8080/8077/g" /opt/jetty7/bin/jetty.sh &> /dev/null
      ln -sf /opt/jetty7/bin/jetty.sh /etc/init.d/jetty7 &> /dev/null
      chmod 755 /etc/init.d/jetty7
      st_runner "update-rc.d jetty7 defaults" &> /dev/null
      mrun "service jetty7 start" &> /dev/null
      echo ${_JETTY_7_VRN} > $_JETTY_CTRL
      echo ${_SOLR_1_VRN}  > $_SOLR_CTRL
      msg "INFO: MultiCore Apache Solr 1 with Jetty 7 installation completed"
    else
      msg "INFO: MultiCore Apache Solr 1 with Jetty 7 installation skipped"
    fi
  fi
fi
if [ "$_UP_JDK" = "YES" ] && [ -e "/etc/init.d/jetty7" ]; then
  msg "INFO: Jetty 7 restart in progress - required after java upgrade"
  kill -9 $(ps aux | grep '[j]etty7' | awk '{print $2}') &> /dev/null
  mrun "service jetty7 start" &> /dev/null
  msg "INFO: Jetty 7 restart completed"
fi
if [ "${_TOMCAT_TO_JETTY}" = "YES" ] \
  && [ -e "/etc/init.d/jetty7" ] \
  && [ -e "/etc/default/tomcat" ] \
  && [ -e "/etc/init.d/tomcat" ]; then
  msg "INFO: Tomcat 6 to Jetty 7 migration for Apache Solr 1 in progress..."
  mrun "service tomcat stop" &> /dev/null
  st_runner "update-rc.d tomcat remove" &> /dev/null
  mv -f /etc/init.d/tomcat /etc/init.d/offtomcat &> /dev/null
  mv -f /opt/solr1/solr.xml /opt/solr1/vanilla-solr.xml
  mv -f /opt/solr/* /opt/solr1/
  cp -af ${bldPth}/docs/SOLR.txt /opt/solr1/README.txt &> /dev/null
  chown -R jetty7:jetty7 /opt/solr1
  sed -i "s/8077/8080/g" /etc/default/jetty7 &> /dev/null
  sed -i "s/8077/8080/g" \
    /opt/solr1/core{0,1,2,3,4,5,6,7,8,9}/conf/solrcore.properties &> /dev/null
  sed -i "s/8077/8080/g" \
    /opt/solr1/site_00{1,2,3,4,5,6,7,8,9}/conf/solrcore.properties &> /dev/null
  sed -i "s/8077/8080/g" \
    /opt/solr1/conf/solrcore.properties &> /dev/null
  msg "INFO: Jetty 7 restart in progress - required after migration from Tomcat"
  kill -9 $(ps aux | grep '[j]etty7' | awk '{print $2}') &> /dev/null
  mrun "service jetty7 start" &> /dev/null
  sed -i "s/^_TOMCAT_TO_JETTY.*//g" ${barCnf}
  sed -i "/^$/d" ${barCnf}
  msg "INFO: Tomcat 6 to Jetty 7 migration for Apache Solr 1 completed"
fi
if [ -e "/opt/jetty7/VERSION.txt" ]; then
  if [ ! -e "$_JETTY_CTRL" ] || [ ! -e "$_SOLR_CTRL" ]; then
    msg "INFO: Upgrading MultiCore Apache Solr 1 with Jetty 7..."
    cd /var/opt
    rm -f -r jetty-distribution-*
    get_dev_arch "jetty-distribution-${_JETTY_7_VRN}.tar.gz"
    kill -9 $(ps aux | grep '[j]etty7' | awk '{print $2}') &> /dev/null
    mv -f /opt/jetty7 ${vBs}/jetty7-${_X_VERSION}-${_NOW}
    mv -f /var/opt/jetty-distribution-${_JETTY_7_VRN} /opt/jetty7
    get_dev_arch "apache-solr-${_SOLR_1_VRN}.tgz"
    cp -af /var/opt/apache-solr-${_SOLR_1_VRN}/dist/apache-solr-${_SOLR_1_VRN}.war \
      /opt/jetty7/webapps/solr.war
    rm -f -r /opt/jetty7/solr
    cd /opt/jetty7/lib/
    wget -q -U iCab ${urlDev}/tika-app-1.3.jar
    wget -q -U iCab ${urlDev}/tika-app-1.1.jar
    cd /var/opt
    chown -R jetty7:jetty7 /opt/jetty7
    mrun "service jetty7 start" &> /dev/null
    echo ${_JETTY_7_VRN} > $_JETTY_CTRL
    echo ${_SOLR_1_VRN}  > $_SOLR_CTRL
    msg "INFO: MultiCore Apache Solr 1 with Jetty 7 upgrade completed"
  fi
fi


###--------------------###
if [ ! -e "/root/.my.pass.txt" ]; then
  if [ "${_THIS_DB_HOST}" = "localhost" ] \
    || [ "${_THIS_DB_HOST}" = "FQDN" ]; then
    msg "INFO: Generating random password for ${_DB_SERVER}"
  else
    msg "INFO: Using default dummy password for ${_DB_SERVER}"
  fi
  touch /root/.my.pass.txt
  chmod 0600 /root/.my.pass.txt &> /dev/null
  if [ "${_THIS_DB_HOST}" = "localhost" ] \
    || [ "${_THIS_DB_HOST}" = "FQDN" ]; then
    _ESC_PASS=""
    _LEN_PASS=0
    if [ "${_STRONG_PASSWORDS}" = "YES" ]; then
      _PWD_CHARS=32
    elif [ "${_STRONG_PASSWORDS}" = "NO" ]; then
      _PWD_CHARS=8
    else
      _STRONG_PASSWORDS=${_STRONG_PASSWORDS//[^0-9]/}
      if [ ! -z "${_STRONG_PASSWORDS}" ] \
        && [ "${_STRONG_PASSWORDS}" -gt "8" ]; then
        _PWD_CHARS="${_STRONG_PASSWORDS}"
      else
        _PWD_CHARS=8
      fi
      if [ ! -z "${_PWD_CHARS}" ] && [ "${_PWD_CHARS}" -gt "128" ]; then
        _PWD_CHARS=128
      fi
    fi
    if [ "${_STRONG_PASSWORDS}" = "YES" ] || [ "${_PWD_CHARS}" -gt "8" ]; then
      _ESC_PASS=$(randpass "${_PWD_CHARS}" esc 2>&1)
      _ESC_PASS=$(echo -n "${_ESC_PASS}" | tr -d "\n" 2>&1)
      _LEN_PASS=$(echo ${#_ESC_PASS} 2>&1)
    fi
    if [ -z "${_ESC_PASS}" ] || [ "${_LEN_PASS}" -lt "9" ]; then
      _ESC_PASS=$(pwgen -v -s -1 2>&1)
      _ESC_PASS=$(echo -n "${_ESC_PASS}" | tr -d "\n" 2>&1)
      _ESC_PASS=$(sanitize_string "${_ESC_PASS}" 2>&1)
    fi
  else
    _ESC_PASS=sCWL4tgEpyS5cLZITshxSTWRjhsUOeR6
  fi
  echo "${_ESC_PASS}" > /root/.my.pass.txt
fi
if [ -e "/root/.my.pass.txt" ]; then
  for Files in `find /var/xdrago -maxdepth 1 -mindepth 1 -type f`; do
    sed -i "s/php-fpm nginx php/php-fpm php-cgi nginx php/g" $Files &> /dev/null
  done
  if [ "${_STATUS}" = "INIT" ]; then
    msg "INFO: Updating ${_DB_SERVER} and PHP configuration"
    update_sql_conf
    update_php_conf
    update_ini_tpl
    tune_memory_limits
    msg "INFO: Restarting ${_DB_SERVER} server..."
    mrun "service mysql restart" &> /dev/null
    msg "INFO: OS and services installation completed"
  else
    msg "INFO: Updating ${_DB_SERVER} and PHP configuration"
    update_sql_conf
    update_php_conf
    update_ini_tpl
    tune_memory_limits
    msg "INFO: OS and services upgrade completed"
  fi
else
  msg "EXIT on error due to not found file with your ${_DB_SERVER} root password"
  cat <<EOF

  It appears that you don't have required file with your root sql password.
  Create this file first and run this script again:

  echo "your_working_SQL_ROOT_password" > /root/.my.pass.txt
  chmod 0600 /root/.my.pass.txt

EOF
  msg "EXIT on error due to not found file with your ${_DB_SERVER} root password"
  clean_pid_exit
fi


if [ "${_STATUS}" = "INIT" ]; then


###--------------------###
  if [ ! -e "/var/run/mysqld/mysqld.pid" ] \
    || [ ! -e "/var/run/mysqld/mysqld.sock" ]; then
    _DB_SERVER_TEST=$(mysql -V 2>&1)
    if [[ "${_DB_SERVER_TEST}" =~ "MariaDB" ]]; then
      _DB_SERVER=MariaDB
      msg "ALRT! ${_DB_SERVER} server not running properly!"
      msg "EXIT: We can't proceed with installation and will exit now"
      msg "HINT: Please check ${_LOG} for more information,"
      msg "HINT: (re)start ${_DB_SERVER} server and then run installer again"
      msg "Bye"
    else
      msg "ALRT! ${_DB_SERVER} server not installed properly!"
      msg "EXIT: We can't proceed and will exit now"
      msg "Bye"
    fi
    rm -f /root/.my.pass.txt
    mkdir -p /var/aegir
    clean_pid_exit
  fi

###--------------------###
  msg "INFO: Installing Aegir Master Instance, please wait..."
  if [ -e "/root/.mstr.clstr.cnf" ] \
    || [ -e "/root/.wbhd.clstr.cnf" ] \
    || [ -e "/root/.dbhd.clstr.cnf" ]; then
    touch /data/conf/clstr.cnf &> /dev/null
  fi
  adduser --system --group --home /var/aegir aegir &> /dev/null
  usermod -aG www-data aegir &> /dev/null
  usermod -aG users aegir &> /dev/null
  echo "aegir ALL=NOPASSWD: /etc/init.d/nginx" >> /etc/sudoers
  ln -sf /var/aegir/config/nginx.conf /etc/nginx/conf.d/aegir.conf &> /dev/null
  update_nginx_conf

  if [ "${_THIS_DB_HOST}" = "localhost" ] \
    || [ "${_THIS_DB_HOST}" = "FQDN" ]; then
    if [ "${_THIS_DB_HOST}" = "FQDN" ]; then
      _THIS_DB_HOST=$(uname -n 2>&1)
    else
      _THIS_DB_HOST=localhost
    fi
    _AEGIR_HOST=$(uname -n 2>&1)
    _SQL_CONNECT=localhost
  else
    _AEGIR_HOST=$(uname -n 2>&1)
    ### _SQL_CONNECT="${_THIS_DB_HOST}"
    ### Master Instance will use local DB server
    _SQL_CONNECT=localhost
  fi
  if [ "${_THIS_DB_HOST}" = "${_MY_OWNIP}" ]; then
    _AEGIR_HOST=$(uname -n 2>&1)
    _SQL_CONNECT=localhost
  fi

  _RESOLVEIP=$(echo $(getent ahostsv4 ${_AEGIR_HOST}) \
    | cut -d: -f2 \
    | awk '{ print $1}' 2>&1)
  if [ -z "$_RESOLVEIP" ]; then
    msg "FATAL ERROR: DNS looks broken for server ${_AEGIR_HOST}"
    exit 1
  else
    _AEGIR_HOST_IP="$_RESOLVEIP"
  fi

  if [ "${_VMFAMILY}" != "AWS" ]; then
    _MYSQLTEST=$(mysql -h${_AEGIR_HOST_IP} -uINVALIDLOGIN -pINVALIDPASS 2>&1 >/dev/null | cat)
    if [ -z `echo $_MYSQLTEST | grep -q "ERROR \(2003\|1130\)"` ]; then
      msg "INFO: ${_DB_SERVER} is listening on ${_AEGIR_HOST_IP}."
    else
      msg "FATAL ERROR: ${_DB_SERVER} is not configured to listen on ${_AEGIR_HOST_IP}"
      exit 1
    fi
  fi

  _AEGIR_DB_USER=aegir_root
  _ESC_APASS=""
  _LEN_APASS=0

  if [ "${_STRONG_PASSWORDS}" = "YES" ]; then
    _PWD_CHARS=32
  elif [ "${_STRONG_PASSWORDS}" = "NO" ]; then
    _PWD_CHARS=8
  else
    _STRONG_PASSWORDS=${_STRONG_PASSWORDS//[^0-9]/}
    if [ ! -z "${_STRONG_PASSWORDS}" ] \
      && [ "${_STRONG_PASSWORDS}" -gt "8" ]; then
      _PWD_CHARS="${_STRONG_PASSWORDS}"
    else
      _PWD_CHARS=8
    fi
    if [ ! -z "${_PWD_CHARS}" ] && [ "${_PWD_CHARS}" -gt "128" ]; then
      _PWD_CHARS=128
    fi
  fi

  if [ "${_STRONG_PASSWORDS}" = "YES" ] || [ "${_PWD_CHARS}" -gt "8" ]; then
    if [ "${_THIS_DB_HOST}" = "localhost" ] \
      || [ "${_THIS_DB_HOST}" = "FQDN" ]; then
      _ESC_APASS=$(randpass "${_PWD_CHARS}" esc 2>&1)
    else
      if [ -e "/root/.my.pass.txt" ]; then
        _ESC_APASS=$(cat /root/.my.pass.txt 2>&1)
      else
        _ESC_APASS=sCWL4tgEpyS5cLZITshxSTWRjhsUOeR6
      fi
    fi
    _ESC_APASS=$(echo -n ${_ESC_APASS} | tr -d "\n" 2>&1)
    _LEN_APASS=$(echo ${#_ESC_APASS} 2>&1)
  fi

  if [ -z "${_ESC_APASS}" ] || [ "${_LEN_APASS}" -lt "9" ]; then
    if [ "${_THIS_DB_HOST}" = "localhost" ] \
      || [ "${_THIS_DB_HOST}" = "FQDN" ]; then
      _ESC_APASS=$(pwgen -v -s -1 2>&1)
      _ESC_APASS=$(echo -n ${_ESC_APASS} | tr -d "\n" 2>&1)
      _ESC_APASS=$(sanitize_string "${_ESC_APASS}" 2>&1)
    else
      if [ -e "/root/.my.pass.txt" ]; then
        _ESC_APASS=$(cat /root/.my.pass.txt 2>&1)
      else
        _ESC_APASS=sCWL4tgEpyS5cLZITshxSTWRjhsUOeR6
      fi
    fi
  fi

  _ESC="\`%\`.*"
  mysql -h${_SQL_CONNECT} -uroot mysql<<EOFMYSQL
GRANT ALL PRIVILEGES ON $_ESC TO '${_AEGIR_DB_USER}'@'${_AEGIR_HOST}' IDENTIFIED BY '${_ESC_APASS}' WITH GRANT OPTION;
GRANT ALL PRIVILEGES ON $_ESC TO '${_AEGIR_DB_USER}'@'${_AEGIR_HOST_IP}' IDENTIFIED BY '${_ESC_APASS}' WITH GRANT OPTION;
GRANT ALL PRIVILEGES ON $_ESC TO '${_AEGIR_DB_USER}'@'localhost' IDENTIFIED BY '${_ESC_APASS}' WITH GRANT OPTION;
EOFMYSQL

  if [ "${_THIS_DB_HOST}" = "localhost" ] || [ "${_THIS_DB_HOST}" = "FQDN" ]; then
    _EXTRA_GRANTS=NO
  else
    _LOCAL_HOST=$(uname -n 2>&1)
    _LOCAL_IP=$(echo $(getent ahostsv4 $_LOCAL_HOST) | cut -d: -f2 | awk '{ print $1}' 2>&1)
    mysql -h${_SQL_CONNECT} -uroot mysql<<EOFMYSQL
GRANT ALL PRIVILEGES ON $_ESC TO '${_AEGIR_DB_USER}'@'${_THIS_DB_HOST}' IDENTIFIED BY '${_ESC_APASS}' WITH GRANT OPTION;
GRANT ALL PRIVILEGES ON $_ESC TO '${_AEGIR_DB_USER}'@'$_LOCAL_HOST' IDENTIFIED BY '${_ESC_APASS}' WITH GRANT OPTION;
GRANT ALL PRIVILEGES ON $_ESC TO '${_AEGIR_DB_USER}'@'$_LOCAL_IP' IDENTIFIED BY '${_ESC_APASS}' WITH GRANT OPTION;
EOFMYSQL
  fi

  download_for_dmlb
  cd /var/aegir
  _AEGIR_SCRIPT="AegirSetupM.sh.txt"
  for fe in `find ${bldPth}/aegir/scripts -type f`; do
    sed -i "s/EDIT_AEGIR_DB_USER/${_AEGIR_DB_USER}/g"         ${fe} &> /dev/null
    sed -i "s/EDIT_AEGIR_HOST/${_AEGIR_HOST}/g"               ${fe} &> /dev/null
    sed -i "s/EDIT_AEGIR_VERSION/${_AEGIR_VERSION}/g"         ${fe} &> /dev/null
    sed -i "s/EDIT_AEGIR_XTS_VRN/${_AEGIR_XTS_VRN}/g"         ${fe} &> /dev/null
    sed -i "s/EDIT_BOA_REPO_GIT_URL/${_BOA_REPO_GIT_URLX}/g"  ${fe} &> /dev/null
    sed -i "s/EDIT_BOA_REPO_NAME/${_BOA_REPO_NAME}/g"         ${fe} &> /dev/null
    sed -i "s/EDIT_BRANCH_BOA/${_BRANCH_BOA}/g"               ${fe} &> /dev/null
    sed -i "s/EDIT_BRANCH_PRN/${_BRANCH_PRN}/g"               ${fe} &> /dev/null
    sed -i "s/EDIT_DEBUG_MODE/${_DEBUG_MODE}/g"               ${fe} &> /dev/null
    sed -i "s/EDIT_DOMAIN/${_THIS_FRONT}/g"                   ${fe} &> /dev/null
    sed -i "s/EDIT_DRUSH_VERSION/${_DRUSH_VERSION}/g"         ${fe} &> /dev/null
    sed -i "s/EDIT_ESC_APASS/${_ESC_APASS}/g"                 ${fe} &> /dev/null
    sed -i "s/EDIT_LOCAL_NETWORK_IP/${_LOCAL_NETWORK_IP}/g"   ${fe} &> /dev/null
    sed -i "s/EDIT_MY_OWNIP/${_MY_OWNIP}/g"                   ${fe} &> /dev/null
    sed -i "s/EDIT_PHP_CLI_VERSION/${_PHP_CLI_VERSION}/g"     ${fe} &> /dev/null
    sed -i "s/EDIT_PHP_FPM_VERSION/${_PHP_FPM_VERSION}/g"     ${fe} &> /dev/null
    sed -i "s/EDIT_STRONG_PASSWORDS/${_STRONG_PASSWORDS}/g"   ${fe} &> /dev/null
    sed -i "s/EDIT_THIS_DB_HOST/${_THIS_DB_HOST}/g"           ${fe} &> /dev/null
    sed -i "s/EDIT_USE_MIR/${_USE_MIR}/g"                     ${fe} &> /dev/null
  done

  cp -af ${bldPth}/aegir/scripts/$_AEGIR_SCRIPT ./

  if [ "${_DEBUG_MODE}" = "YES" ]; then
    su -s /bin/bash - aegir -c "bash $_AEGIR_SCRIPT ${_THIS_FRONT} \
      --http_service_type='nginx' \
      --aegir_db_host='${_THIS_DB_HOST}' \
      --client_email='${_MY_EMAIL}' -y -d"
  else
    su -s /bin/bash - aegir -c "bash $_AEGIR_SCRIPT ${_THIS_FRONT} \
      --http_service_type='nginx' \
      --aegir_db_host='${_THIS_DB_HOST}' \
      --client_email='${_MY_EMAIL}' -y >/var/aegir/install.log 2>&1"
  fi
  if [ -e "/opt/tmp/status-AegirSetupM-FAIL" ]; then
    msg "FATAL ERROR: AegirSetupM installer failed"
    msg "FATAL ERROR: Aborting Barracuda installer NOW!"
    msg "HINT: Please check /var/aegir/install.log"
    msg "HINT: for more information on errors occured"
    touch /opt/tmp/status-Barracuda-FAIL
    clean_pid_exit
  fi
  if [ -e "/var/aegir/.drush/hostmaster.alias.drushrc.php" ]; then
    _THIS_HM_ROOT=$(cat /var/aegir/.drush/hostmaster.alias.drushrc.php \
      | grep "root'" \
      | cut -d: -f2 \
      | awk '{ print $3}' \
      | sed "s/[\,']//g" 2>&1)
    if [ -e "${_THIS_HM_ROOT}/sites/all" ] \
      && [ ! -e "${_THIS_HM_ROOT}/sites/all/libraries" ]; then
      mkdir -p \
        ${_THIS_HM_ROOT}/sites/all/{modules,themes,libraries} &> /dev/null
    fi
  fi
  _U_HD="/var/aegir/.drush"
  chattr +i ${_U_HD}/php.ini &> /dev/null
  su -s /bin/bash - aegir -c "drush cache-clear drush &> /dev/null"
  rm -f -r /var/aegir/.tmp/cache
  if [ "${_DEBUG_MODE}" = "YES" ]; then
    msg "INFO: Running hosting-dispatch (1/3)..."
  fi
  su -s /bin/bash - aegir -c "drush @hostmaster hosting-dispatch &> /dev/null"
  mrun "sleep 5"
  if [ "${_DEBUG_MODE}" = "YES" ]; then
    msg "INFO: Running hosting-dispatch (2/3)..."
  fi
  su -s /bin/bash - aegir -c "drush @hostmaster hosting-dispatch &> /dev/null"
  mrun "sleep 5"
  if [ "${_DEBUG_MODE}" = "YES" ]; then
    msg "INFO: Running hosting-dispatch (3/3)..."
  fi
  su -s /bin/bash - aegir -c "drush @hostmaster hosting-dispatch &> /dev/null"
  if [ -e "/var/aegir/.drush/hostmaster.alias.drushrc.php" ]; then
    _THIS_HM_ROOT=$(cat /var/aegir/.drush/hostmaster.alias.drushrc.php \
      | grep "root'" \
      | cut -d: -f2 \
      | awk '{ print $3}' \
      | sed "s/[\,']//g" 2>&1)
    if [ -e "${_THIS_HM_ROOT}/sites/all" ] \
      && [ ! -e "${_THIS_HM_ROOT}/sites/all/libraries" ]; then
      mkdir -p \
        ${_THIS_HM_ROOT}/sites/all/{modules,themes,libraries} &> /dev/null
    fi
  fi
  chown -R aegir:aegir ${_THIS_HM_ROOT}/sites/all &> /dev/null
  rm -f /var/aegir/$_AEGIR_SCRIPT


###--------------------###
  if [ -e "${mtrInc}/nginx_vhost_common.conf" ]; then
    _DO_NOTHING=YES
  else
    msg "FATAL ERROR: Something went wrong, Aegir Master Instance not installed!"
    msg "HINT: Please check /var/aegir/install.log for more information."
    clean_pid_exit
  fi


###--------------------###
  if [ ! -L "${mtrInc}/global.inc" ] && [ -e "${mtrInc}/global.inc" ]; then
    mv -f ${mtrInc}/global.inc \
      ${mtrInc}/global.inc-pre-${_X_VERSION}-${_NOW} &> /dev/null
  fi
  mkdir -p /data/conf
  cp -af ${locCnf}/global.inc /data/conf/global.inc
  sed -i "s/3600/${_SPEED_VALID_MAX}/g" /data/conf/global.inc &> /dev/null
  if [ -e "${mtrInc}" ] \
    && [ ! -L "${mtrInc}/global.inc" ] \
    && [ -e "/data/conf/global.inc" ]; then
    ln -sf /data/conf/global.inc ${mtrInc}/global.inc
  fi
  update_redis_password
  force_advanced_nginx_config
  chmod 0711 ${mtrInc} &> /dev/null
  chmod 0711 /var/aegir/config &> /dev/null
  find /var/aegir/host_master/*/profiles/* -type d -exec chmod 0755 {} \; &> /dev/null
  find /var/aegir/host_master/*/profiles/* -type f -exec chmod 0644 {} \; &> /dev/null
  find /var/aegir/*/profiles/* -type d -exec chmod 0755 {} \; &> /dev/null
  find /var/aegir/*/profiles/* -type f -exec chmod 0644 {} \; &> /dev/null
  chown -R aegir:aegir /var/aegir/.drush &> /dev/null
  find /var/aegir/.drush -type d -exec chmod 0755 {} \; &> /dev/null
  find /var/aegir/.drush -type f -exec chmod 0644 {} \; &> /dev/null
  chmod 0440 /var/aegir/.drush/*.php &> /dev/null
  chmod 0711 /var/aegir/.drush &> /dev/null
  cd /var/aegir
  rm -f /etc/nginx/sites-available/default
  rm -f /etc/nginx/sites-enabled/default
  if [ -e "${locCnf}/nginx.conf" ]; then
    mv -f /etc/nginx/nginx.conf /etc/nginx/nginx.conf-old &> /dev/null
    cp -af ${locCnf}/nginx.conf /etc/nginx/nginx.conf
  fi
  mrun "service nginx reload" &> /dev/null
  msg "INFO: Aegir Master Instance installation completed"
else
  echo " "
  if [ "${_SQUEEZE_TO_WHEEZY}" = "YES" ] \
    && [ "${_LOC_OSV}" = "squeeze" ]; then
    msg "INFO: Aegir Master Instance upgrade skipped!"
    echo " "
    msg "NOTE! You *must* reboot the server and then run boa up-stable *again*"
    msg "NOTE! to complete all system upgrades and upgrade also"
    msg "NOTE! Aegir Master Instance securely"
    echo " "
  elif [ "${_LENNY_TO_SQUEEZE}" = "YES" ] \
    && [ "${_LOC_OSV}" = "lenny" ]; then
    msg "INFO: Aegir Master Instance upgrade skipped!"
    echo " "
    msg "NOTE! You *must* reboot the server and then run boa up-stable *again*"
    msg "NOTE! to complete all system upgrades and upgrade also"
    msg "NOTE! Aegir Master Instance securely"
    echo " "
  elif [ "${_SYSTEM_UPGRADE_ONLY}" = "YES" ]; then
    msg "INFO: Aegir Master Instance upgrade skipped"
  else
    msg "INFO: Restarting ${_DB_SERVER} server..."
    rm -f /var/lib/mysql/mysql_upgrade_info &> /dev/null
    mrun "service mysql restart" &> /dev/null
    mrun "sleep 8"
    msg "INFO: Upgrading ${_DB_SERVER} tables if necessary..."
    mrun "sleep 60"
    if [ ! -e "/var/run/mysqld/mysqld.pid" ] \
      || [ ! -e "/var/run/mysqld/mysqld.sock" ]; then
      _DB_SERVER_TEST=$(mysql -V 2>&1)
      if [[ "${_DB_SERVER_TEST}" =~ "MariaDB" ]]; then
        _DB_SERVER=MariaDB
        msg "ALRT! ${_DB_SERVER} server not running properly!"
        msg "EXIT: We can't proceed with upgrade and will exit now"
        msg "HINT: Please check ${_LOG} for more information,"
        msg "HINT: (re)start ${_DB_SERVER} server and then run installer again"
        msg "Bye"
      else
        msg "ALRT! ${_DB_SERVER} server not installed properly!"
        msg "EXIT: We can't proceed and will exit now"
        msg "Bye"
      fi
      clean_pid_exit
    fi
    if [ -e "/root/.mstr.clstr.cnf" ] \
      || [ -e "/root/.wbhd.clstr.cnf" ] \
      || [ -e "/root/.dbhd.clstr.cnf" ]; then
      touch /data/conf/clstr.cnf &> /dev/null
    fi
    echo " "
    upgrade_aegir_master
  fi
fi
update_php_cli_cron


###--------------------###
if [ -e "${locCnf}/mime.types" ]; then
  mv -f /etc/nginx/mime.types \
    /etc/nginx/mime.types-pre-${_X_VERSION}-${_NOW} &> /dev/null
  cp -af ${locCnf}/mime.types /etc/nginx/mime.types
  if [ ! -L "/var/www/nginx-default/index.html" ] \
    && [ ! -L "/var/www/nginx-default/under_construction.jpg" ]; then
    mkdir -p /var/www/nginx-default
    mv -f /var/www/nginx-default/index.html \
      /var/www/nginx-default/index.html-pre-${_X_VERSION}-${_NOW} &> /dev/null
    cp -af ${locCnf}/uc.html /var/www/nginx-default/index.html
    cp -af ${locCnf}/under_construction.jpg \
      /var/www/nginx-default/under_construction.jpg
  fi
  rm -f /etc/nginx/sites-available/default
  rm -f /etc/nginx/sites-enabled/default
  if [ ! -e "/var/run/aegir_upgrade.pid" ]; then
    mrun "service nginx reload" &> /dev/null
  fi
fi


###--------------------###
_WILD_SSL_VHOST="${mtrNgx}/pre.d/nginx_wild_ssl.conf"
if [ ! -e "$_WILD_SSL_VHOST" ]; then
  msg "INFO: Installing default SSL Wildcard Nginx Proxy..."
  _HTTPS_TEST=$(netstat -ln | grep :443 2>&1)
  if [[ "$_HTTPS_TEST" =~ "443" ]]; then
    _HTTPS_TEST=EXIST
    msg "WARNING!"
    cat <<EOF

  We can't enable Wildcard HTTPS Proxy for all your hosted sites,
  including all Aegir Satellite Instances, because you have already
  enabled SSL on the IP address used by your Aegir Master Instance.

  If you wish to use provided now by Barracuda Wildcard HTTPS Proxy,
  please disable the SSL you enabled, or use the built-in Aegir SSL
  feature on another IP address available and not used by the Hostmaster,
  and other hosted sites.

  We will continue in 10 seconds...

EOF
    mrun "sleep 10"
  else
    _HTTPS_TEST=FREE
    validate_public_ip &> /dev/null
    validate_xtras_ip &> /dev/null
    openssl req -x509 -nodes -days 7300 \
      -subj "/C=US/ST=New York/O=Aegir/OU=Cloud/L=New York/CN=*.${_THISHOST}" \
      -newkey rsa:4096 \
      -keyout /etc/ssl/private/nginx-wild-ssl.key \
      -out /etc/ssl/private/nginx-wild-ssl.crt -batch 2> /dev/null
    cp -af ${locCnf}/nginx_wild_ssl.conf $_WILD_SSL_VHOST
    sed -i "s/127.0.0.1:80/localhost:80/g" $_WILD_SSL_VHOST &> /dev/null
    sed -i "s/127.0.0.1:443/$_XTRAS_THISHTIP:443/g" $_WILD_SSL_VHOST &> /dev/null
    mkdir -p /data/conf
    if [ -e "${locCnf}/global.inc" ]; then
      cp -af ${locCnf}/global.inc /data/conf/global.inc
    fi
    if [ -e "${mtrInc}" ] \
      && [ ! -L "${mtrInc}/global.inc" ] \
      && [ -e "/data/conf/global.inc" ]; then
      ln -sf /data/conf/global.inc ${mtrInc}/global.inc
    fi
    sed -i "s/3600/${_SPEED_VALID_MAX}/g" /data/conf/global.inc &> /dev/null
    update_redis_password
    killall -9 nginx &> /dev/null
    mrun "service nginx start" &> /dev/null
  fi
else
  _WILDCARD_SSL_TEST=$(grep "localhost:80" $_WILD_SSL_VHOST 2>&1)
  if [[ "$_WILDCARD_SSL_TEST" =~ "localhost:80" ]]; then
    _DO_NOTHING=YES
  else
    validate_public_ip &> /dev/null
    validate_xtras_ip &> /dev/null
    cp -af ${locCnf}/nginx_wild_ssl.conf $_WILD_SSL_VHOST
    sed -i "s/127.0.0.1:80/localhost:80/g" $_WILD_SSL_VHOST
    sed -i "s/127.0.0.1:443/$_XTRAS_THISHTIP:443/g" $_WILD_SSL_VHOST
  fi
fi


###--------------------###
if [[ "${_XTRAS_LIST}" =~ "ALL" ]] || [[ "${_XTRAS_LIST}" =~ "CHV" ]]; then
  _CHIVE_VHOST="${mtrNgx}/vhost.d/chive.${_THIS_FRONT}"
  if [ ! -d "/var/www/chive" ] \
    || [ ! -f "$_CHIVE_VHOST" ] \
    || [ ! -f "${pthLog}/chive-${_CHIVE_VRN}.fix-dns-vhost-wildcard.log" ]; then
    echo " "
    if prompt_yes_no "Do you want to install Chive Manager?" ; then
      true
      msg "INFO: Installing Chive Manager..."
      cd /var/www
      rm -f -r /var/www/chive &> /dev/null
      get_dev_arch "chive_${_CHIVE_VRN}.tar.gz"
      validate_public_ip &> /dev/null
      validate_xtras_ip &> /dev/null
      cp -af ${locCnf}/nginx_sql_chive.conf $_CHIVE_VHOST
      sed -i "s/127.0.0.1:80/$_XTRAS_THISHTIP:80/g"         $_CHIVE_VHOST
      sed -i "s/127.0.0.1:443/$_XTRAS_THISHTIP:443/g"       $_CHIVE_VHOST
      sed -i "s/chive_name/chive.${_THIS_FRONT} ${_THISHTIP}/g" $_CHIVE_VHOST
      touch ${pthLog}/chive-${_CHIVE_VRN}.fix-dns-vhost-wildcard.log
      msg "INFO: Chive Manager installation completed"
    else
      msg "INFO: Chive Manager installation skipped"
    fi
  fi
fi


###--------------------###
if [ -d "/var/www/chive" ]; then
  if [ ! -z "$_PHP_CN" ]; then
    if [ "${_DEBUG_MODE}" = "YES" ]; then
      msg "INFO: _PHP_CN set to $_PHP_CN for Chive Manager"
    fi
    chown -R $_PHP_CN:www-data /var/www/chive
  else
    msg "NOTE: _PHP_CN not set for Chive Manager"
    chown -R www-data:www-data /var/www/chive
  fi
  find /var/www/chive -type d -exec chmod 0775 {} \; &> /dev/null
  find /var/www/chive -type f -exec chmod 0664 {} \; &> /dev/null
fi


###--------------------###
if [[ "${_XTRAS_LIST}" =~ "BDD" ]]; then
  _SQLBUDDY_VHOST="${mtrNgx}/vhost.d/sqlbuddy.${_THIS_FRONT}"
  if [ ! -d "/var/www/sqlbuddy" ] \
    || [ ! -f "$_SQLBUDDY_VHOST" ] \
    || [ ! -f "${pthLog}/sqlbuddy.fix-dns-vhost-wildcard.log" ]; then
    echo " "
    if prompt_yes_no "Do you want to install SQL Buddy Manager?" ; then
      true
      msg "INFO: Installing SQL Buddy Manager..."
      rm -f -r /var/www/sqlbuddy
      cd /var/www
      get_dev_arch "sqlbuddy_1_3_3.tar.gz"
      validate_public_ip &> /dev/null
      validate_xtras_ip &> /dev/null
      cp -af ${locCnf}/nginx_sql_buddy.conf $_SQLBUDDY_VHOST
      sed -i "s/127.0.0.1:80/$_XTRAS_THISHTIP:80/g"   $_SQLBUDDY_VHOST
      sed -i "s/127.0.0.1:443/$_XTRAS_THISHTIP:443/g" $_SQLBUDDY_VHOST
      sed -i "s/buddy_name/sqlbuddy.${_THIS_FRONT}/g"   $_SQLBUDDY_VHOST
      touch ${pthLog}/sqlbuddy.fix-dns-vhost-wildcard.log
      msg "INFO: SQL Buddy Manager installation completed"
    else
      msg "INFO: SQL Buddy Manager installation skipped"
    fi
  fi
fi


###--------------------###
if [ -d "/var/www/sqlbuddy" ]; then
  if [ ! -z "$_PHP_CN" ]; then
    if [ "${_DEBUG_MODE}" = "YES" ]; then
      msg "INFO: _PHP_CN set to $_PHP_CN for SQL Buddy Manager"
    fi
    chown -R $_PHP_CN:www-data /var/www/sqlbuddy
  else
    msg "NOTE: _PHP_CN not set for SQL Buddy Manager"
    chown -R www-data:www-data /var/www/sqlbuddy
  fi
  find /var/www/sqlbuddy -type d -exec chmod 0775 {} \; &> /dev/null
  find /var/www/sqlbuddy -type f -exec chmod 0664 {} \; &> /dev/null
fi


###--------------------###
if [[ "${_XTRAS_LIST}" =~ "ALL" ]] || [[ "${_XTRAS_LIST}" =~ "CGP" ]]; then
  _CGP_VHOST="${mtrNgx}/vhost.d/cgp.${_THIS_FRONT}"
  if [ ! -e "/var/run/cloud_vhost.pid" ]; then
    if [ ! -d "/var/www/cgp" ] \
      || [ ! -f "$_CGP_VHOST" ] \
      || [ ! -f "${pthLog}/cgp-${_CGP_VRN}.fix-dns-vhost-wildcard.log" ]; then
      echo " "
      if prompt_yes_no "Do you want to install Collectd Graph Panel?" ; then
        true
        msg "INFO: Installing Collectd Graph Panel..."
        st_runner "$_INSTAPP collectd" 2> /dev/null
        rm -f -r /var/www/cgp
        cd /var/www
        get_dev_arch "cgp-${_CGP_VRN}.tar.gz"
        if [ -e "/var/www/cgp-${_CGP_VRN}" ]; then
          mv -f cgp-${_CGP_VRN} cgp &> /dev/null
        fi
        sed -i "s/>uncategorized</>Barracuda Server</g" /var/www/cgp/index.php
        sed -i "s/'uncategorized'/'Barracuda Server'/g" /var/www/cgp/index.php
        validate_public_ip &> /dev/null
        validate_xtras_ip &> /dev/null
        cp -af ${locCnf}/nginx_sql_cgp.conf $_CGP_VHOST
        sed -i "s/127.0.0.1:80/$_XTRAS_THISHTIP:80/g"    $_CGP_VHOST
        sed -i "s/127.0.0.1:443/$_XTRAS_THISHTIP:443/g"  $_CGP_VHOST
        sed -i "s/cgp_name/cgp.${_THIS_FRONT}/g"           $_CGP_VHOST
        st_runner "update-rc.d collectd defaults" &> /dev/null
        touch ${pthLog}/cgp-${_CGP_VRN}.fix-dns-vhost-wildcard.log
        msg "INFO: Collectd Graph Panel installation completed"
      else
        msg "INFO: Collectd Graph Panel installation skipped"
      fi
    fi
  fi
fi


###--------------------###
fix_collectd_rrd_syslog_flood() {
  _COLLECTD_CNF="/etc/collectd/collectd.conf"
  if [ -e "$_COLLECTD_CNF" ]; then
    _COLLECTD_CNF_TEST=$(grep "rootfs" $_COLLECTD_CNF 2>&1)
    if [[ "$_COLLECTD_CNF_TEST" =~ "rootfs" ]]; then
      _DO_NOTHING=YES
    else
      echo "<Plugin df>"                 >> $_COLLECTD_CNF
      echo "        FSType \"rootfs\""   >> $_COLLECTD_CNF
      echo "        IgnoreSelected true" >> $_COLLECTD_CNF
      echo "</Plugin>"                   >> $_COLLECTD_CNF
      mrun "service collectd restart" &> /dev/null
    fi
  fi
}
### Credit: http://emacstragic.net/collectd-causing-rrd-illegal-attempt-to-update-using-time-errors/


###--------------------###
fix_collectd_nginx() {
  _COLLECTD_CNF="/etc/collectd/collectd.conf"
  if [ -e "$_COLLECTD_CNF" ]; then
    _COLLECTD_CNF_TEST=$(grep "^LoadPlugin nginx" $_COLLECTD_CNF 2>&1)
    if [[ "$_COLLECTD_CNF_TEST" =~ "LoadPlugin nginx" ]]; then
      _DO_NOTHING=YES
    else
      echo "<Plugin nginx>"                                >> $_COLLECTD_CNF
      echo "        URL \"http://127.0.0.1/nginx_status\"" >> $_COLLECTD_CNF
      echo "        VerifyPeer false"                      >> $_COLLECTD_CNF
      echo "        VerifyHost false"                      >> $_COLLECTD_CNF
      echo "</Plugin>"                                     >> $_COLLECTD_CNF
      sed -i "s/^#LoadPlugin nginx/LoadPlugin nginx/g"        $_COLLECTD_CNF
      mrun "service collectd restart" &> /dev/null
    fi
  fi
}


###--------------------###
if [ -d "/var/www/cgp" ] \
  && [ "${_VMFAMILY}" = "VS" ] \
  && [ ! -e "/boot/grub/grub.cfg" ] \
  && [ ! -e "/boot/grub/menu.lst" ]; then
  rm -f ${mtrNgx}/vhost.d/cgp*
  mrun "apt-get remove collectd -y --force-yes -qq" &> /dev/null
  mrun "apt-get purge collectd -y --force-yes -qq" &> /dev/null
  rm -f -r /var/www/cgp
fi


###--------------------###
if [ -d "/var/www/cgp" ]; then
  if [ ! -z "$_PHP_CN" ]; then
    if [ "${_DEBUG_MODE}" = "YES" ]; then
      msg "INFO: _PHP_CN set to $_PHP_CN for Collectd Graph Panel"
    fi
    chown -R $_PHP_CN:www-data /var/www/cgp
  else
    msg "NOTE: _PHP_CN not set for Collectd Graph Panel"
    chown -R www-data:www-data /var/www/cgp
  fi
  find /var/www/cgp -type d -exec chmod 0775 {} \; &> /dev/null
  find /var/www/cgp -type f -exec chmod 0664 {} \; &> /dev/null
  fix_collectd_rrd_syslog_flood
  fix_collectd_nginx
fi


###--------------------###
if [[ "${_XTRAS_LIST}" =~ "HVM" ]]; then
  if [ "${_OSV}" = "wheezy" ] || [ "${_OSV}" = "trusty" ]; then
    if [ ! -x "/usr/bin/hhvm" ]; then
      echo " "
      if prompt_yes_no "Do you want to install HHVM Engine?" ; then
        true
        msg "INFO: Installing HHVM Engine..."
        cd /var/opt
        echo "## HHVM APT Repository" > ${aptLiSys}.d/hhvm.list
        if [ "${_OSV}" = "wheezy" ]; then
          echo "deb http://dl.hhvm.com/debian wheezy main" >> \
            ${aptLiSys}.d/hhvm.list
        elif [ "${_OSV}" = "trusty" ]; then
          echo "deb http://dl.hhvm.com/ubuntu trusty main" >> \
            ${aptLiSys}.d/hhvm.list
        fi
        _KEYS_SERVER_TEST=FALSE
        until [[ "$_KEYS_SERVER_TEST" =~ "GnuPG" ]]; do
          rm -f /var/opt/hhvm.gpg.key*
          cd /var/opt
          wget -q -U iCab http://dl.hhvm.com/conf/hhvm.gpg.key
          _KEYS_SERVER_TEST=$(grep GnuPG /var/opt/hhvm.gpg.key 2>&1)
          sleep 2
        done
        cat /var/opt/hhvm.gpg.key | apt-key add - &> /dev/null
        st_runner "apt-get update -y --force-yes" &> /dev/null
        st_runner "apt-get install hhvm ${forCer}" 2> /dev/null
        msg "INFO: HHVM Engine installation completed"
      else
        msg "INFO: HHVM Engine installation skipped"
      fi
    fi
  fi
fi


###--------------------###
if [[ "${_XTRAS_LIST}" =~ "ALL" ]] || [[ "${_XTRAS_LIST}" =~ "WMN" ]]; then
  if [ ! -d "/etc/webmin" ] && [ ! -e "/var/run/cloud_vhost.pid" ]; then
    echo " "
    if prompt_yes_no "Do you want to install Webmin Control Panel?" ; then
      true
      msg "INFO: Installing Webmin Control Panel..."
      cd /var/opt
      echo "## Webmin APT Repository" > ${aptLiSys}.d/webmin.list
      echo "deb http://download.webmin.com/download/repository \
        sarge contrib" | fmt -su -w 2500 >> ${aptLiSys}.d/webmin.list
      echo "deb http://webmin.mirror.somersettechsolutions.co.uk/repository \
        sarge contrib" | fmt -su -w 2500 >> ${aptLiSys}.d/webmin.list
      _KEYS_SERVER_TEST=FALSE
      until [[ "$_KEYS_SERVER_TEST" =~ "GnuPG" ]]; do
        rm -f jcameron-key.asc*
        wget -q -U iCab ${urlDev}/jcameron-key.asc
        _KEYS_SERVER_TEST=$(grep GnuPG jcameron-key.asc 2>&1)
        sleep 2
      done
      cat jcameron-key.asc | apt-key add - &> /dev/null
      rm -f jcameron-key.asc*
      touch ${pthLog}/webmin_update_apt_src.log
      st_runner "apt-get update -y --force-yes" &> /dev/null
      st_runner "$_INSTAPP webmin \
                           libxml-simple-perl \
                           libcrypt-ssleay-perl" 2> /dev/null
      update-rc.d webmin defaults &> /dev/null
      msg "INFO: Webmin Control Panel installation completed"
    else
      msg "INFO: Webmin Control Panel installation skipped"
    fi
  fi
fi


###--------------------###
_CHECK_OS=$(grep "Ubuntu.*LTS" /etc/issue.net 2>&1)
if [[ "$_CHECK_OS" =~ "Ubuntu" ]]; then
  _CHECK_OS=ULTS
else
  _CHECK_OS=OTHER
fi
if [[ "${_XTRAS_LIST}" =~ "BND" ]] && [ "$_CHECK_OS" = "OTHER" ]; then
  if [ ! -e "/usr/sbin/named" ] || [ "${_FULL_FORCE_REINSTALL}" = "YES" ]; then
    echo " "
    if prompt_yes_no "Do you want to install Bind9 DNS Server?" ; then
      true
      msg "INFO: Installing Bind9 DNS Server..."
      if [ -z "${_THISHTIP}" ]; then
        _LOC_DOM="${_THISHOST}"
        find_correct_ip
        _THISHTIP="${_LOC_IP}"
      fi
      st_runner "$_INSTAPP bind9" 2> /dev/null
      cp -af /etc/bind/named.conf.options \
        ${vBs}/named.conf.options.pre-${_X_VERSION}-${_NOW}
      cp -af ${locCnf}/named.conf.options /etc/bind/named.conf.options
      sed -i "s/127.0.1.1/${_THISHTIP}/g" /etc/bind/named.conf.options &> /dev/null
      mrun "service bind9 restart" &> /dev/null
      if [ ! -e "/etc/init.d/bind" ]; then
        ln -sf /etc/init.d/bind9 /etc/init.d/bind
      fi
      sed -i "s/.*bind.*//g" /etc/sudoers &> /dev/null
      sed -i "/^$/d" /etc/sudoers &> /dev/null
      msg "INFO: Bind9 DNS Server installation completed"
    else
      msg "INFO: Bind9 DNS Server installation skipped"
    fi
  fi
fi


if [ "${_OSV}" = "lenny" ] || [ "${_OSV}" = "lucid" ]; then
  _DO_NOTHING=YES
else
  if [[ "${_XTRAS_LIST}" =~ "ALL" ]] \
    || [[ "${_XTRAS_LIST}" =~ "CSS" ]] \
    || [ ! -z "${_SCOUT_KEY}" ] \
    || [[ "${_THISHOST}" =~ ".host8." ]] \
    || [ -e "/root/.host8.cnf" ] \
    || [ "${_VMFAMILY}" = "VS" ]; then
    if [ "${_STATUS}" = "INIT" ]; then
      _L_ST="install"
    else
      _L_ST="upgrade"
    fi
    if [ ! -e "${pthLog}/compass-${_X_VERSION}-${_NOW}-ruby-${_RUBY_VRN}.log" ]; then
      echo " "
      if prompt_yes_no "Do you want to ${_L_ST} Compass Tools for root?" ; then
        true
        msg "INFO: Running Compass Tools ${_L_ST}..."
        if [ ! -e "${pthLog}/ruby-root-clean-reload.log" ]; then
          _RUBY_RELOAD=YES
          rm -f -r /usr/local/rvm
          touch ${pthLog}/ruby-root-clean-reload.log
        fi
        $_GPG --keyserver hkp://keys.gnupg.net --recv-keys D39DC0E3 &> /dev/null
        curl -sSL https://rvm.io/mpapis.asc | $_GPG --import - &> /dev/null
        curl -sSL https://get.rvm.io | bash -s stable &> /dev/null
        echo rvm_autoupdate_flag=0 > ~/.rvmrc
        if [ -e "/etc/profile.d/rvm.sh" ]; then
          source /etc/profile.d/rvm.sh
        fi
        if [ ! -x "/usr/local/rvm/rubies/ruby-${_RUBY_VRN}/bin/gem" ]; then
          _RUBY_UPGRADE=YES
        fi
        if [ "${_STATUS}" = "INIT" ] \
          || [ "$_RUBY_UPGRADE" = "YES" ] \
          || [ "$_RUBY_RELOAD" = "YES" ]; then
          mrun "apt-get update -y --force-yes" &> /dev/null
          mrun "apt-get remove rubygems \
                               ruby1.9.1-dev \
                               libruby1.9.1 \
                               ruby1.9.1 \
                               -y --force-yes -qq" &> /dev/null
          mrun "apt-get autoremove -y --force-yes -qq" &> /dev/null
          mrun "rvm install ${_RUBY_VRN}" &> /dev/null
          mrun "rvm use ${_RUBY_VRN} --default" &> /dev/null
          mrun "rvm get stable" 2> /dev/null
          mrun "rvm @global do gem update -q" 2> /dev/null
        else
          mrun "rvm get stable" 2> /dev/null
          mrun "rvm @global do gem update -q" 2> /dev/null
        fi
        _RBY_FILE="/usr/local/rvm/rubies/ruby-${_RUBY_VRN}/bin/ruby"
        _RBY_PATH=${_RBY_FILE//\//\\\/}
        _GEM_FILE="/usr/local/rvm/gems/ruby-${_RUBY_VRN}@global/bin/scout"
        _GEM_PATH=${_GEM_FILE//\//\\\/}
        _GEM_CRON="/etc/crontab"
        _VAR_IF_PRESENT=$(grep "scout" $_GEM_CRON 2>&1)
        if [[ "$_VAR_IF_PRESENT" =~ "scout" ]]; then
          if [ ! -e "$_GEM_FILE" ] && [ ! -z "${_SCOUT_KEY}" ]; then
            st_runner "rvm @global do gem install --conservative scout" 2> /dev/null
            adduser --system --group --home /var/scout scout &> /dev/null
            usermod -aG users scout &> /dev/null
            sed -i "s/\* \* \* \* \* scout .*/* * * * * \
              scout $_GEM_PATH ${_SCOUT_KEY}/g" $_GEM_CRON &> /dev/null
          fi
        else
          if [ ! -z "${_SCOUT_KEY}" ]; then
            st_runner "rvm @global do gem install --conservative scout" 2> /dev/null
            adduser --system --group --home /var/scout scout &> /dev/null
            usermod -aG users scout &> /dev/null
            echo -e "* * * * * scout $_GEM_FILE ${_SCOUT_KEY}" \
              | fmt -su -w 2500 | tee -a $_GEM_CRON >/dev/null 2>&1
          fi
        fi
        if [ -e "$_GEM_FILE" ]; then
          sed -i "s/^#\!\/.*/#\!$_RBY_PATH/g" $_GEM_FILE &> /dev/null
        fi
        PATH=/usr/local/bin:/usr/local/sbin:/opt/local/bin:/usr/bin:/usr/sbin:/bin:/sbin;export PATH
        touch ${pthLog}/compass-${_X_VERSION}-${_NOW}-ruby-${_RUBY_VRN}.log
        msg "INFO: Compass Tools ${_L_ST} for root completed"
      else
        msg "INFO: Compass Tools ${_L_ST} for root skipped"
      fi
    fi
  fi
fi

###--------------------###
if [ -e "/var/scout" ]; then
  _SCOUT_CRON_OFF=$(grep "OFFscoutOFF" /etc/crontab 2>&1)
  _SCOUT_CRON=$(grep "scout" /etc/crontab 2>&1)
  if [[ ! "$_SCOUT_CRON_OFF" =~ "OFFscoutOFF" ]] \
    && [[ "$_SCOUT_CRON" =~ "scout" ]]; then
    sed -i "s/scout/OFFscoutOFF/g" /etc/crontab &> /dev/null
  fi
fi

###--------------------###
if [ "${_STATUS}" = "INIT" ]; then
  msg "INFO: Updating init scripts"
  cp -af ${locCnf}/clean-boa-env /etc/init.d/clean-boa-env
  chmod 755 /etc/init.d/clean-boa-env &> /dev/null
  st_runner "update-rc.d clean-boa-env defaults" &> /dev/null
  _SSH_USEDNS_TEST=$(grep "UseDNS" /etc/ssh/sshd_config 2>&1)
  if [[ "$_SSH_USEDNS_TEST" =~ (^)"UseDNS no" ]]; then
    _DO_NOTHING=YES
  elif [[ "$_SSH_USEDNS_TEST" =~ "UseDNS" ]]; then
    sed -i "s/.*UseDNS.*/UseDNS no/g" /etc/ssh/sshd_config &> /dev/null
  else
    echo >> /etc/ssh/sshd_config
    echo "UseDNS no" >> /etc/ssh/sshd_config
  fi
  if [ -e "/usr/etc/sshd_config" ]; then
    _SSH_USEDNS_TEST=$(grep "UseDNS" /usr/etc/sshd_config 2>&1)
    if [[ "$_SSH_USEDNS_TEST" =~ (^)"UseDNS no" ]]; then
      _DO_NOTHING=YES
    elif [[ "$_SSH_USEDNS_TEST" =~ "UseDNS" ]]; then
      sed -i "s/.*UseDNS.*/UseDNS no/g" /usr/etc/sshd_config &> /dev/null
    else
      echo >> /usr/etc/sshd_config
      echo "UseDNS no" >> /usr/etc/sshd_config
    fi
  fi
  mrun "service ssh reload" &> /dev/null
  if [ -e "/etc/default/jetty9" ] && [ -e "/etc/init.d/jetty9" ]; then
    msg "INFO: Restarting Jetty 9"
    kill -9 $(ps aux | grep '[j]etty9' | awk '{print $2}') &> /dev/null
    mrun "service jetty9 start" &> /dev/null
  fi
  if [ -e "/etc/default/jetty8" ] && [ -e "/etc/init.d/jetty8" ]; then
    msg "INFO: Restarting Jetty 8"
    kill -9 $(ps aux | grep '[j]etty8' | awk '{print $2}') &> /dev/null
    mrun "service jetty8 start" &> /dev/null
  fi
  if [ -e "/etc/default/jetty7" ] && [ -e "/etc/init.d/jetty7" ]; then
    msg "INFO: Restarting Jetty 7"
    kill -9 $(ps aux | grep '[j]etty7' | awk '{print $2}') &> /dev/null
    mrun "service jetty7 start" &> /dev/null
  fi
  if [ ! -e "/var/run/aegir_upgrade.pid" ]; then
    msg "INFO: Starting Redis, PHP-FPM and Nginx"
    mrun "service redis-server start" &> /dev/null
    killall -9 nginx php-cgi php-fpm &> /dev/null
    st_runner "update-rc.d -f php5-fpm remove" &> /dev/null
    st_runner "update-rc.d cron defaults" &> /dev/null
    if [ -e "/etc/init.d/php56-fpm" ]; then
      st_runner "update-rc.d php56-fpm defaults" &> /dev/null
      mrun "service php56-fpm start" &> /dev/null
    fi
    if [ -e "/etc/init.d/php55-fpm" ]; then
      st_runner "update-rc.d php55-fpm defaults" &> /dev/null
      mrun "service php55-fpm start" &> /dev/null
    fi
    if [ -e "/etc/init.d/php54-fpm" ]; then
      st_runner "update-rc.d php54-fpm defaults" &> /dev/null
      mrun "service php54-fpm start" &> /dev/null
    fi
    if [ -e "/etc/init.d/php53-fpm" ]; then
      st_runner "update-rc.d php53-fpm defaults" &> /dev/null
      mrun "service php53-fpm start" &> /dev/null
    fi
    st_runner "update-rc.d nginx defaults" &> /dev/null
    mrun "service nginx start" &> /dev/null
  fi
else
  if [[ "${_THISHOST}" =~ ".host8." ]] || [ "${_VMFAMILY}" = "VS" ]; then
    sed -i "s/.*UseDNS.*//g" /etc/ssh/sshd_config &> /dev/null
    sed -i "s/^ClientAliveCountMax.*//g" /etc/ssh/sshd_config &> /dev/null
    sed -i "s/^ClientAliveInterval.*//g" /etc/ssh/sshd_config &> /dev/null
    sed -i "s/^IgnoreUserKnownHosts.*//g" /etc/ssh/sshd_config &> /dev/null
    sed -i "s/^PasswordAuthentication.*//g" /etc/ssh/sshd_config &> /dev/null
    sed -i "s/^PermitRootLogin.*/PermitRootLogin without-password/g" \
      /etc/ssh/sshd_config &> /dev/null
    echo >> /etc/ssh/sshd_config
    echo "IgnoreUserKnownHosts no" >> /etc/ssh/sshd_config
    echo "PasswordAuthentication yes" >> /etc/ssh/sshd_config
    echo "UseDNS no" >> /etc/ssh/sshd_config
    echo "ClientAliveInterval 300" >> /etc/ssh/sshd_config
    echo "ClientAliveCountMax 3" >> /etc/ssh/sshd_config
    sed -i "/^$/d" /etc/ssh/sshd_config &> /dev/null
    if [ -e "/usr/etc/sshd_config" ]; then
      sed -i "s/.*UseDNS.*//g" /usr/etc/sshd_config &> /dev/null
      sed -i "s/^ClientAliveCountMax.*//g" /usr/etc/sshd_config &> /dev/null
      sed -i "s/^ClientAliveInterval.*//g" /usr/etc/sshd_config &> /dev/null
      sed -i "s/^IgnoreUserKnownHosts.*//g" /usr/etc/sshd_config &> /dev/null
      sed -i "s/^PasswordAuthentication.*//g" /usr/etc/sshd_config &> /dev/null
      sed -i "s/^PermitRootLogin.*/PermitRootLogin without-password/g" \
        /usr/etc/sshd_config &> /dev/null
      echo >> /usr/etc/sshd_config
      echo "IgnoreUserKnownHosts no" >> /usr/etc/sshd_config
      echo "PasswordAuthentication yes" >> /usr/etc/sshd_config
      echo "UseDNS no" >> /usr/etc/sshd_config
      echo "ClientAliveInterval 300" >> /usr/etc/sshd_config
      echo "ClientAliveCountMax 3" >> /usr/etc/sshd_config
      sed -i "/^$/d" /usr/etc/sshd_config &> /dev/null
    fi
    mrun "service ssh reload" &> /dev/null
  else
    _SSH_USEDNS_TEST=$(grep "^UseDNS no" /etc/ssh/sshd_config 2>&1)
    if [[ "$_SSH_USEDNS_TEST" =~ "UseDNS no" ]]; then
      _DO_NOTHING=YES
    else
      sed -i "s/.*UseDNS.*/UseDNS no/g" /etc/ssh/sshd_config &> /dev/null
    fi
    if [ -e "/usr/etc/sshd_config" ]; then
      _SSH_USEDNS_TEST=$(grep "^UseDNS no" /usr/etc/sshd_config 2>&1)
      if [[ "$_SSH_USEDNS_TEST" =~ "UseDNS no" ]]; then
        _DO_NOTHING=YES
      else
        sed -i "s/.*UseDNS.*/UseDNS no/g" /usr/etc/sshd_config &> /dev/null
      fi
    fi
    mrun "service ssh reload" &> /dev/null
  fi
  fix_on_upgrade
  tune_memory_limits
  kill -9 $(ps aux | grep '[j]etty' | awk '{print $2}') &> /dev/null
  kill -9 $(ps aux | grep '[t]omcat' | awk '{print $2}') &> /dev/null
  if [ -e "/etc/default/jetty9" ] && [ -e "/etc/init.d/jetty9" ]; then
    msg "INFO: Restarting Jetty 9"
    mrun "service jetty9 start" &> /dev/null
  fi
  if [ -e "/etc/default/jetty8" ] && [ -e "/etc/init.d/jetty8" ]; then
    msg "INFO: Restarting Jetty 8"
    mrun "service jetty8 start" &> /dev/null
  fi
  if [ -e "/etc/default/jetty7" ] && [ -e "/etc/init.d/jetty7" ]; then
    msg "INFO: Restarting Jetty 7"
    mrun "service jetty7 start" &> /dev/null
  fi
  if [ ! -e "/var/run/aegir_upgrade.pid" ]; then
    msg "INFO: Restarting Redis, PHP-FPM and Nginx..."
    mrun "service redis-server restart" &> /dev/null
    st_runner "update-rc.d -f php5-fpm remove" &> /dev/null
    mrun "service nginx stop" &> /dev/null
    if [ -e "/etc/init.d/php56-fpm" ]; then
      st_runner "update-rc.d php56-fpm defaults" &> /dev/null
      mrun "service php56-fpm stop" &> /dev/null
    fi
    if [ -e "/etc/init.d/php55-fpm" ]; then
      st_runner "update-rc.d php55-fpm defaults" &> /dev/null
      mrun "service php55-fpm stop" &> /dev/null
    fi
    if [ -e "/etc/init.d/php54-fpm" ]; then
      st_runner "update-rc.d php54-fpm defaults" &> /dev/null
      mrun "service php54-fpm stop" &> /dev/null
    fi
    if [ -e "/etc/init.d/php53-fpm" ]; then
      st_runner "update-rc.d php53-fpm defaults" &> /dev/null
      mrun "service php53-fpm stop" &> /dev/null
    fi
    killall -9 php-fpm &> /dev/null
    killall -9 php-cgi &> /dev/null
    killall -9 pure-ftpd &> /dev/null
    msg "INFO: Restarting ${_DB_SERVER} server..."
    mrun "service mysql restart" &> /dev/null
    if [ -e "/etc/init.d/php56-fpm" ]; then
      mrun "service php56-fpm start" &> /dev/null
    fi
    if [ -e "/etc/init.d/php55-fpm" ]; then
      mrun "service php55-fpm start" &> /dev/null
    fi
    if [ -e "/etc/init.d/php54-fpm" ]; then
      mrun "service php54-fpm start" &> /dev/null
    fi
    if [ -e "/etc/init.d/php53-fpm" ]; then
      mrun "service php53-fpm start" &> /dev/null
    fi
    mrun "service nginx start" &> /dev/null
  fi
fi


#
# Forced MySQL root password update.
forced_mysql_root_password_update() {
  mv -f /root/.my.cnf-pre-* ${vBs}/ &> /dev/null
  mv -f /root/.my.pass.txt-pre-* ${vBs}/ &> /dev/null
  touch /root/.my.pass.txt
  chmod 0600 /root/.my.pass.txt &> /dev/null
  _ESC_PASS=""
  _LEN_PASS=0
  if [ "${_STRONG_PASSWORDS}" = "YES" ]; then
    _PWD_CHARS=32
  elif [ "${_STRONG_PASSWORDS}" = "NO" ]; then
    _PWD_CHARS=8
  else
    _STRONG_PASSWORDS=${_STRONG_PASSWORDS//[^0-9]/}
    if [ ! -z "${_STRONG_PASSWORDS}" ] \
      && [ "${_STRONG_PASSWORDS}" -gt "8" ]; then
      _PWD_CHARS="${_STRONG_PASSWORDS}"
    else
      _PWD_CHARS=8
    fi
    if [ ! -z "${_PWD_CHARS}" ] && [ "${_PWD_CHARS}" -gt "128" ]; then
      _PWD_CHARS=128
    fi
  fi
  if [ "${_STRONG_PASSWORDS}" = "YES" ] || [ "${_PWD_CHARS}" -gt "8" ]; then
    _ESC_PASS=$(randpass "${_PWD_CHARS}" esc 2>&1)
    _ESC_PASS=$(echo -n "${_ESC_PASS}" | tr -d "\n" 2>&1)
    _LEN_PASS=$(echo ${#_ESC_PASS} 2>&1)
  fi
  if [ -z "${_ESC_PASS}" ] || [ "${_LEN_PASS}" -lt "9" ]; then
    _ESC_PASS=$(pwgen -v -s -1 2>&1)
    _ESC_PASS=$(echo -n "${_ESC_PASS}" | tr -d "\n" 2>&1)
    _ESC_PASS=$(sanitize_string "${_ESC_PASS}" 2>&1)
  fi
  if [ ! -z "${_ESC_PASS}" ]; then
    cp -af /root/.my.cnf /root/.my.cnf-pre-${_X_VERSION}-${_NOW}
    cp -af /root/.my.pass.txt /root/.my.pass.txt-pre-${_X_VERSION}-${_NOW}
    mysql -u root -e "FLUSH HOSTS;" &> /dev/null
    mysql -u root -e "DELETE FROM mysql.user WHERE User='';" &> /dev/null
    mysql -u root -e "DELETE FROM mysql.user WHERE User='root' AND Host \
      NOT IN ('localhost', '127.0.0.1', '::1');" &> /dev/null
    mysql -u root -e "DROP DATABASE test;" &> /dev/null
    mysql -u root -e "DELETE FROM mysql.db \
      WHERE Db='test' OR Db='test\\_%';" &> /dev/null
    mysql -u root -e "UPDATE mysql.user SET Password=PASSWORD('${_ESC_PASS}') \
      WHERE User='root';" &> /dev/null
    mysql -u root -e "FLUSH PRIVILEGES;" &> /dev/null
    echo "[client]" > /root/.my.cnf
    echo "user=root" >> /root/.my.cnf
    echo "password=${_ESC_PASS}" >> /root/.my.cnf
    chmod 0600 /root/.my.cnf
    echo "db=mysql" > /root/.mytop
    chmod 0600 /root/.mytop
    echo "${_ESC_PASS}" > /root/.my.pass.txt
    echo " "
    if [ "${_DEBUG_MODE}" = "YES" ]; then
      if [ "${_STRONG_PASSWORDS}" = "YES" ]; then
        msg "INFO: New secure random password for ${_DB_SERVER} generated"
      else
        msg "INFO: New random password for ${_DB_SERVER} generated"
      fi
    fi
  fi
}

###--------------------###
if [ ! -e "/root/.my.cnf" ]; then
  msg "INFO: ${_DB_SERVER} final setup"
  #
  # Let's just do what mysql_secure_installation does,
  # so we can do it non-interactively:
  # - remove anonymous users
  # - remove remote root
  # - remove test database
  # - remove privileges on test database
  # - set auto-generated root password
  # - reload privileges table
  #
  if [ -e "/root/.my.pass.txt" ]; then
    if [ -z "${_ESC_PASS}" ]; then
      PXSWD=$(cat /root/.my.pass.txt 2>&1)
    else
      PXSWD="${_ESC_PASS}"
    fi
    PASWD=$(echo -n $PXSWD | tr -d "\n" 2>&1)
    mysql -u root -e "FLUSH HOSTS;" &> /dev/null
    mysql -u root -e "DELETE FROM mysql.user WHERE User='';" &> /dev/null
    mysql -u root -e "DELETE FROM mysql.user WHERE User='root' AND \
      Host NOT IN ('localhost', '127.0.0.1', '::1');" &> /dev/null
    mysql -u root -e "DROP DATABASE test;" &> /dev/null
    mysql -u root -e "DELETE FROM mysql.db WHERE Db='test' OR \
      Db='test\\_%';" &> /dev/null
    mysql -u root -e "UPDATE mysql.user SET Password=PASSWORD('$PASWD') \
      WHERE User='root';" &> /dev/null
    if [ "${_THIS_DB_HOST}" = "localhost" ] \
      || [ "${_THIS_DB_HOST}" = "FQDN" ]; then
      _DO_NOTHING=YES
    else
      if [ -e "/etc/mysql/debian.cnf" ] && [ "${_STATUS}" = "INIT" ]; then
        mysql -u root -e "UPDATE mysql.user SET Password=PASSWORD('${PASWD}') \
          WHERE User='debian-sys-maint';" &> /dev/null
        mkdir -p ${vBs}
        cp -af /etc/mysql/debian.cnf \
          ${vBs}/debian.cnf-pre-${_X_VERSION}-${_NOW}.txt
        chmod 400 ${vBs}/debian.cnf-pre-${_X_VERSION}-${_NOW}.txt
        sed -i "s/^password =.*/password = ${PASWD}/g" \
          /etc/mysql/debian.cnf &> /dev/null
      fi
      if [ -e "/root/.remote.IP.list" ]; then
        _ESC="\`%\`.*"
        for _IP in `cat /root/.remote.IP.list \
          | cut -d '#' -f1 \
          | sort \
          | uniq \
          | tr -d "\s"`; do
          mysql -u root -e "GRANT ALL PRIVILEGES ON $_ESC \
          TO 'aegir_root'@'${_IP}' IDENTIFIED BY '${PASWD}' \
          WITH GRANT OPTION;" &> /dev/null
        done
      fi
      if [ -e "/root/.cluster.IP.list" ]; then
        for _IP in `cat /root/.cluster.IP.list \
          | cut -d '#' -f1 \
          | sort \
          | uniq \
          | tr -d "\s"`; do
          mysql -u root -e "GRANT ALL ON *.* TO 'root'@'${_IP}';" &> /dev/null
        done
        mysql -u root -e "GRANT ALL ON *.* TO 'wsrep'@'%' \
          IDENTIFIED BY '${PASWD}';" &> /dev/null
      fi
      touch ${pthLog}/fixed-cluster-ip-grants.log
    fi
    mysql -u root -e "FLUSH PRIVILEGES;" &> /dev/null
  fi
  echo "[client]" > /root/.my.cnf
  echo "user=root" >> /root/.my.cnf
  echo "password=$PASWD" >> /root/.my.cnf
  chmod 0600 /root/.my.cnf
  echo "db=mysql" > /root/.mytop
  chmod 0600 /root/.mytop
  if [ "${_THIS_DB_HOST}" = "localhost" ]; then
    echo "skip-name-resolve" > /etc/mysql/skip-name-resolve.txt
  elif [ -e "/root/.mstr.clstr.cnf" ] \
    || [ -e "/root/.wbhd.clstr.cnf" ] \
    || [ -e "/root/.dbhd.clstr.cnf" ]; then
    echo "skip-name-resolve" > /etc/mysql/skip-name-resolve.txt
  else
    sed -i "s/.*skip-name-resolve/#skip-name-resolve/g" /etc/mysql/my.cnf
  fi
  sed -i "s/.*check_for_crashed_tables/#check_for_crashed_tables/g" \
    /etc/mysql/debian-start &> /dev/null
  mrun "service mysql restart" &> /dev/null
  msg "INFO: ${_DB_SERVER} setup completed"
  msg "INFO: You can now log in as root by typing just 'mysql'"
else
  if [ ! -e "${pthLog}/fixed-cluster-ip-grants.log" ] \
    && [ -e "/root/.dbhd.clstr.cnf" ]; then
    PXSWD=$(cat /root/.my.pass.txt 2>&1)
    PASWD=$(echo -n $PXSWD | tr -d "\n" 2>&1)
    if [ -e "/root/.remote.IP.list" ]; then
      _ESC="\`%\`.*"
      for _IP in `cat /root/.remote.IP.list \
        | cut -d '#' -f1 \
        | sort \
        | uniq \
        | tr -d "\s"`; do
        mysql -u root -e "GRANT ALL PRIVILEGES \
          ON $_ESC TO 'aegir_root'@'${_IP}' \
          IDENTIFIED BY '${PASWD}' WITH GRANT OPTION;" &> /dev/null
      done
    fi
    if [ -e "/root/.cluster.IP.list" ]; then
      for _IP in `cat /root/.cluster.IP.list \
        | cut -d '#' -f1 \
        | sort \
        | uniq \
        | tr -d "\s"`; do
        mysql -u root -e "GRANT ALL ON *.* TO 'root'@'${_IP}';" &> /dev/null
      done
      mysql -u root -e "GRANT ALL ON *.* TO 'wsrep'@'%' \
        IDENTIFIED BY '${PASWD}';" &> /dev/null
    fi
    touch ${pthLog}/fixed-cluster-ip-grants.log
  fi
  if [ "${_THIS_DB_HOST}" = "localhost" ] \
    || [ "${_THIS_DB_HOST}" = "FQDN" ]; then
    if [ ! -e "/root/.mysql.no.new.password.cnf" ]; then
      forced_mysql_root_password_update
    fi
  fi
fi


###--------------------###
if [ -L "${mtrInc}/barracuda_log.txt" ]; then
  rm -f ${mtrInc}/barracuda_log.txt
fi
if [ "${_THIS_DB_HOST}" = "localhost" ]; then
  _LOG_DB_HOST=localhost
elif [ "${_THIS_DB_HOST}" = "FQDN" ]; then
  _LOG_DB_HOST=FQDN
else
  _LOG_DB_HOST=REMOTE
fi
if [ ! -z "${_FORCE_GIT_MIRROR}" ]; then
  _LOG_GIT_MIRROR="-${_FORCE_GIT_MIRROR}"
fi
_LOG_DB_V=$(mysql -V 2>&1 \
  | tr -d "\n" \
  | cut -d" " -f6 \
  | awk '{ print $1}' \
  | cut -d"-" -f1 \
  | awk '{ print $1}' \
  | sed "s/[\,']//g" 2>&1)
_BARRACUDA_VERSION_INFO="$(date 2>&1) / \
  $(lsb_release -si 2>&1).$(lsb_release -sc 2>&1) \
  $(uname -m 2>&1) ${_VMFAMILY} / \
  Aegir ${_AEGIR_VERSION} / \
  Barracuda ${_X_VERSION}${_LOG_GIT_MIRROR} / \
  Nginx ${_NGINX_VRN} / \
  PHP-MI ${_PHP_MULTI_INSTALL} / \
  PHP-SE ${_PHP_SINGLE_INSTALL} / \
  FPM ${_PHP_FPM_VERSION} / \
  CLI ${_PHP_CLI_VERSION} / \
  ${_DB_SERVER}-${_LOG_DB_V} \
  ${_LOG_DB_HOST}"

echo "${_BARRACUDA_VERSION_INFO}" | fmt -su -w 2500 >> /var/log/barracuda_log.txt
echo "${_BARRACUDA_VERSION_INFO}" | fmt -su -w 2500 >> ${vBs}/barracuda_log.txt

if [ "${_DEBUG_MODE}" = "YES" ]; then
  msg "INFO: New entry added to /var/log/barracuda_log.txt"
fi


###--------------------###
if [ ! -e "${pthLog}/sysctl.conf-${_X_VERSION}-${_NOW}.log" ]; then
  cp -af /etc/sysctl.conf \
    ${vBs}/dragon/t/sysctl.conf-pre-${_X_VERSION}-${_NOW} &> /dev/null
  cp -af ${locCnf}/sysctl.conf /etc/sysctl.conf
  if [ -e "/etc/security/limits.conf" ]; then
    _IF_NF=$(grep '524288' /etc/security/limits.conf 2>&1)
    if [ -z "$_IF_NF" ]; then
      echo "*         hard    nofile      524288"  >> /etc/security/limits.conf
      echo "*         soft    nofile      524288"  >> /etc/security/limits.conf
      echo "root      hard    nofile      1048576" >> /etc/security/limits.conf
      echo "root      soft    nofile      1048576" >> /etc/security/limits.conf
    fi
  fi
  if [ -e "/boot/grub/grub.cfg" ] || [ -e "/boot/grub/menu.lst" ]; then
    sysctl -p /etc/sysctl.conf &> /dev/null
    _IF_CDP=$(ps aux | grep '[c]dp_io' | awk '{print $2}' 2>&1)
    if [ -z "$_IF_CDP" ] && [ ! -e "/root/.no.swap.clear.cnf" ]; then
      msg "INFO: Cleaning up system swap, it may take a moment..."
      st_runner "swapoff -a" &> /dev/null
      st_runner "swapon -a" &> /dev/null
    fi
  else
    sysctl -p /etc/sysctl.conf &> /dev/null
  fi
  touch ${pthLog}/sysctl.conf-${_X_VERSION}-${_NOW}.log
fi
XPTEMAIL=${_MY_EMAIL//\@/\\\\\@}
sed -i "s/notify\@omega8.cc/${_MY_EMAIL}/g"  \
  /etc/csf/csf.conf &> /dev/null
sed -i "s/notify\\\@omega8.cc/$XPTEMAIL/g" \
  /var/xdrago/checksql.cgi
sed -i "s/notify\\\@omega8.cc/$XPTEMAIL/g" \
  /var/xdrago/daily.sh
sed -i "s/notify\\\@omega8.cc/$XPTEMAIL/g" \
  /var/xdrago/weekly.sh
sed -i "s/notify\\\@omega8.cc/$XPTEMAIL/g" \
  /var/xdrago/monitor/check/segfault_alert
sed -i "s/notify\\\@omega8.cc/$XPTEMAIL/g" \
  /var/xdrago/monitor/check/escapecheck
if [ -e "/usr/sbin/apticron" ]; then
  if [ -e "/etc/apticron/apticron.conf" ]; then
    _APTICRON_TEST=$(grep "NOTIFY_HOLDS" /etc/apticron/apticron.conf 2>&1)
    if [[ "$_APTICRON_TEST" =~ "NOTIFY_HOLDS" ]]; then
      sed -i "s/^# NOTIFY_HOLDS=\"0\"/NOTIFY_HOLDS=\"0\"/g" \
        /etc/apticron/apticron.conf
      sed -i "s/notify\@omega8.cc/${_MY_EMAIL}/g" \
        /etc/apticron/apticron.conf
      sed -i "s/root/${_MY_EMAIL}/g" \
        /etc/apticron/apticron.conf
    else
      mrun "apt-get remove apticron -y --force-yes -qq" &> /dev/null
      mrun "apt-get purge apticron -y --force-yes -qq"  &> /dev/null
      mrun "apt-get install apticron -y"                &> /dev/null
      sed -i "s/^# NOTIFY_HOLDS=\"0\"/NOTIFY_HOLDS=\"0\"/g" \
        /etc/apticron/apticron.conf
      sed -i "s/notify\@omega8.cc/${_MY_EMAIL}/g" \
        /etc/apticron/apticron.conf
      sed -i "s/root/${_MY_EMAIL}/g" \
        /etc/apticron/apticron.conf
    fi
  fi
  if [[ "${_X_VERSION}" =~ "dev" ]] && [ "${_AEGIR_VERSION}" = "HEAD" ]; then
    sed -i "s/aptitude full-upgrade/barracuda up-head system/g" \
      /usr/sbin/apticron
    sed -i "s/apt-get dist-upgrade/barracuda up-head system/g" \
      /usr/sbin/apticron
    sed -i "s/barracuda up-head.*/barracuda up-head system/g" \
      /usr/sbin/apticron
  else
    sed -i "s/aptitude full-upgrade/barracuda up-stable system/g" \
      /usr/sbin/apticron
    sed -i "s/apt-get dist-upgrade/barracuda up-stable system/g" \
      /usr/sbin/apticron
    sed -i "s/barracuda up-stable.*/barracuda up-stable system/g" \
      /usr/sbin/apticron
  fi
fi
if [ "${_STATUS}" = "INIT" ]; then
  if [ "${_EASY_SETUP}" != "LOCAL" ]; then
    mrun "bash /usr/sbin/apticron" &> /dev/null
  fi
  if [ "${_DEBUG_MODE}" = "YES" ]; then
    _DO_NOTHING=YES
  else
    _AEGIR_LOGIN_URL=$(grep --text "^http://${_THIS_FRONT}" \
      /var/aegir/install.log 2>&1)
    if [ ! -z "$_AEGIR_LOGIN_URL" ]; then
      echo " "
      msg "INFO: Congratulations, Aegir have been installed successfully!"
      msg "NOTE! Please wait 2 min before visiting Aegir at:"
      echo " "
      msg "LINK: $_AEGIR_LOGIN_URL"
    else
      msg "ALRT! Something went wrong"
      msg "ALRT! Please check the install log for details:"
      msg "ALRT! /var/aegir/install.log"
    fi
  fi
fi
if [ ! -e "${pthLog}/cron_aegir_off.pid" ]; then
  touch ${pthLog}/cron_aegir_off.pid
fi


###--------------------###
if [ "${_FORCE_REDIS_RESTART}" = "YES" ]; then
  service redis-server stop &> /dev/null
  killall -9 redis-server &> /dev/null
  service redis-server start &> /dev/null
fi
if [ "${_STATUS}" = "INIT" ]; then
  service cron start &> /dev/null
  if [ "${_EASY_SETUP}" = "NO" ]; then
    echo " "
    msg "Now waiting 2 minutes before restarting Nginx..."
    mrun "sleep 111"
  fi
  force_advanced_nginx_config
  mrun "sleep 8"
  mrun "service nginx restart" &> /dev/null
else
  if [ -e "/var/aegir/config" ]; then
    sed -i "s/.*listen .*:80;/  listen                       \*:80;/g" /var/aegir/config/server_*/nginx/vhost.d/*          &> /dev/null
    sed -i "s/.*listen .*:443/  listen                       \*:443/g" /var/aegir/config/server_*/nginx/vhost.d/sqlbuddy.* &> /dev/null
    sed -i "s/.*listen .*:443/  listen                       \*:443/g" /var/aegir/config/server_*/nginx/vhost.d/chive.*    &> /dev/null
    sed -i "s/.*listen .*:443/  listen                       \*:443/g" /var/aegir/config/server_*/nginx/vhost.d/cgp.*      &> /dev/null
    sed -i "s/SSLv3 TLSv1;/TLSv1 TLSv1.1 TLSv1.2;/g" /var/aegir/config/server_*/nginx/pre.d/*.conf       &> /dev/null
    sed -i "s/SSLv3 TLSv1 TLSv1.1 TLSv1.2;/TLSv1 TLSv1.1 TLSv1.2;/g" /var/aegir/config/server_*/nginx/pre.d/*.conf &> /dev/null
    sed -i "s/HIGH:\!ADH:\!MD5;/RC4:HIGH:\!aNULL:\!MD5;/g" /var/aegir/config/server_*/nginx/pre.d/*.conf &> /dev/null
    sed -i "s/.*gzip_vary .*//g" /var/aegir/config/server_*/nginx/pre.d/*.conf                           &> /dev/null
    sed -i "s/.*gzip_vary .*//g" /var/aegir/config/server_*/nginx/vhost.d/*                              &> /dev/null
    sed -i "s/.*proxy_buffer_size .*//g" /var/aegir/config/server_*/nginx/pre.d/*.conf                   &> /dev/null
    sed -i "s/.*proxy_buffer_size .*//g" /var/aegir/config/server_*/nginx/vhost.d/*                      &> /dev/null
    sed -i "s/.*proxy_buffers .*//g" /var/aegir/config/server_*/nginx/pre.d/*.conf                       &> /dev/null
    sed -i "s/.*proxy_buffers .*//g" /var/aegir/config/server_*/nginx/vhost.d/*                          &> /dev/null
    sed -i "s/.*proxy_busy_buffers_size .*//g" /var/aegir/config/server_*/nginx/pre.d/*.conf             &> /dev/null
    sed -i "s/.*proxy_busy_buffers_size .*//g" /var/aegir/config/server_*/nginx/vhost.d/*                &> /dev/null
    sed -i "s/.*proxy_temp_file_write_size .*//g" /var/aegir/config/server_*/nginx/pre.d/*.conf          &> /dev/null
    sed -i "s/.*proxy_temp_file_write_size .*//g" /var/aegir/config/server_*/nginx/vhost.d/*             &> /dev/null
    sed -i "s/.*proxy_buffering .*//g" /var/aegir/config/server_*/nginx/pre.d/*.conf                     &> /dev/null
    sed -i "s/.*proxy_buffering .*//g" /var/aegir/config/server_*/nginx/vhost.d/*                        &> /dev/null
    sed -i "s/proxy_redirect .*/proxy_redirect             off;\n    gzip_vary                  off;\n    proxy_buffering            off;/g" /var/aegir/config/server_*/nginx/pre.d/*.conf &> /dev/null
    sed -i "s/proxy_redirect .*/proxy_redirect             off;\n    gzip_vary                  off;\n    proxy_buffering            off;/g" /var/aegir/config/server_*/nginx/vhost.d/*    &> /dev/null
    sed -i "s/ *$//g; /^$/d" /var/aegir/config/server_*/nginx/pre.d/*.conf                               &> /dev/null
    sed -i "s/ *$//g; /^$/d" /var/aegir/config/server_*/nginx/vhost.d/*                                  &> /dev/null
    sed -i "s/add_header Vary .*//g" /var/aegir/config/server_*/nginx.conf                               &> /dev/null
  fi
  if [ "${_NGINX_SPDY}" = "YES" ]; then
    sed -i "s/:443;/:443 ssl spdy;/g" /var/aegir/config/server_*/nginx/pre.d/*.conf &> /dev/null
    sed -i "s/:443;/:443 ssl spdy;/g" /var/aegir/config/server_*/nginx/vhost.d/*    &> /dev/null
  fi
  _SSL_ITD=$(openssl version 2>&1 | tr -d "\n" | cut -d" " -f2 | awk '{ print $1}' 2>&1)
  if [ "${_SSL_ITD}" = "${_OPENSSL_VRN}" ] &&[ "${_NGINX_FORWARD_SECRECY}" = "YES" ]; then
    _ALLOW_NGINX_FORWARD_SECRECY=YES
    _SSL_PROTOCOLS="TLSv1 TLSv1.1 TLSv1.2;"
    _SSL_CIPHERS="EECDH+ECDSA+AESGCM: \
      EECDH+aRSA+AESGCM:  \
      EECDH+ECDSA+SHA384: \
      EECDH+ECDSA+SHA256: \
      EECDH+aRSA+SHA384:  \
      EECDH+aRSA+SHA256:  \
      EECDH:    \
      EDH+aRSA: \
      \!aNULL:  \
      \!eNULL:  \
      \!LOW:    \
      \!3DES:   \
      \!MD5:    \
      \!EXP:    \
      \!PSK:    \
      \!SRP:    \
      \!DSS:    \
      \!RC4;"
    _SSL_CIPHERS=$(echo "${_SSL_CIPHERS}" | sed "s/ //g" 2>&1)
  else
    _ALLOW_NGINX_FORWARD_SECRECY=NO
  fi
  if [ "$_ALLOW_NGINX_FORWARD_SECRECY" = "YES" ]; then
    sed -i "s/ssl_protocols .*/ssl_protocols $_SSL_PROTOCOLS/g" \
      /var/aegir/config/server_*/nginx/pre.d/*.conf &> /dev/null
    sed -i "s/ssl_protocols .*/ssl_protocols $_SSL_PROTOCOLS/g" \
      /var/aegir/config/server_*/nginx/vhost.d/* &> /dev/null
    sed -i "s/ssl_ciphers .*/ssl_ciphers $_SSL_CIPHERS/g" \
      /var/aegir/config/server_*/nginx/pre.d/*.conf &> /dev/null
    sed -i "s/ssl_ciphers .*/ssl_ciphers $_SSL_CIPHERS/g" \
      /var/aegir/config/server_*/nginx/vhost.d/* &> /dev/null
  fi

  ###
  ### Nginx: Convert all vhosts to wildcard mode on Barracuda upgrade
  ### to avoid extended downtime until all Octopus instances will receive
  ### full upgrade, if IP based listen directive was used before.
  ###
  if [ -e "/var/aegir" ]; then
    sed -i "s/.*listen.*127.0.0.1:80;.*//g" \
      /var/aegir/config/server_*/nginx.conf &> /dev/null
    sed -i "s/listen .*/listen        \*:80;/g" \
      /var/aegir/config/server_*/nginx.conf &> /dev/null
  fi
  if [ -e "/data/disk" ]; then
    sed -i "s/.*listen.*127.0.0.1:80;.*//g" \
      /data/disk/*/config/server_*/nginx.conf &> /dev/null
    sed -i "s/listen .*/listen        \*:80;/g" \
      /data/disk/*/config/server_*/nginx.conf &> /dev/null
    sed -i "s/listen .*/listen        \*:80;/g" \
      /data/disk/*/config/server_*/nginx/vhost.d/* &> /dev/null
    sed -i "s/param db_port.*/param db_port   3306;/g" \
      /data/disk/*/config/server_*/nginx/vhost.d/* &> /dev/null
  fi

  if [ -e "/data/disk" ]; then
    for _OCT in `find /data/disk/ -maxdepth 1 -mindepth 1 | sort`; do
      pthPrN="provision/http/Provision/Config/Nginx"
      if [ -e "$_OCT/.drush/sys/drush_make" ]; then
        sed -i "s/\!empty.*';/'*';/g" \
          $_OCT/.drush/sys/${pNx}/server.tpl.php &> /dev/null
        sed -i "s/\!empty.*';/'*';/g" \
          $_OCT/.drush/sys/${pNx}/vhost.tpl.php &> /dev/null
        sed -i "s/\!empty.*';/'*';/g" \
          $_OCT/.drush/sys/${pNx}/vhost_disabled.tpl.php &> /dev/null
        sed -i "s/\!empty.*';/'*';/g" \
          $_OCT/.drush/xts/provision_cdn/Provision/Config/cdn.tpl.php &> /dev/null
      elif [ -e "$_OCT/.drush/drush_make" ]; then
        sed -i "s/\!empty.*';/'*';/g" \
          $_OCT/.drush/${pNx}/server.tpl.php &> /dev/null
        sed -i "s/\!empty.*';/'*';/g" \
          $_OCT/.drush/${pNx}/vhost.tpl.php &> /dev/null
        sed -i "s/\!empty.*';/'*';/g" \
          $_OCT/.drush/${pNx}/vhost_disabled.tpl.php &> /dev/null
        sed -i "s/\!empty.*';/'*';/g" \
          $_OCT/.drush/provision_cdn/Provision/Config/cdn.tpl.php &> /dev/null
      fi
    done
  fi

  ###
  ### Delete any ghost, outdated or broken config includes and vhosts
  ### in all Octopus instances which could break Nginx restart
  ###
  if [ -e "/data/disk" ]; then
    for File in `grep will_expire_in /data/disk/*/config/includes/* \
      | cut -d: -f1 \
      | awk '{ print $1}'`; do
      rm -f $File
    done
    for Vght in `ls /data/disk/*/log/CANCELLED 2> /dev/null \
      | cut -d"/" -f4 \
      | awk '{ print $1}'`; do
      rm -f /data/disk/$Vght/config/server_*/nginx/vhost.d/*
    done
    wildPth="/data/disk/*/.drush/sys/provision/http/Provision/Service/http/*.conf"
    sed -i "s/OctopusMicroNoCacheID/NoCacheID/g" ${wildPth} &> /dev/null
    sed -i "s/OctopusNCookie/AegirCookie/g"      ${wildPth} &> /dev/null
    sed -i "s/OctopusNoCacheID/NoCacheID/g"      ${wildPth} &> /dev/null
  fi
  if [ -e "/var/aegir" ]; then
    wildPth="/var/aegir/.drush/sys/provision/http/Provision/Service/http/*.conf"
    sed -i "s/OctopusMicroNoCacheID/NoCacheID/g" ${wildPth} &> /dev/null
    sed -i "s/OctopusNCookie/AegirCookie/g"      ${wildPth} &> /dev/null
    sed -i "s/OctopusNoCacheID/NoCacheID/g"      ${wildPth} &> /dev/null
    sed -i "s/60/180/g" /var/aegir/config/server_*/nginx.conf  &> /dev/null
    sed -i "s/300/180/g" /var/aegir/config/server_*/nginx.conf &> /dev/null
  fi
  validate_public_ip &> /dev/null
  _CRON_IP=${_THISHTIP//[^0-9.]/}
  if [ ! -e "/root/.local.IP.list" ]; then
    rm -f /root/.tmp.IP.list*
    rm -f /root/.local.IP.list*
    for _IP in `hostname -I`;do echo ${_IP} >> /root/.tmp.IP.list;done
    for _IP in `cat /root/.tmp.IP.list \
      | sort \
      | uniq`; do
      echo "${_IP} # local IP address" >> /root/.local.IP.list
    done
    rm -f /root/.tmp.IP.list*
  fi
  _IP_IF_PRESENT=$(grep "${_CRON_IP}" /root/.local.IP.list 2>&1)
  if [[ "${_IP_IF_PRESENT}" =~ "${_CRON_IP}" ]]; then
    _IP_PRESENT=YES
  else
    _IP_PRESENT=NO
  fi
  if [ ! -z "${_CRON_IP}" ] \
    && [ "${_IP_PRESENT}" = "YES" ] \
    && [ -e "/root/.local.IP.list" ]; then
    fix_multi_ip_cron_access
  fi
  mrun "service nginx reload" &> /dev/null
fi


###--------------------###
#
# Fix csf.uidignore file to whitelist important system uids when UID_INTERVAL != 0
fix_lfd_uidignore() {
  _THIS_FILE=/etc/csf/csf.uidignore
  if [ -e "${_THIS_FILE}" ]; then
    _CSF_UIDIGNORE_TEST=$(grep "pdnsd" ${_THIS_FILE} 2>&1)
    if [[ "$_CSF_UIDIGNORE_TEST" =~ "pdnsd" ]]; then
      _DO_NOTHING=YES
    else
      echo "#root"          >> /etc/csf/csf.uidignore &> /dev/null
      echo `id -u root`     >> /etc/csf/csf.uidignore &> /dev/null
      echo "#pdnsd"         >> /etc/csf/csf.uidignore &> /dev/null
      echo `id -u pdnsd`    >> /etc/csf/csf.uidignore &> /dev/null
      echo "#postfix"       >> /etc/csf/csf.uidignore &> /dev/null
      echo `id -u postfix`  >> /etc/csf/csf.uidignore &> /dev/null
      echo "#www-data"      >> /etc/csf/csf.uidignore &> /dev/null
      echo `id -u www-data` >> /etc/csf/csf.uidignore &> /dev/null
    fi
    if [ -e "/usr/sbin/named" ]; then
      _CSF_UIDIGNORE_TEST=$(grep "bind" ${_THIS_FILE} 2>&1)
      if [[ "$_CSF_UIDIGNORE_TEST" =~ "bind" ]]; then
        _DO_NOTHING=YES
      else
        echo "#bind"        >> /etc/csf/csf.uidignore &> /dev/null
        echo `id -u bind`   >> /etc/csf/csf.uidignore &> /dev/null
      fi
    fi
    sed -i "/^$/d" ${_THIS_FILE} &> /dev/null
  fi
}
#
# Fix csf.fignore file to whitelist /tmp/drush_*
fix_lfd_whitelist() {
  _THIS_FILE=/etc/csf/csf.fignore
  if [ -e "${_THIS_FILE}" ]; then
    _CSF_WHITELIST_TEST=$(grep "jetty" ${_THIS_FILE} 2>&1)
    if [[ "$_CSF_WHITELIST_TEST" =~ "jetty" ]]; then
      _DO_NOTHING=YES
    else
      sed -i "s/.*\/tmp\/.*//g" ${_THIS_FILE} &> /dev/null
      sed -i "/^$/d"            ${_THIS_FILE} &> /dev/null
      echo "/tmp/drush_tmp.*"      >> ${_THIS_FILE}
      echo "/tmp/drush_make_tmp.*" >> ${_THIS_FILE}
      echo "/tmp/make_tmp.*"       >> ${_THIS_FILE}
      echo "/tmp/hsperfdata.*"     >> ${_THIS_FILE}
      echo "/tmp/jetty.*"          >> ${_THIS_FILE}
    fi
  fi
}
#
csf_install() {
  if [ "$_CSF_MODE" = "install" ]; then
    msg "INFO: Installing csf/lfd firewall..."
  else
    msg "INFO: Upgrading csf/lfd firewall..."
  fi
  cd /var/opt
  rm -f ${pthLog}/lastFire
  if ! netcat -w 14 -z www.configserver.com 80 ; then
    get_dev_arch "csf.tgz"
  else
    curl ${crlGet} "http://www.configserver.com/free/csf.tgz" -o "csf.tgz"
    extract_archive "csf.tgz"
  fi
  cd csf
  st_runner "sh install.sh" 2> /dev/null
  cd /var/opt
  if [[ "${_THISHOST}" =~ ".host8." ]] || [ "${_VMFAMILY}" = "VS" ]; then
    _SSH_PORT=22
  fi
  _CSF_COMPATIBILITY_TEST=$(perl /etc/csf/csftest.pl 2>&1)
  if [[ "$_CSF_COMPATIBILITY_TEST" =~ "RESULT: csf should function" ]]; then
    _CSF_COMPATIBILITY=YES
  elif [[ "$_CSF_COMPATIBILITY_TEST" =~ "some features will not work" ]]; then
    _CSF_COMPATIBILITY=PARTIAL
    sed -i "s/^PORTFLOOD .*/PORTFLOOD = \"\"/g" /etc/csf/csf.conf &> /dev/null
    sed -i "s/^CONNLIMIT .*/CONNLIMIT = \"\"/g" /etc/csf/csf.conf &> /dev/null
    sed -i "s/^USE_CONNTRACK .*/USE_CONNTRACK = \"0\"/g" /etc/csf/csf.conf &> /dev/null
  elif [[ "$_CSF_COMPATIBILITY_TEST" =~ "FATAL" ]]; then
    _CSF_COMPATIBILITY=NO
  else
    _CSF_COMPATIBILITY=NO
  fi
  if [ "$_CSF_COMPATIBILITY" = "YES" ] \
    || [ "$_CSF_COMPATIBILITY" = "PARTIAL" ]; then
    if [ "$_CSF_COMPATIBILITY" = "PARTIAL" ]; then
      msg "TEST: csf/lfd firewall should mostly work on this system"
    else
      msg "TEST: csf/lfd firewall should work fine on this system"
    fi
    mv -f /etc/csf/csf.conf \
      /etc/csf/csf.conf-pre-${_X_VERSION}-${_NOW} &> /dev/null
    cp -af ${locCnf}/csf.conf /etc/csf/csf.conf
    sed -i "s/notify\@omega8.cc/${_MY_EMAIL}/g" /etc/csf/csf.conf &> /dev/null
    sed -i "s/TCP_IN = \"20,21,22,/TCP_IN = \"20,21,${_SSH_PORT},/g" \
      /etc/csf/csf.conf &> /dev/null
    chmod 600 /etc/csf/csf.conf &> /dev/null
    if [ -e "/etc/ssh/sshd_config" ]; then
      sed -i "s/^Port.*/Port ${_SSH_PORT}/g"  /etc/ssh/sshd_config
      sed -i "s/^#Port.*/Port ${_SSH_PORT}/g" /etc/ssh/sshd_config
    fi
    if [ -e "/usr/etc/sshd_config" ]; then
      sed -i "s/^Port.*/Port ${_SSH_PORT}/g"  /usr/etc/sshd_config
      sed -i "s/^#Port.*/Port ${_SSH_PORT}/g" /usr/etc/sshd_config
    fi
    mrun "service ssh restart" &> /dev/null
    if [ "$_CSF_MODE" = "install" ]; then
      msg "INFO: csf/lfd firewall installation completed"
    else
      msg "INFO: csf/lfd firewall upgrade completed"
    fi
    touch ${pthLog}/csf_${_X_VERSION}.log
  else
    msg "TEST: csf/lfd firewall can not be installed on this system"
  fi
}
if [ -e "/root/.mstr.clstr.cnf" ] \
  || [ -e "/root/.wbhd.clstr.cnf" ] \
  || [ -e "/root/.dbhd.clstr.cnf" ]; then
  if [ "${_USE_CSF_ON_CLSTR}" = "YES" ]; then
    _CSF_CLSTR=YES
  else
    _CSF_CLSTR=NO
  fi
fi
if [[ "${_XTRAS_LIST}" =~ "ALL" ]] \
  || [[ "${_XTRAS_LIST}" =~ "CSF" ]] \
  || [ "$_CSF_CLSTR" = "YES" ]; then
  if [ ! -e "/var/run/cloud_vhost.pid" ]; then
    if [ ! -e "/usr/sbin/csf" ]; then
      echo " "
      if prompt_yes_no "Do you want to install csf/lfd firewall?" ; then
        true
        _CSF_MODE=install
        csf_install
      else
        msg "INFO: csf/lfd firewall installation skipped"
      fi
    fi
  fi
fi
if [ -e "/usr/sbin/csf" ] \
  || [ -e "/usr/sbin/lfd" ] \
  || [ -e "/etc/cron.d/lfd" ]; then
  if [ "$_CSF_COMPATIBILITY" = "NO" ] \
    || [ "$_CSF_CLSTR" = "NO" ]; then
    _REMOVE_CSF=YES
  elif [ "${_VMFAMILY}" = "VS" ] \
    && [ ! -e "/boot/grub/grub.cfg" ] \
    && [ ! -e "/boot/grub/menu.lst" ]; then
    _REMOVE_CSF=YES
  fi
  if [ "$_REMOVE_CSF" = "YES" ]; then
    csf -x &> /dev/null
    update-rc.d -f csf remove &> /dev/null
    update-rc.d -f lfd remove &> /dev/null
    rm -f /etc/cron.d/{csf,lfd}*
    rm -f /usr/sbin/{csf,lfd}
    rm -f /etc/init.d/{csf,lfd}
    rm -f -r /etc/csf
  else
    if [ "${_CUSTOM_CONFIG_CSF}" = "YES" ]; then
      _DO_NOTHING=YES
    else
      _CSF_MODE=upgrade
      csf_install
    fi
    if [ -e "/root/.host8.cnf" ] \
      || [ -e "/root/.auto.up.cnf" ] \
      || [[ "${_CHECK_HOST}" =~ ".host8." ]]; then
      sed -i "s/^AUTO_UPDATES .*/AUTO_UPDATES = \"1\"/g" \
        /etc/csf/csf.conf &> /dev/null
    fi
    if [ "${_VMFAMILY}" = "VZ" ]; then
      sed -i "s/^PORTFLOOD .*/PORTFLOOD = \"\"/g" /etc/csf/csf.conf &> /dev/null
      sed -i "s/^CONNLIMIT .*/CONNLIMIT = \"\"/g" /etc/csf/csf.conf &> /dev/null
      sed -i "s/^USE_CONNTRACK .*/USE_CONNTRACK = \"0\"/g" \
        /etc/csf/csf.conf &> /dev/null
    fi
    if [ -e "${pthLog}/lastFire" ]; then
      rm -f ${pthLog}/lastFire
      mrun "csf -x" &> /dev/null
      mrun "csf -e" &> /dev/null
      mrun "csf -q" &> /dev/null
    fi
  fi
fi


###--------------------###
install_pdnsd_cache() {
  msg "INFO: Installing DNS cache pdnsd server..."
  cp -af /etc/resolv.conf ${vBs}/resolv.conf.pre-${_X_VERSION}-${_NOW}
  if [ "${_USE_PROVIDER_DNS}" = "NO" ]; then
    rm -f /etc/resolv.conf
    echo "nameserver 8.8.8.8" > /etc/resolv.conf
    echo "nameserver 8.8.4.4" >> /etc/resolv.conf
  fi
  st_runner "apt-get update -y --force-yes" &> /dev/null
  st_runner "aptitude purge pdnsd -y" &> /dev/null
  st_runner "aptitude purge resolvconf -y" &> /dev/null
  st_runner "apt-get autoremove -y --force-yes -qq" &> /dev/null
  rm -f -r /lib/init/rw/resolvconf
  rm -f -r /etc/resolvconf
  st_runner "aptitude purge pdnsd -y" &> /dev/null
  st_runner "aptitude purge resolvconf -y" &> /dev/null
  st_runner "apt-get autoremove -y --force-yes -qq" &> /dev/null
  if [ "${_USE_PROVIDER_DNS}" = "NO" ]; then
    rm -f /etc/resolv.conf
    echo "nameserver 8.8.8.8" > /etc/resolv.conf
    echo "nameserver 8.8.4.4" >> /etc/resolv.conf
  fi
  st_runner "$_INSTALL resolvconf" &> /dev/null
  st_runner "$_INSTALL pdnsd" &> /dev/null
  st_runner "$_INSTALL resolvconf" &> /dev/null
  st_runner "$_INSTALL pdnsd" &> /dev/null
  sed -i "s/START_DAEMON=no/START_DAEMON=yes/g" /etc/default/pdnsd &> /dev/null
  cat ${locCnf}/pdnsd.conf > /etc/pdnsd.conf
  if [ "${_USE_PROVIDER_DNS}" = "YES" ]; then
    _CUSTOM_DNS_TEST=$(grep 8.8.8.8 /etc/pdnsd.conf 2>&1)
    if [[ "${_CUSTOM_DNS_TEST}" =~ "8.8.8.8" ]] \
      && [ -e "/root/.use.local.nameservers.cnf" ]; then
      echo "        label = \"google-servers\";" > /root/.local.dns.IP.list
      for _IP in `cat /etc/resolv.conf \
        | sed 's/.*127.0.0.1.*//g; s/.*Dynamic.*//g' \
        | cut -d ' ' -f2 \
        | sort \
        | uniq`;do echo "        ip=${_IP};" >> /root/.local.dns.IP.list;done
      sed -i "s/ip=8.8.*//g; s/ *$//g; /^$/d" /etc/pdnsd.conf
      sed -i '/        label = \"google-servers\";/ {r /root/.local.dns.IP.list
d;};' /etc/pdnsd.conf
    fi
  fi
  if [ ! -L "/etc/resolvconf/run" ] \
    || [ ! -e "/lib/init/rw/resolvconf/enable-updates" ] \
    || [ ! -e "/etc/resolvconf/resolv.conf.d/tail" ]; then
    rm -f -r /run/resolvconf
    rm -f -r /etc/resolvconf/run
    ln -s /lib/init/rw/resolvconf /etc/resolvconf/run
    if [ ! -e "/lib/init/rw/resolvconf/interface" ]; then
      mkdir -p /lib/init/rw/resolvconf/interface
    fi
    rm -f /lib/init/rw/resolvconf/postponed-update
    touch /lib/init/rw/resolvconf/enable-updates
    rm -f /etc/resolvconf/resolv.conf.d/tail
    touch /etc/resolvconf/resolv.conf.d/tail
  fi
  if [ "${_USE_PROVIDER_DNS}" = "YES" ] \
    && [ -e "${vBs}/resolv.conf.vanilla" ]; then
    cat ${vBs}/resolv.conf.vanilla > /etc/resolvconf/resolv.conf.d/base
  fi
  resolvconf -u &> /dev/null
  if [ "${_USE_PROVIDER_DNS}" = "NO" ] \
    && [ -e "/etc/resolvconf/run/resolv.conf" ]; then
    _RESOLV_TEST=$(grep "nameserver 127.0.0.1" /etc/resolv.conf 2>&1)
    if [[ "$_RESOLV_TEST" =~ "nameserver 127.0.0.1" ]]; then
      _DO_NOTHING=YES
    else
      rm -f /etc/resolv.conf
      ln -s /etc/resolvconf/run/resolv.conf /etc/resolv.conf
      resolvconf -u &> /dev/null
      service pdnsd restart &> /dev/null
    fi
  fi
  if [ ! -e "/etc/resolv.conf" ]; then
    if [ -e "${vBs}/resolv.conf.vanilla" ]; then
      cat ${vBs}/resolv.conf.vanilla >/etc/resolv.conf
    fi
    echo "nameserver 127.0.0.1" >> /etc/resolv.conf
  fi
  if [ -e "/etc/NetworkManager/NetworkManager.conf" ]; then
    sed -i "s/^dns=.*/dns=pdnsd/g" \
      /etc/NetworkManager/NetworkManager.conf &> /dev/null
    mrun "service network-manager restart" &> /dev/null
  fi
  mrun "service pdnsd stop" &> /dev/null
  rm -f /var/cache/pdnsd/pdnsd.cache
  mrun "service pdnsd start" &> /dev/null
  mrun "service pdnsd stop" &> /dev/null
  rm -f /var/cache/pdnsd/pdnsd.cache
  mrun "service pdnsd start" &> /dev/null
  resolvconf -u &> /dev/null
}
if [ -f "/etc/default/dhcpcd" ]; then
  sed -i "s/.*SET_DNS/#SET_DNS/g" /etc/default/dhcpcd &> /dev/null
  sed -i "s/.*SET_HOSTNAME/#SET_HOSTNAME/g" /etc/default/dhcpcd &> /dev/null
fi
check_dns_settings
if [ ! -e "/usr/sbin/pdnsd" ]; then
  install_pdnsd_cache
else
  if [ "${_USE_PROVIDER_DNS}" = "YES" ] \
    || [ ! -L "/etc/resolvconf/run" ] \
    || [ ! -e "/lib/init/rw/resolvconf/enable-updates" ] \
    || [ ! -e "/etc/resolvconf/run/interface/lo.pdnsd" ]; then
    msg "INFO: DNS cache pdnsd server re-installation forced"
    install_pdnsd_cache
  fi
fi
fix_lfd_whitelist
fix_lfd_uidignore
fix_cnf_postfix


###--------------------###
if [ "${_STRICT_BIN_PERMISSIONS}" = "YES" ]; then
  usermod -aG users aegir &> /dev/null
  usermod -aG users man &> /dev/null
  usermod -aG users mysql &> /dev/null
  if [ -x "/bin/dash" ]; then
    switch_to_dash
  else
    switch_to_bash
  fi
  strict_bin_permissions
fi
check_php_cli
finale
exit 0


###----------------------------------------###
###
###  Barracuda Aegir Installer
###  Copyright (C) 2010-2015 Omega8.cc
###  noc@omega8.cc www.omega8.cc
###
###----------------------------------------###
