#!/bin/bash


###----------------------------------------###
###
###  Octopus Aegir Installer
###
###  Copyright (C) 2010-2012 Omega8.cc
###  noc@omega8.cc www.omega8.cc
###
###  This program is free software. You can
###  redistribute it and/or modify it under
###  the terms of the GNU GPL as published by
###  the Free Software Foundation, version 2
###  or later.
###
###  This program is distributed in the hope
###  that it will be useful, but WITHOUT ANY
###  WARRANTY; without even the implied
###  warranty of MERCHANTABILITY or FITNESS
###  FOR A PARTICULAR PURPOSE. See the GNU GPL
###  for more details.
###
###  You should have received a copy of the
###  GNU GPL along with this program.
###  If not, see http://www.gnu.org/licenses/
###
###  Code: http://code.aegir.cc/aegir
###
###----------------------------------------###


###----------------------------------------###
### DON'T EDIT ANYTHING BELOW THIS LINE    ###
###----------------------------------------###

_INSTALLER_VERSION=EDIT_INSTALLER_VERSION


###---### distro config
#
_ACQUIA_SEVEN=EDIT_ACQUIA_SEVEN
_CIVICRM6=EDIT_CIVICRM6
_CIVICRM7=EDIT_CIVICRM7
_COD=EDIT_COD
_COMMERCE=EDIT_COMMERCE
_COMMONS=EDIT_COMMONS
_DRUPAL5=EDIT_DRUPAL5
_DRUPAL7=EDIT_DRUPAL7
_DRUPAL8=EDIT_DRUPAL8
_DRUPAL7D="EDIT_DRUPAL7-dev"
_DRUPAL7P="EDIT_DRUPAL7-prod"
_DRUPAL7S="EDIT_DRUPAL7-stage"
_ELMS=EDIT_ELMS
_MANAGINGNEWS=EDIT_MANAGINGNEWS
_MARTPLUG=EDIT_MARTPLUG
_NODESTREAM6=EDIT_NODESTREAM6
_NODESTREAM7=EDIT_NODESTREAM7
_OCTOPUS_VIDEO=EDIT_OCTOPUS_VIDEO
_OPENATRIUM=EDIT_OPENATRIUM
_OPENCHURCH=EDIT_OPENCHURCH
_OPENDEALS=EDIT_OPENDEALS
_OPENENTERPRISE=EDIT_OPENENTERPRISE
_OPENOUTREACH=EDIT_OPENOUTREACH
_OPENPUBLIC=EDIT_OPENPUBLIC
_OPENPUBLISH=EDIT_OPENPUBLISH
_OPENSCHOLAR=EDIT_OPENSCHOLAR
_PROSEPOINT=EDIT_PROSEPOINT
_SMALLCORE_6_LANG=EDIT_SMALLCORE_6_LANG
_SMALLCORE6=EDIT_SMALLCORE6
_SMALLCORE7=EDIT_SMALLCORE7
_SMALLCORE8=EDIT_SMALLCORE8
_UBER_CART_SEVEN=EDIT_UBER_CART_SEVEN
_UBERCART=EDIT_UBERCART
_VIDEOLA=EDIT_VIDEOLA


###---### main config
#
_ADM_EMAIL="EDIT_MY_EMAIL"
_AEGIR_VERSION=EDIT_AEGIR_VERSION
_ALL_DISTRO=EDIT_ALL_DISTRO
_AUTOPILOT=EDIT_AUTOPILOT
_BOA_REPO_GIT_URL=EDIT_BOA_REPO_GIT_URL
_BOA_REPO_NAME=EDIT_BOA_REPO_NAME
_CLIENT_CORES=EDIT_CLIENT_CORES
_CLIENT_EMAIL="EDIT_CLIENT_EMAIL"
_CLIENT_OPTION=EDIT_CLIENT_OPTION
_DEBUG_MODE=EDIT_DEBUG_MODE
_DIST_INSTALL=NO
_DISTRO=EDIT_DISTRO
_DOMAIN=EDIT_DOMAIN
_DRUSH_FAMILY=EDIT_DRUSH_FAMILY
_DRUSH_VERSION=EDIT_DRUSH_VERSION
_HM_DISTRO=EDIT_HM_DISTRO
_HM_ONLY=EDIT_HM_ONLY
_HOT_SAUCE=EDIT_HOT_SAUCE
_LAST_ALL=EDIT_LAST_ALL
_LAST_HMR=EDIT_LAST_HMR
_LASTNUM=EDIT_LASTNUM
_NOW=EDIT_NOW
_O_CONTRIB_UP=EDIT_O_CONTRIB_UP
_PHP_CLI_VERSION=EDIT_PHP_CLI_VERSION
_PHP_FPM_VERSION=EDIT_PHP_FPM_VERSION
_PLATFORMS_LIST="EDIT_PLATFORMS_LIST"
_PURGE_FOR_SEVEN=EDIT_PURGE_FOR_SEVEN
_PURGE_MODE=EDIT_PURGE_MODE
_REL_VERSION=`lsb_release -sc`
_REMOTE_CACHE_IP=EDIT_REMOTE_CACHE_IP
_STATUS=INIT
_THIS_DB_HOST=EDIT_THIS_DB_HOST
_THIS_OS=`lsb_release -si`
_THISHTIP=EDIT_THISHTIP
_USE_CURRENT=EDIT_USE_CURRENT
_USRG=EDIT_USRG
_WEBG=EDIT_WEBG
#
_USER=EDIT_USER
_ROOT="/data/disk/$_USER"
_AEGIR_ROOT="$_ROOT/aegir/distro/$_HM_DISTRO"
_DISTRO_ROOT="$_ROOT/distro/$_DISTRO"
#
SHELL=/bin/bash
PATH=/usr/local/sbin:/usr/local/bin:/opt/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games


###---### Functions
# noticeable messages
msg() {
  echo "Octopus [`date`] ==> $*"
}
#
# Success msg
success () {
	msg "$1 Succeeded."
}
#
# Error msg
fatal () {
	echo " "
	msg "Fatal Error Occurred: $1"
	msg "Cannot continue installation."
	exit 1
}
#
# Silent runner.
st_runner () {
  CMD="$1"
  touch busy
  bash $_SRCDIR/spinner busy &
  if $CMD >> $_LOG; then
    rm busy
    sleep 1
    return 0
  else
    rm busy
    sleep 1
    echo "$CMD failed.  Error (if any): $?"
    echo " "
    echo "Displaying the last 15 lines of $_LOG to help troubleshoot this problem."
    echo " "
    tail -15 $_LOG
    return 1
  fi
}
#
# Small spinner
mrun () {
	CMD="$1"
	touch busy
	bash $_SRCDIR/spinner busy &
	if $CMD >> $_LOG; then
		rm busy
		sleep 1
		return 0
	fi
}
#
# Simple prompt
prompt_yes_no () {
if [ "$_AUTOPILOT" = "YES" ] ; then
  return 0
else
  while true ; do
    printf "$* [Y/n] "
    read answer
    if [ -z "$answer" ] ; then
      return 0
    fi
    case $answer in
      [Yy]|[Yy][Ee][Ss])
        return 0
        ;;
      [Nn]|[Nn][Oo])
        return 1
        ;;
      *)
        echo "Please answer yes or no"
        ;;
    esac
 done
fi
}
#
# Escape borrowed from mysql_secure_installation.
basic_single_escape () {
  # The quoting on this sed command is a bit complex.  Single-quoted strings
  # don't allow *any* escape mechanism, so they cannot contain a single
  # quote.  The string sed gets (as argv[1]) is:  s/\(['\]\)/\\\1/g
  #
  # Inside a character class, \ and ' are not special, so the ['\] character
  # class is balanced and contains two characters.
  echo "$1" | sed 's/\(['"'"'\]\)/\\\1/g'
}
#
# Set or update Redis password..
update_redis_password () {
  if [ ! -e "/root/.redis.pass.txt" ] && [ -e "/etc/redis/redis.conf" ] ; then
    msg "INIT A: Generate random password for Redis server"
    touch /root/.redis.pass.txt
    chmod 0600 /root/.redis.pass.txt &> /dev/null
    _ESC_RPASS=`pwgen -v -s -1`
    _ESC_RPASS=`basic_single_escape "$_ESC_RPASS"`
    echo "$_ESC_RPASS" > /root/.redis.pass.txt
  fi
  if [ -e "/root/.redis.pass.txt" ] && [ -e "/etc/redis/redis.conf" ] ; then
    RPASS=`cat /root/.redis.pass.txt`
    RPASS=`echo -n $RPASS | tr -d "\n"`
    sed -i "s/^requirepass.*/requirepass $RPASS/g" /etc/redis/redis.conf &> /dev/null
    sed -i "s/isfoobared/$RPASS/g" /data/conf/global.inc                 &> /dev/null
    sed -i "s/isfoobared/$RPASS/g" /var/aegir/config/includes/global.inc &> /dev/null
  fi
}
#
# stop on error
# set -e ### disabled for debugging
#
_SRCDIR=/opt/tmp/files
_LOG=/var/backups/octopus-$_USER-$_NOW.log
#
# Create shared dirs
create_shared_dirs () {
  msg "$_STATUS A: Creating shared directories, please wait..."
  if [ ! -d "$_CORE" ] ; then
    mkdir -p $_CORE
    mkdir -p /data/src
  fi
  chown $_USER:$_USRG /data/all &> /dev/null
  chown $_USER:$_USRG $_CORE &> /dev/null
  if [ ! -e "$_CORE/o_contrib/ctrl-$_INSTALLER_VERSION" ] || [ "$_O_CONTRIB_UP" = "YES" ] ; then
    chown -R $_USER:$_USRG $_CORE/o_contrib &> /dev/null
  fi
  if [ ! -e "$_CORE/o_contrib_seven/ctrl-$_INSTALLER_VERSION" ] || [ "$_O_CONTRIB_UP" = "YES" ] ; then
    chown -R $_USER:$_USRG $_CORE/o_contrib_seven &> /dev/null
  fi
  if [ ! -e "/data/all/$_LAST_ALL/o_contrib/ctrl-$_INSTALLER_VERSION" ] || [ "$_O_CONTRIB_UP" = "YES" ] ; then
    chown -R $_USER:$_USRG /data/all/$_LAST_ALL/o_contrib &> /dev/null
  fi
  if [ ! -e "/data/all/$_LAST_ALL/o_contrib_seven/ctrl-$_INSTALLER_VERSION" ] || [ "$_O_CONTRIB_UP" = "YES" ] ; then
    chown -R $_USER:$_USRG /data/all/$_LAST_ALL/o_contrib_seven &> /dev/null
  fi
  chown -R $_USER:$_USRG /data/src &> /dev/null
  chown -R $_USER:$_USRG /opt/tmp &> /dev/null
  chown -R $_USER:$_USRG /data/conf &> /dev/null
  chown -R $_USER:$_USRG /data/all/000 &> /dev/null
  chmod 777 $_CORE /data/all /data/src /data /data/disk /data/conf &> /dev/null
}
#
# fix for FServer broken due to required now strongarm
#
feature_server_fix_002 () {
if [ ! -e "/var/log/feature-server-fixed-002.log" ] ; then
msg "UPGRADE A: Adding missing strongarm module to old fserver platforms"
REVISIONS="001 002 003 004 005 006 007 008 009 010 011 012 013 014"
for i in $REVISIONS; do
  if [ -d "/data/all/$i/fserver" ] ; then
    if [ ! -d "/data/all/$i/fserver/profiles/feature_server/modules/strongarm" ] ; then
      cd; drush dl strongarm-6.x-2.0 --destination=/data/all/$i/fserver/profiles/feature_server/modules &> /dev/null
      cd /data/all/$i/fserver/profiles/feature_server
      rm -f feature_server.make
      rm -f feature_server.profile
      cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/makefiles/feature_server.make ./
      cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/makefiles/feature_server.profile ./
      if [ -e "$_ROOT/.drush/hostmaster.alias.drushrc.php" ] ; then
        _THIS_HOSTMASTER=`cat $_ROOT/.drush/hostmaster.alias.drushrc.php | grep 'site_path' | cut -d: -f2 | awk '{ print $3}' | sed "s/[\,']//g"`
        cd _THIS_HOSTMASTER &> /dev/null
        su -s /bin/bash $_USER -c "drush --root=/data/disk/$_USER/distro/$i/fserver provision-save @platform_FeatureServerPF$i &> /dev/null"
      fi
      msg "UPGRADE A: Missing strongarm added to /data/all/$i/fserver"
    fi
  fi
done
touch /var/log/feature-server-fixed-002.log
cd
fi
}
#
# remove incompatible modules from o_contrib
#
remove_incompatible_modules_001 () {
if [ ! -e "/var/log/incompatible-modules-removed-001n.log" ] ; then
msg "UPGRADE A: Removing old or incompatible modules from o_contrib globally"
REVISIONS="001 002 003 004 005 006 007 008 009 010 011 012 013 014 015 016 017 018 019 020 021 022 023 024 025 026 027"
RMMODULES="cache_backport redis drupal-nginx-fast-x-accel-redirect varnish bakery session443 cookie_cache_bypass_adv module_supports backup_migrate purge expire imageinfo_cache"
for i in $REVISIONS; do
  if [ -d "/data/all/$i/o_contrib" ] ; then
    for m in $RMMODULES; do
      if [ -d "/data/all/$i/o_contrib/$m" ] ; then
        rm -f -r /data/all/$i/o_contrib/$m
        msg "UPGRADE A: Removed /data/all/$i/o_contrib/$m"
      fi
    done
    cd /data/all/$i/o_contrib
    if [ -d "/data/all/$i/o_contrib/boost" ] ; then
      sed -i "s/is_dir(\$cache_directory/\!is_dir(\$cache_directory/g" /data/all/$i/o_contrib/boost/boost.install &> /dev/null
      sed -i "s/\!\!is_dir/\!is_dir/g" /data/all/$i/o_contrib/boost/boost.install &> /dev/null
    fi
    wget -q -U iCab http://ftp.drupal.org/files/projects/backup_migrate-6.x-2.5.tar.gz
    wget -q -U iCab http://ftp.drupal.org/files/projects/cache_backport-6.x-1.0-rc1.tar.gz
    wget -q -U iCab http://ftp.drupal.org/files/projects/entitycache-7.x-1.x-dev.tar.gz
    wget -q -U iCab http://ftp.drupal.org/files/projects/redis-7.x-2.0-alpha8.tar.gz
    for archive in ./*.tar.gz; do
      tar -xzf "$archive" &> /dev/null
    done
    rm -f *.tar.gz
    rm -f redis/redis.info
    sed -i "s/Cache Backand/D7 Cache Backport for D6/g" cache_backport/cache_backport.info &> /dev/null
    if [ "$_PURGE_MODE" = "ON" ] ; then
      git clone --branch 6.x-1.x-revert git://github.com/omega8cc/purge.git /data/all/$i/o_contrib/purge &> /dev/null
      git clone --branch 6.x-1.x http://git.drupal.org/project/expire.git /data/all/$i/o_contrib/expire &> /dev/null
    fi
    msg "UPGRADE A: New modules in /data/all/$i/o_contrib: redis cache_backport purge expire backup_migrate"
  fi
  if [ -d "/data/all/$i" ] ; then
    for p in `find /data/all/$i/ -maxdepth 1 -mindepth 1 -type d | sort`; do
      if [ -d "$p/modules/cookie_cache_bypass" ] ; then
        rm -f -r $p/modules/cookie_cache_bypass
      fi
    done
  fi
done
touch /var/log/incompatible-modules-removed-001n.log
cd
fi
}
#
# remove incompatible modules from o_contrib_seven
#
remove_incompatible_modules_002 () {
if [ ! -e "/var/log/incompatible-modules-removed-002n.log" ] ; then
msg "UPGRADE A: Removing old or incompatible modules from o_contrib_seven globally"
REVISIONS="001 002 003 004 005 006 007 008 009 010 011 012 013 014 015 016 017 018 019 020 021 022 023 024 025 026 027"
RMMODULES="redis session443 cookie_cache_bypass_adv purge expire agrcache"
for i in $REVISIONS; do
  if [ -d "/data/all/$i/o_contrib_seven" ] ; then
    for m in $RMMODULES; do
      if [ -d "/data/all/$i/o_contrib_seven/$m" ] ; then
        rm -f -r /data/all/$i/o_contrib_seven/$m
        msg "UPGRADE A: Removed /data/all/$i/o_contrib_seven/$m"
      fi
    done
    cd /data/all/$i/o_contrib_seven
    wget -q -U iCab http://ftp.drupal.org/files/projects/redis-7.x-2.0-alpha8.tar.gz
    for archive in ./*.tar.gz; do
      tar -xzf "$archive" &> /dev/null
    done
    rm -f *.tar.gz
    if [ "$_PURGE_MODE" = "ON" ] && [ "$_PURGE_FOR_SEVEN" = "YES" ] ; then
      git clone --branch 7.x-1.x http://git.drupal.org/project/purge.git /data/all/$i/o_contrib_seven/purge &> /dev/null
      git clone --branch 7.x-1.x http://git.drupal.org/project/expire.git /data/all/$i/o_contrib_seven/expire &> /dev/null
    fi
    msg "UPGRADE A: New modules in /data/all/$i/o_contrib_seven: redis purge expire"
  fi
done
touch /var/log/incompatible-modules-removed-002n.log
cd
fi
}
#
# Sub Force advanced Nginx configuration.
sub_force_advanced_nginx_config () {
  if [ -d "$_THIS_NGX_PATH" ] ; then
    if [ "$_PHP_FPM_VERSION" = "5.3" ] && [ -e "/opt/local/etc/php53-fpm.conf" ] ; then
      sed -i "s/127.0.0.1:9000/127.0.0.1:9090/g" $_THIS_NGX_PATH/nginx_octopus_include.conf &> /dev/null
    fi
  fi
}
#
# Force advanced Nginx configuration.
force_advanced_nginx_config () {
  validate_local_ip &> /dev/null
  _THIS_NGX_PATH=/data/disk/$_USER/.drush/provision/http/Provision/Service/http
  sub_force_advanced_nginx_config
  _THIS_NGX_PATH=/data/disk/$_USER/config/includes
  sub_force_advanced_nginx_config
  if [ ! -L "/data/disk/$_USER/config/includes/nginx_advanced_include.conf" ] ; then
    rm -f /data/disk/$_USER/config/includes/nginx_advanced_include.conf
    ln -s /data/disk/$_USER/config/includes/nginx_octopus_include.conf /data/disk/$_USER/config/includes/nginx_advanced_include.conf
  fi
  if [ ! -L "/data/disk/$_USER/config/includes/nginx_simple_include.conf" ] ; then
    rm -f /data/disk/$_USER/config/includes/nginx_simple_include.conf
    ln -s /data/disk/$_USER/config/includes/nginx_legacy_include.conf /data/disk/$_USER/config/includes/nginx_simple_include.conf
  fi
}


msg "$_STATUS A: Welcome `uname -a`"
mrun "sleep 1"
msg "$_STATUS A: Aegir automated install script part A"


###---### Checking version..
#
msg "INFO: Checking OCTOPUS version, please wait..."
if [ "$_AEGIR_VERSION" = "HEAD" ] ; then
  _FILE_VERSION=release.txt
else
  _FILE_VERSION=version.txt
fi
if [ -e "/opt/tmp/$_BOA_REPO_NAME/aegir/conf/$_FILE_VERSION" ] ; then
  _VERSIONS_TEST=`cat /opt/tmp/$_BOA_REPO_NAME/aegir/conf/$_FILE_VERSION`
  if [[ "$_VERSIONS_TEST" =~ "-dev" ]] ; then
    if [[ "$_VERSIONS_TEST" =~ "$_INSTALLER_VERSION" ]] && [ "$_AEGIR_VERSION" = "HEAD" ] ; then
      _VERSIONS_TEST_RESULT=OK
      msg "INFO: Version test result: OK"
    else
      _VERSIONS_TEST_RESULT=FAIL
    fi
  else
    if [[ "$_VERSIONS_TEST" =~ "$_INSTALLER_VERSION" ]] && [[ "$_AEGIR_VERSION" =~ "BOA" ]] ; then
      _VERSIONS_TEST_RESULT=OK
      msg "INFO: Version test result: OK"
    else
      _VERSIONS_TEST_RESULT=FAIL
    fi
  fi
  if [ "$_VERSIONS_TEST_RESULT" = "FAIL" ] ; then
    msg "ERROR: This OCTOPUS version is outdated and will not work correctly."
    msg "Please download and use new stable version:"
    msg "wget -q -U iCab http://files.aegir.cc/versions/OCTOPUS.sh.txt"
    msg "You can also use (for testing) latest dev version:"
    msg "wget -q -U iCab http://code.aegir.cc/aegir/barracuda-octopus/blobs/raw/master/OCTOPUS.sh.txt"
    msg "Bye."
    exit 1
  fi
fi


###---### Checking status..
#
if [ -d "$_ROOT" ] ; then
  _STATUS=UPGRADE
  cd $_ROOT
  msg "$_STATUS A: $_STATUS"
  mrun "sleep 1"
  rm -f $_ROOT/AegirSetupC.sh.txt
  rm -f $_ROOT/AegirSetupB.sh.txt
else
  msg "$_STATUS A: $_STATUS"
fi


###---### Hot Sauce check..
#
if [ "$_HOT_SAUCE" = "NO" ] ; then
  _CORE="/data/all/$_LAST_ALL"
  _THIS_CORE="$_LAST_ALL"
  if [ "$_USE_CURRENT" = "YES" ] && [ -e "/data/all/000/translations/drupal-$_SMALLCORE_6_LANG.pl.po" ] ; then
    msg "$_STATUS A: Shared platforms code v.$_LAST_ALL (latest available) will be used for this install"
  elif [ "$_USE_CURRENT" = "NO" ] || [ ! -e "/data/all/000/translations/drupal-$_SMALLCORE_6_LANG.pl.po" ] ; then
    _CORE="/data/all/$_ALL_DISTRO"
    _THIS_CORE="$_ALL_DISTRO"
    msg "$_STATUS A: Shared platforms code v.$_ALL_DISTRO (hot new) will be created"
  else
    msg "$_STATUS A: Shared platforms code v.$_LAST_ALL (latest available) will be used for this install"
  fi
else
  _CORE="/data/all/$_ALL_DISTRO"
  _THIS_CORE="$_ALL_DISTRO"
  msg "$_STATUS A: Shared platforms code v.$_ALL_DISTRO (hot new) will be created"
fi


###---### Add required users and create directories
#
msg "$_STATUS A: Creating directories with correct permissions, please wait..."
mrun "sleep 1"
mkdir -p /data/u
mkdir -p /data/disk
mkdir -p /data/conf
chown root:root /data &> /dev/null
chown root:root /data/disk &> /dev/null
if [ ! -d "$_ROOT" ] ; then
  msg "$_STATUS A: Adding user, please wait..."
  mrun "sleep 1"
  adduser --system --home $_ROOT --ingroup $_USRG $_USER &> /dev/null
  adduser $_USER $_WEBG &> /dev/null
fi
chown -R $_USER:$_USRG /opt/tmp &> /dev/null
chown -R $_USER:$_USRG /data/conf &> /dev/null


###---### Prepare scripts
#
chmod 0711 $_ROOT
cd $_ROOT
cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/scripts/AegirSetupB.sh.txt ./
cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/scripts/AegirSetupC.sh.txt ./
chown $_USER:$_USRG $_ROOT/AegirSetupB.sh.txt &> /dev/null
chown $_USER:$_USRG $_ROOT/AegirSetupC.sh.txt &> /dev/null


###---### Run standard pre-install
#
if [ ! -e "$_ROOT/.$_USER.pass.txt" ] ; then
  touch $_ROOT/.$_USER.pass.txt
  chmod 0600 $_ROOT/.$_USER.pass.txt
  _ESC_PASS=`pwgen -v -s -1`
  _ESC_PASS=`basic_single_escape "$_ESC_PASS"`
  echo "$_ESC_PASS" > $_ROOT/.$_USER.pass.txt
  chown $_USER:$_USRG $_ROOT/.$_USER.pass.txt &> /dev/null
  echo "$_USER ALL=NOPASSWD: /etc/init.d/nginx" >> /etc/sudoers
fi
AGRPXSWD=`cat $_ROOT/.$_USER.pass.txt`
AGRPASWD=`echo -n $AGRPXSWD | tr -d "\n"`
AEGIR_HOST=`uname -n`
_RESOLVEIP=`resolveip $AEGIR_HOST 2> /dev/null`
if [ -z "$_RESOLVEIP" ] ; then
  msg "This server does not have a hostname that resolves to an IP address"
  exit 1
else
  AEGIR_HOST_IP=`echo $_RESOLVEIP | cut -d: -f2 | awk '{ print $6}'`
  true
fi
/usr/bin/mysql -h localhost --port=3306 -u root mysql<<EOFMYSQL
FLUSH PRIVILEGES;
GRANT ALL PRIVILEGES ON *.* TO '$_USER'@'$_DOMAIN' IDENTIFIED BY '$AGRPASWD' WITH GRANT OPTION;
GRANT ALL PRIVILEGES ON *.* TO '$_USER'@'$AEGIR_HOST' IDENTIFIED BY '$AGRPASWD' WITH GRANT OPTION;
GRANT ALL PRIVILEGES ON *.* TO '$_USER'@'$AEGIR_HOST_IP' IDENTIFIED BY '$AGRPASWD' WITH GRANT OPTION;
GRANT ALL PRIVILEGES ON *.* TO '$_USER'@'localhost' IDENTIFIED BY '$AGRPASWD' WITH GRANT OPTION;
FLUSH PRIVILEGES;
EOFMYSQL
mrun "sleep 1"
/usr/bin/mysqladmin -u root -h localhost --port=3306 reload
cd $_ROOT
mrun "sleep 1"


###---### Install or upgrade Aegir Satellite Instance [Y/n]
#
_LOCAL_STATUS="$_STATUS"
if [ -e "/var/run/aegir_upgrade.pid" ] ; then
  _LOCAL_STATUS=INIT
fi
if [ "$_LOCAL_STATUS" = "INIT" ] ; then
  msg "$_STATUS A: Switching user and running AegirSetupB, please wait..."
  mrun "sleep 1"
  rm -f /opt/tmp/testecho*
  chown root:$_USRG /data/u &> /dev/null
  chmod 0771 /data/u &> /dev/null
  su -s /bin/bash $_USER -c "/bin/bash AegirSetupB.sh.txt"
  chmod 0700 /data/u &> /dev/null
  chown root:root /data/u &> /dev/null
  msg "$_STATUS A: Aegir Satellite Instance installation completed"
else
  echo " "
  if prompt_yes_no "Do you want to upgrade this Aegir Satellite Instance?" ; then
    true
    mrun "sleep 1"
    msg "$_STATUS A: Switching user and running AegirSetupB, please wait..."
    mrun "sleep 1"
    rm -f /opt/tmp/testecho*
    service cron stop &> /dev/null
    _THIS_HM_ROOT=`cat $_ROOT/.drush/hostmaster.alias.drushrc.php | grep "root'" | cut -d: -f2 | awk '{ print $3}' | sed "s/[\,']//g"`
    _THIS_HM_SITE=`cat $_ROOT/.drush/hostmaster.alias.drushrc.php | grep "site_path'" | cut -d: -f2 | awk '{ print $3}' | sed "s/[\,']//g"`
    chown -R $_USER:$_USRG $_ROOT/.drush
    chown -R $_USER:$_USRG $_ROOT/backups
    chown -R $_USER:$_USRG $_ROOT/clients
    chown -R $_USER:$_USRG $_ROOT/config
    chown -R $_USER:$_USRG $_ROOT/tools
    chown -R $_USER $_THIS_HM_ROOT
    chown -R $_USER:$_WEBG $_THIS_HM_SITE/files
    chmod -R 2770 $_THIS_HM_SITE/files
    chown root:$_USRG /data/u &> /dev/null
    chmod 0771 /data/u &> /dev/null
    su -s /bin/bash $_USER -c "/bin/bash AegirSetupB.sh.txt"
    chmod 0700 /data/u &> /dev/null
    chown root:root /data/u &> /dev/null
    msg "$_STATUS A: Aegir Satellite Instance upgrade completed"
  else
    msg "$_STATUS A: Aegir Satellite Instance not upgraded this time"
    mrun "sleep 1"
  fi
fi


###---### Create ~/bin dir if not exists
#
_L_BIN="$_ROOT/bin"
if [ ! -d "$_L_BIN" ] ; then
  mkdir -p $_L_BIN
  chown $_USER:$_USRG $_L_BIN
  chmod 700 $_L_BIN
fi
if [ ! -L "$_L_BIN/drush" ] ; then
  ln -s $_ROOT/tools/drush/drush $_L_BIN/drush
fi


###---### Run standard post-install
#
_LOCAL_STATUS="$_STATUS"
if [ -e "/var/run/aegir_upgrade.pid" ] ; then
  _LOCAL_STATUS=INIT
fi
if [ "$_LOCAL_STATUS" = "INIT" ] ; then
  if [ ! -e "$_ROOT/config/$_USER.nginx.conf" ] ; then
    rm -f /var/aegir/config/server_master/nginx/platform.d/$_USER.conf
    echo "include $_ROOT/config/server_master/nginx/vhost.d/*;" > $_ROOT/config/$_USER.nginx.conf
    ln -s $_ROOT/config/$_USER.nginx.conf /var/aegir/config/server_master/nginx/platform.d/$_USER.conf
  fi
  chgrp -R $_WEBG $_AEGIR_ROOT/sites/$_DOMAIN/files
  chgrp $_WEBG $_AEGIR_ROOT/sites/$_DOMAIN/settings.php
  rm -f -r $_AEGIR_ROOT/themes/bluemarine
  rm -f -r $_AEGIR_ROOT/themes/chameleon
  rm -f -r $_AEGIR_ROOT/themes/pushbutton
  rm -f -r $_AEGIR_ROOT/scripts
  rm -f $_AEGIR_ROOT/themes/README.txt
  rm -f $_AEGIR_ROOT/*.txt
  service nginx reload &> /dev/null
  cd $_AEGIR_ROOT
  cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/robots.txt ./
  cd $_ROOT
fi


###---### Force advanced Nginx config
#
force_advanced_nginx_config


###---### Force global.inc update
#
mv -f /data/conf/global.inc /data/conf/global.inc-pre-$_INSTALLER_VERSION-$_NOW &> /dev/null
if [ -e "/var/aegir/config/server_master/nginx/pre.d/nginx_wild_ssl.conf" ] ; then
  cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/global.inc.ssl.aegir.txt /data/conf/global.inc
else
  cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/global.inc.aegir.txt /data/conf/global.inc
fi


###---### Forced SSL settings
#
if [ -e "/var/aegir/config/server_master/nginx/pre.d/nginx_wild_ssl.conf" ] ; then
  if [ -e "/opt/tmp/$_BOA_REPO_NAME/aegir/conf/global.inc.ssl.aegir.txt" ] ; then
    _SSL_TEST=`cat /data/conf/global.inc 2>&1`
    if [[ "$_SSL_TEST" =~ "HTTP_X_FORWARDED_PROTO" ]] ; then
      _SSL_TEST=OK
    else
      msg "$_STATUS A: Installing forced SSL settings for this Hostmaster site, please wait..."
      mrun "sleep 1"
      mv -f /data/conf/global.inc /data/conf/global.inc-pre-$_INSTALLER_VERSION-$_NOW &> /dev/null
      cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/global.inc.ssl.aegir.txt /data/conf/global.inc
      service nginx reload &> /dev/null
    fi
  fi
fi
cd $_ROOT


###---### Set or update Redis password
#
update_redis_password


###---### Set/rewrite _REMOTE_CACHE_IP if defined and disable local caches
#
if [ ! -z "$_REMOTE_CACHE_IP" ] ; then
  if [ "$_REMOTE_CACHE_IP" = "127.0.0.1" ] ; then
    _SKIP_THIS_IP=YES
  else
    msg "$_STATUS A: Set/rewrite remote cache IP address and disable local caches"
    mrun "sleep 1"
    sed -i "s/'127.0.0.1'/'$_REMOTE_CACHE_IP'/g" /data/conf/global.inc &> /dev/null
    sed -i "s/'127.0.0.1'/'$_REMOTE_CACHE_IP'/g" /var/aegir/config/includes/global.inc &> /dev/null
    service redis-server stop &> /dev/null
    update-rc.d -f redis-server remove &> /dev/null
    service redis stop &> /dev/null
    update-rc.d -f redis remove &> /dev/null
    mv -f /etc/init.d/redis /etc/init.d/redis-off &> /dev/null
    mv -f /etc/init.d/redis-server /etc/init.d/redis-server-off &> /dev/null
    killall redis-server &> /dev/null
    rm -f /var/run/redis.pid
    mv -f /var/xdrago/memcache.sh /var/xdrago/memcache.sh-off &> /dev/null
    killall memcached &> /dev/null
  fi
fi


###---### Add sudo for named if exists
#
if [ -e "/usr/sbin/named" ] ; then
  if [ ! -e "$_ROOT/log/named_sudo_exist.txt" ] ; then
    echo "$_USER ALL=NOPASSWD: /etc/init.d/bind9" >> /etc/sudoers
    echo "$_USER ALL=NOPASSWD: /etc/init.d/bind" >> /etc/sudoers
    touch $_ROOT/log/named_sudo_exist.txt
  fi
fi


###---### Set permissions for all
#
chmod 0755 $_AEGIR_ROOT &> /dev/null
chmod 0711 $_ROOT/config
chmod 0711 $_ROOT/config/includes
chmod 0750 $_ROOT/backups
chmod 0750 $_ROOT/clients
chmod 0711 $_ROOT/.drush


###---### Platforms [Y/n]
#
_LOCAL_STATUS="$_STATUS"
if [ -e "/var/run/aegir_upgrade.pid" ] ; then
  _LOCAL_STATUS=INIT
fi
if [ "$_LOCAL_STATUS" = "INIT" ] ; then
  msg "$_STATUS A: Switching user and running Platforms build"
  mrun "sleep 1"
  _DIST_INSTALL=YES
  rm -f /opt/tmp/testecho*
  create_shared_dirs
  su -s /bin/bash $_USER -c "/bin/bash AegirSetupC.sh.txt"
  msg "$_STATUS A: Platforms installation completed"
else
  if [ "$_HM_ONLY" = "YES" ] ; then
    _DIST_INSTALL=NO
  else
    echo " "
    if prompt_yes_no "Do you want to install some latest, ready to use platforms?" ; then
      true
      _DIST_INSTALL=YES
      msg "NOTE: Please choose only the platforms/distributions you want to have included"
      mrun "sleep 1"
      msg "$_STATUS A: Switching user and running Platforms build"
      mrun "sleep 1"
      service cron stop &> /dev/null
      rm -f /opt/tmp/testecho*
      create_shared_dirs
      su -s /bin/bash $_USER -c "/bin/bash AegirSetupC.sh.txt"
      msg "$_STATUS A: Platforms installation completed"
    else
      msg "$_STATUS A: No new platforms added this time"
      mrun "sleep 1"
    fi
  fi
fi
if [ ! -e "$_CORE/dot-files-ctrl-$_INSTALLER_VERSION" ] ; then
  msg "$_STATUS A: Cleaning up various dot files, please wait..."
  cd $_CORE
  st_runner "find . -name .svn -exec rm -rf {} \;" &> /dev/null
  st_runner "find . -name .bzr -exec rm -rf {} \;" &> /dev/null
  st_runner "find . -name .git -exec rm -rf {} \;" &> /dev/null
  st_runner "find . -name "._*" -type f | xargs rm -rf" &> /dev/null
  touch $_CORE/dot-files-ctrl-$_INSTALLER_VERSION
fi


###---### Fix files permissions
#
if [ -e "/var/run/aegir_upgrade.pid" ] ; then
  _PLATF_IMP=$(ls -la /data/u | grep $_USER | cut -d'>' -f2 | sort | uniq | awk '{ print $1}')
  for _PLATF in $_PLATF_IMP ; do
    if [[ "$_PLATF" =~ "aegir" ]] ; then
	  _FOUND_HM=YES
    else
      chown -R $_USER:www-data $_PLATF/sites/*/files &> /dev/null
      chmod -R 2770 $_PLATF/sites/*/files &> /dev/null
    fi
  done
fi


###---### Clean up old and install files
#
rm -f $_ROOT/AegirSetupC.sh.txt
rm -f $_ROOT/AegirSetupB.sh.txt
rm -f $_ROOT/*.sh.txt


###---### Add cron task
#
_LOCAL_STATUS="$_STATUS"
if [ -e "/var/run/aegir_upgrade.pid" ] ; then
  _LOCAL_STATUS=INIT
fi
rm -f /var/spool/cron/crontabs/$_USER
if [ ! -e "/var/log/cron_aegir_off.pid" ] ; then
  sed -i "s/\*\/1 \* \* \* \* bash \/var\/xdrago\/run/#*\/1 * * * * bash \/var\/xdrago\/run/g" /var/spool/cron/crontabs/root &> /dev/null
  echo -e "* * * * * bash /var/xdrago/runner.sh >/dev/null 2>&1" | tee -a /var/spool/cron/crontabs/root >/dev/null 2>&1
  touch /var/log/cron_aegir_off.pid
fi


###---### Add ftps/lshell access
#
_LOCAL_STATUS="$_STATUS"
if [ -e "/var/run/aegir_upgrade.pid" ] ; then
  _LOCAL_STATUS=INIT
fi
if [ "$_LOCAL_STATUS" = "INIT" ] ; then
  _USERFTP="$_USER.ftp"
  _USERFTP_ROOT="/home/$_USERFTP"
  if [ "$_REL_VERSION" = "lenny" ] ; then
    _PATH_LSHELL="/usr/bin/lshell"
  else
    _PATH_LSHELL="/usr/local/bin/lshell"
  fi
  if [ ! -d "$_USERFTP_ROOT" ] ; then
    msg "$_STATUS A: Adding ftps/lshell user"
    mrun "sleep 1"
    # add user
    useradd -d /home/$_USERFTP -s $_PATH_LSHELL -m -N -r $_USERFTP &> /dev/null
    adduser $_USERFTP $_WEBG &> /dev/null
    # Make sure new file which contains password is private
    cd $_ROOT/log
    touch $_ROOT/log/pass.txt
    chmod 0600 $_ROOT/log/pass.txt
    # generate a nice secure password and put it in a file
    pwgen -v -s -1 > $_ROOT/log/pass.txt
    # get the password hash
    ph=$(makepasswd --clearfrom=$_ROOT/log/pass.txt --crypt-md5 |awk '{print $2}')
    # Set the password
    usermod -p $ph $_USERFTP &> /dev/null
    passwd -w 7 -x 90 $_USERFTP &> /dev/null
  fi
  usermod -aG lshellg $_USERFTP &> /dev/null
  chsh -s $_PATH_LSHELL $_USERFTP &> /dev/null
  echo >> /etc/lshell.conf
  echo "[$_USERFTP]" >> /etc/lshell.conf
  echo "path : ['/data/disk/$_USER/distro', '/data/disk/$_USER/static', '/data/disk/$_USER/backups', '/data/disk/$_USER/clients']" >> /etc/lshell.conf
  touch $_ROOT/log/backups.access.open
  touch $_ROOT/log/clients.access.open
fi


###---### Add access to backups for older installs
#
if [ ! -e "$_ROOT/log/backups.access.open" ] ; then
  sed -i "s/\/$_USER\/static'\]/\/$_USER\/static', '\/data\/disk\/$_USER\/backups'\]/g" /etc/lshell.conf &> /dev/null
  chmod 0750 $_ROOT/backups
  touch $_ROOT/log/backups.access.open
fi


###---### Add symlink to the sites backups
#
_USERFTP="$_USER.ftp"
_USER_HD="/home/$_USERFTP"
if [ ! -L "$_USER_HD/backups" ] ; then
  msg "$_STATUS A: Adding symlink to the sites backups"
  mrun "sleep 1"
  ln -s /data/disk/$_USER/backups $_USER_HD/backups
fi


###---### Add symlink to the system drush_make
#
_USERFTP="$_USER.ftp"
_USER_DM="/home/$_USERFTP/.drush"
if [ ! -L "$_USER_DM/drush_make" ] ; then
  msg "$_STATUS A: Adding symlink to the system drush_make"
  mrun "sleep 1"
  mkdir -p $_USER_DM
  chown $_USERFTP:$_USRG $_USER_DM
  chmod 700 $_USER_DM
  ln -s /var/aegir/.drush/drush_make $_USER_DM/drush_make
fi


###---### Add symlink to the system registry_rebuild
#
if [ ! -L "$_USER_DM/registry_rebuild" ] ; then
  msg "$_STATUS A: Adding symlink to the system registry_rebuild"
  mrun "sleep 1"
  mkdir -p $_USER_DM
  chown $_USERFTP:$_USRG $_USER_DM
  chmod 700 $_USER_DM
  ln -s /var/aegir/.drush/registry_rebuild $_USER_DM/registry_rebuild
fi


###---### Create .ssh dir if not exists
#
_USER_SSH="/home/$_USERFTP/.ssh"
if [ ! -d "$_USER_SSH" ] ; then
  mkdir -p $_USER_SSH
  chown $_USERFTP:$_USRG $_USER_SSH
  chmod 700 $_USER_SSH
fi


###---### Add access to the clients directory for older installs
#
if [ ! -e "$_ROOT/log/clients.access.open" ] ; then
  sed -i "s/\/$_USER\/backups'\]/\/$_USER\/backups', '\/data\/disk\/$_USER\/clients'\]/g" /etc/lshell.conf &> /dev/null
  chmod 0750 $_ROOT/clients
  touch $_ROOT/log/clients.access.open
fi


###---### Add symlink to the clients directory
#
_USERFTP="$_USER.ftp"
_USER_HD="/home/$_USERFTP"
if [ ! -L "$_USER_HD/clients" ] ; then
  msg "$_STATUS A: Adding symlink to the clients directory"
  mrun "sleep 1"
  ln -s /data/disk/$_USER/clients $_USER_HD/clients
fi
rm -f -r /data/disk/$_USER/clients/admin &> /dev/null
rm -f -r /data/disk/$_USER/clients/omega8ccgmailcom &> /dev/null
rm -f -r /data/disk/$_USER/clients/nocomega8cc &> /dev/null
rm -f -r /data/disk/$_USER/clients/*/backups &> /dev/null
symlinks -dr /data/disk/$_USER/clients &> /dev/null


###---### Reading or creating pass.txt
#
if [ "$_HM_ONLY" = "YES" ] ; then
  true
else
if [ -e "$_ROOT/pass.txt" ] ; then
 _PASWD=`cat $_ROOT/pass.txt`
 _PASWD=`echo -n $_PASWD | tr -d "\n"`
 mv -f $_ROOT/pass.txt $_ROOT/log/pass.txt &> /dev/null
elif [ -e "$_ROOT/log/pass.txt" ] ; then
 _PASWD=`cat $_ROOT/log/pass.txt`
 _PASWD=`echo -n $_PASWD | tr -d "\n"`
 rm -f $_ROOT/pass.txt
else
 cd $_ROOT/log
 touch $_ROOT/log/pass.txt
 chmod 0600 $_ROOT/log/pass.txt
 pwgen -v -s -1 > $_ROOT/log/pass.txt
 ph=$(makepasswd --clearfrom=$_ROOT/log/pass.txt --crypt-md5 |awk '{print $2}')
 usermod -p $ph $_USERFTP &> /dev/null
 _PASWD=`cat $_ROOT/log/pass.txt`
 _PASWD=`echo -n $_PASWD | tr -d "\n"`
fi
fi


###---### Creating ftp symlinks
#
if [ "$_DIST_INSTALL" = "YES" ] ; then
msg "$_STATUS A: Creating ftp symlinks"
mrun "sleep 1"
  if [ ! -d "/home/$_USERFTP/platforms/$_THIS_CORE" ] ; then
    mkdir -p /home/$_USERFTP/platforms/$_THIS_CORE
  fi
  chown -R $_USER:$_USRG /home/$_USERFTP/platforms &> /dev/null
  chmod 700 /home/$_USERFTP &> /dev/null
  rm -f /home/$_USERFTP/platforms/$_THIS_CORE/{cod,commerce,commons,managingnews,nodestream,openatrium,openenterprise,openpublic,openscholar,prosepoint,drupal6,drupal7}
  if [ -d "$_ROOT/distro/$_THIS_CORE/acquia-$_SMALLCORE6/sites" ] ; then
    if [ ! -L "/home/$_USERFTP/platforms/$_THIS_CORE/acquia-$_SMALLCORE6" ] ; then
      ln -s $_ROOT/distro/$_THIS_CORE/acquia-$_SMALLCORE6/sites /home/$_USERFTP/platforms/$_THIS_CORE/acquia-$_SMALLCORE6
    fi
  fi
  if [ -d "$_ROOT/distro/$_THIS_CORE/civicrm-$_CIVICRM6-$_SMALLCORE6/sites" ] ; then
    if [ ! -L "/home/$_USERFTP/platforms/$_THIS_CORE/civicrm-$_CIVICRM6-$_SMALLCORE6" ] ; then
      ln -s $_ROOT/distro/$_THIS_CORE/civicrm-$_CIVICRM6-$_SMALLCORE6/sites /home/$_USERFTP/platforms/$_THIS_CORE/civicrm-$_CIVICRM6-$_SMALLCORE6
    fi
  fi
  if [ -d "$_ROOT/distro/$_THIS_CORE/civicrm-$_CIVICRM7-$_SMALLCORE7/sites" ] ; then
    if [ ! -L "/home/$_USERFTP/platforms/$_THIS_CORE/civicrm-$_CIVICRM7-$_SMALLCORE7" ] ; then
      ln -s $_ROOT/distro/$_THIS_CORE/civicrm-$_CIVICRM7-$_SMALLCORE7/sites /home/$_USERFTP/platforms/$_THIS_CORE/civicrm-$_CIVICRM7-$_SMALLCORE7
    fi
  fi
  if [ -d "$_ROOT/distro/$_THIS_CORE/cod-$_COD-$_SMALLCORE6/sites" ] ; then
    if [ ! -L "/home/$_USERFTP/platforms/$_THIS_CORE/cod-$_COD-$_SMALLCORE6" ] ; then
      ln -s $_ROOT/distro/$_THIS_CORE/cod-$_COD-$_SMALLCORE6/sites /home/$_USERFTP/platforms/$_THIS_CORE/cod-$_COD-$_SMALLCORE6
    fi
  fi
  if [ -d "$_ROOT/distro/$_THIS_CORE/commerce-$_COMMERCE-$_SMALLCORE7/sites" ] ; then
    if [ ! -L "/home/$_USERFTP/platforms/$_THIS_CORE/commerce-$_COMMERCE-$_SMALLCORE7" ] ; then
      ln -s $_ROOT/distro/$_THIS_CORE/commerce-$_COMMERCE-$_SMALLCORE7/sites /home/$_USERFTP/platforms/$_THIS_CORE/commerce-$_COMMERCE-$_SMALLCORE7
    fi
  fi
  if [ -d "$_ROOT/distro/$_THIS_CORE/commons-$_COMMONS-$_SMALLCORE6/sites" ] ; then
    if [ ! -L "/home/$_USERFTP/platforms/$_THIS_CORE/commons-$_COMMONS-$_SMALLCORE6" ] ; then
      ln -s $_ROOT/distro/$_THIS_CORE/commons-$_COMMONS-$_SMALLCORE6/sites /home/$_USERFTP/platforms/$_THIS_CORE/commons-$_COMMONS-$_SMALLCORE6
    fi
  fi
  if [ -d "$_ROOT/distro/$_THIS_CORE/pressflow-$_DRUPAL5/sites" ] ; then
    if [ ! -L "/home/$_USERFTP/platforms/$_THIS_CORE/pressflow-$_DRUPAL5" ] ; then
      ln -s $_ROOT/distro/$_THIS_CORE/pressflow-$_DRUPAL5/sites /home/$_USERFTP/platforms/$_THIS_CORE/pressflow-$_DRUPAL5
    fi
  fi
  if [ -d "$_ROOT/distro/$_THIS_CORE/pressflow-$_SMALLCORE6-dev/sites" ] ; then
    if [ ! -L "/home/$_USERFTP/platforms/$_THIS_CORE/pressflow-$_SMALLCORE6-dev" ] ; then
      ln -s $_ROOT/distro/$_THIS_CORE/pressflow-$_SMALLCORE6-dev/sites /home/$_USERFTP/platforms/$_THIS_CORE/pressflow-$_SMALLCORE6-dev
    fi
  fi
  if [ -d "$_ROOT/distro/$_THIS_CORE/pressflow-$_SMALLCORE6-stage/sites" ] ; then
    if [ ! -L "/home/$_USERFTP/platforms/$_THIS_CORE/pressflow-$_SMALLCORE6-stage" ] ; then
      ln -s $_ROOT/distro/$_THIS_CORE/pressflow-$_SMALLCORE6-stage/sites /home/$_USERFTP/platforms/$_THIS_CORE/pressflow-$_SMALLCORE6-stage
    fi
  fi
  if [ ! -d "$_ROOT/distro/$_THIS_CORE/pressflow" ] ; then
    if [ -d "$_ROOT/distro/$_THIS_CORE/pressflow-$_SMALLCORE6-prod/sites" ] ; then
      if [ ! -L "/home/$_USERFTP/platforms/$_THIS_CORE/pressflow-$_SMALLCORE6-prod" ] ; then
        ln -s $_ROOT/distro/$_THIS_CORE/pressflow-$_SMALLCORE6-prod/sites /home/$_USERFTP/platforms/$_THIS_CORE/pressflow-$_SMALLCORE6-prod
      fi
    fi
  elif [ ! -d "$_ROOT/distro/$_THIS_CORE/pressflow-$_SMALLCORE6-prod" ] ; then
    if [ -d "$_ROOT/distro/$_THIS_CORE/pressflow/sites" ] ; then
      if [ ! -L "/home/$_USERFTP/platforms/$_THIS_CORE/pressflow-$_SMALLCORE6-prod" ] ; then
        ln -s $_ROOT/distro/$_THIS_CORE/pressflow/sites /home/$_USERFTP/platforms/$_THIS_CORE/pressflow-$_SMALLCORE6-prod
      fi
    fi
  fi
  if [ -d "$_ROOT/distro/$_THIS_CORE/$_DRUPAL7D/sites" ] ; then
    if [ ! -L "/home/$_USERFTP/platforms/$_THIS_CORE/$_DRUPAL7-dev" ] ; then
      ln -s $_ROOT/distro/$_THIS_CORE/$_DRUPAL7D/sites /home/$_USERFTP/platforms/$_THIS_CORE/$_DRUPAL7-dev
    fi
  fi
  if [ -d "$_ROOT/distro/$_THIS_CORE/$_DRUPAL7S/sites" ] ; then
    if [ ! -L "/home/$_USERFTP/platforms/$_THIS_CORE/$_DRUPAL7-stage" ] ; then
      ln -s $_ROOT/distro/$_THIS_CORE/$_DRUPAL7S/sites /home/$_USERFTP/platforms/$_THIS_CORE/$_DRUPAL7-stage
    fi
  fi
  if [ ! -d "$_ROOT/distro/$_THIS_CORE/$_DRUPAL7" ] ; then
    if [ -d "$_ROOT/distro/$_THIS_CORE/$_DRUPAL7P/sites" ] ; then
      if [ ! -L "/home/$_USERFTP/platforms/$_THIS_CORE/$_DRUPAL7-prod" ] ; then
        ln -s $_ROOT/distro/$_THIS_CORE/$_DRUPAL7P/sites /home/$_USERFTP/platforms/$_THIS_CORE/$_DRUPAL7-prod
      fi
    fi
  elif [ ! -d "$_ROOT/distro/$_THIS_CORE/$_DRUPAL7P" ] ; then
    if [ -d "$_ROOT/distro/$_THIS_CORE/$_DRUPAL7/sites" ] ; then
      if [ ! -L "/home/$_USERFTP/platforms/$_THIS_CORE/$_DRUPAL7-prod" ] ; then
        ln -s $_ROOT/distro/$_THIS_CORE/$_DRUPAL7/sites /home/$_USERFTP/platforms/$_THIS_CORE/$_DRUPAL7-prod
      fi
    fi
  fi
  if [ -d "$_ROOT/distro/$_THIS_CORE/drupal-$_DRUPAL8/sites" ] ; then
    if [ ! -L "/home/$_USERFTP/platforms/$_THIS_CORE/drupal-$_DRUPAL8" ] ; then
      ln -s $_ROOT/distro/$_THIS_CORE/drupal-$_DRUPAL8/sites /home/$_USERFTP/platforms/$_THIS_CORE/drupal-$_DRUPAL8
    fi
  fi
  if [ -d "$_ROOT/distro/$_THIS_CORE/elms-$_ELMS-$_SMALLCORE6/sites" ] ; then
    if [ ! -L "/home/$_USERFTP/platforms/$_THIS_CORE/elms-$_ELMS-$_SMALLCORE6" ] ; then
      ln -s $_ROOT/distro/$_THIS_CORE/elms-$_ELMS-$_SMALLCORE6/sites /home/$_USERFTP/platforms/$_THIS_CORE/elms-$_ELMS-$_SMALLCORE6
    fi
  fi
  if [ -d "$_ROOT/distro/$_THIS_CORE/fserver-$_SMALLCORE6/sites" ] ; then
    if [ ! -L "/home/$_USERFTP/platforms/$_THIS_CORE/fserver-$_SMALLCORE6" ] ; then
      ln -s $_ROOT/distro/$_THIS_CORE/fserver-$_SMALLCORE6/sites /home/$_USERFTP/platforms/$_THIS_CORE/fserver-$_SMALLCORE6
    fi
  fi
  if [ -d "$_ROOT/distro/$_THIS_CORE/managingnews-$_MANAGINGNEWS-$_SMALLCORE6/sites" ] ; then
    if [ ! -L "/home/$_USERFTP/platforms/$_THIS_CORE/managingnews-$_MANAGINGNEWS-$_SMALLCORE6" ] ; then
      ln -s $_ROOT/distro/$_THIS_CORE/managingnews-$_MANAGINGNEWS-$_SMALLCORE6/sites /home/$_USERFTP/platforms/$_THIS_CORE/managingnews-$_MANAGINGNEWS-$_SMALLCORE6
    fi
  fi
  if [ -d "$_ROOT/distro/$_THIS_CORE/martplug-$_MARTPLUG-$_SMALLCORE7/sites" ] ; then
    if [ ! -L "/home/$_USERFTP/platforms/$_THIS_CORE/martplug-$_MARTPLUG-$_SMALLCORE7" ] ; then
      ln -s $_ROOT/distro/$_THIS_CORE/martplug-$_MARTPLUG-$_SMALLCORE7/sites /home/$_USERFTP/platforms/$_THIS_CORE/martplug-$_MARTPLUG-$_SMALLCORE7
    fi
  fi
  if [ -d "$_ROOT/distro/$_THIS_CORE/nodestream-$_NODESTREAM6-$_SMALLCORE6/sites" ] ; then
    if [ ! -L "/home/$_USERFTP/platforms/$_THIS_CORE/nodestream-$_NODESTREAM6-$_SMALLCORE6" ] ; then
      ln -s $_ROOT/distro/$_THIS_CORE/nodestream-$_NODESTREAM6-$_SMALLCORE6/sites /home/$_USERFTP/platforms/$_THIS_CORE/nodestream-$_NODESTREAM6-$_SMALLCORE6
    fi
  fi
  if [ -d "$_ROOT/distro/$_THIS_CORE/nodestream-$_NODESTREAM7-$_SMALLCORE7/sites" ] ; then
    if [ ! -L "/home/$_USERFTP/platforms/$_THIS_CORE/nodestream-$_NODESTREAM7-$_SMALLCORE7" ] ; then
      ln -s $_ROOT/distro/$_THIS_CORE/nodestream-$_NODESTREAM7-$_SMALLCORE7/sites /home/$_USERFTP/platforms/$_THIS_CORE/nodestream-$_NODESTREAM7-$_SMALLCORE7
    fi
  fi
  if [ -d "$_ROOT/distro/$_THIS_CORE/octopus_video-$_OCTOPUS_VIDEO-$_SMALLCORE7/sites" ] ; then
    if [ ! -L "/home/$_USERFTP/platforms/$_THIS_CORE/octopus_video-$_OCTOPUS_VIDEO-$_SMALLCORE7" ] ; then
      ln -s $_ROOT/distro/$_THIS_CORE/octopus_video-$_OCTOPUS_VIDEO-$_SMALLCORE7/sites /home/$_USERFTP/platforms/$_THIS_CORE/octopus_video-$_OCTOPUS_VIDEO-$_SMALLCORE7
    fi
  fi
  if [ -d "$_ROOT/distro/$_THIS_CORE/openatrium-$_OPENATRIUM-$_SMALLCORE6/sites" ] ; then
    if [ ! -L "/home/$_USERFTP/platforms/$_THIS_CORE/openatrium-$_OPENATRIUM-$_SMALLCORE6" ] ; then
      ln -s $_ROOT/distro/$_THIS_CORE/openatrium-$_OPENATRIUM-$_SMALLCORE6/sites /home/$_USERFTP/platforms/$_THIS_CORE/openatrium-$_OPENATRIUM-$_SMALLCORE6
    fi
  fi
  if [ -d "$_ROOT/distro/$_THIS_CORE/openchurch-$_OPENCHURCH-$_SMALLCORE7/sites" ] ; then
    if [ ! -L "/home/$_USERFTP/platforms/$_THIS_CORE/openchurch-$_OPENCHURCH-$_SMALLCORE7" ] ; then
      ln -s $_ROOT/distro/$_THIS_CORE/openchurch-$_OPENCHURCH-$_SMALLCORE7/sites /home/$_USERFTP/platforms/$_THIS_CORE/openchurch-$_OPENCHURCH-$_SMALLCORE7
    fi
  fi
  if [ -d "$_ROOT/distro/$_THIS_CORE/opendeals-$_OPENDEALS-$_SMALLCORE7/sites" ] ; then
    if [ ! -L "/home/$_USERFTP/platforms/$_THIS_CORE/opendeals-$_OPENDEALS-$_SMALLCORE7" ] ; then
      ln -s $_ROOT/distro/$_THIS_CORE/opendeals-$_OPENDEALS-$_SMALLCORE7/sites /home/$_USERFTP/platforms/$_THIS_CORE/opendeals-$_OPENDEALS-$_SMALLCORE7
    fi
  fi
  if [ -d "$_ROOT/distro/$_THIS_CORE/openoutreach-$_OPENOUTREACH-$_SMALLCORE7/sites" ] ; then
    if [ ! -L "/home/$_USERFTP/platforms/$_THIS_CORE/openoutreach-$_OPENOUTREACH-$_SMALLCORE7" ] ; then
      ln -s $_ROOT/distro/$_THIS_CORE/openoutreach-$_OPENOUTREACH-$_SMALLCORE7/sites /home/$_USERFTP/platforms/$_THIS_CORE/openoutreach-$_OPENOUTREACH-$_SMALLCORE7
    fi
  fi
  if [ -d "$_ROOT/distro/$_THIS_CORE/openpublic-$_OPENPUBLIC-$_SMALLCORE7/sites" ] ; then
    if [ ! -L "/home/$_USERFTP/platforms/$_THIS_CORE/openpublic-$_OPENPUBLIC-$_SMALLCORE7" ] ; then
      ln -s $_ROOT/distro/$_THIS_CORE/openpublic-$_OPENPUBLIC-$_SMALLCORE7/sites /home/$_USERFTP/platforms/$_THIS_CORE/openpublic-$_OPENPUBLIC-$_SMALLCORE7
    fi
  fi
  if [ -d "$_ROOT/distro/$_THIS_CORE/openpublish-$_OPENPUBLISH-$_SMALLCORE7/sites" ] ; then
    if [ ! -L "/home/$_USERFTP/platforms/$_THIS_CORE/openpublish-$_OPENPUBLISH-$_SMALLCORE7" ] ; then
      ln -s $_ROOT/distro/$_THIS_CORE/openpublish-$_OPENPUBLISH-$_SMALLCORE7/sites /home/$_USERFTP/platforms/$_THIS_CORE/openpublish-$_OPENPUBLISH-$_SMALLCORE7
    fi
  fi
  if [ -d "$_ROOT/distro/$_THIS_CORE/openscholar-$_OPENSCHOLAR-$_SMALLCORE6/sites" ] ; then
    if [ ! -L "/home/$_USERFTP/platforms/$_THIS_CORE/openscholar-$_OPENSCHOLAR-$_SMALLCORE6" ] ; then
      ln -s $_ROOT/distro/$_THIS_CORE/openscholar-$_OPENSCHOLAR-$_SMALLCORE6/sites /home/$_USERFTP/platforms/$_THIS_CORE/openscholar-$_OPENSCHOLAR-$_SMALLCORE6
    fi
  fi
  if [ -d "$_ROOT/distro/$_THIS_CORE/prosepoint-$_PROSEPOINT-$_SMALLCORE6/sites" ] ; then
    if [ ! -L "/home/$_USERFTP/platforms/$_THIS_CORE/prosepoint-$_PROSEPOINT-$_SMALLCORE6" ] ; then
      ln -s $_ROOT/distro/$_THIS_CORE/prosepoint-$_PROSEPOINT-$_SMALLCORE6/sites /home/$_USERFTP/platforms/$_THIS_CORE/prosepoint-$_PROSEPOINT-$_SMALLCORE6
    fi
  fi
  if [ -d "$_ROOT/distro/$_THIS_CORE/ubercart-$_UBERCART-$_SMALLCORE6/sites" ] ; then
    if [ ! -L "/home/$_USERFTP/platforms/$_THIS_CORE/ubercart-$_UBERCART-$_SMALLCORE6" ] ; then
      ln -s $_ROOT/distro/$_THIS_CORE/ubercart-$_UBERCART-$_SMALLCORE6/sites /home/$_USERFTP/platforms/$_THIS_CORE/ubercart-$_UBERCART-$_SMALLCORE6
    fi
  fi
  if [ -d "$_ROOT/distro/$_THIS_CORE/ubercart-$_UBER_CART_SEVEN-$_SMALLCORE7/sites" ] ; then
    if [ ! -L "/home/$_USERFTP/platforms/$_THIS_CORE/ubercart-$_UBER_CART_SEVEN-$_SMALLCORE7" ] ; then
      ln -s $_ROOT/distro/$_THIS_CORE/ubercart-$_UBER_CART_SEVEN-$_SMALLCORE7/sites /home/$_USERFTP/platforms/$_THIS_CORE/ubercart-$_UBER_CART_SEVEN-$_SMALLCORE7
    fi
  fi
  if [ -d "$_ROOT/distro/$_THIS_CORE/videola-$_VIDEOLA-$_SMALLCORE6/sites" ] ; then
    if [ ! -L "/home/$_USERFTP/platforms/$_THIS_CORE/videola-$_VIDEOLA-$_SMALLCORE6" ] ; then
      ln -s $_ROOT/distro/$_THIS_CORE/videola-$_VIDEOLA-$_SMALLCORE6/sites /home/$_USERFTP/platforms/$_THIS_CORE/videola-$_VIDEOLA-$_SMALLCORE6
    fi
  fi
  if [ -d "$_ROOT/distro/$_THIS_CORE/openenterprise-$_OPENENTERPRISE-$_SMALLCORE6/sites" ] ; then
    if [ ! -L "/home/$_USERFTP/platforms/$_THIS_CORE/openenterprise-$_OPENENTERPRISE-$_SMALLCORE6" ] ; then
      ln -s $_ROOT/distro/$_THIS_CORE/openenterprise-$_OPENENTERPRISE-$_SMALLCORE6/sites /home/$_USERFTP/platforms/$_THIS_CORE/openenterprise-$_OPENENTERPRISE-$_SMALLCORE6
    fi
  fi
fi
if [ ! -d "$_ROOT/static" ] ; then
  mkdir -p $_ROOT/static
  ln -s $_ROOT/static /home/$_USERFTP/static
fi
chown $_USER:$_USRG $_ROOT/static &> /dev/null
chmod 02775 $_ROOT/static &> /dev/null
echo empty > $_ROOT/static/EMPTY.txt
if [ "$_HM_ONLY" = "YES" ] ; then
  true
else
  if [ ! -d "$_ROOT/distro/$_THIS_CORE/keys" ] ; then
    mkdir -p $_ROOT/distro/$_THIS_CORE/keys
    chown $_WEBG:$_WEBG $_ROOT/distro/$_THIS_CORE/keys &> /dev/null
    chmod 770 $_ROOT/distro/$_THIS_CORE/keys
  fi
  if [ -d "$_ROOT/distro/$_THIS_CORE/keys" ] ; then
    if [ ! -L "/home/$_USERFTP/platforms/$_THIS_CORE/keys" ] ; then
      ln -s $_ROOT/distro/$_THIS_CORE/keys /home/$_USERFTP/platforms/$_THIS_CORE/keys
    fi
  fi
  rm -f $_ROOT/distro/$_THIS_CORE/*/robots.txt &> /dev/null
  if [ ! -e "/data/all/$_LAST_ALL/javascript_aggregator.out.txt" ] ; then
    sed -i "s/, 'javascript_aggregator'//g" /data/all/$_LAST_ALL/*/profiles/*/*.profile &> /dev/null
    touch /data/all/$_LAST_ALL/javascript_aggregator.out.txt
  fi
  if [ ! -e "$_CORE/javascript_aggregator.out.txt" ] ; then
    sed -i "s/, 'javascript_aggregator'//g" $_CORE/*/profiles/*/*.profile &> /dev/null
    touch $_CORE/javascript_aggregator.out.txt
  fi
fi


###---### Preparing setupmail.txt
#
if [ "$_HM_ONLY" = "YES" ] ; then
  true
else
msg "$_STATUS A: Preparing setupmail.txt"
mrun "sleep 1"
_AT_CLIENT_EMAIL=${_CLIENT_EMAIL//\\\@/\@}
_A_DM_EMAIL=${_ADM_EMAIL//\\\@/\@}
# rm -f /opt/tmp/.admemail.txt
if [ -e "$_ROOT/log/setupmail.txt" ] ; then
  if [ "$_DIST_INSTALL" = "YES" ] ; then
    cd $_ROOT/log
    if [ -e "$_ROOT/log/upgrademail.txt" ] ; then
      mv -f $_ROOT/log/upgrademail.txt $_ROOT/log/upgrademail-pre-$_THIS_CORE.txt &> /dev/null
    fi
    cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/upgrademail.txt ./
    sed -i "s/aegir.dragon.ny.host8.biz/$_DOMAIN/g" $_ROOT/log/upgrademail.txt &> /dev/null
    sed -i "s/dragon/$_USER/g" $_ROOT/log/upgrademail.txt &> /dev/null
    sed -i "s/FN8rXcQn/$_PASWD/g" $_ROOT/log/upgrademail.txt &> /dev/null
    sed -i "s/166.84.6.231/$_THISHTIP/g" $_ROOT/log/upgrademail.txt &> /dev/null
  else
    _SEND_UPGRADE_EMAIL=NO
  fi
elif [ "$_STATUS" = "INIT" ] ; then
 cd $_ROOT/log
 cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/setupmail.txt ./
 sed -i "s/aegir.dragon.ny.host8.biz/$_DOMAIN/g" $_ROOT/log/setupmail.txt &> /dev/null
 sed -i "s/dragon/$_USER/g" $_ROOT/log/setupmail.txt &> /dev/null
 sed -i "s/FN8rXcQn/$_PASWD/g" $_ROOT/log/setupmail.txt &> /dev/null
 sed -i "s/166.84.6.231/$_THISHTIP/g" $_ROOT/log/setupmail.txt &> /dev/null
fi
fi


###---### Sending setup e-mail
#
_MAILX_TEST=`mail -V 2>&1`
if [ "$_STATUS" = "INIT" ] ; then
  msg "$_STATUS A: Sending setup e-mail on init, please wait..."
  mrun "sleep 1"
  TIME=`date`
  echo $TIME > $_ROOT/log/date-init.txt
  if [ -e "$_ROOT/log/setupmail.txt" ] ; then
    if [[ "$_MAILX_TEST" =~ "invalid" ]] ; then
      cat $_ROOT/log/setupmail.txt | mail -a "From: $_A_DM_EMAIL" -e -b $_A_DM_EMAIL -s "Your Aegir Install on $TIME [$_USER]" $_AT_CLIENT_EMAIL
    else
      cat $_ROOT/log/setupmail.txt | mail -r $_A_DM_EMAIL -e -b $_A_DM_EMAIL -s "Your Aegir Install on $TIME [$_USER]" $_AT_CLIENT_EMAIL
    fi
  fi
else
  if [ "$_DIST_INSTALL" = "YES" ] ; then
    msg "$_STATUS A: Resending setup e-mail on upgrade, please wait..."
    mrun "sleep 1"
    TIME=`date`
    echo $TIME > $_ROOT/log/date-upgrade-$_THIS_CORE.txt
    if [ -e "$_ROOT/log/upgrademail.txt" ] ; then
      if [[ "$_MAILX_TEST" =~ "invalid" ]] ; then
        cat $_ROOT/log/upgrademail.txt | mail -a "From: $_A_DM_EMAIL" -e -b $_A_DM_EMAIL -s "Your Aegir Upgrade on $TIME [$_USER]" $_AT_CLIENT_EMAIL
      else
        cat $_ROOT/log/upgrademail.txt | mail -r $_A_DM_EMAIL -e -b $_A_DM_EMAIL -s "Your Aegir Upgrade on $TIME [$_USER]" $_AT_CLIENT_EMAIL
      fi
    else
      if [[ "$_MAILX_TEST" =~ "invalid" ]] ; then
        cat $_ROOT/log/setupmail.txt | mail -a "From: $_A_DM_EMAIL" -e -b $_A_DM_EMAIL -s "Your Aegir Upgrade on $TIME [$_USER]" $_AT_CLIENT_EMAIL
      else
        cat $_ROOT/log/setupmail.txt | mail -r $_A_DM_EMAIL -e -b $_A_DM_EMAIL -s "Your Aegir Upgrade on $TIME [$_USER]" $_AT_CLIENT_EMAIL
      fi
    fi
  else
    _SEND_UPGRADE_EMAIL=NO
  fi
fi


###---### Touch install logs
#
TIME=`date`
if [ "$_STATUS" = "INIT" ] ; then
 echo $TIME > $_ROOT/log/date-init.txt
else
 echo $TIME > $_ROOT/log/date-upgrade-$_THIS_CORE.txt
fi
cd $_ROOT/log
echo "`date` / `lsb_release -si`.`lsb_release -sc` `uname -m` / Aegir $_AEGIR_VERSION / Octopus $_INSTALLER_VERSION / FPM $_PHP_FPM_VERSION / CLI $_PHP_CLI_VERSION" >> ./octopus_log.txt


###---### Final cleaning
#
msg "$_STATUS A: Final cleaning, please wait a moment..."
mrun "sleep 1"
cd /
chmod 711 bin boot data dev emul etc home lib media mnt opt sbin selinux srv sys usr var &> /dev/null
chmod 700 root &> /dev/null
mv -f /etc/motd /etc/motd-pre-$_THIS_CORE &> /dev/null
echo "Barracuda Aegir Hosting System" > /etc/motd
chown root:root /data/all &> /dev/null
chown -R root:root /data/src &> /dev/null
chown -R root:root /data/conf &> /dev/null
chown root:root $_CORE &> /dev/null
chown -R root:root $_CORE/o_contrib &> /dev/null
chown -R root:root $_CORE/o_contrib_seven &> /dev/null
chown -R root:root /data/all/$_LAST_ALL/o_contrib &> /dev/null
chown -R root:root /data/all/$_LAST_ALL/o_contrib_seven &> /dev/null
chown -R root:root /data/all/000 &> /dev/null
chown root:root /opt/tmp &> /dev/null
chmod 0711 $_CORE /data/all /data/all/000 /data/src /data /data/disk /data/conf &> /dev/null
chmod 0700 /data/u &> /dev/null
chown root:root /data/u &> /dev/null
rm -f /data/u/*host8* &> /dev/null
mv -f $_ROOT/backups/drush-pre* $_ROOT/backups/system/ &> /dev/null
mv -f $_ROOT/backups/provision-pre* $_ROOT/backups/system/ &> /dev/null
mv -f $_ROOT/backups/drush_make-pre* $_ROOT/backups/system/ &> /dev/null
mv -f $_ROOT/backups/provision_boost-pre* $_ROOT/backups/system/ &> /dev/null
mv -f $_ROOT/backups/provision_civicrm-pre* $_ROOT/backups/system/ &> /dev/null
mv -f $_ROOT/backups/provision_cdn-pre* $_ROOT/backups/system/ &> /dev/null
mv -f $_ROOT/backups/registry_rebuild-pre* $_ROOT/backups/system/ &> /dev/null
mkdir -p /data/conf/arch
mv -f /data/conf/global.inc-pre* /data/conf/arch/ &> /dev/null
mv -f /data/conf/global.inc-before* /data/conf/arch/ &> /dev/null
mv -f /data/conf/global.inc-missing* /data/conf/arch/ &> /dev/null
if [ "$_STATUS" = "INIT" ] ; then
  if [ "$_DEBUG_MODE" = "YES" ] ; then
    true
  else
    _AEGIR_LOGIN_URL=`grep "^http://$_DOMAIN" $_ROOT/log/install.log 2> /dev/null`
    if [ ! -z "$_AEGIR_LOGIN_URL" ] ; then
      echo " "
      msg "INFO: Congratulations, Aegir backend and frontend have been installed successfully."
      msg "NOTE: Please wait 1 minute before opening the following link in your web browser:"
      echo " "
      msg "LINK: $_AEGIR_LOGIN_URL"
      echo " "
    else
      msg "ALRT: Something went wrong."
      msg "ALRT: Please check the install log for details:"
      msg "ALRT: $_ROOT/log/install.log"
    fi
  fi
else
  feature_server_fix_002
  remove_incompatible_modules_001
  remove_incompatible_modules_002
fi
msg "$_STATUS A: Starting the cron now"
service cron start &> /dev/null
msg "$_STATUS A: All done!"
msg "BYE!"


###----------------------------------------###
###
###  Octopus Aegir Installer
###  Copyright (C) 2010-2012 Omega8.cc
###  noc@omega8.cc www.omega8.cc
###
###----------------------------------------###
