#!/bin/bash


###----------------------------------------###
###
###  Barracuda Aegir Installer
###
###  Copyright (C) 2010-2012 Omega8.cc
###  noc@omega8.cc www.omega8.cc
###
###  This program is free software. You can
###  redistribute it and/or modify it under
###  the terms of the GNU GPL as published by
###  the Free Software Foundation, version 2
###  or later.
###
###  This program is distributed in the hope
###  that it will be useful, but WITHOUT ANY
###  WARRANTY; without even the implied
###  warranty of MERCHANTABILITY or FITNESS
###  FOR A PARTICULAR PURPOSE. See the GNU GPL
###  for more details.
###
###  You should have received a copy of the
###  GNU GPL along with this program.
###  If not, see http://www.gnu.org/licenses/
###
###  Code: http://code.aegir.cc/aegir
###
###----------------------------------------###


###----------------------------------------###
### HOW-TO: run it with bash, not with sh  ###
###----------------------------------------###
###
### $ bash BARRACUDA.sh.txt
###


###----------------------------------------###
### EDITME                                 ###
###----------------------------------------###
###
### Enter your valid e-mail address below.
###
_MY_EMAIL="notify@omega8.cc"


###----------------------------------------###
### EASY SETUP                             ###
###----------------------------------------###
###
### You can configure all options manually
### or simply use 'EASY PUBLIC SETUP MODE' for
### standard install or 'EASY LOCALHOST MODE'
### for local install. See below for details.
###


###----------------------------------------###
### EASY PUBLIC SETUP MODE                 ###
###----------------------------------------###
###
### Useful only during initial system setup.
### Enabled by default since BOA-2.0.3
###
### It will skip all prompts and configure
### Barracuda with only some options/services
### enabled, as listed below:
###
### _BUILD_FROM_SRC=NO
### _PHP_MODERN_ONLY=YES
### _XTRAS_LIST="PDS CSF CHV FTP"
### _HTTP_WILDCARD=YES
### _AUTOPILOT=YES
### _DEBUG_MODE=NO
### _AEGIR_VERSION=HEAD
### _DB_SERVER=MariaDB
### _SSH_PORT=22
### _LOCAL_DEBIAN_MIRROR=ftp.debian.org
### _LOCAL_UBUNTU_MIRROR=archive.ubuntu.com
### _DNS_SETUP_TEST=YES
### _THIS_DB_HOST=localhost
### _SMTP_RELAY_TEST=YES
### _MY_OWNIP=automatically-discovered
### _MY_HOSTN=$_EASY_HOSTNAME
### _MY_FRONT=master.$_EASY_HOSTNAME
###
### To disable, change this to NO below.
###
_EASY_PUBLIC=YES

###
### Please enter your FQDN hostname below.
###
### It should already point to your server
### IP address with DNS wildcard configured,
### so you may need to wait for propagation
### on the Internet before it will work.
###
### See for reference: http://bit.ly/IZqv2Q
###
### NOTE! You shouldn't use "mydomain.org"
### as your hostname. It should be some
### subdomain, like "server.mydomain.org"
###
### You *don't* need to configure your server
### hostname, since Barracuda will do that
### for you, automatically.
###
_EASY_HOSTNAME="wildcard-enabled-hostname"

###----------------------------------------###
###
### STOP! NO NEED TO CONFIGURE ANYTHING BELOW
### IF _EASY_PUBLIC MODE HAS BEEN ENABLED.
###
###----------------------------------------###


###----------------------------------------###
### EASY LOCALHOST SETUP MODE              ###
###----------------------------------------###
###
### Useful only during initial system setup.
###
### It will skip all prompts and configure
### Barracuda with only safe options/services
### enabled, as listed below:
###
### _BUILD_FROM_SRC=NO
### _PHP_MODERN_ONLY=YES
### _XTRAS_LIST="PDS CHV"
### _HTTP_WILDCARD=YES
### _AUTOPILOT=YES
### _DEBUG_MODE=NO
### _AEGIR_VERSION=HEAD
### _DB_SERVER=MariaDB
### _SSH_PORT=22
### _LOCAL_DEBIAN_MIRROR=ftp.debian.org
### _LOCAL_UBUNTU_MIRROR=archive.ubuntu.com
### _DNS_SETUP_TEST=NO
### _THIS_DB_HOST=localhost
### _SMTP_RELAY_TEST=NO
### _LOCAL_NETWORK_IP="127.0.1.1"
### _LOCAL_NETWORK_HN="aegir.local"
### _MY_OWNIP="127.0.1.1"
### _MY_HOSTN="aegir.local"
### _MY_FRONT="aegir.local"
###
### Thanks to local DNS wildcard, you will be
### able to use many levels of subdomains for
### created sites, for example:
### site.aegir.local, abc.xyz.site.aegir.local
### This wildcard will rely only on the local,
### basic DNS system, without any need to use
### external DNS.
###
### To enable, change this to YES below
### and make sure that _EASY_PUBLIC option
### above is set to NO (it's YES by default).
###
_EASY_LOCALHOST=NO


###----------------------------------------###
###
### STOP! NO NEED TO CONFIGURE ANYTHING BELOW
### IF EITHER _EASY_LOCALHOST OR _EASY_PUBLIC
### MODE HAS BEEN ENABLED.
###
###----------------------------------------###


###----------------------------------------###
### MANUAL INSTALL MODE                    ###
###----------------------------------------###
###
### You can configure all options manually
### below when both 'EASY PUBLIC SETUP MODE'
### and 'EASY LOCALHOST MODE' are *disabled*
###


###----------------------------------------###
### PHP, NGINX AND REDIS INSTALL METHOD    ###
###----------------------------------------###
###
### This option is used only in Debian Squeeze
### and Ubuntu Precise.
###
### By default Barracuda uses Dotdeb packages
### to install PHP 5.3, Nginx and Redis on
### Debian Squeeze and standard Ubuntu Precise
### packages to install PHP 5.3 and Nginx on
### Ubuntu Precise.
###
### They are sometimes not fully up to date
### when new version of PHP or Nginx is
### released, so even if it is slower to build
### from sources, it may be useful.
###
### If you prefer to build from sources also
### PHP 5.3, Nginx and Redis on Squeeze or
### Precise, change this to:
###
### _BUILD_FROM_SRC=YES
###
### Note that PHP 5.2, if used, will be always
### installed from sources in all supported
### OS flavors.
###
### NOTE! We have switched to always build
### Nginx from sources, because the packages
### based version is really bloated, so this
### option works as explained above only when
### you will change _NGINX_FROM_SOURCES=YES
### to _NGINX_FROM_SOURCES=NO in the advanced
### config section further below. This may be
### useful when you prefer to run system only
### updates with apt-get instead of running
### Barracuda.
###
_BUILD_FROM_SRC=NO


###----------------------------------------###
### PHP INSTALL MODE                       ###
###----------------------------------------###
###
### By default Barracuda installs only 5.3,
### so it supports out of the box Drupal 8.x,
### but breaks support for Drupal 5.x and
### maybe some still not fully compatible
### Drupal 6.x contrib modules.
###
### To be able to install both 5.2 and 5.3,
### so you could choose version for PHP-FPM
### and PHP-CLI *separately* and per Aegir
### Master and Satellite Instance below with
### _PHP_FPM_VERSION and _PHP_CLI_VERSION,
### change this to:
###
### _PHP_MODERN_ONLY=NO
###
### Note that this option is always forced
### to NO automatically when 5.2 is already
### installed and available, so while you can
### easily add 5.2 on upgrade by changing it
### to NO below, you can't remove it later.
###
_PHP_MODERN_ONLY=YES


###----------------------------------------###
### PHP-FPM VERSION                        ###
###----------------------------------------###
###
### You can choose PHP-FPM version per Aegir
### Master and Satellite Instance - both on
### install and upgrade.
###
### Available options:
###
### _PHP_FPM_VERSION=5.2
### _PHP_FPM_VERSION=5.3
###
### This option is useful only with its parent
### option set to _PHP_MODERN_ONLY=NO, which
### is not default.
###
_PHP_FPM_VERSION=5.2


###----------------------------------------###
### PHP-CLI VERSION                        ###
###----------------------------------------###
###
### You can choose PHP-CLI version per Aegir
### Master and Satellite Instance - both on
### install and upgrade.
###
### Note that PHP-CLI 5.3 is required by
### Drupal 8.x, but breaks support for 5.x
###
### Available options:
###
### _PHP_CLI_VERSION=5.2
### _PHP_CLI_VERSION=5.3
###
### This option is useful only with its parent
### option set to _PHP_MODERN_ONLY=NO, which
### is not default.
###
_PHP_CLI_VERSION=5.2


###----------------------------------------###
### XTRAS INSTALL MODE                     ###
###----------------------------------------###
###
### You can use wildcard "ALL" to install all
### available xtras or configure the list
### of xtras to be installed as explained
### below.
###
### Note: the "ALL" wildcard is not default!
###
### When combined with _AUTOPILOT=YES option
### you can speed up the process and still
### control which xtras will be installed,
### using the symbols listed below.
###
### BDD --- SQL Buddy DB Manager
### BND --- Bind9 DNS Server
### CGP --- Collectd Graph Panel
### CHV --- Chive DB Manager
### CSF --- csf/lfd Firewall
### FMG --- FFmpeg support
### FTP --- Pure-FTPd server with forced FTPS
### GIT --- Latest Git from sources
### PDS --- fast DNS cache server (pdnsd)
### SLR --- MultiCore Apache Solr Tomcat
### WMN --- Webmin Control Panel
###
### Examples:
###
### _XTRAS_LIST=""
### _XTRAS_LIST=ALL
### _XTRAS_LIST="PDS CSF CGP CHV FTP"
###
_XTRAS_LIST="PDS CSF CHV FTP"


###----------------------------------------###
### NEW RELIC INSTALL                      ###
###----------------------------------------###
###
### Enter your New Relic license key to get
### it installed and enabled automatically.
###
_NEWRELIC_KEY=""


###----------------------------------------###
### HTTP LISTENING MODE                    ###
###----------------------------------------###
###
### With disabled wildcard mode Nginx would
### listen only on defined or discovered IP
### address, while with now default wildcard,
### it will listen on all available IPs.
### This may be useful in some environments
### like localhost install or Amazon EC2
### with dynamic local IP and separate public
### IP not available on the local interface.
###
### Note: this option works only on initial
### install. You can't change this on upgrade
### because it could cause serious issues.
###
### To not use wildcard mode, change this to:
###
### _HTTP_WILDCARD=NO
###
_HTTP_WILDCARD=YES


###----------------------------------------###
### AUTOPILOT MODE                         ###
###----------------------------------------###
###
### To disable all Yes/no prompts and just run
### everything as-is, change it to YES.
###
### _AUTOPILOT=YES
###
_AUTOPILOT=NO


###----------------------------------------###
### UPGRADE OPTIONS                        ###
###----------------------------------------###
###
### Use YES to upgrade system only and skip
### Aegir Master Instance upgrade.
###
_SYSTEM_UPGRADE_ONLY=NO

###
### You can force Nginx, PHP and/or DB server
### reinstall, even if there are no updates
### available.
###
_NGX_FORCE_REINSTALL=NO
_PHP_FORCE_REINSTALL=NO
_SQL_FORCE_REINSTALL=NO

###
### Use YES to force installing everything
### from sources again, even if there are
### no updates available.
###
_FULL_FORCE_REINSTALL=NO

###
### Use YES to run major system upgrade
### from Debian Lenny to Squeeze.
###
_LENNY_TO_SQUEEZE=NO


###----------------------------------------###
### DRUSH DEBUG MODE                       ###
###----------------------------------------###
###
### When set to YES it will run Aegir Master
### Instance install/upgrade with -d option,
### displaying complete Drush backend report.
###
### _DEBUG_MODE=YES
###
_DEBUG_MODE=NO


###----------------------------------------###
### AEGIR BARRACUDA VERSION                ###
###----------------------------------------###
###
### By default latest release version will
### be installed. Please never use HEAD (dev)
### version on any production server.
### The HEAD can be occasionally broken
### and should be used **only** for testing!
###
### _AEGIR_VERSION=HEAD
### _AEGIR_VERSION=BOA-2.0.3
###
_AEGIR_VERSION=HEAD


###----------------------------------------###
### DB SERVER                              ###
###----------------------------------------###
###
### You can choose MariaDB 5.5 (default)
### or Percona 5.5.
###
### You can choose/change the DB server both
### on Barracuda install and upgrade, but
### the only upgrade path available is from
### MariaDB to Percona - it will also force
### PHP-FPM rebuild automatically.
###
### _DB_SERVER=Percona
###
_DB_SERVER=MariaDB


###----------------------------------------###
### SSH CUSTOM PORT                        ###
###----------------------------------------###
###
### Change this if you want to use non-default
### port for SSH and SFTP connections.
###
### Changing the port will alter also your
### server firewall (csf) settings, both on
### install and upgrade, unless you are using
### _CUSTOM_CONFIG_CSF=YES option.
###
_SSH_PORT=22


###----------------------------------------###
### LOCAL DEBIAN OR UBUNTU MIRROR          ###
###----------------------------------------###
###
### Modify this if you prefer to use some
### mirror you know is the best / the fastest
### in your server location. For example:
###
### _LOCAL_DEBIAN_MIRROR=ftp.au.debian.org
### _LOCAL_UBUNTU_MIRROR=au.archive.ubuntu.com
###
### To search for the fastest mirror around
### the globe, use empty variables:
###
### _LOCAL_DEBIAN_MIRROR=""
### _LOCAL_UBUNTU_MIRROR=""
###
### Note that searching around the globe is
### no longer enabled by default!
###
### Note also that it may hang and later cause
### broken upgrades if some tested mirror
### responds with unexpected delay instead of
### just respond or not, so it is better
### to use reliable mirrors you know,
### or leave default values.
###
_LOCAL_DEBIAN_MIRROR=ftp.debian.org
_LOCAL_UBUNTU_MIRROR=archive.ubuntu.com


###----------------------------------------###
### FORCE PREFERRED GIT REPOSITORY         ###
###----------------------------------------###
###
### Use this when you are experiencing issues
### trying to connect to the default github
### repository. Valid options:
###
### _FORCE_GIT_MIRROR=github
### _FORCE_GIT_MIRROR=drupal
### _FORCE_GIT_MIRROR=gitorious
###
### Note: with forced mirror the script will
### not try to connect and then switch to
### alternate mirror. It will simply fail
### if the forced mirror doesn't respond.
###
### We recommend github as it is much faster,
### often 10x than drupal and gitorious.
###
_FORCE_GIT_MIRROR=""


###----------------------------------------###
### DNS MANUAL CONFIG                      ###
###----------------------------------------###
###
### Starting with release 0.4-alpha9 Aegir
### requires proper DNS configuration
### of your server. Your hostname has to be
### FQDN and has to match your server IP.
###
### This script is trying to discover your
### DNS details and allow or deny the install,
### if something doesn't look right.
###
### This script will also use your FQDN
### hostname as a web address of your Aegir
### frontend (control panel) by default.
###
### You may want to change the automatic
### defaults by setting up your IP address,
### your FQDN hostname and your Aegir frontend
### web address below - it is recommended!
###
### It may be useful when you are using local
### environment with custom settings in your
### /etc/hosts, when you have more than one
### public IPs on eth0 and you wish to use
### non-default (first) IP address, or when
### you want to use non-hostname (sub)domain
### to access your Aegir frontend.
###
### It is also useful when you plan to use
### available in Barracuda optional installs
### of Chive, SQL Buddy and Collectd, since
### all of them will use subdomains in the
### server hostname and it will not work
### when your hostname domain DNS is not
### under your control (like many default
### hostnames and reverse DNS provided by
### VPS hosting companies).
###
### Please change *all 3 values* if you wish
### to customize this automatic setup.
###
### Example:
###
### _MY_OWNIP=192.168.0.108
### _MY_HOSTN=server.mydomain.com
### _MY_FRONT=aegir.mydomain.com
###
### NOTE:
###
### If you will use your custom DNS settings,
### they will be still validated, therefore
### make sure your _MY_HOSTN and _MY_FRONT
### both matches your _MY_OWNIP or the script
### will fail to install Aegir (unless you
### will disable the DNS test completely
### below in _DNS_SETUP_TEST).
###
_MY_OWNIP=""
_MY_HOSTN=""
_MY_FRONT=""


###----------------------------------------###
### DNS SETUP TEST                         ###
###----------------------------------------###
###
### If you don't want to test your DNS
### because of some custom local setup
### you know is correct (like DynDNS)
### but the script can't validate it with its
### standard ifconfig tests, set this to:
###
### _DNS_SETUP_TEST=NO
###
### There is no guarantee it will work.
###
_DNS_SETUP_TEST=YES


###----------------------------------------###
### DATABASE CUSTOM HOST                   ###
###----------------------------------------###
###
### If you prefer, you can set the database
### to be connected via FQDN pointing to your
### public IP instead of default "localhost".
###
### Note: the "FQDN" is a keyword.
### Don't replace it with a real hostname.
###
### For local or Amazon based installs with
### local/dynamic IP address it is recommended
### to use default "localhost" option.
###
### Available options:
###
### _THIS_DB_HOST=localhost
### _THIS_DB_HOST=FQDN
###
_THIS_DB_HOST=localhost


###----------------------------------------###
### SMTP CONNECTION TEST                   ###
###----------------------------------------###
###
### If you don't want to test outgoing SMTP
### connections, change _SMTP_RELAY_TEST
### value to "NO".
###
_SMTP_RELAY_TEST=YES


###----------------------------------------###
### SMTP RELAY HOST - ONLY WHEN REQUIRED   ###
###----------------------------------------###
###
### _SMTP_RELAY_HOST="smtp.your.relay.net"
###
_SMTP_RELAY_HOST=""


###----------------------------------------###
### LOCALHOST ON LOCAL NETWORK             ###
###----------------------------------------###
###
### When enabled, it will force your Nginx web
### server to listen only on local IP with
### local, non-FQDN hostname, for example:
###
### _LOCAL_NETWORK_IP=10.10.80.80
### _LOCAL_NETWORK_HN=aegir.local
###
### In this example "aegir.local" will be used
### as your hostname and all connections and
### grants will use "aegir.local" instead of
### FQDN. Also your Aegir Master Instance
### will be available at http://aegir.local
###
### This option is useful when your server is
### available only in your local network
### without any public IP address assigned/
### available on any eth interface. This also
### means it should work as a handy local
### setup on your wirelessly connected laptop
### or netbook, with improved DNS cache
### support - pdnsd will save results in file.
###
### In this case you could use 127.0.1.1 as
### _LOCAL_NETWORK_IP to avoid issues with
### DHCP changing your assigned IP on the fly
### and to avoid conflicts with some other
### services listening on 127.0.0.1
###
### This option works only with initial
### install and is disabled on upgrade.
###
### When used, it will override all defined
### above _MY_OWNIP, _MY_HOSTN and _MY_FRONT
### values.
###
### It will also disable all DNS and SMTP
### relay tests and enable drush debug mode
### automatically.
###
### Note that for non-local installs with
### private and/or dynamic IPs on servers
### behind some NAT, you should instead use
### _HTTP_WILDCARD=YES above and leave
### _LOCAL_NETWORK_IP and _LOCAL_NETWORK_HN
### empty.
###
_LOCAL_NETWORK_IP=""
_LOCAL_NETWORK_HN=""


###----------------------------------------###
### ADVANCED CONFIGURATION OPTIONS         ###
###----------------------------------------###

###
### Use YES to still install memcached, even
### if it is no longer used by default.
###
_USE_MEMCACHED=NO

###
### Use YES to avoid overwriting configuration
### for listed services on upgrade.
###
_CUSTOM_CONFIG_CSF=NO
_CUSTOM_CONFIG_PHP_5_2=NO
_CUSTOM_CONFIG_PHP_5_3=NO
_CUSTOM_CONFIG_SQL=NO
_CUSTOM_CONFIG_REDIS=NO

###
### Set max 1 min load before disabling Nginx
### temporarily, until the load stabilizes.
###
_LOAD_LIMIT_ONE=1444

###
### Set max 5 min load before disabling Nginx
### temporarily, until the load stabilizes.
###
_LOAD_LIMIT_TWO=888

###
### Set max allowed page views from one IP
### out of last 300. Default value of 300
### effectively disables DoS monitor. Note
### that it will lock the access completely
### on the firewall level in /etc/csf/csf.deny
###
_NGINX_DOS_LIMIT=300

###
### Use this only when you need to always
### compile in some extra/custom module(s).
###
_NGINX_EXTRA_CONF=""

###
### Nginx version used in the apt-get based
### installs tends to be overloaded with
### never used modules, causing some issues
### so we force building from sources
### by default, while leaving you a choice.
###
_NGINX_FROM_SOURCES=YES

###
### AUTO will default to values calculated
### on the fly and based on available RAM.
### You can force workers number for Nginx
### and PHP-FPM here.
###
_NGINX_WORKERS=AUTO
_PHP_FPM_WORKERS=AUTO

###
### Max default TTL for Speed Booster Cache.
### It will affect all Aegir Instances, but
### it is used only for spiders and with not
### enabled by default control file per site
### or per platform modules/cache_hour/YES.txt
###
_SPEED_VALID_MAX=3600


###----------------------------------------###
### DON'T EDIT ANYTHING BELOW THIS LINE    ###
###----------------------------------------###

_INSTALLER_VERSION=BOA-2.0.4-dev

###
### Software versions
###
_APC_VERSION=3.1.9
_BZR_VERSION=2.3.4
_CHIVE_VERSION=1.0.2
_DRUSH_FAMILY=4
_DRUSH_VERSION=4.6-dev
_GIT_VERSION=1.7.9
_IMAGICK_VERSION=3.1.0RC1
_LSHELL_VERSION=0.9.15.1-sec-noreload
_NGINX_VERSION=1.3.0
_PHP_VERSION_BUILD=5.3.9
_PHP_VERSION_NEW=5.3.13
_PHP_VERSION=5.2.17
_PURE_FTPD_VERSION=1.0.35
_REDIS_VERSION=2.4.14
_MARIADB_VERSION=5.5.23
_PERCONA_VERSION=5.5.23

###
### Variables
###
_CUSTOM_NAME=nginx
_FORCE_REDIS_RESTART=NO
_LOC_REL_VERSION=""
_NOW=`date +%y%m%d-%H%M`
_PURGE_ALL_THISHTIP=NO
_PURGE_MODE=ON
_SPINNER=YES
PATH=/usr/local/sbin:/usr/local/bin:/opt/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
SHELL=/bin/bash


###---### Avoid too many questions
#
export DEBIAN_FRONTEND=noninteractive
#
###---### Functions
#
# Noticeable messages.
msg () {
  echo "Barracuda [`date`] ==> $*"
}
# Simple prompt.
prompt_yes_no () {
if [ "$_AUTOPILOT" = "YES" ] ; then
  return 0
else
  while true ; do
  printf "$* [Y/n] "
  read answer
  if [ -z "$answer" ] ; then
    return 0
  fi
  case $answer in
    [Yy]|[Yy][Ee][Ss])
    return 0
    ;;
    [Nn]|[Nn][Oo])
    return 1
    ;;
    *)
    echo "Please answer yes or no"
    ;;
  esac
 done
fi
}
#
# Prompt to confirm choice.
prompt_confirm_choice () {
  read -p "$1 [$2]:" _CONFIRMED_ANSWER
  if [ -z "$_CONFIRMED_ANSWER" ] ; then
    _CONFIRMED_ANSWER=$2
  fi
}
#
# Stop on error.
# set -e ### disable this for debugging
#
# Success msg.
success () {
  msg "$1 Succeeded"
}
#
# Error msg.
fatal () {
  echo " "
  msg "Fatal Error Occurred: $1"
  msg "Cannot continue installation"
  exit 1
}
#
# Not supported OS.
not_supported_os () {
  msg "== FATAL ERROR =="
  msg "Invalid install script or OS used"
  msg "It is not any supported Debian or Ubuntu version"
  msg "You need Debian - Squeeze (recommended)"
  msg "or Ubuntu - Precise or Lucid"
  exit 1
}
#
# Perform an action, log it, and run the spinner throughout.
runner () {
  CMD="$1"
  touch busy
  if [ "$_SPINNER" = "YES" ] ; then
    bash $_SRCDIR/spinner busy &
  fi
  if $CMD >> $_LOG; then
    rm busy
    sleep 1
    success "$CMD:"
    return 0
  else
    rm busy
    sleep 1
    echo "$CMD failed.  Error (if any): $?"
    echo " "
    echo "Displaying the last 15 lines of $_LOG to help troubleshoot this problem"
    echo "If you see any error with advice to run 'dpkg --configure -a', run this"
    echo "command first and choose default answer, then run this installer again"
    echo " "
    tail -15 $_LOG
    return 1
  fi
}
#
# Small spinner.
mrun () {
  CMD="$1"
  touch busy
  if [ "$_SPINNER" = "YES" ] ; then
    bash $_SRCDIR/spinner busy &
  fi
  if $CMD >> $_LOG; then
    rm busy
    sleep 1
    return 0
  fi
}
#
# Silent runner.
st_runner () {
  CMD="$1"
  touch busy
  if [ "$_SPINNER" = "YES" ] ; then
    bash $_SRCDIR/spinner busy &
  fi
  if $CMD >> $_LOG; then
    rm busy
    sleep 1
    return 0
  else
    rm busy
    sleep 1
    echo "$CMD failed.  Error (if any): $?"
    echo " "
    echo "Displaying the last 15 lines of $_LOG to help troubleshoot this problem"
    echo "If you see any error with advice to run 'dpkg --configure -a', run this"
    echo "command first and choose default answer, then run this installer again"
    echo " "
    tail -15 $_LOG
    return 1
  fi
}
#
# Escape borrowed from mysql_secure_installation.
basic_single_escape () {
  # The quoting on this sed command is a bit complex.  Single-quoted strings
  # don't allow *any* escape mechanism, so they cannot contain a single
  # quote.  The string sed gets (as argv[1]) is:  s/\(['\]\)/\\\1/g
  #
  # Inside a character class, \ and ' are not special, so the ['\] character
  # class is balanced and contains two characters.
  echo "$1" | sed 's/\(['"'"'\]\)/\\\1/g'
}
#
# Find correct IP.
find_correct_ip () {
  _FQDN_TEST=$(host $_LOC_DOM)
  if [[ "$_FQDN_TEST" =~ "is an alias for" ]] ; then
    _LOC_IP=`echo $_FQDN_TEST | cut -d: -f2 | awk '{ print $10}'`
  else
    _LOC_IP=`echo $_FQDN_TEST | cut -d: -f2 | awk '{ print $4}'`
  fi
}
#
# Fix php.ini files to add redis.so
fix_php_ini_redis () {
  if [ -e "$_THIS_FILE" ] ; then
    _REDIS_INI_TEST=$(grep "extension=redis.so" $_THIS_FILE)
    if [[ "$_REDIS_INI_TEST" =~ "extension=redis.so" ]] ; then
      true
    else
      echo "extension=redis.so" >> $_THIS_FILE
    fi
    _REDIS_PID_TEST=$(grep "/var/run:" $_THIS_FILE)
    if [[ "$_REDIS_PID_TEST" =~ "/var/run:" ]] ; then
      true
    else
      sed -i "s/:\/var\/www/:\/var\/run:\/var\/www/g" $_THIS_FILE &> /dev/null
    fi
  fi
}
#
# Set or update Redis password..
update_redis_password () {
  if [ ! -e "/root/.redis.pass.txt" ] && [ -e "/etc/redis/redis.conf" ] ; then
    msg "INFO: Generating random password for Redis server"
    touch /root/.redis.pass.txt
    chmod 0600 /root/.redis.pass.txt &> /dev/null
    _ESC_RPASS=`pwgen -v -s -1`
    _ESC_RPASS=`basic_single_escape "$_ESC_RPASS"`
    echo "$_ESC_RPASS" > /root/.redis.pass.txt
    _FORCE_REDIS_RESTART=YES
  fi
  if [ -e "/root/.redis.pass.txt" ] && [ -e "/etc/redis/redis.conf" ] ; then
    RPASS=`cat /root/.redis.pass.txt`
    RPASS=`echo -n $RPASS | tr -d "\n"`
    sed -i "s/^requirepass.*/requirepass $RPASS/g" /etc/redis/redis.conf &> /dev/null
    sed -i "s/isfoobared/$RPASS/g" /data/conf/global.inc                 &> /dev/null
    sed -i "s/isfoobared/$RPASS/g" /var/aegir/config/includes/global.inc &> /dev/null
    chown redis:redis /etc/redis/redis.conf
    chmod 0600 /etc/redis/redis.conf
  fi
}
#
# Install Redis from sources.
install_redis_src () {
  msg "INFO: Installing Redis update for $_THIS_OS/$_THIS_RV, please wait..."
  mrun "sleep 1"
  if [ "$_REL_VERSION" = "squeeze" ] ; then
    st_runner "$_INSTAPP redis-server" 2> /dev/null
  else
    if [ ! -e "/var/lib/redis" ] ; then
      st_runner "adduser --system --group redis" 2> /dev/null
    fi
    cd /var/opt
    rm -f -r /var/opt/redis*
    wget -q -U iCab http://files.aegir.cc/dev/redis-$_REDIS_VERSION.tar.gz
    tar -xzf redis-$_REDIS_VERSION.tar.gz
    cd redis-$_REDIS_VERSION
    st_runner "make --quiet" 2> /dev/null
    st_runner "make --quiet install" 2> /dev/null
    if [ -e "/var/lib/redis" ] ; then
      st_runner "service redis-server stop" &> /dev/null
      mrun "sleep 1"
      killall -9 redis-server &> /dev/null
    fi
    cd /usr/local/bin
    if [ ! -L "/usr/local/bin/redis-server" ] ; then
      cp -p redis-server /usr/bin/
    fi
    cp -p redis-benchmark /usr/bin/
    cp -p redis-cli /usr/bin/
    cp -p redis-check-dump /usr/bin/
    cp -p redis-check-aof /usr/bin/
  fi
  cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/redis-server /etc/init.d/redis-server
  chmod 755 /etc/init.d/redis-server &> /dev/null
  st_runner "update-rc.d redis-server defaults" &> /dev/null
  mkdir -p /var/log/redis
  chown redis:redis /var/log/redis
  mkdir -p /var/lib/redis
  chown redis:redis /var/lib/redis
  rm -f /var/lib/redis/*
  mkdir -p /etc/redis
  if [ -e "/etc/redis/redis.conf" ] && [ "$_STATUS" = "UPGRADE" ] ; then
    if [ "$_CUSTOM_CONFIG_REDIS" = "NO" ] || [[ "$_THISHOST" =~ ".host8." ]] ; then
      cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/redis.conf /etc/redis/redis.conf
    fi
  else
    cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/redis.conf /etc/redis/redis.conf
  fi
  update_redis_password
  if [ ! -e "/usr/local/bin/redis-server" ] && [ -e "/usr/bin/redis-server" ] ; then
    ln -s /usr/bin/redis-server /usr/local/bin/redis-server
  fi
  touch /var/log/redis-$_REDIS_VERSION.log
}
#
# Set xterm.
set_xterm () {
  _XTERM_TEST=$(grep $_INSTALLER_VERSION /root/.bashrc)
  if [[ "$_XTERM_TEST" =~ "$_INSTALLER_VERSION" ]] ; then
    sed -i "s/^export TERM=.*/export TERM=xterm-color/g" /root/.bashrc &> /dev/null
  else
    cp -af /root/.bashrc /root/.bashrc.bak.$_NOW
    cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/boa.bashrc.txt /root/.bashrc
  fi
}
#
# Kill nash-hotplug.
kill_nash () {
  _L_VM_TEST=`uname -a 2>&1`
  if [[ "$_L_VM_TEST" =~ beng ]] ; then
    true
  else
    _NASH_TEST=$(grep nash-hotplug /etc/rc.local)
    if [[ "$_NASH_TEST" =~ "nash-hotplug" ]] ; then
      true
    else
      cp -af /etc/rc.local /etc/rc.local.bak.$_NOW
      sed -i "s/exit 0//g" /etc/rc.local &> /dev/null
      echo "killall -9 nash-hotplug" >> /etc/rc.local
      echo "exit 0" >> /etc/rc.local
      killall -9 nash-hotplug &> /dev/null
    fi
  fi
}
#
# Fix FTPS access on Squeeze.
fix_ftps_squeeze () {
  if [ "$_REL_VERSION" = "squeeze" ] ; then
    _LSHELL_PATH_TEST=$(grep "/usr/bin/lshell" /etc/shells)
    if [[ "$_LSHELL_PATH_TEST" =~ "/usr/bin/lshell" ]] ; then
      true
    else
      echo "/usr/bin/lshell" >> /etc/shells
      ### we don't need this replace, so it is here just for reference:
      ### sed -i "s/usr\/bin\/lshell/usr\/local\/bin\/lshell/g" /etc/passwd
    fi
  fi
}
#
# Enable Purge Cruft Machine.
enable_purge_cruft_machine () {
  _PURGE_CRUFT_TEST=$(grep purge_cruft /etc/crontab)
  if [[ "$_PURGE_CRUFT_TEST" =~ "purge_cruft" ]] ; then
    true
  else
    if [[ "$_THISHOST" =~ ".host8." ]] ; then
      echo "22 2    * * 7   root    bash /var/xdrago/purge_cruft.sh" >> /etc/crontab
      sed -i "/^$/d" /etc/crontab &> /dev/null
    fi
  fi
}
#
# Fix PHP Extensions.
fix_php_ext () {
  if [ "$_FROM_SOURCES" = "YES" ] ; then
    if [ -e "/usr/lib/php5/20090626" ] && [ -L "/opt/local/lib/php/extensions/no-debug-non-zts-20090626" ] ; then
      mkdir -p /var/backups/php53-20090626
      mv -f /usr/lib/php5/20090626/*.so /var/backups/php53-20090626/ &> /dev/null
      if [ -e "/var/backups/php53-20090626/newrelic.so" ] ; then
        mv -f /var/backups/php53-20090626/newrelic.so /usr/lib/php5/20090626/ &> /dev/null
      fi
    elif [ -e "/usr/lib/php5/20090626+lfs" ] && [ -L "/opt/local/lib/php/extensions/no-debug-non-zts-20090626" ] ; then
      mkdir -p /var/backups/php53-20090626+lfs
      mv -f /usr/lib/php5/20090626+lfs/* /var/backups/php53-20090626+lfs/ &> /dev/null
      if [ -e "/var/backups/php53-20090626+lfs/newrelic.so" ] ; then
        mv -f /var/backups/php53-20090626+lfs/newrelic.so /usr/lib/php5/20090626+lfs/ &> /dev/null
      fi
    fi
    if [ -e "/etc/php5/conf.d" ] ; then
      mkdir -p /var/backups/php53-conf-d
      mv -f /etc/php5/conf.d/*.ini /var/backups/php53-conf-d/ &> /dev/null
    fi
  fi
}
#
# Fix php.ini file to add newrelic.ini
fix_php_ini_newrelic () {
  _X86_64_TEST=`uname -m`
  if [ "$_X86_64_TEST" = "x86_64" ] ; then
    _NR_TPL="/usr/lib64/newrelic-php5/scripts/newrelic.ini.template"
  else
    _NR_TPL="/usr/lib/newrelic-php5/scripts/newrelic.ini.template"
  fi
  if [ -e "$_THIS_FILE" ] ; then
    _NEWRELIC_INI_TEST_A=$(grep "extension=newrelic.so" $_THIS_FILE)
    if [[ "$_NEWRELIC_INI_TEST_A" =~ "extension=newrelic.so" ]] ; then
      true
    else
      cat $_NR_TPL >> $_THIS_FILE
    fi
    _NEWRELIC_INI_TEST_B=$(grep "newrelic.framework.drupal.modules" $_THIS_FILE)
    if [[ "$_NEWRELIC_INI_TEST_B" =~ "newrelic.framework.drupal.modules" ]] ; then
      true
    else
      echo "newrelic.framework.drupal.modules = 1" >> $_THIS_FILE
    fi
  fi
}
#
# Fix all php.ini files to add newrelic.ini
fix_php_ini_newrelic_all () {
  if [ -e "/etc/newrelic/newrelic.cfg" ] ; then
    _THIS_FILE=/opt/etc/php.ini
    fix_php_ini_newrelic
    _THIS_FILE=/usr/local/lib/php.ini
    fix_php_ini_newrelic
    _THIS_FILE=/opt/local/etc/php53.ini
    fix_php_ini_newrelic
    _THIS_FILE=/opt/local/lib/php.ini
    fix_php_ini_newrelic
  fi
}
#
# Update PHP Config.
update_php_conf () {
  if [ -z "$_THISHTIP" ] ; then
    _LOC_DOM="$_THISHOST"
    find_correct_ip
    _THISHTIP="$_LOC_IP"
  fi
  if [ ! -e "/opt/etc" ] ; then
    mkdir -p /opt/etc
  fi
  if [ ! -e "/opt/local/etc/php53.ini" ] ; then
    mkdir -p /opt/local/etc
    cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/php53.ini /opt/local/etc/php53.ini &> /dev/null
  fi
  if [ ! -e "/opt/local/lib/php.ini" ] ; then
    mkdir -p /opt/local/lib
    cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/php53-cli.ini /opt/local/lib/php.ini &> /dev/null
  fi
  if [ "$_CUSTOM_CONFIG_PHP_5_2" = "NO" ] || [[ "$_THISHOST" =~ ".host8." ]] ; then
    cp -af /opt/etc/php.ini /var/backups/dragon/t/opt-etc-php.ini-pre-$_INSTALLER_VERSION-$_NOW &> /dev/null
    cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/php.ini /opt/etc/php.ini &> /dev/null
    cp -af /usr/local/lib/php.ini /var/backups/dragon/t/usr-local-lib-php.ini-pre-$_INSTALLER_VERSION-$_NOW &> /dev/null
    cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/php-cli.ini /usr/local/lib/php.ini &> /dev/null
  fi
  if [ "$_CUSTOM_CONFIG_PHP_5_3" = "NO" ] || [[ "$_THISHOST" =~ ".host8." ]] ; then
    cp -af /opt/local/etc/php53.ini /var/backups/dragon/t/opt-etc-php53.ini-pre-$_INSTALLER_VERSION-$_NOW &> /dev/null
    cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/php53.ini /opt/local/etc/php53.ini &> /dev/null
    cp -af /opt/local/lib/php.ini /var/backups/dragon/t/opt-local-lib-php.ini-pre-$_INSTALLER_VERSION-$_NOW &> /dev/null
    cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/php53-cli.ini /opt/local/lib/php.ini &> /dev/null
  fi
  if [ "$_FROM_SOURCES" = "NO" ] ; then
    if [ -e "/etc/php5/fpm/php.ini" ] && [ ! -L "/etc/php5/fpm/php.ini" ] ; then
      mv -f /etc/php5/fpm/php.ini /var/backups/dragon/t/etc-php5-fpm-php.ini-pre-$_INSTALLER_VERSION-$_NOW &> /dev/null
      ln -s /opt/local/etc/php53.ini /etc/php5/fpm/php.ini
    fi
    if [ -e "/etc/php5/cli/php.ini" ] && [ ! -L "/etc/php5/cli/php.ini" ] ; then
      mv -f /etc/php5/cli/php.ini /var/backups/dragon/t/etc-php5-cli-php.ini-pre-$_INSTALLER_VERSION-$_NOW &> /dev/null
      ln -s /opt/local/lib/php.ini /etc/php5/cli/php.ini
    fi
    if [ -x "/usr/sbin/php5-fpm" ] && [ ! -L "/opt/local/sbin/php-fpm" ] ; then
      mv -f /opt/local/sbin/php-fpm /opt/local/sbin/php-fpm-old &> /dev/null
      mkdir -p /opt/local/sbin
      ln -s /usr/sbin/php5-fpm /opt/local/sbin/php-fpm
    fi
    if [ -d "/opt/local/lib/php/extensions/no-debug-non-zts-20090626" ] ; then
      mv -f /opt/local/lib/php/extensions/no-debug-non-zts-20090626 /var/backups/ &> /dev/null
    fi
    if [ -e "/usr/lib/php5/20090626" ] && [ ! -L "/opt/local/lib/php/extensions/no-debug-non-zts-20090626" ] ; then
      mkdir -p /opt/local/lib/php/extensions
      ln -s /usr/lib/php5/20090626 /opt/local/lib/php/extensions/no-debug-non-zts-20090626
      if [ -e "/var/backups/no-debug-non-zts-20090626/newrelic.so" ] ; then
        mv -f /var/backups/no-debug-non-zts-20090626/newrelic.so /usr/lib/php5/20090626/ &> /dev/null
      fi
    elif [ -e "/usr/lib/php5/20090626+lfs" ] && [ ! -L "/opt/local/lib/php/extensions/no-debug-non-zts-20090626" ] ; then
      mkdir -p /opt/local/lib/php/extensions
      ln -s /usr/lib/php5/20090626+lfs /opt/local/lib/php/extensions/no-debug-non-zts-20090626
      if [ -e "/var/backups/no-debug-non-zts-20090626/newrelic.so" ] ; then
        mv -f /var/backups/no-debug-non-zts-20090626/newrelic.so /usr/lib/php5/20090626+lfs/ &> /dev/null
      fi
    fi
  fi
  ###
  cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/php-fpm.conf /opt/etc/php-fpm.conf &> /dev/null
  cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/php53-fpm.conf /opt/local/etc/php53-fpm.conf &> /dev/null
  sed -i "s/>127.0.0.1</\>127.0.0.1,$_THISHTIP\</g" /opt/etc/php-fpm.conf &> /dev/null
  sed -i "s/listen.allowed_clients =.*/listen.allowed_clients = 127.0.0.1,$_THISHTIP/g" /opt/local/etc/php53-fpm.conf &> /dev/null
  ###
  sed -i "s/apc.include_once_override =.*/apc.include_once_override = 0/g" /opt/etc/php.ini &> /dev/null
  sed -i "s/max_file_uploads =.*/max_file_uploads = 50/g" /opt/etc/php.ini &> /dev/null
  sed -i "s/apc.include_once_override =.*/apc.include_once_override = 0/g" /opt/local/etc/php53.ini &> /dev/null
  sed -i "s/max_file_uploads =.*/max_file_uploads = 50/g" /opt/local/etc/php53.ini &> /dev/null
  ###
  sed -i "s/allow_url_fopen =.*/allow_url_fopen = On/g" /opt/etc/php.ini &> /dev/null
  sed -i "s/allow_url_fopen =.*/allow_url_fopen = On/g" /usr/local/lib/php.ini &> /dev/null
  sed -i "s/allow_url_fopen =.*/allow_url_fopen = On/g" /opt/local/etc/php53.ini &> /dev/null
  sed -i "s/allow_url_fopen =.*/allow_url_fopen = On/g" /opt/local/lib/php.ini &> /dev/null
  ###
  if [ "$_USE_MEMCACHED" = "NO" ] ; then
    sed -i "s/.*extension=memcached.so.*/;extension=memcached.so/g" /opt/etc/php.ini &> /dev/null
    sed -i "s/.*extension=memcached.so.*/;extension=memcached.so/g" /usr/local/lib/php.ini &> /dev/null
    sed -i "s/.*extension=memcached.so.*/;extension=memcached.so/g" /opt/local/etc/php53.ini &> /dev/null
    sed -i "s/.*extension=memcached.so.*/;extension=memcached.so/g" /opt/local/lib/php.ini &> /dev/null
  fi
  ###
  _THIS_FILE=/opt/etc/php.ini
  fix_php_ini_redis
  _THIS_FILE=/usr/local/lib/php.ini
  fix_php_ini_redis
  _THIS_FILE=/opt/local/etc/php53.ini
  fix_php_ini_redis
  _THIS_FILE=/opt/local/lib/php.ini
  fix_php_ini_redis
  rm -f /etc/php5/conf.d/{apc.ini,imagick.ini,memcached.ini,redis.ini,suhosin.ini,newrelic.ini} &> /dev/null
  fix_php_ini_newrelic_all
  if [[ "$_THISHOST" =~ ".host8." ]] ; then
    true
  else
    sed -i "s/,shell_exec//g" /opt/etc/php.ini &> /dev/null
    sed -i "s/,shell_exec//g" /opt/local/etc/php53.ini &> /dev/null
  fi
}
#
# Update SQL Config.
update_sql_conf () {
  if [ ! -e "/var/log/check_for_crashed_tables_disabled" ] ; then
    sed -i "s/.*check_for_crashed_tables/#check_for_crashed_tables/g" /etc/mysql/debian-start &> /dev/null
    touch /var/log/check_for_crashed_tables_disabled
  fi
  if [ "$_CUSTOM_CONFIG_SQL" = "NO" ] || [[ "$_THISHOST" =~ ".host8." ]] ; then
    cp -af /etc/mysql/my.cnf /var/backups/dragon/t/my.cnf-pre-$_INSTALLER_VERSION-$_NOW &> /dev/null
    cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/my.cnf.txt /etc/mysql/my.cnf
    sed -i "s/.*slow_query_log/#slow_query_log/g"           /etc/mysql/my.cnf
    sed -i "s/.*long_query_time/#long_query_time/g"         /etc/mysql/my.cnf
    sed -i "s/.*slow_query_log_file/#slow_query_log_file/g" /etc/mysql/my.cnf
  fi
  mv -f /etc/mysql/my.cnf-pre* /var/backups/dragon/t/ &> /dev/null
  sed -i "s/.*default-table-type/#default-table-type/g" /etc/mysql/my.cnf
  sed -i "s/.*language/#language/g" /etc/mysql/my.cnf
  _THIS_DB_SERVER_TEST=`mysql -V 2>&1`
  if [[ "$_THIS_DB_SERVER_TEST" =~ "5.5." ]] ; then
    true
  else
    sed -i "s/.*lc_messages_dir /#lc_messages_dir /g" /etc/mysql/my.cnf
    sed -i "s/.*lc_messages /#lc_messages /g" /etc/mysql/my.cnf
  fi
}
#
# Update Nginx Config.
update_nginx_conf () {
  if [ ! -e "/var/log/nginx-config-fixed-$_INSTALLER_VERSION" ] && [ -d "/var/aegir" ] ; then
    if [ -e "/opt/tmp/$_BOA_REPO_NAME/aegir/conf/nginx.conf" ] && [ -e "/etc/nginx/nginx.conf" ] ; then
      mv -f /etc/nginx/nginx.conf-* /var/backups/dragon/t/ &> /dev/null
      mv -f /etc/nginx/mime.types-pre-* /var/backups/dragon/t/ &> /dev/null
      mv -f /etc/nginx/nginx.conf /var/backups/dragon/t/nginx.conf-pre-$_INSTALLER_VERSION-$_NOW &> /dev/null
      cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/nginx.conf /etc/nginx/nginx.conf
      touch /var/log/nginx-config-fixed-$_INSTALLER_VERSION
    fi
  fi
  if [ -e "/var/aegir/config/server_master/nginx/pre.d" ] ; then
    if [ ! -e "/var/log/nginx-speed-purge-$_INSTALLER_VERSION" ] && [ "$_PURGE_MODE" = "ON" ] ; then
      cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/nginx_speed_purge.conf /var/aegir/config/server_master/nginx/pre.d/nginx_speed_purge.conf
      touch /var/log/nginx-speed-purge-$_INSTALLER_VERSION
    fi
  fi
}
#
# Update global.inc Config.
update_global_inc_conf () {
  if [ -e "/data/conf/global.inc" ] ; then
    mv -f /data/conf/global.inc /data/conf/global.inc-pre-$_INSTALLER_VERSION-$_NOW &> /dev/null
    if [ -e "/var/aegir/config/server_master/nginx/pre.d/nginx_wild_ssl.conf" ] ; then
      cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/global.inc.ssl.aegir.txt /data/conf/global.inc
    else
      cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/global.inc.aegir.txt /data/conf/global.inc
    fi
    sed -i "s/3600/$_SPEED_VALID_MAX/g" /data/conf/global.inc &> /dev/null
  fi
}
#
# Fix this on upgrade.
fix_on_upgrade () {
  sed -i "s/loglevel.*/loglevel warning/g" /etc/redis/redis.conf &> /dev/null
  sed -i "s/^TLS.*/TLS 2/g" /usr/local/etc/pure-ftpd.conf &> /dev/null
  cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/clean-boa-env /etc/init.d/clean-boa-env
  chmod 755 /etc/init.d/clean-boa-env &> /dev/null
  st_runner "update-rc.d clean-boa-env defaults" &> /dev/null
  set_xterm
  kill_nash
  fix_ftps_squeeze
  enable_purge_cruft_machine
  update_php_conf
  update_sql_conf
  update_nginx_conf
  update_global_inc_conf
  update_redis_password
}
#
# Validate server public IP.
validate_public_ip () {
  if [ ! -z "$_LOCAL_NETWORK_IP" ] ; then
    if [ -z "$_LOCAL_NETWORK_HN" ] ; then
      msg "FATAL ERROR: you must specify also _LOCAL_NETWORK_HN"
      exit 1
    else
      _MY_OWNIP="$_LOCAL_NETWORK_IP"
      _MY_HOSTN="$_LOCAL_NETWORK_HN"
      _MY_FRONT="$_LOCAL_NETWORK_HN"
      _THISHTIP="$_LOCAL_NETWORK_IP"
    fi
  else
    _ETH_TEST=`ifconfig 2>&1`
    if [[ "$_ETH_TEST" =~ "venet0" ]] ; then
      _VMFAMILY="VZ"
      _IFCONFIG="venet0"
    elif [ -e "/proc/bean_counters" ] ; then
      _VMFAMILY="VZ"
      _IFCONFIG="venet0"
    else
      _VMFAMILY="XEN"
      _IFCONFIG="eth0"
    fi
    if [ "$_DNS_SETUP_TEST" = "YES" ] ; then
      if [ -z "$_MY_OWNIP" ] ; then
        _THISHTIP=`ifconfig $_IFCONFIG | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}'`
      else
        _THISHTIP="$_MY_OWNIP"
      fi
    else
      if [ -z "$_MY_OWNIP" ] && [ ! -z "$_MY_HOSTN" ] ; then
        _LOC_DOM="$_MY_HOSTN"
        find_correct_ip
        _THISHTIP="$_LOC_IP"
      else
        _THISHTIP="$_MY_OWNIP"
      fi
    fi
  fi
}
#
# Validate server IP for xtras.
validate_xtras_ip () {
  if [ "$_HTTP_WILDCARD" = "YES" ] ; then
    _XTRAS_THISHTIP="*"
  else
    _ETH_TEST=`ifconfig 2>&1`
    if [[ "$_ETH_TEST" =~ "venet0" ]] ; then
      _VMFAMILY="VZ"
      _IFCONFIG="venet0"
    elif [ -e "/proc/bean_counters" ] ; then
      _VMFAMILY="VZ"
      _IFCONFIG="venet0"
    else
      _VMFAMILY="XEN"
      _IFCONFIG="eth0"
    fi
    if [ "$_DNS_SETUP_TEST" = "YES" ] ; then
      if [ -z "$_MY_OWNIP" ] ; then
        _XTRAS_THISHTIP=`ifconfig $_IFCONFIG | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}'`
      else
        _XTRAS_THISHTIP="$_MY_OWNIP"
      fi
    else
      if [ -z "$_MY_OWNIP" ] ; then
        if [ -e "/usr/bin/sipcalc" ] ; then
          if [ -z "$_THISHTIP" ] ; then
            _LOC_DOM="$_THISHOST"
            find_correct_ip
            _THISHTIP="$_LOC_IP"
          fi
          _IP_TEST=`sipcalc $_THISHTIP 2>&1`
          if [[ "$_IP_TEST" =~ "ERR" ]] ; then
            _IP_TEST_RESULT=FAIL
            _XTRAS_THISHTIP="*"
          else
            _IP_TEST_RESULT=OK
            _XTRAS_THISHTIP="$_THISHTIP"
          fi
        else
          _XTRAS_THISHTIP="$_THISHTIP"
        fi
      else
        _XTRAS_THISHTIP="$_MY_OWNIP"
      fi
    fi
    if [ -z "$_XTRAS_THISHTIP" ] ; then
      _XTRAS_THISHTIP="*"
    fi
  fi
}
#
# Validate server IP for purge vhost.
validate_purge_ip () {
  if [ "$_PURGE_ALL_THISHTIP" = "YES" ] ; then
    _PURGE_THISHTIP="0.0.0.0/0"
  else
    _ETH_TEST=`ifconfig 2>&1`
    if [[ "$_ETH_TEST" =~ "venet0" ]] ; then
      _VMFAMILY="VZ"
      _IFCONFIG="venet0"
    elif [ -e "/proc/bean_counters" ] ; then
      _VMFAMILY="VZ"
      _IFCONFIG="venet0"
    else
      _VMFAMILY="XEN"
      _IFCONFIG="eth0"
    fi
    if [ "$_DNS_SETUP_TEST" = "YES" ] ; then
      if [ -z "$_MY_OWNIP" ] ; then
        _PURGE_THISHTIP=`ifconfig $_IFCONFIG | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}'`
      else
        _PURGE_THISHTIP="$_MY_OWNIP"
      fi
    else
      if [ -z "$_MY_OWNIP" ] ; then
        if [ -e "/usr/bin/sipcalc" ] ; then
          if [ -z "$_THISHTIP" ] ; then
            _LOC_DOM="$_THISHOST"
            find_correct_ip
            _THISHTIP="$_LOC_IP"
          fi
          _IP_TEST=`sipcalc $_THISHTIP 2>&1`
          if [[ "$_IP_TEST" =~ "ERR" ]] ; then
            _IP_TEST_RESULT=FAIL
            _PURGE_THISHTIP="0.0.0.0/0"
          else
            _IP_TEST_RESULT=OK
            _PURGE_THISHTIP="$_THISHTIP"
          fi
        else
          _PURGE_THISHTIP="$_THISHTIP"
        fi
      else
        _PURGE_THISHTIP="$_MY_OWNIP"
      fi
    fi
    if [ -z "$_PURGE_THISHTIP" ] ; then
      _PURGE_THISHTIP="0.0.0.0/0"
    fi
  fi
}
#
# Validate local server IP.
validate_local_ip () {
  if [ "$_HTTP_WILDCARD" = "YES" ] ; then
    _LOCAL_THISHTIP=all
  else
    _ETH_TEST=`ifconfig 2>&1`
    if [[ "$_ETH_TEST" =~ "venet0" ]] ; then
      _VMFAMILY="VZ"
      _IFCONFIG="venet0"
    elif [ -e "/proc/bean_counters" ] ; then
      _VMFAMILY="VZ"
      _IFCONFIG="venet0"
    else
      _VMFAMILY="XEN"
      _IFCONFIG="eth0"
    fi
    if [ "$_DNS_SETUP_TEST" = "YES" ] ; then
      if [ -z "$_MY_OWNIP" ] ; then
        _LOCAL_THISHTIP=`ifconfig $_IFCONFIG | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}'`
      else
        _LOCAL_THISHTIP="$_MY_OWNIP"
      fi
    else
      if [ -z "$_MY_OWNIP" ] ; then
        if [ -e "/usr/bin/sipcalc" ] ; then
          if [ -z "$_THISHTIP" ] ; then
            _LOC_DOM="$_THISHOST"
            find_correct_ip
            _THISHTIP="$_LOC_IP"
          fi
          _IP_TEST=`sipcalc $_THISHTIP 2>&1`
          if [[ "$_IP_TEST" =~ "ERR" ]] ; then
            _IP_TEST_RESULT=FAIL
            _LOCAL_THISHTIP=all
          else
            _IP_TEST_RESULT=OK
            _LOCAL_THISHTIP="$_THISHTIP"
          fi
        else
          _LOCAL_THISHTIP="$_THISHTIP"
        fi
      else
        _LOCAL_THISHTIP="$_MY_OWNIP"
      fi
    fi
    if [ -z "$_LOCAL_THISHTIP" ] ; then
      _LOCAL_THISHTIP=all
    fi
  fi
}
#
# Sub Force advanced Nginx configuration.
sub_force_advanced_nginx_config () {
  if [ -d "$_THIS_NGX_PATH" ] ; then
    sed -i "s/data\/disk\/EDIT_USER/var\/aegir/g" $_THIS_NGX_PATH/nginx_octopus_include.conf &> /dev/null
    sed -i "s/data\/disk\/EDIT_USER/var\/aegir/g" $_THIS_NGX_PATH/nginx_modern_include.conf  &> /dev/null
    sed -i "s/data\/disk\/EDIT_USER/var\/aegir/g" $_THIS_NGX_PATH/nginx_legacy_include.conf  &> /dev/null
    if [ "$_PHP_FPM_VERSION" = "5.3" ] && [ -e "/opt/local/etc/php53-fpm.conf" ] ; then
      sed -i "s/127.0.0.1:9000/127.0.0.1:9090/g" $_THIS_NGX_PATH/nginx_octopus_include.conf  &> /dev/null
    fi
  fi
}
#
# Force advanced Nginx configuration.
force_advanced_nginx_config () {
  validate_local_ip &> /dev/null
  _THIS_NGX_PATH=/var/aegir/.drush/provision/http/Provision/Service/http
  sub_force_advanced_nginx_config
  _THIS_NGX_PATH=/var/aegir/config/includes
  sub_force_advanced_nginx_config
  cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/nginx_compact_include.conf /var/aegir/config/includes/nginx_compact_include.conf
  if [ "$_PHP_MODERN_ONLY" = "YES" ] ; then
    sed -i "s/9000/9090/g" /var/aegir/config/includes/nginx_compact_include.conf &> /dev/null
  fi
  if [ ! -L "/var/aegir/config/includes/nginx_advanced_include.conf" ] ; then
    rm -f /var/aegir/config/includes/nginx_advanced_include.conf
    ln -s /var/aegir/config/includes/nginx_octopus_include.conf /var/aegir/config/includes/nginx_advanced_include.conf
  fi
  if [ ! -L "/var/aegir/config/includes/nginx_simple_include.conf" ] ; then
    rm -f /var/aegir/config/includes/nginx_simple_include.conf
    ln -s /var/aegir/config/includes/nginx_legacy_include.conf /var/aegir/config/includes/nginx_simple_include.conf
  fi
  chown aegir:aegir /var/aegir/config/includes/*
  chown aegir:aegir /var/aegir/.drush/provision/http/Provision/Config/Nginx/*
  if [ ! -e "/data/conf/nginx_high_load_off.conf" ] ; then
    mkdir -p /data/conf
    cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/nginx_high_load_off.conf /data/conf/nginx_high_load_off.conf
    chmod 644 /data/conf/nginx_high_load_off.conf &> /dev/null
  fi
}
#
# Tune Web Sever configuration.
tune_web_server_config () {
  let "_LIM_FPM = (($_L_PHP_FPM_WORKERS / 2))"
  if [ ! -z "$_L_PHP_FPM_WORKERS" ] ; then
    sed -i "s/max_children\">.*</max_children\">$_L_PHP_FPM_WORKERS</g"     /opt/etc/php-fpm.conf &> /dev/null
    sed -i "s/pm.max_children =.*/pm.max_children = $_L_PHP_FPM_WORKERS/g"  /opt/local/etc/php53-fpm.conf &> /dev/null
    sed -i "s/pm.start_servers =.*/pm.start_servers = $_LIM_FPM/g"          /opt/local/etc/php53-fpm.conf &> /dev/null
    sed -i "s/pm.max_spare_servers =.*/pm.max_spare_servers = $_LIM_FPM/g"  /opt/local/etc/php53-fpm.conf &> /dev/null
  else
    sed -i "s/max_children\">.*</max_children\">2</g"               /opt/etc/php-fpm.conf &> /dev/null
    sed -i "s/pm.max_children =.*/pm.max_children = 2/g"            /opt/local/etc/php53-fpm.conf &> /dev/null
    sed -i "s/pm.start_servers =.*/pm.start_servers = 1/g"          /opt/local/etc/php53-fpm.conf &> /dev/null
    sed -i "s/pm.max_spare_servers =.*/pm.max_spare_servers = 2/g"  /opt/local/etc/php53-fpm.conf &> /dev/null
  fi
  if [ ! -z "$_L_NGINX_WORKERS" ] ; then
    sed -i "s/worker_processes.*/worker_processes  $_L_NGINX_WORKERS;/g"       /etc/nginx/nginx.conf &> /dev/null
  else
    sed -i "s/worker_processes.*/worker_processes  4;/g"                       /etc/nginx/nginx.conf &> /dev/null
  fi
  sed -i "s/request_slowlog_timeout =.*/request_slowlog_timeout = 30s/g"       /opt/local/etc/php53-fpm.conf &> /dev/null
  sed -i "s/;request_terminate_timeout/request_terminate_timeout/g"            /opt/local/etc/php53-fpm.conf &> /dev/null
  sed -i "s/request_terminate_timeout =.*/request_terminate_timeout = 300s/g"  /opt/local/etc/php53-fpm.conf &> /dev/null
  sed -i "s/emergency_restart_threshold =.*/emergency_restart_threshold = 5/g" /opt/local/etc/php53-fpm.conf &> /dev/null
  sed -i "s/emergency_restart_interval =.*/emergency_restart_interval = 1m/g"  /opt/local/etc/php53-fpm.conf &> /dev/null
  sed -i "s/process_control_timeout =.*/process_control_timeout = 5s/g"        /opt/local/etc/php53-fpm.conf &> /dev/null
}
#
# Tune memory limits for PHP-FPM, Nginx and MariaDB/Percona.
tune_memory_limits () {
  _ETH_TEST=`ifconfig 2>&1`
  _VM_TEST=`uname -a 2>&1`
  if [[ "$_ETH_TEST" =~ "venet0" ]] ; then
    _VMFAMILY="VZ"
  elif [ -e "/proc/bean_counters" ] ; then
    _VMFAMILY="VZ"
  elif [[ "$_THISHOST" =~ ".host8." ]] && [ -e "/boot/grub/menu.lst" ] ; then
    _VMFAMILY="TG"
  else
    _VMFAMILY="XEN"
  fi
  if [[ "$_VM_TEST" =~ beng ]] ; then
    _VMFAMILY="VS"
  fi
  _RAM=`free -mto | grep Mem: | awk '{ print $2 }'`
  let "_USE = (($_RAM / 4))"
  if [[ "$_THISHOST" =~ ".host8." ]] ; then
    if [ "$_VMFAMILY" = "VS" ] && [ ! -e "/boot/grub/menu.lst" ] ; then
      let "_USE_SQL = (($_RAM / 32))"
    else
      let "_USE_SQL = (($_RAM / 6))"
    fi
  else
    let "_USE_SQL = (($_RAM / 4))"
  fi
  if [ "$_USE" -ge "512" ] && [ "$_USE" -lt "1024" ] ; then
    _USE_PHP=512
    _USE_APC=512
    if [ "$_PHP_FPM_WORKERS" = "AUTO" ] ; then
      _L_PHP_FPM_WORKERS=4
    else
      _L_PHP_FPM_WORKERS=$_PHP_FPM_WORKERS
    fi
    if [ "$_NGINX_WORKERS" = "AUTO" ] ; then
      _L_NGINX_WORKERS=4
    else
      _L_NGINX_WORKERS=$_NGINX_WORKERS
    fi
  elif [ "$_USE" -ge "1024" ] ; then
    if [ "$_VMFAMILY" = "XEN" ] ; then
      _USE_PHP=512
      _USE_APC=1024
      if [ "$_PHP_FPM_WORKERS" = "AUTO" ] ; then
        _L_PHP_FPM_WORKERS=8
      else
        _L_PHP_FPM_WORKERS=$_PHP_FPM_WORKERS
      fi
      if [ "$_NGINX_WORKERS" = "AUTO" ] ; then
        _L_NGINX_WORKERS=8
      else
        _L_NGINX_WORKERS=$_NGINX_WORKERS
      fi
    elif [ "$_VMFAMILY" = "VS" ] || [ "$_VMFAMILY" = "TG" ] ; then
      _USE_PHP=512
      if [ -e "/boot/grub/menu.lst" ] || [ -e "/root/.tg.cnf" ] ; then
        _USE_APC=1024
        if [ "$_PHP_FPM_WORKERS" = "AUTO" ] ; then
          _L_PHP_FPM_WORKERS=8
        else
          _L_PHP_FPM_WORKERS=$_PHP_FPM_WORKERS
        fi
        if [ "$_NGINX_WORKERS" = "AUTO" ] ; then
          _L_NGINX_WORKERS=8
        else
          _L_NGINX_WORKERS=$_NGINX_WORKERS
        fi
      else
        _USE_APC=256
        if [ "$_PHP_FPM_WORKERS" = "AUTO" ] ; then
          _L_PHP_FPM_WORKERS=2
        else
          _L_PHP_FPM_WORKERS=$_PHP_FPM_WORKERS
        fi
        if [ "$_NGINX_WORKERS" = "AUTO" ] ; then
          _L_NGINX_WORKERS=4
        else
          _L_NGINX_WORKERS=$_NGINX_WORKERS
        fi
      fi
    else
      _USE_PHP=256
      _USE_APC=128
      if [ "$_PHP_FPM_WORKERS" = "AUTO" ] ; then
        _L_PHP_FPM_WORKERS=2
      else
        _L_PHP_FPM_WORKERS=$_PHP_FPM_WORKERS
      fi
      if [ "$_NGINX_WORKERS" = "AUTO" ] ; then
        _L_NGINX_WORKERS=4
      else
        _L_NGINX_WORKERS=$_NGINX_WORKERS
      fi
    fi
  else
    _USE_PHP="$_USE"
    _USE_APC="$_USE"
    if [ "$_PHP_FPM_WORKERS" = "AUTO" ] ; then
      _L_PHP_FPM_WORKERS=2
    else
      _L_PHP_FPM_WORKERS=$_PHP_FPM_WORKERS
    fi
    if [ "$_NGINX_WORKERS" = "AUTO" ] ; then
      _L_NGINX_WORKERS=4
    else
      _L_NGINX_WORKERS=$_NGINX_WORKERS
    fi
  fi
  if [ "$_VMFAMILY" = "VZ" ] ; then
    _USE_APC=64
  fi
  let "_USE_FPM = (($_USE_PHP / 2))"
  if [ "$_USE_FPM" -lt "128" ] ; then
    _USE_FPM=128
  fi
  if [ "$_USE_PHP" -lt "256" ] ; then
    _USE_PHP=256
  fi
  sed -i "s/256/$_USE_FPM/g" /opt/etc/php.ini &> /dev/null
  sed -i "s/88/$_USE_APC/g"  /opt/etc/php.ini &> /dev/null
  if [ -e "/opt/local/etc/php53.ini" ] ; then
    sed -i "s/256/$_USE_FPM/g" /opt/local/etc/php53.ini &> /dev/null
    sed -i "s/88/$_USE_APC/g"  /opt/local/etc/php53.ini &> /dev/null
  fi
  sed -i "s/256/$_USE_PHP/g" /usr/local/lib/php.ini &> /dev/null
  sed -i "s/256/$_USE_PHP/g" /opt/local/lib/php.ini &> /dev/null
  sed -i "s/88/$_USE_SQL/g"  /etc/mysql/my.cnf
  sed -i "s/88/$_USE_APC/g"  /etc/redis/redis.conf &> /dev/null
  if [[ "$_THISHOST" =~ ".host8." ]] ; then
    sed -i "s/^connect_timeout.*/connect_timeout         = 30/g"            /etc/mysql/my.cnf
    sed -i "s/^join_buffer_size.*/join_buffer_size        = 2M/g"           /etc/mysql/my.cnf
    sed -i "s/^max_connections.*/max_connections         = 80/g"            /etc/mysql/my.cnf
    sed -i "s/^max_user_connections.*/max_user_connections    = 80/g"       /etc/mysql/my.cnf
    sed -i "s/^key_buffer.*/key_buffer              = 2M/g"                 /etc/mysql/my.cnf
    sed -i "s/^query_cache_size.*/query_cache_size        = 256M/g"         /etc/mysql/my.cnf
    sed -i "s/^read_rnd_buffer_size.*/read_rnd_buffer_size    = 8M/g"       /etc/mysql/my.cnf
    sed -i "s/^tmp_table_size.*/tmp_table_size          = 128M/g"           /etc/mysql/my.cnf
    sed -i "s/^max_heap_table_size.*/max_heap_table_size     = 256M/g"      /etc/mysql/my.cnf
    sed -i "s/^myisam_sort_buffer_size.*/myisam_sort_buffer_size = 2048K/g" /etc/mysql/my.cnf
  fi
  tune_web_server_config
}
#
# Fix locales.
fix_locales () {
  _LOC_TEST=`locale 2>&1`
  if [[ "$_LOC_TEST" =~ "Cannot" ]] ; then
    _LOCALE_TEST=BROKEN
    msg "WARNING!"
    cat <<EOF

  Locales on this system are broken or not installed
  and/or not configured correctly yet. This is "default"
  issue at RackSpaceCloud (and maybe others).

  We will fix this problem for you now, so you shouldn't
  use any tricks to change system/ssh settings before
  running this Barracuda installer.

  You can experience problems if your SSH client
  forces locales other than en_US.UTF-8 we are using by default.

  You should log out when Barracuda will finish all its tasks
  and display last line with "BYE!" and then log in again
  to see the result (and possibly run Octopus installer).

  We will continue in 10 seconds...

EOF
    sleep 10
    locale-gen en_US en_US.UTF-8 &> /dev/null
    update-locale &> /dev/null
    localedef -v -c -i en_US -f UTF-8 en_US.UTF-8 &> /dev/null
    echo "LANG=en_US.UTF-8" > /etc/default/locale
    export LANG=en_US.UTF-8
    export LC_ALL=en_US.UTF-8
    export LANGUAGE=en_US.UTF-8
    echo "export LANG=en_US.UTF-8" >> /root/.bashrc
    echo "export LC_ALL=en_US.UTF-8" >> /root/.bashrc
    echo "export LANGUAGE=en_US.UTF-8" >> /root/.bashrc
  else
    _LOCALE_TEST=OK
    locale-gen en_US en_US.UTF-8 &> /dev/null
    localedef -v -c -i en_US -f UTF-8 en_US.UTF-8 &> /dev/null
  fi
}
#
# Read or create Barracuda cnf file.
barracuda_cnf () {
  if [ ! -e "/root/.barracuda.cnf" ] ; then
    if [[ "$_MY_EMAIL" =~ "omega8.cc" ]] ; then
      _CHECK_HOST=`uname -n`
      if [ -e "/root/.host8.cnf" ] || [[ "$_CHECK_HOST" =~ ".host8." ]] ; then
        true
      else
        msg "EXIT: You must enter **your** valid e-mail address in the _MY_EMAIL variable"
        msg "EXIT: Bye (1)"
        exit 1
      fi
    fi
    if [ -x "/usr/local/bin/php" ] ; then
      _PHP_MODERN_ONLY=NO
    fi
    if [ "$_PHP_MODERN_ONLY" = "YES" ] ; then
      _PHP_FPM_VERSION=5.3
      _PHP_CLI_VERSION=5.3
    fi
    msg "INFO: Creating your /root/.barracuda.cnf config file"
    sleep 1
    echo "###" > /root/.barracuda.cnf
    echo "### Configuration created on $_NOW" >> /root/.barracuda.cnf
    echo "### with Barracuda version $_INSTALLER_VERSION" >> /root/.barracuda.cnf
    echo "###" >> /root/.barracuda.cnf
    echo "### NOTE: the group of settings displayed bellow will *not* be overriden" >> /root/.barracuda.cnf
    echo "### on upgrade by the Barracuda script nor by this configuration file." >> /root/.barracuda.cnf
    echo "### They can be defined only on initial Barracuda install." >> /root/.barracuda.cnf
    echo "###" >> /root/.barracuda.cnf
    echo "_HTTP_WILDCARD=$_HTTP_WILDCARD" >> /root/.barracuda.cnf
    echo "_MY_OWNIP=\"$_MY_OWNIP\"" >> /root/.barracuda.cnf
    echo "_MY_HOSTN=\"$_MY_HOSTN\"" >> /root/.barracuda.cnf
    echo "_MY_FRONT=\"$_MY_FRONT\"" >> /root/.barracuda.cnf
    echo "_THIS_DB_HOST=$_THIS_DB_HOST" >> /root/.barracuda.cnf
    echo "_SMTP_RELAY_TEST=$_SMTP_RELAY_TEST" >> /root/.barracuda.cnf
    echo "_SMTP_RELAY_HOST=\"$_SMTP_RELAY_HOST\"" >> /root/.barracuda.cnf
    echo "_LOCAL_NETWORK_IP=\"$_LOCAL_NETWORK_IP\"" >> /root/.barracuda.cnf
    echo "_LOCAL_NETWORK_HN=\"$_LOCAL_NETWORK_HN\"" >> /root/.barracuda.cnf
    echo "###" >> /root/.barracuda.cnf
    echo "### NOTE: the group of settings displayed bellow" >> /root/.barracuda.cnf
    echo "### will *override* all listed settings in the Barracuda script," >> /root/.barracuda.cnf
    echo "### both on initial install and upgrade." >> /root/.barracuda.cnf
    echo "###" >> /root/.barracuda.cnf
    echo "_MY_EMAIL=\"$_MY_EMAIL\"" >> /root/.barracuda.cnf
    echo "_XTRAS_LIST=\"$_XTRAS_LIST\"" >> /root/.barracuda.cnf
    echo "_AUTOPILOT=$_AUTOPILOT" >> /root/.barracuda.cnf
    echo "_DEBUG_MODE=$_DEBUG_MODE" >> /root/.barracuda.cnf
    echo "_DB_SERVER=$_DB_SERVER" >> /root/.barracuda.cnf
    echo "_SSH_PORT=$_SSH_PORT" >> /root/.barracuda.cnf
    echo "_LOCAL_DEBIAN_MIRROR=\"$_LOCAL_DEBIAN_MIRROR\"" >> /root/.barracuda.cnf
    echo "_LOCAL_UBUNTU_MIRROR=\"$_LOCAL_UBUNTU_MIRROR\"" >> /root/.barracuda.cnf
    echo "_FORCE_GIT_MIRROR=\"$_FORCE_GIT_MIRROR\"" >> /root/.barracuda.cnf
    echo "_DNS_SETUP_TEST=$_DNS_SETUP_TEST" >> /root/.barracuda.cnf
    echo "_NGINX_EXTRA_CONF=\"$_NGINX_EXTRA_CONF\"" >> /root/.barracuda.cnf
    echo "_NGINX_WORKERS=$_NGINX_WORKERS" >> /root/.barracuda.cnf
    echo "_PHP_FPM_WORKERS=$_PHP_FPM_WORKERS" >> /root/.barracuda.cnf
    echo "_BUILD_FROM_SRC=$_BUILD_FROM_SRC" >> /root/.barracuda.cnf
    echo "_PHP_MODERN_ONLY=$_PHP_MODERN_ONLY" >> /root/.barracuda.cnf
    echo "_PHP_FPM_VERSION=$_PHP_FPM_VERSION" >> /root/.barracuda.cnf
    echo "_PHP_CLI_VERSION=$_PHP_CLI_VERSION" >> /root/.barracuda.cnf
    echo "_LOAD_LIMIT_ONE=$_LOAD_LIMIT_ONE" >> /root/.barracuda.cnf
    echo "_LOAD_LIMIT_TWO=$_LOAD_LIMIT_TWO" >> /root/.barracuda.cnf
    echo "_CUSTOM_CONFIG_CSF=$_CUSTOM_CONFIG_CSF" >> /root/.barracuda.cnf
    echo "_CUSTOM_CONFIG_SQL=$_CUSTOM_CONFIG_SQL" >> /root/.barracuda.cnf
    echo "_CUSTOM_CONFIG_REDIS=$_CUSTOM_CONFIG_REDIS" >> /root/.barracuda.cnf
    echo "_CUSTOM_CONFIG_PHP_5_2=$_CUSTOM_CONFIG_PHP_5_2" >> /root/.barracuda.cnf
    echo "_CUSTOM_CONFIG_PHP_5_3=$_CUSTOM_CONFIG_PHP_5_3" >> /root/.barracuda.cnf
    echo "_SPEED_VALID_MAX=$_SPEED_VALID_MAX" >> /root/.barracuda.cnf
    echo "_NGINX_DOS_LIMIT=$_NGINX_DOS_LIMIT" >> /root/.barracuda.cnf
    echo "_SYSTEM_UPGRADE_ONLY=$_SYSTEM_UPGRADE_ONLY" >> /root/.barracuda.cnf
    echo "_USE_MEMCACHED=$_USE_MEMCACHED" >> /root/.barracuda.cnf
    echo "###" >> /root/.barracuda.cnf
    echo "### Configuration created on $_NOW" >> /root/.barracuda.cnf
    echo "### with Barracuda version $_INSTALLER_VERSION" >> /root/.barracuda.cnf
    echo "###" >> /root/.barracuda.cnf
  else
    msg "INFO: Reading your /root/.barracuda.cnf config file"
    sleep 1
    msg "NOTE! Please review all config options displayed below"
    msg "NOTE! It will *override* all settings in the Barracuda script"
    if [ -x "/usr/local/bin/php" ] ; then
      _PHP_MODERN_ONLY=NO
    fi
    if [ "$_PHP_MODERN_ONLY" = "YES" ] ; then
      _PHP_FPM_VERSION=5.3
      _PHP_CLI_VERSION=5.3
    fi
    sed -i "s/_SPEED_VALID_MAX=300/_SPEED_VALID_MAX=3600/g" /root/.barracuda.cnf &> /dev/null
    _PHP_FORCE_REINSTALL_TEST=$(grep _PHP_FORCE_REINSTALL /root/.barracuda.cnf)
    if [[ "$_PHP_FORCE_REINSTALL_TEST" =~ "_PHP_FORCE_REINSTALL" ]] ; then
      sed -i "s/.*_PHP_FORCE_REINSTALL.*//g" /root/.barracuda.cnf &> /dev/null
      sed -i "/^$/d" /root/.barracuda.cnf &> /dev/null
    fi
    _SQL_FORCE_REINSTALL_TEST=$(grep _SQL_FORCE_REINSTALL /root/.barracuda.cnf)
    if [[ "$_SQL_FORCE_REINSTALL_TEST" =~ "_SQL_FORCE_REINSTALL" ]] ; then
      sed -i "s/.*_SQL_FORCE_REINSTALL.*//g" /root/.barracuda.cnf &> /dev/null
      sed -i "/^$/d" /root/.barracuda.cnf &> /dev/null
    fi
    _USE_SPEED_BOOSTER_TEST=$(grep _USE_SPEED_BOOSTER /root/.barracuda.cnf)
    if [[ "$_USE_SPEED_BOOSTER_TEST" =~ "_USE_SPEED_BOOSTER" ]] ; then
      sed -i "s/.*_USE_SPEED_BOOSTER.*/### _USE_SPEED_BOOSTER=YES ### Enabled by default/g" /root/.barracuda.cnf &> /dev/null
    fi
    _WORKERS_TEST=$(grep _NGINX_WORKERS /root/.barracuda.cnf)
    if [[ "$_WORKERS_TEST" =~ "_NGINX_WORKERS" ]] ; then
      true
    else
      echo "_NGINX_WORKERS=$_NGINX_WORKERS" >> /root/.barracuda.cnf
      echo "_PHP_FPM_WORKERS=$_PHP_FPM_WORKERS" >> /root/.barracuda.cnf
    fi
    _PHP_INSTALL_NEW_TEST=$(grep _PHP_INSTALL_NEW /root/.barracuda.cnf)
    if [[ "$_PHP_INSTALL_NEW_TEST" =~ "_PHP_INSTALL_NEW" ]] ; then
      sed -i "s/.*_PHP_INSTALL_NEW.*//g" /root/.barracuda.cnf &> /dev/null
      sed -i "/^$/d" /root/.barracuda.cnf &> /dev/null
    fi
    _PHP_MODERN_ONLY_TEST=$(grep _PHP_MODERN_ONLY /root/.barracuda.cnf)
    if [[ "$_PHP_MODERN_ONLY_TEST" =~ "_PHP_MODERN_ONLY" ]] ; then
      if [[ "$_PHP_MODERN_ONLY_TEST" =~ "YES" ]] && [ ! -x "/usr/local/bin/php" ] ; then
        _PHP_MODERN_ONLY=YES
        _PHP_FPM_VERSION=5.3
        _PHP_CLI_VERSION=5.3
      fi
      if [ -x "/usr/local/bin/php" ] ; then
        _PHP_MODERN_ONLY=NO
        sed -i "s/.*_PHP_MODERN_ONLY.*/_PHP_MODERN_ONLY=$_PHP_MODERN_ONLY/g" /root/.barracuda.cnf &> /dev/null
      fi
    else
      echo "_PHP_MODERN_ONLY=$_PHP_MODERN_ONLY" >> /root/.barracuda.cnf
    fi
    _PHP_FPM_VERSION_TEST=$(grep _PHP_FPM_VERSION /root/.barracuda.cnf)
    if [[ "$_PHP_FPM_VERSION_TEST" =~ "_PHP_FPM_VERSION" ]] ; then
      if [ "$_PHP_MODERN_ONLY" = "YES" ] && [ ! -x "/usr/local/bin/php" ] ; then
        _PHP_FPM_VERSION=5.3
        sed -i "s/.*_PHP_FPM_VERSION.*/_PHP_FPM_VERSION=$_PHP_FPM_VERSION/g" /root/.barracuda.cnf &> /dev/null
      fi
    else
      echo "_PHP_FPM_VERSION=$_PHP_FPM_VERSION" >> /root/.barracuda.cnf
    fi
    _PHP_CLI_VERSION_TEST=$(grep _PHP_CLI_VERSION /root/.barracuda.cnf)
    if [[ "$_PHP_CLI_VERSION_TEST" =~ "_PHP_CLI_VERSION" ]] ; then
      if [ "$_PHP_MODERN_ONLY" = "YES" ] && [ ! -x "/usr/local/bin/php" ] ; then
        _PHP_CLI_VERSION=5.3
        sed -i "s/.*_PHP_CLI_VERSION.*/_PHP_CLI_VERSION=$_PHP_CLI_VERSION/g" /root/.barracuda.cnf &> /dev/null
      fi
    else
      echo "_PHP_CLI_VERSION=$_PHP_CLI_VERSION" >> /root/.barracuda.cnf
    fi
    _LOAD_LIMIT_ONE_TEST=$(grep _LOAD_LIMIT_ONE /root/.barracuda.cnf)
    if [[ "$_LOAD_LIMIT_ONE_TEST" =~ "_LOAD_LIMIT_ONE" ]] ; then
      true
    else
      echo "_LOAD_LIMIT_ONE=$_LOAD_LIMIT_ONE" >> /root/.barracuda.cnf
    fi
    _LOAD_LIMIT_TWO_TEST=$(grep _LOAD_LIMIT_TWO /root/.barracuda.cnf)
    if [[ "$_LOAD_LIMIT_TWO_TEST" =~ "_LOAD_LIMIT_TWO" ]] ; then
      true
    else
      echo "_LOAD_LIMIT_TWO=$_LOAD_LIMIT_TWO" >> /root/.barracuda.cnf
    fi
    _CUSTOM_CONFIG_CSF_TEST=$(grep _CUSTOM_CONFIG_CSF /root/.barracuda.cnf)
    if [[ "$_CUSTOM_CONFIG_CSF_TEST" =~ "_CUSTOM_CONFIG_CSF" ]] ; then
      if [ -e "/var/log/custom.csf.log" ] ; then
        sed -i "s/.*_CUSTOM_CONFIG_CSF.*/_CUSTOM_CONFIG_CSF=YES ### Forced because /var/log/custom.csf.log exists./g" /root/.barracuda.cnf &> /dev/null
      fi
    else
      if [ -e "/var/log/custom.csf.log" ] ; then
        echo "_CUSTOM_CONFIG_CSF=YES" >> /root/.barracuda.cnf
      else
        echo "_CUSTOM_CONFIG_CSF=$_CUSTOM_CONFIG_CSF" >> /root/.barracuda.cnf
      fi
    fi
    _CUSTOM_CONFIG_SQL_TEST=$(grep _CUSTOM_CONFIG_SQL /root/.barracuda.cnf)
    if [[ "$_CUSTOM_CONFIG_SQL_TEST" =~ "_CUSTOM_CONFIG_SQL" ]] ; then
      if [ -e "/etc/mysql/custom.my.cnf" ] ; then
        sed -i "s/.*_CUSTOM_CONFIG_SQL.*/_CUSTOM_CONFIG_SQL=YES ### Forced because /etc/mysql/custom.my.cnf exists./g" /root/.barracuda.cnf &> /dev/null
      fi
    else
      if [ -e "/etc/mysql/custom.my.cnf" ] ; then
        echo "_CUSTOM_CONFIG_SQL=YES" >> /root/.barracuda.cnf
      else
        echo "_CUSTOM_CONFIG_SQL=$_CUSTOM_CONFIG_SQL" >> /root/.barracuda.cnf
      fi
    fi
    _CUSTOM_CONFIG_PHP_5_2_TEST=$(grep _CUSTOM_CONFIG_PHP_5_2 /root/.barracuda.cnf)
    if [[ "$_CUSTOM_CONFIG_PHP_5_2_TEST" =~ "_CUSTOM_CONFIG_PHP_5_2" ]] ; then
      if [ -e "/opt/etc/custom.php.ini" ] ; then
        sed -i "s/.*_CUSTOM_CONFIG_PHP_5_2.*/_CUSTOM_CONFIG_PHP_5_2=YES ### Forced because /opt/etc/custom.php.ini exists./g" /root/.barracuda.cnf &> /dev/null
      fi
    else
      if [ -e "/opt/etc/custom.php.ini" ] ; then
        echo "_CUSTOM_CONFIG_PHP_5_2=YES" >> /root/.barracuda.cnf
      else
        echo "_CUSTOM_CONFIG_PHP_5_2=$_CUSTOM_CONFIG_PHP_5_2" >> /root/.barracuda.cnf
      fi
    fi
    _CUSTOM_CONFIG_PHP_5_3_TEST=$(grep _CUSTOM_CONFIG_PHP_5_3 /root/.barracuda.cnf)
    if [[ "$_CUSTOM_CONFIG_PHP_5_3_TEST" =~ "_CUSTOM_CONFIG_PHP_5_3" ]] ; then
      if [ -e "/opt/etc/custom.php53.ini" ] ; then
        sed -i "s/.*_CUSTOM_CONFIG_PHP_5_3.*/_CUSTOM_CONFIG_PHP_5_3=YES ### Forced because /opt/etc/custom.php53.ini exists./g" /root/.barracuda.cnf &> /dev/null
      fi
    else
      if [ -e "/opt/etc/custom.php53.ini" ] ; then
        echo "_CUSTOM_CONFIG_PHP_5_3=YES" >> /root/.barracuda.cnf
      else
        echo "_CUSTOM_CONFIG_PHP_5_3=$_CUSTOM_CONFIG_PHP_5_3" >> /root/.barracuda.cnf
      fi
    fi
    _SPEED_VALID_MAX_TEST=$(grep _SPEED_VALID_MAX /root/.barracuda.cnf)
    if [[ "$_SPEED_VALID_MAX_TEST" =~ "_SPEED_VALID_MAX" ]] ; then
      true
    else
      echo "_SPEED_VALID_MAX=$_SPEED_VALID_MAX" >> /root/.barracuda.cnf
    fi
    _NGINX_DOS_LIMIT_TEST=$(grep _NGINX_DOS_LIMIT /root/.barracuda.cnf)
    if [[ "$_NGINX_DOS_LIMIT_TEST" =~ "_NGINX_DOS_LIMIT" ]] ; then
      true
    else
      echo "_NGINX_DOS_LIMIT=$_NGINX_DOS_LIMIT" >> /root/.barracuda.cnf
    fi
    _SYSTEM_UPGRADE_ONLY_TEST=$(grep _SYSTEM_UPGRADE_ONLY /root/.barracuda.cnf)
    if [[ "$_SYSTEM_UPGRADE_ONLY_TEST" =~ "_SYSTEM_UPGRADE_ONLY" ]] ; then
      true
    else
      echo "_SYSTEM_UPGRADE_ONLY=$_SYSTEM_UPGRADE_ONLY" >> /root/.barracuda.cnf
    fi
    _USE_MEMCACHED_TEST=$(grep _USE_MEMCACHED /root/.barracuda.cnf)
    if [[ "$_USE_MEMCACHED_TEST" =~ "_USE_MEMCACHED" ]] ; then
      true
    else
      echo "_USE_MEMCACHED=$_USE_MEMCACHED" >> /root/.barracuda.cnf
    fi
    _CUSTOM_CONFIG_REDIS_TEST=$(grep _CUSTOM_CONFIG_REDIS /root/.barracuda.cnf)
    if [[ "$_CUSTOM_CONFIG_REDIS_TEST" =~ "_CUSTOM_CONFIG_REDIS" ]] ; then
      true
    else
      echo "_CUSTOM_CONFIG_REDIS=$_CUSTOM_CONFIG_REDIS" >> /root/.barracuda.cnf
    fi
    _BUILD_FROM_SRC_TEST=$(grep _BUILD_FROM_SRC /root/.barracuda.cnf)
    if [[ "$_BUILD_FROM_SRC_TEST" =~ "_BUILD_FROM_SRC" ]] ; then
      true
    else
      echo "_BUILD_FROM_SRC=$_BUILD_FROM_SRC" >> /root/.barracuda.cnf
    fi
    _USE_RESTRICTED_WWW_SHELL_TEST=$(grep _USE_RESTRICTED_WWW_SHELL /root/.barracuda.cnf)
    if [[ "$_USE_RESTRICTED_WWW_SHELL_TEST" =~ "_USE_RESTRICTED_WWW_SHELL" ]] ; then
      sed -i "s/.*_USE_RESTRICTED_WWW_SHELL.*//g" /root/.barracuda.cnf &> /dev/null
      sed -i "/^$/d" /root/.barracuda.cnf &> /dev/null
    fi
    sleep 1
    echo " "
    while read line ; do
      echo "$line"
    done < /root/.barracuda.cnf
    echo " "
    source /root/.barracuda.cnf
    if [[ "$_MY_EMAIL" =~ "omega8.cc" ]] ; then
      _CHECK_HOST=`uname -n`
      if [ -e "/root/.host8.cnf" ] || [[ "$_CHECK_HOST" =~ ".host8." ]] ; then
        true
      else
        msg "EXIT: You must enter **your** valid e-mail address in the _MY_EMAIL variable"
        msg "EXIT: stored in the /root/.barracuda.cnf config file"
        msg "EXIT: Bye (2)"
        exit 1
      fi
    fi
    if [ -x "/usr/local/bin/php" ] ; then
      _PHP_MODERN_ONLY=NO
    fi
    if [ "$_PHP_MODERN_ONLY" = "YES" ] ; then
      _PHP_FPM_VERSION=5.3
      _PHP_CLI_VERSION=5.3
    fi
    if [ "$_STATUS" = "INIT" ] ; then
      if prompt_yes_no "Do you want to proceed with the install?" ; then
        true
      else
        echo "Installation aborted by you"
        exit 1
      fi
    else
      if prompt_yes_no "Do you want to proceed with the upgrade?" ; then
        true
      else
        echo "Upgrade aborted by you"
        exit 1
      fi
    fi
  fi
}
#
# Running apt update.
run_apt_update_again () {
  msg "INFO: Running aptitude full-upgrade again, please wait..."
  st_runner "dpkg --configure --force-all -a" 2> /dev/null
  st_runner "aptitude update -y" &> /dev/null
  st_runner "aptitude clean -y" &> /dev/null
  st_runner "aptitude -f -y -q -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confold full-upgrade" 2> /dev/null
}
#
# Install IonCube.
install_ioncube () {
  ###--------------------###
  if [ ! -e "/usr/local/ioncube" ] || [ "$_FULL_FORCE_REINSTALL" = "YES" ] ; then
    mkdir -p /usr/local/ioncube
    _X86_64_TEST=`uname -m`
    if [ "$_X86_64_TEST" = "x86_64" ] ; then
      SYSTEMARCH="x86_64"
      msg "INFO: Installing IonCube $SYSTEMARCH version for PHP-FPM, please wait..."
      mrun "sleep 1"
      cd /var/opt
      wget -q -U iCab http://files.aegir.cc/dev/ioncube_loaders_lin_x86-64.tar.gz
      tar -xzf ioncube_loaders_lin_x86-64.tar.gz
    else
      SYSTEMARCH="x86"
      msg "INFO: Installing IonCube $SYSTEMARCH version for PHP-FPM, please wait..."
      mrun "sleep 1"
      cd /var/opt
      wget -q -U iCab http://files.aegir.cc/dev/ioncube_loaders_lin_x86.tar.gz
      tar -xzf ioncube_loaders_lin_x86.tar.gz
    fi
    cp -af /var/opt/ioncube/* /usr/local/ioncube/ &> /dev/null
  fi
}
#
# Install libmemcached.
install_libmemcached () {
  ###--------------------###
  if [ ! -e "/var/log/fixed-libmemcached-0.53.log" ] || [ "$_FULL_FORCE_REINSTALL" = "YES" ] ; then
    msg "INFO: Installing libmemcached for PHP-FPM, please wait..."
    mrun "sleep 1"
    cd /var/opt
    wget -q -U iCab http://files.aegir.cc/dev/libmemcached-0.53.tar.gz
    tar -xzf libmemcached-0.53.tar.gz
    if [ -e "/var/opt/libmemcached-0.53" ] ; then
      cd /var/opt/libmemcached-0.53
      st_runner "sh ./configure" 2> /dev/null
      st_runner "make --quiet" 2> /dev/null
      st_runner "make --quiet install" 2> /dev/null
      echo "libmemcached-0.53" > /var/log/fixed-libmemcached-0.53.log
    fi
  fi
}
#
# Install extensions for PHP universal
install_php_extensions () {
  ###--------------------###
  msg "INFO: Installing APC for PHP-FPM $_LOC_PHP_VERSION, please wait..."
  mrun "sleep 1"
  cd /var/opt
  rm -f -r APC*
  wget -q -U iCab http://files.aegir.cc/dev/APC-$_APC_VERSION.tgz
  tar -xzf APC-$_APC_VERSION.tgz
  cd /var/opt/APC-$_APC_VERSION
  st_runner "$_LOC_PHP_PATH/phpize" 2> /dev/null
  st_runner "sh ./configure --with-php-config=$_LOC_PHP_PATH/php-config" 2> /dev/null
  st_runner "make --quiet" 2> /dev/null
  st_runner "make --quiet install" 2> /dev/null
  echo "apc-$_APC_VERSION $_LOC_PHP_VERSION $_NOW" > /var/log/apc-$_APC_VERSION-$_LOC_PHP_VERSION.log
  ###--------------------###
  msg "INFO: Installing Imagick for PHP-FPM $_LOC_PHP_VERSION, please wait..."
  mrun "sleep 1"
  cd /var/opt
  rm -f -r imagick*
  wget -q -U iCab http://files.aegir.cc/dev/imagick-$_IMAGICK_VERSION.tgz
  tar -xzf imagick-$_IMAGICK_VERSION.tgz
  cd /var/opt/imagick-$_IMAGICK_VERSION
  st_runner "$_LOC_PHP_PATH/phpize" 2> /dev/null
  st_runner "sh ./configure --with-php-config=$_LOC_PHP_PATH/php-config" 2> /dev/null
  st_runner "make --quiet" 2> /dev/null
  st_runner "make --quiet install" 2> /dev/null
  echo "imagick-$_IMAGICK_VERSION $_LOC_PHP_VERSION $_NOW" > /var/log/imagick-$_IMAGICK_VERSION-$_LOC_PHP_VERSION.log
  ###--------------------###
  if [ "$_USE_MEMCACHED" = "YES" ] ; then
    msg "INFO: Installing memcached for PHP-FPM $_LOC_PHP_VERSION, please wait..."
    mrun "sleep 1"
    if [ "$_REL_VERSION" = "oneiric" ] || [ "$_REL_VERSION" = "precise" ] ; then
      st_runner "$_INSTAPP libcloog-ppl0" 2> /dev/null
    fi
    if [ "$_FROM_SOURCES" = "NO" ] ; then
      st_runner "$_INSTAPP php5-memcached" 2> /dev/null
    else
      cd /var/opt
      rm -f -r memcached*
      wget -q -U iCab http://files.aegir.cc/dev/memcached-1.0.2.tgz
      tar -xzf memcached-1.0.2.tgz
      if [ -e "/var/opt/memcached-1.0.2" ] ; then
        cd /var/opt/memcached-1.0.2
        st_runner "$_LOC_PHP_PATH/phpize" 2> /dev/null
        st_runner "sh ./configure --with-php-config=$_LOC_PHP_PATH/php-config" 2> /dev/null
        st_runner "make --quiet" 2> /dev/null
        st_runner "make --quiet install" 2> /dev/null
        echo "memcached-1.0.2-$_LOC_PHP_VERSION" > /var/log/fixed-memcached-1.0.2-$_LOC_PHP_VERSION.log
        mrun "sleep 1"
      fi
    fi
  fi
  ###--------------------###
  msg "INFO: Installing Suhosin for PHP-FPM $_LOC_PHP_VERSION, please wait..."
  mrun "sleep 1"
  cd /var/opt
  rm -f -r suhosin*
  wget -q -U iCab http://files.aegir.cc/dev/suhosin-0.9.33.tgz
  tar -xzf suhosin-0.9.33.tgz
  cd /var/opt/suhosin-0.9.33
  st_runner "$_LOC_PHP_PATH/phpize" 2> /dev/null
  st_runner "sh ./configure --with-php-config=$_LOC_PHP_PATH/php-config" 2> /dev/null
  st_runner "make --quiet" 2> /dev/null
  st_runner "make --quiet install" 2> /dev/null
}
#
# Install more extensions for PHP universal
install_php_extensions_more () {
  ###--------------------###
  msg "INFO: Installing MailParse for PHP-FPM $_LOC_PHP_VERSION, please wait..."
  mrun "sleep 1"
  cd /var/opt
  rm -f -r mailparse*
  wget -q -U iCab http://files.aegir.cc/dev/mailparse-2.1.5.tgz
  tar -xzf mailparse-2.1.5.tgz
  cd /var/opt/mailparse-2.1.5
  st_runner "$_LOC_PHP_PATH/phpize" 2> /dev/null
  st_runner "sh ./configure --with-php-config=$_LOC_PHP_PATH/php-config" 2> /dev/null
  st_runner "make --quiet" 2> /dev/null
  st_runner "make --quiet install" 2> /dev/null
  ###--------------------###
  msg "INFO: Installing PhpRedis for PHP-FPM $_LOC_PHP_VERSION, please wait..."
  mrun "sleep 1"
  cd /var/opt
  rm -f -r phpredis*
  git clone git://github.com/nicolasff/phpredis.git &> /dev/null
  cd /var/opt/phpredis
  st_runner "$_LOC_PHP_PATH/phpize" 2> /dev/null
  st_runner "sh ./configure --with-php-config=$_LOC_PHP_PATH/php-config" 2> /dev/null
  st_runner "make --quiet" 2> /dev/null
  st_runner "make --quiet install" 2> /dev/null
  echo "phpredis $_LOC_PHP_VERSION $_NOW" > /var/log/phpredis-$_LOC_PHP_VERSION.log
  ###--------------------###
  msg "INFO: Installing UploadProgress for PHP-FPM $_LOC_PHP_VERSION, please wait..."
  mrun "sleep 1"
  cd /var/opt
  rm -f -r uploadprogress*
  wget -q -U iCab http://files.aegir.cc/dev/uploadprogress-1.0.1.tgz
  tar -xzf uploadprogress-1.0.1.tgz
  cd /var/opt/uploadprogress-1.0.1
  st_runner "$_LOC_PHP_PATH/phpize" 2> /dev/null
  st_runner "sh ./configure --with-php-config=$_LOC_PHP_PATH/php-config" 2> /dev/null
  st_runner "make --quiet" 2> /dev/null
  st_runner "make --quiet install" 2> /dev/null
}
#
# Update PHP universal
update_php_universal () {
  ###--------------------###
  if [ ! -e "/var/log/apc-$_APC_VERSION-$_LOC_PHP_VERSION.log" ] ; then
    msg "INFO: Installing APC upgrade for PHP-FPM $_LOC_PHP_VERSION, please wait..."
    mrun "sleep 1"
    cd /var/opt
    wget -q -U iCab http://files.aegir.cc/dev/APC-$_APC_VERSION.tgz
    tar -xzf APC-$_APC_VERSION.tgz
    cd /var/opt/APC-$_APC_VERSION
    st_runner "$_LOC_PHP_PATH/phpize" 2> /dev/null
    st_runner "sh ./configure --with-php-config=$_LOC_PHP_PATH/php-config" 2> /dev/null
    st_runner "make --quiet" 2> /dev/null
    st_runner "make --quiet install" 2> /dev/null
    echo "apc-$_APC_VERSION-$_LOC_PHP_VERSION $_NOW" > /var/log/apc-$_APC_VERSION-$_LOC_PHP_VERSION.log
  fi
  ###--------------------###
  if [ ! -e "/var/log/imagick-$_IMAGICK_VERSION-$_LOC_PHP_VERSION.log" ] ; then
    msg "INFO: Installing Imagick upgrade for PHP-FPM $_LOC_PHP_VERSION, please wait..."
    mrun "sleep 1"
    cd /var/opt
    rm -f -r imagick*
    wget -q -U iCab http://files.aegir.cc/dev/imagick-$_IMAGICK_VERSION.tgz
    tar -xzf imagick-$_IMAGICK_VERSION.tgz
    cd /var/opt/imagick-$_IMAGICK_VERSION
    st_runner "$_LOC_PHP_PATH/phpize" 2> /dev/null
    st_runner "sh ./configure --with-php-config=$_LOC_PHP_PATH/php-config" 2> /dev/null
    st_runner "make --quiet" 2> /dev/null
    st_runner "make --quiet install" 2> /dev/null
    echo "imagick-$_IMAGICK_VERSION $_LOC_PHP_VERSION $_NOW" > /var/log/imagick-$_IMAGICK_VERSION-$_LOC_PHP_VERSION.log
  fi
  ###--------------------###
  if [ "$_USE_MEMCACHED" = "YES" ] ; then
   if [ ! -e "/var/log/fixed-memcached-1.0.2-$_LOC_PHP_VERSION.log" ] ; then
      msg "INFO: Installing memcached upgrade for PHP-FPM $_LOC_PHP_VERSION, please wait..."
      mrun "sleep 1"
      cd /var/opt
      rm -f -r memcached*
      wget -q -U iCab http://files.aegir.cc/dev/memcached-1.0.2.tgz
      tar -xzf memcached-1.0.2.tgz
      if [ -e "/var/opt/memcached-1.0.2" ] ; then
        cd /var/opt/memcached-1.0.2
        st_runner "$_LOC_PHP_PATH/phpize" 2> /dev/null
        st_runner "sh ./configure --with-php-config=$_LOC_PHP_PATH/php-config" 2> /dev/null
        st_runner "make --quiet" 2> /dev/null
        st_runner "make --quiet install" 2> /dev/null
        echo "memcached-1.0.2-$_LOC_PHP_VERSION" > /var/log/fixed-memcached-1.0.2-$_LOC_PHP_VERSION.log
        mrun "sleep 1"
      fi
    fi
  fi
}
#
# Update PHP universal more
update_php_universal_more () {
  ###--------------------###
  if [ ! -e "/var/log/phpredis-$_LOC_PHP_VERSION.log" ] ; then
    msg "INFO: Installing PhpRedis upgrade for PHP-FPM $_LOC_PHP_VERSION, please wait..."
    mrun "sleep 1"
    cd /var/opt
    rm -f -r phpredis*
    git clone git://github.com/nicolasff/phpredis.git &> /dev/null
    cd /var/opt/phpredis
    st_runner "$_LOC_PHP_PATH/phpize" 2> /dev/null
    st_runner "sh ./configure --with-php-config=$_LOC_PHP_PATH/php-config" 2> /dev/null
    st_runner "make --quiet" 2> /dev/null
    st_runner "make --quiet install" 2> /dev/null
    echo "phpredis $_LOC_PHP_VERSION $_NOW" > /var/log/phpredis-$_LOC_PHP_VERSION.log
  fi
}
#
# Install PHP 5.3.11
install_php_modern () {
  ###--------------------###
  if [ "$_FROM_SOURCES" = "NO" ] ; then
    msg "INFO: Installing PHP-FPM $_PHP_VERSION_NEW, please wait..."
    if [ "$_XTRAS_LIST" = "ALL" ] || [[ "$_XTRAS_LIST" =~ "FMG" ]] ; then
      _EXTRA_PHP_DEB="php5-dev php5-ffmpeg"
    else
      _EXTRA_PHP_DEB="php5-dev"
    fi
    _MODERN_PHP_DEB="php5-apc php5-cli php5-common php5-curl $_EXTRA_PHP_DEB php5-fpm php5-gd php5-geoip php5-gmp php5-imagick php5-imap php5-json php5-ldap php5-mcrypt php5-mhash php5-mysql php5-sasl php5-sqlite php5-suhosin php5-xmlrpc php5-xsl"
    st_runner "$_INSTAPP $_MODERN_PHP_DEB" 2> /dev/null
  else
    msg "INFO: Installing PHP-FPM $_PHP_VERSION_NEW"
    msg "NOTE! This step may take longer than 8 minutes, please wait..."
    cd /var/opt
    rm -f -r /var/opt/php*
    wget -q -U iCab http://files.aegir.cc/dev/php-$_PHP_VERSION_NEW.tar.gz
    wget -q -U iCab http://files.aegir.cc/dev/suhosin-patch-$_PHP_VERSION_BUILD-0.9.10.patch.gz
    tar -xzf php-$_PHP_VERSION_NEW.tar.gz
    gunzip -q suhosin-patch-$_PHP_VERSION_BUILD-0.9.10.patch.gz
    cat suhosin-patch-$_PHP_VERSION_BUILD-0.9.10.patch | patch -d php-$_PHP_VERSION_NEW -p1 &> /dev/null
    msg "INFO: Installing PHP-FPM $_PHP_VERSION_NEW part 1/3"
    mrun "sleep 1"
    cd /var/opt/php-$_PHP_VERSION_NEW
    st_runner "sh ./buildconf --force" 2> /dev/null
    if [ "$_REL_VERSION" = "oneiric" ] || [ "$_REL_VERSION" = "precise" ] ; then
      cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/patches/disable_SSLv2_for_openssl_1_0_0.patch ./
      patch -p1 < disable_SSLv2_for_openssl_1_0_0.patch &> /dev/null
    fi
    msg "INFO: Installing PHP-FPM $_PHP_VERSION_NEW part 2/3"
    mrun "sleep 1"
    st_runner "sh ./configure --quiet --prefix=/opt/local --enable-fpm --with-mysql --with-mysqli --with-zlib --with-curl --with-curlwrappers --with-gd --enable-gd-native-ttf --with-jpeg-dir=/usr --with-png-dir=/usr --with-freetype-dir=/usr --with-t1lib=/usr --with-pear --with-imap --with-imap-ssl --with-openssl --with-pdo-mysql --enable-exif --enable-soap --enable-ftp --enable-zip --enable-mbstring --enable-pcntl --enable-bcmath --enable-calendar --with-kerberos --with-xsl --with-mcrypt --with-xmlrpc --with-fpm-user=www-data --with-fpm-group=www-data $_PHP_EXTRA" 2> /dev/null
    msg "INFO: Installing PHP-FPM $_PHP_VERSION_NEW part 3/3"
    mrun "sleep 1"
    st_runner "make --quiet" 2> /dev/null
    st_runner "make --quiet install" 2> /dev/null
  fi
  _LOC_PHP_VERSION="$_PHP_VERSION_NEW"
  if [ "$_FROM_SOURCES" = "NO" ] ; then
    _LOC_PHP_PATH=/usr/bin
  else
    if [ -x "/usr/bin/phpize" ] ; then
      _LOC_PHP_PATH=/usr/bin
    elif [ -x "/opt/local/bin/phpize" ] ; then
      _LOC_PHP_PATH=/opt/local/bin
    fi
    install_php_extensions
  fi
  install_php_extensions_more
  _THIS_DB_SERVER_TEST=`mysql -V 2>&1`
  if [[ "$_THIS_DB_SERVER_TEST" =~ "MariaDB" ]] ; then
    echo "$_MARIADB_VERSION-MariaDB" > /var/log/installed-$_MARIADB_VERSION-MariaDB.log
  else
    echo "$_PERCONA_VERSION-Percona" > /var/log/installed-$_PERCONA_VERSION-Percona.log
  fi
  if [ "$_CUSTOM_CONFIG_PHP_5_3" = "NO" ] || [[ "$_THISHOST" =~ ".host8." ]] ; then
    cp -af /opt/local/etc/php53.ini /var/backups/dragon/t/opt-etc-php53.ini-pre-$_INSTALLER_VERSION-$_NOW &> /dev/null
    cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/php53.ini /opt/local/etc/php53.ini &> /dev/null
  fi
  _NEW_LTS=NO
  if [ "$_FROM_SOURCES" = "NO" ] ; then
    _NEW_LTS=YES
  fi
  if [ "$_PHP_MODERN_ONLY" = "YES" ] && [ "$_FROM_SOURCES" = "YES" ] && [ -f "/opt/local/bin/php" ] ; then
    mv -f /usr/bin/php /usr/bin/php-old &> /dev/null
    ln -s /opt/local/bin/php /usr/bin/php
  fi
  if [ ! -x "/opt/local/bin/php" ] && [ "$_FROM_SOURCES" = "NO" ] ; then
    mkdir -p /opt/local/bin
    ln -s /usr/bin/php /opt/local/bin/php
  fi
  rm -f /etc/init.d/php53-fpm*
  if [ "$_FROM_SOURCES" = "NO" ] ; then
    st_runner "service php5-fpm stop" &> /dev/null
    st_runner "update-rc.d -f php5-fpm remove" &> /dev/null
  fi
  cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/php53-fpm /etc/init.d/php53-fpm
  chmod 755 /etc/init.d/php53-fpm
  st_runner "update-rc.d php53-fpm defaults" &> /dev/null
}
#
# Install PHP 5.2.17
install_php_legacy () {
  ###--------------------###
  msg "INFO: Installing PHP-FPM $_PHP_VERSION"
  msg "NOTE! This step may take longer than 8 minutes, please wait..."
  mrun "sleep 1"
  cd /var/opt
  rm -f -r /var/opt/php*
  rm -f /etc/init.d/php-fpm*
  wget -q -U iCab http://files.aegir.cc/dev/php-$_PHP_VERSION.tar.gz
  wget -q -U iCab http://files.aegir.cc/dev/suhosin-patch-5.2.16-0.9.7.patch.gz
  wget -q -U iCab http://files.aegir.cc/dev/php-$_PHP_VERSION-fpm-0.5.14.diff.gz
  tar -xzf php-$_PHP_VERSION.tar.gz
  gunzip -q php-$_PHP_VERSION-fpm-0.5.14.diff.gz
  gunzip -q suhosin-patch-5.2.16-0.9.7.patch.gz
  cat php-$_PHP_VERSION-fpm-0.5.14.diff | patch -d php-$_PHP_VERSION -p1 &> /dev/null
  cat suhosin-patch-5.2.16-0.9.7.patch | patch -d php-$_PHP_VERSION -p1 &> /dev/null
  msg "INFO: Installing PHP-FPM $_PHP_VERSION part 1/3"
  mrun "sleep 1"
  cd /var/opt/php-$_PHP_VERSION
  st_runner "sh ./buildconf --force" 2> /dev/null
  if [ "$_REL_VERSION" = "oneiric" ] || [ "$_REL_VERSION" = "precise" ] ; then
    cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/patches/disable_SSLv2_for_openssl_1_0_0.patch ./
    patch -p1 < disable_SSLv2_for_openssl_1_0_0.patch &> /dev/null
  fi
  msg "INFO: Installing PHP-FPM $_PHP_VERSION part 2/3"
  mrun "sleep 1"
  st_runner "sh ./configure --quiet --enable-fpm --enable-fastcgi --with-mysql --with-mysqli --enable-force-cgi-redirect --enable-discard-path --with-zlib --with-curl --with-curlwrappers --with-gd --enable-gd-native-ttf --with-jpeg-dir=/usr --with-png-dir=/usr --with-freetype-dir=/usr --with-t1lib=/usr --with-pear --with-imap --with-imap-ssl --with-openssl --with-pdo-mysql --enable-exif --enable-soap --enable-ftp --enable-zip --enable-mbstring --enable-pcntl --enable-bcmath --enable-calendar --with-kerberos --with-xsl --with-mcrypt --with-xmlrpc $_PHP_EXTRA" 2> /dev/null
  msg "INFO: Installing PHP-FPM $_PHP_VERSION part 3/3"
  mrun "sleep 1"
  st_runner "make --quiet" 2> /dev/null
  st_runner "make --quiet install" 2> /dev/null
  _LOC_PHP_VERSION="$_PHP_VERSION"
  _LOC_PHP_PATH=/usr/local/bin
  install_php_extensions
  install_php_extensions_more
  echo "libcurl4-openssl-dev" > /var/log/libcurl4-openssl-dev.log
  _THIS_DB_SERVER_TEST=`mysql -V 2>&1`
  if [[ "$_THIS_DB_SERVER_TEST" =~ "MariaDB" ]] ; then
    echo "$_MARIADB_VERSION-MariaDB" > /var/log/installed-$_MARIADB_VERSION-MariaDB.log
  else
    echo "$_PERCONA_VERSION-Percona" > /var/log/installed-$_PERCONA_VERSION-Percona.log
  fi
  cd /usr/local/sbin
  cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/php-fpm ./
  chmod 755 php-fpm
  ln -s /usr/local/sbin/php-fpm /etc/init.d/php-fpm
  chmod 755 /usr/local/sbin/php-fpm &> /dev/null
}
#
# Update PHP 5.3.11
update_php_modern () {
  _LOC_PHP_VERSION="$_PHP_VERSION_NEW"
  if [ "$_FROM_SOURCES" = "NO" ] ; then
    _LOC_PHP_PATH=/usr/bin
    update_php_universal_more
  else
    if [ -x "/usr/bin/phpize" ] ; then
      _LOC_PHP_PATH=/usr/bin
    elif [ -x "/opt/local/bin/phpize" ] ; then
      _LOC_PHP_PATH=/opt/local/bin
    fi
    update_php_universal
    update_php_universal_more
  fi
}
#
# Update PHP 5.2.17
update_php_legacy () {
  _LOC_PHP_VERSION="$_PHP_VERSION"
  _LOC_PHP_PATH=/usr/local/bin
  update_php_universal
}
#
# Install latest Git.
install_latest_git () {
  if [ "$_XTRAS_LIST" = "ALL" ] || [[ "$_XTRAS_LIST" =~ "GIT" ]] || [ "$_REL_VERSION" = "lenny" ] ; then
    _GIT_TEST=$(git --version)
    if [[ "$_GIT_TEST" =~ "git version $_GIT_VERSION" ]] || [ "$_FULL_FORCE_REINSTALL" = "YES" ] ; then
      true
    else
      msg "INFO: Installing latest Git from sources, please wait..."
      cd /var/opt
      rm -f -r /var/opt/git*
      wget -q -U iCab http://files.aegir.cc/dev/git-$_GIT_VERSION.tar.gz
      tar -xzf git-$_GIT_VERSION.tar.gz
      cd /var/opt/git-$_GIT_VERSION
      st_runner "make configure" 2> /dev/null
      st_runner "sh ./configure --without-tcltk --quiet" 2> /dev/null
      st_runner "make --quiet" 2> /dev/null
      st_runner "make --quiet install" 2> /dev/null
      mv -f /usr/bin/git /usr/bin/git-old
      ln -s /usr/local/bin/git /usr/bin/git
      cd /var/opt
    fi
  fi
}
#
# Check apt updates.
check_apt_updates () {
  for Update in `/usr/bin/apt-get -q -y --allow-unauthenticated -s dist-upgrade | grep ^Inst | cut -d\  -f2 | sort`
  do
    case $Update in
      *libcurl*)    _UP_PHP=YES ;;
      *libmysql*)   _UP_PHP=YES ;;
      *libssl*)     _UP_PHP=YES ;;
      *mariadb*)    _UP_PHP=YES ;;
      *nginx*)      _UP_NGX=YES ;;
      *openjdk*)    _UP_JDK=YES ;;
      *openssl*)    _UP_PHP=YES ;;
      *percona*)    _UP_PHP=YES ;;
      *)  ;;
    esac
  done
}
#
# Upgrade Aegir Master Instance.
upgrade_aegir_master () {
  if prompt_yes_no "Do you want to upgrade Aegir Master Instance?" ; then
    true
    mrun "sleep 1"
    msg "INFO: Running Aegir Master Instance upgrade"
    mrun "sleep 1"
    rm -f /opt/tmp/testecho*
    service cron stop &> /dev/null
    _THIS_HM_ROOT=`cat /var/aegir/.drush/hostmaster.alias.drushrc.php | grep "root'" | cut -d: -f2 | awk '{ print $3}' | sed "s/[\,']//g"`
    _THIS_HM_SITE=`cat /var/aegir/.drush/hostmaster.alias.drushrc.php | grep "site_path'" | cut -d: -f2 | awk '{ print $3}' | sed "s/[\,']//g"`
    mkdir -p $_THIS_HM_ROOT/sites/all/{modules,themes,libraries}
    chown -R aegir:aegir $_THIS_HM_ROOT/sites/all
    chown -R aegir:aegir /var/aegir/.drush
    chown -R aegir:aegir /var/aegir/backups
    chown -R aegir:aegir /var/aegir/clients
    chown -R aegir:aegir /var/aegir/config
    chown -R aegir:aegir /var/aegir/drush
    chown -R aegir $_THIS_HM_ROOT
    chown -R aegir:www-data $_THIS_HM_SITE/files
    chmod -R 2770 $_THIS_HM_SITE/files
    cd /var/aegir
    cp /opt/tmp/$_BOA_REPO_NAME/aegir/scripts/AegirUpgrade.sh.txt ./
    sed -i "s/EDIT_AEGIR_VERSION/$_AEGIR_VERSION/g"         /var/aegir/AegirUpgrade.sh.txt
    sed -i "s/EDIT_BOA_REPO_GIT_URL/$_BOA_REPO_GIT_URLX/g"  /var/aegir/AegirUpgrade.sh.txt
    sed -i "s/EDIT_BOA_REPO_NAME/$_BOA_REPO_NAME/g"         /var/aegir/AegirUpgrade.sh.txt
    sed -i "s/EDIT_DEBUG_MODE/$_DEBUG_MODE/g"               /var/aegir/AegirUpgrade.sh.txt
    sed -i "s/EDIT_DOMAIN/$_THIS_FRONT/g"                   /var/aegir/AegirUpgrade.sh.txt
    sed -i "s/EDIT_DRUSH_FAMILY/$_DRUSH_FAMILY/g"           /var/aegir/AegirUpgrade.sh.txt
    sed -i "s/EDIT_DRUSH_VERSION/$_DRUSH_VERSION/g"         /var/aegir/AegirUpgrade.sh.txt
    sed -i "s/EDIT_FROM_SOURCES/$_FROM_SOURCES/g"           /var/aegir/AegirUpgrade.sh.txt
    sed -i "s/EDIT_HTTP_WILDCARD/$_HTTP_WILDCARD/g"         /var/aegir/AegirUpgrade.sh.txt
    sed -i "s/EDIT_INSTALLER_VERSION/$_INSTALLER_VERSION/g" /var/aegir/AegirUpgrade.sh.txt
    sed -i "s/EDIT_PHP_CLI_VERSION/$_PHP_CLI_VERSION/g"     /var/aegir/AegirUpgrade.sh.txt
    sed -i "s/EDIT_PHP_FPM_VERSION/$_PHP_FPM_VERSION/g"     /var/aegir/AegirUpgrade.sh.txt
    sed -i "s/EDIT_PHP_MODERN_ONLY/$_PHP_MODERN_ONLY/g"     /var/aegir/AegirUpgrade.sh.txt
    sed -i "s/EDIT_THIS_DB_HOST/$_THIS_DB_HOST/g"           /var/aegir/AegirUpgrade.sh.txt
    su -s /bin/bash aegir -c "bash AegirUpgrade.sh.txt"
    if [ -e "/opt/tmp/status-AegirUpgrade-FAIL" ] ; then
      msg "FATAL ERROR: AegirUpgrade installer failed"
      msg "FATAL ERROR: Aborting Barracuda installer NOW!"
      touch /opt/tmp/status-Barracuda-FAIL
      exit 1
    fi
    mv -f /var/aegir/config/includes/global.inc /var/aegir/config/includes/global.inc-pre-$_INSTALLER_VERSION-$_NOW &> /dev/null
    if [ -e "/var/aegir/config/server_master/nginx/pre.d/nginx_wild_ssl.conf" ] ; then
      cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/global.inc.ssl.aegir.txt /var/aegir/config/includes/global.inc
    else
      cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/global.inc.aegir.txt /var/aegir/config/includes/global.inc
    fi
    sed -i "s/3600/$_SPEED_VALID_MAX/g" /var/aegir/config/includes/global.inc &> /dev/null
    update_redis_password
    force_advanced_nginx_config
    if [ "$_DRUSH_FAMILY" = "3" ] ; then
      cd /var/aegir/drush
      cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/patches/user.drush.inc.patch ./
      patch -p0 < user.drush.inc.patch &> /dev/null
      chown -R aegir:aegir /var/aegir/drush &> /dev/null
    fi
    if [ "$_DRUSH_VERSION" = "7.x-4.5" ] || [ "$_DRUSH_VERSION" = "4.6-dev" ] ; then
      sed -i "s/which one she wants./which one she wants.\n  chdir(\$request['base_project_path'])\;/g" /var/aegir/drush/commands/pm/package_handler/wget.inc &> /dev/null
    fi
    cd /var/aegir
    rm -f AegirUpgrade.sh.txt
    if [ -d "/var/aegir/config/server_master/nginx/conf.d" ] ; then
      if [ ! -d "/var/aegir/config/server_master/nginx/pre.d" ] ; then
        cd /var/aegir/config/server_master/nginx
        cp -a conf.d pre.d
      fi
      if [ -e "/var/aegir/config/server_master/nginx/pre.d/custom_nginx.conf" ] ; then
        rm -f /var/aegir/config/server_master/nginx/pre.d/custom_nginx.conf
      fi
    fi
    chmod 711 /var/aegir/.drush &> /dev/null
    msg "INFO: Aegir Master Instance upgrade completed"
  else
    msg "INFO: Aegir Master Instance not upgraded this time"
    mrun "sleep 1"
  fi
  rm -f /var/aegir/*install.sh.txt
}
#
# Install or upgrade Nginx.
install_upgrade_nginx () {
  msg "INFO: Testing Nginx version..."
  mrun "sleep 1"
  if [ "$_STATUS" = "UPGRADE" ] ; then
    _NGINX_INSTALL_REQUIRED=NO
  fi
  _NGINX_EXTRA_CTRL="/var/aegir/config/server_master/nginx/pre.d/nginx_speed_purge.conf"
  if [ -x "/usr/sbin/nginx" ] ; then
    _NGINX_F_INSTALLED=`/usr/sbin/nginx -v 2>&1 | tr -d "\n" | cut -d" " -f4 | awk '{ print $1}'`
    _NGINX_V_INSTALLED=`/usr/sbin/nginx -V 2>&1`
    if [ -z "$_NGINX_F_INSTALLED" ] ; then
      _NGINX_F_INSTALLED=`/usr/sbin/nginx -v 2>&1 | tr -d "\n" | cut -d" " -f3 | awk '{ print $1}'`
    fi
    _NGINX_F_VERSION="$_CUSTOM_NAME/$_NGINX_VERSION"
    if [ "$_NGINX_F_INSTALLED" = "$_NGINX_F_VERSION" ] && [ -e "$_NGINX_EXTRA_CTRL" ] && [ "$_STATUS" = "UPGRADE" ] ; then
      _NGINX_INSTALL_REQUIRED=NO
      msg "INFO: Installed Nginx version $_NGINX_F_INSTALLED, no upgrade required"
    elif [ "$_NGINX_F_INSTALLED" = "$_NGINX_F_VERSION" ] && [ "$_STATUS" = "INIT" ] ; then
      _NGINX_INSTALL_REQUIRED=NO
      msg "INFO: Installed Nginx version $_NGINX_F_INSTALLED, no upgrade required"
    elif [ "$_NGINX_F_INSTALLED" != "$_NGINX_F_VERSION" ] ; then
      _NGINX_INSTALL_REQUIRED=YES
      msg "INFO: Installed Nginx version $_NGINX_F_INSTALLED, upgrade required"
    elif [ "$_NGINX_F_INSTALLED" = "$_NGINX_F_VERSION" ] && [ ! -e "$_NGINX_EXTRA_CTRL" ] && [ "$_STATUS" = "UPGRADE" ] ; then
      if [ "$_PURGE_MODE" = "ON" ] ; then
        _NGINX_INSTALL_REQUIRED=YES
        msg "INFO: Installed Nginx version $_NGINX_F_INSTALLED, forced rebuild to include purge module"
      fi
    fi
    if [ "$_NGINX_F_INSTALLED" = "$_NGINX_F_VERSION" ] ; then
      if [[ "$_NGINX_V_INSTALLED" =~ "geoip" ]] ; then
        true
      else
        _NGINX_INSTALL_REQUIRED=YES
        msg "INFO: Installed Nginx version $_NGINX_F_INSTALLED, forced rebuild to include geoip module"
      fi
      if [[ "$_NGINX_V_INSTALLED" =~ "nginx-development-kit" ]] ; then
        _NGINX_INSTALL_REQUIRED=YES
        msg "INFO: Nginx rebuild required to avoid apt-get overwrite"
      fi
    fi
    mrun "sleep 1"
  else
    _NGINX_INSTALL_REQUIRED=YES
  fi
  if [ "$_UP_NGX" = "YES" ] ; then
    if [ "$_FROM_SOURCES" = "YES" ] || [ "$_NGINX_FROM_SOURCES" = "YES" ] ; then
      _NGINX_INSTALL_REQUIRED=YES
      msg "INFO: Nginx rebuild required to avoid apt-get overwrite"
    fi
  fi
  if [ "$_NGINX_INSTALL_REQUIRED" = "YES" ] || [ "$_FULL_FORCE_REINSTALL" = "YES" ] || [ "$_NGX_FORCE_REINSTALL" = "YES" ] ; then
    if [ "$_STATUS" = "UPGRADE" ] ; then
      msg "INFO: Upgrading Nginx, please wait..."
    else
      msg "INFO: Installing Nginx, please wait..."
    fi
    mrun "sleep 1"
    cd /var/opt; rm -f -r nginx*
    if [[ "$_BOA_REPO_GIT_URL" =~ "drupal" ]] ; then
      _BOA_REPO_GIT_URL_LOCAL="git://github.com/omega8cc"
    else
      _BOA_REPO_GIT_URL_LOCAL="$_BOA_REPO_GIT_URL"
    fi
    if [ "$_REL_VERSION" = "incompatible" ] ; then
      true
    else
      git clone $_BOA_REPO_GIT_URL_LOCAL/nginx-upload-progress-module.git &> /dev/null
    fi
    if [ "$_PURGE_MODE" = "ON" ] ; then
      git clone --branch 1.5 git://github.com/FRiCKLE/ngx_cache_purge.git &> /dev/null
      perl -p -i -e "s/\(c->node->length\s+.*\;/c->node->fs_size\;/g" /var/opt/ngx_cache_purge/ngx_cache_purge_module.c &> /dev/null
    fi
    wget -q -U iCab http://files.aegir.cc/dev/nginx-$_NGINX_VERSION.tar.gz
    tar -xzf nginx-$_NGINX_VERSION.tar.gz
    sed -i "s/nginx/$_CUSTOM_NAME/g" /var/opt/nginx-$_NGINX_VERSION/src/core/nginx.h &> /dev/null
    if [ "$_PURGE_MODE" = "ON" ] && [ -z "$_NGINX_EXTRA_CONF" ] ; then
      _NGINX_EXTRA="--add-module=/var/opt/ngx_cache_purge/"
    elif [ ! -z "$_NGINX_EXTRA_CONF" ] && [ "$_PURGE_MODE" = "OFF" ] ; then
      _NGINX_EXTRA="$_NGINX_EXTRA_CONF"
    elif [ ! -z "$_NGINX_EXTRA_CONF" ] && [ "$_PURGE_MODE" = "ON" ] ; then
      _NGINX_EXTRA="--add-module=/var/opt/ngx_cache_purge/ $_NGINX_EXTRA_CONF"
    else
      _NGINX_EXTRA=""
    fi
    if [ -e "/var/opt/nginx-upload-progress-module" ] ; then
      _NGINX_EXTRA="--add-module=/var/opt/nginx-upload-progress-module/ $_NGINX_EXTRA"
    fi
    cd /var/opt/nginx-$_NGINX_VERSION
    st_runner "sh ./configure --prefix=/usr --sbin-path=/usr/sbin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/lock/nginx.lock --user=www-data --group=www-data --with-http_realip_module --with-http_gzip_static_module --with-http_stub_status_module --with-http_ssl_module --with-http_dav_module --without-mail_pop3_module --without-mail_imap_module --without-mail_smtp_module --without-http_scgi_module --without-http_uwsgi_module --with-debug --with-ipv6 --with-http_geoip_module $_NGINX_EXTRA" 2> /dev/null
    st_runner "make --quiet" 2> /dev/null
    st_runner "make --quiet install" 2> /dev/null
    if [ "$_LENNY_TO_SQUEEZE" = "YES" ] && [ "$_LOC_REL_VERSION" = "lenny" ] ; then
      true
    else
      service nginx stop &> /dev/null
      killall -9 nginx &> /dev/null
      mrun "sleep 1"
      service nginx start &> /dev/null
    fi
    _UP_NGX=NO
    _NGINX_INSTALL_REQUIRED=NO
  fi
  if [ ! -L "/usr/bin/nginx" ] ; then
    ln -s /usr/sbin/nginx /usr/bin/nginx
  fi
}
#
# Install or upgrade libevent.
install_upgrade_libevent () {
  if [ ! -f "/var/log/fixed-libevent-2.0.11-stable.log" ] || [ "$_FULL_FORCE_REINSTALL" = "YES" ] ; then
    msg "INFO: Installing libevent, please wait..."
    rm -f -r /var/opt/libevent*
    cd /var/opt
    wget -q -U iCab http://files.aegir.cc/dev/libevent-2.0.11-stable.tar.gz
    tar -xzf libevent-2.0.11-stable.tar.gz
    cd /var/opt/libevent-2.0.11-stable
    st_runner "sh ./configure --prefix=/usr" 2> /dev/null
    st_runner "make --quiet" 2> /dev/null
    st_runner "make --quiet install" 2> /dev/null
    rm -f -r /var/opt/libevent*
    cd /var/opt
    wget -q -U iCab http://files.aegir.cc/dev/libevent-2.0.11-stable.tar.gz
    tar -xzf libevent-2.0.11-stable.tar.gz
    cd /var/opt/libevent-2.0.11-stable
    st_runner "sh ./configure" 2> /dev/null
    st_runner "make --quiet" 2> /dev/null
    st_runner "make --quiet install" 2> /dev/null
    st_runner "ldconfig" 2> /dev/null
    echo "libevent-2.0.11-stable" > /var/log/fixed-libevent-2.0.11-stable.log
  fi
}
#
# Install wkhtmltopdf.
install_wkhtmltopdf () {
  ###--------------------###
  if [ ! -x "/usr/bin/wkhtmltopdf" ] || [ "$_FULL_FORCE_REINSTALL" = "YES" ] ; then
    _X86_64_TEST=`uname -m`
    if [ "$_X86_64_TEST" = "x86_64" ] ; then
      SYSTEMARCH="x86_64"
      msg "INFO: Installing /usr/bin/wkhtmltopdf $SYSTEMARCH version, please wait..."
      mrun "sleep 1"
      cd /var/opt
      wget -q -U iCab http://files.aegir.cc/dev/wkhtmltopdf-0.11.0_rc1-static-amd64.tar.gz
      tar -xzf wkhtmltopdf-0.11.0_rc1-static-amd64.tar.gz
      cp -af wkhtmltopdf-amd64 /usr/bin/wkhtmltopdf &> /dev/null
      chown root:root /usr/bin/wkhtmltopdf &> /dev/null
      chmod 755 /usr/bin/wkhtmltopdf &> /dev/null
    else
      SYSTEMARCH="x86"
      msg "INFO: Installing /usr/bin/wkhtmltopdf $SYSTEMARCH version, please wait..."
      mrun "sleep 1"
      cd /var/opt
      wget -q -U iCab http://files.aegir.cc/dev/wkhtmltopdf-0.11.0_rc1-static-i386.tar.gz
      tar -xzf wkhtmltopdf-0.11.0_rc1-static-i386.tar.gz
      cp -af wkhtmltopdf-i386 /usr/bin/wkhtmltopdf &> /dev/null
      chown root:root /usr/bin/wkhtmltopdf &> /dev/null
      chmod 755 /usr/bin/wkhtmltopdf &> /dev/null
    fi
  fi
}
#
# Update php-cli in the cron entry.
update_php_cli_cron () {
  if [ "$_PHP_CLI_VERSION" = "5.3" ] && [ -x "/opt/local/bin/php" ] ; then
    sed -i "s/^PATH=.*/PATH=\/opt\/local\/bin:\/sbin:\/bin:\/usr\/sbin:\/usr\/bin/g" /var/spool/cron/crontabs/aegir &> /dev/null
    chown aegir:crontab /var/spool/cron/crontabs/aegir &> /dev/null
  elif [ "$_PHP_CLI_VERSION" = "5.2" ] && [ -x "/usr/local/bin/php" ] ; then
    sed -i "s/^PATH=.*/PATH=\/usr\/local\/bin:\/sbin:\/bin:\/usr\/sbin:\/usr\/bin/g" /var/spool/cron/crontabs/aegir &> /dev/null
    chown aegir:crontab /var/spool/cron/crontabs/aegir &> /dev/null
  fi
}
#
# Update New Relic
update_newrelic () {
  ###--------------------###
  if [ -e "/etc/newrelic/newrelic.cfg" ] && [ -e "/etc/newrelic/nrsysmond.cfg" ] ; then
    _UPDATE_NR=NO
    _PHP_EXT_DIR_52="/usr/local/lib/php/extensions/no-debug-non-zts-20060613"
    _PHP_EXT_DIR_53="/opt/local/lib/php/extensions/no-debug-non-zts-20090626"
    if [ -e "$_PHP_EXT_DIR_52" ] && [ ! -e "$_PHP_EXT_DIR_52/newrelic.so" ] ; then
      _UPDATE_NR=YES
    elif [ -e "$_PHP_EXT_DIR_53" ] && [ ! -e "$_PHP_EXT_DIR_53/newrelic.so" ] ; then
      _UPDATE_NR=YES
    fi
    if [ "$_UPDATE_NR" = "YES" ] ; then
      msg "INFO: Updating New Relic Apps, please wait..."
      mrun "sleep 1"
      st_runner "apt-get update -y" &> /dev/null
      st_runner "apt-get -f -y -q --config-file /opt/tmp/apt.conf.noninteractive install newrelic-php5" 2> /dev/null
      NR_INSTALL_SILENT='silent';export NR_INSTALL_SILENT;newrelic-install install &> /dev/null
      if [ ! -z "$_NEWRELIC_KEY" ] ; then
        sed -i "s/REPLACE_WITH_REAL_KEY/$_NEWRELIC_KEY/g" /etc/newrelic/newrelic.cfg &> /dev/null
        sed -i "s/REPLACE_WITH_REAL_KEY/$_NEWRELIC_KEY/g" /etc/newrelic/nrsysmond.cfg &> /dev/null
      fi
    fi
  fi
}
#
# Install New Relic
install_newrelic () {
  ###--------------------###
  if [ ! -z "$_NEWRELIC_KEY" ] ; then
    if [ ! -e "/etc/newrelic/newrelic.cfg" ] || [ ! -e "/etc/newrelic/nrsysmond.cfg" ] || [ ! -e "/etc/apt/sources.list.d/newrelic.list" ] ; then
      msg "INFO: Installing New Relic Apps and Server Monitor, please wait..."
      mrun "sleep 1"
      cd /var/opt
      _KEYS_SERVER_TEST=FALSE
      until [[ "$_KEYS_SERVER_TEST" =~ "GnuPG" ]] ; do
        rm -f 548C16BF.gpg*
        wget -q -U iCab http://download.newrelic.com/548C16BF.gpg
        _KEYS_SERVER_TEST=`grep GnuPG 548C16BF.gpg 2> /dev/null`
        sleep 2
      done
      cat 548C16BF.gpg | apt-key add - &> /dev/null
      rm -f 548C16BF.gpg*
      echo "## New Relic APT Repository" > /etc/apt/sources.list.d/newrelic.list
      echo "deb http://apt.newrelic.com/debian/ newrelic non-free" >> /etc/apt/sources.list.d/newrelic.list
      st_runner "apt-get update -y" &> /dev/null
      st_runner "apt-get -f -y -q --config-file /opt/tmp/apt.conf.noninteractive install newrelic-php5 newrelic-sysmond" 2> /dev/null
      NR_INSTALL_SILENT='silent';export NR_INSTALL_SILENT;newrelic-install install &> /dev/null
      sed -i "s/REPLACE_WITH_REAL_KEY/$_NEWRELIC_KEY/g" /etc/newrelic/newrelic.cfg &> /dev/null
      sed -i "s/REPLACE_WITH_REAL_KEY/$_NEWRELIC_KEY/g" /etc/newrelic/nrsysmond.cfg &> /dev/null
    fi
  fi
}


###--------------------###
if [ `whoami` = "root" ] ; then
  echo " "
  msg "BOA Skynet welcomes you aboard!"
  echo " "
  sleep 3
  chmod a+rw /dev/null
  rm -f -r /opt/tmp/*
  rm -f /tmp/cache.inc
  service cron stop &> /dev/null
  touch /var/run/boa_run.pid
  _VM_TEST=`uname -a 2>&1`
  if [[ "$_VM_TEST" =~ beng ]] ; then
    _VMFAMILY="VS"
    touch /var/run/cloud_vhost.pid
  fi
  sleep 1
else
  msg "ERROR: This script should be ran as a root user - please `sudo -i` first"
  exit 1
fi


###--------------------###
if [ ! -z "$_LOCAL_NETWORK_IP" ] ; then
  _LOCAL_NETWORK_IP=${_LOCAL_NETWORK_IP//[^0-9.]/}
fi
if [ ! -z "$_LOCAL_NETWORK_HN" ] ; then
  _LOCAL_NETWORK_HN=${_LOCAL_NETWORK_HN//[^a-zA-Z0-9-.]/}
  _LOCAL_NETWORK_HN=`echo -n $_LOCAL_NETWORK_HN | tr A-Z a-z`
fi
if [ ! -z "$_MY_OWNIP" ] ; then
  _MY_OWNIP=${_MY_OWNIP//[^0-9.]/}
fi
if [ ! -z "$_MY_HOSTN" ] ; then
  _MY_HOSTN=${_MY_HOSTN//[^a-zA-Z0-9-.]/}
  _MY_HOSTN=`echo -n $_MY_HOSTN | tr A-Z a-z`
fi
if [ ! -z "$_MY_FRONT" ] ; then
  _MY_FRONT=${_MY_FRONT//[^a-zA-Z0-9-.]/}
  _MY_FRONT=`echo -n $_MY_FRONT | tr A-Z a-z`
fi
if [ ! -z "$_SMTP_RELAY_HOST" ] ; then
  _SMTP_RELAY_HOST=${_SMTP_RELAY_HOST//[^a-zA-Z0-9-.]/}
  _SMTP_RELAY_HOST=`echo -n $_SMTP_RELAY_HOST | tr A-Z a-z`
fi


###--------------------###
if [ -e "/var/aegir/.drush/hostmaster.alias.drushrc.php" ] ; then
  _STATUS=UPGRADE
  msg "INFO: UPGRADE"
  barracuda_cnf
  if [ -f "/var/aegir/config/includes/wildcard_listen_http_enabled.txt" ] ; then
    _HTTP_WILDCARD=YES
  else
    _HTTP_WILDCARD=NO
  fi
  touch /var/run/boa_wait.pid
else
  _STATUS=INIT
  if [ -d "/var/aegir" ] ; then
    msg "INFO: FORCED INIT"
    _FULL_FORCE_REINSTALL=YES
  else
    msg "INFO: NORMAL INIT"
  fi
  _ZOMBIE_HOME="/var/backups/zombie/$_INSTALLER_VERSION-$_NOW"
  mkdir -p $_ZOMBIE_HOME
  mv -f /etc/nginx/conf.d/* $_ZOMBIE_HOME/ &> /dev/null
  mv -f /var/aegir $_ZOMBIE_HOME/ &> /dev/null
  mv -f /var/xdrago $_ZOMBIE_HOME/ &> /dev/null
  mv -f /root/.my.cnf $_ZOMBIE_HOME/ &> /dev/null
  mv -f /root/.my.pass.txt $_ZOMBIE_HOME/ &> /dev/null
  cp -af /etc/sudoers $_ZOMBIE_HOME/ &> /dev/null
  sed -i "s/^aegir.*//g" /etc/sudoers &> /dev/null
  deluser aegir &> /dev/null
  rm -f /usr/bin/drush
  if [ "$_EASY_LOCALHOST" = "YES" ] && [ "$_EASY_PUBLIC" = "YES" ] ; then
    msg "FATAL ERROR: You must enable either _EASY_PUBLIC or _EASY_LOCALHOST mode, not both"
    exit 1
  fi
  if [ "$_EASY_PUBLIC" = "YES" ] ; then
    if [ -z "$_EASY_HOSTNAME" ] || [ "$_EASY_HOSTNAME" = "wildcard-enabled-hostname" ] ; then
      msg "FATAL ERROR: You must define also _EASY_HOSTNAME when _EASY_PUBLIC mode is enabled"
      exit 1
    fi
  fi
  if [ "$_EASY_LOCALHOST" = "YES" ] ; then
    msg "INFO: Easy Localhost Setup Mode Active"
    _BUILD_FROM_SRC=NO
    _PHP_MODERN_ONLY=YES
    _XTRAS_LIST="PDS CHV"
    _HTTP_WILDCARD=YES
    _AUTOPILOT=YES
    _DEBUG_MODE=NO
    _AEGIR_VERSION=HEAD
    _DB_SERVER=MariaDB
    _SSH_PORT=22
    _LOCAL_DEBIAN_MIRROR=ftp.debian.org
    _LOCAL_UBUNTU_MIRROR=archive.ubuntu.com
    _DNS_SETUP_TEST=NO
    _THIS_DB_HOST=localhost
    _SMTP_RELAY_TEST=NO
    _LOCAL_NETWORK_IP="127.0.1.1"
    _LOCAL_NETWORK_HN="aegir.local"
  elif [ "$_EASY_PUBLIC" = "YES" ] ; then
    msg "INFO: Easy Public Setup Mode Active"
    _BUILD_FROM_SRC=NO
    _PHP_MODERN_ONLY=YES
    _XTRAS_LIST="PDS CSF CHV FTP"
    _HTTP_WILDCARD=YES
    _AUTOPILOT=YES
    _DEBUG_MODE=NO
    _AEGIR_VERSION=HEAD
    _DB_SERVER=MariaDB
    _SSH_PORT=22
    _LOCAL_DEBIAN_MIRROR=ftp.debian.org
    _LOCAL_UBUNTU_MIRROR=archive.ubuntu.com
    _DNS_SETUP_TEST=YES
    _THIS_DB_HOST=localhost
    _SMTP_RELAY_TEST=YES
    _MY_HOSTN="$_EASY_HOSTNAME"
    _MY_FRONT="master.$_EASY_HOSTNAME"
    validate_public_ip &> /dev/null
    _MY_OWNIP="$_THISHTIP"
  fi
  barracuda_cnf
fi
_INITINS="/usr/bin/apt-get -y --force-yes install"
_INSTALL="/usr/bin/apt-get -y --force-yes --config-file /opt/tmp/apt.conf.noninteractive install"
if [ "$_AEGIR_VERSION" = "HEAD" ] && [ ! -z "$_FORCE_GIT_MIRROR" ] ; then
  if [ "$_FORCE_GIT_MIRROR" = "gitorious" ] ; then
    _INSTAPP="/usr/bin/aptitude-fast -f -y -q -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confold install"
  else
    _INSTAPP="/usr/bin/aptitude -f -y -q -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confold install"
  fi
else
  _INSTAPP="/usr/bin/aptitude -f -y -q -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confold install"
fi
_SRCDIR=/opt/tmp/files
rm -f -r /var/opt/*
mkdir -p $_SRCDIR
chmod -R 777 /opt/tmp &> /dev/null
rm -f /var/run/aegir_upgrade.pid


###--------------------###
if [ "$_STATUS" = "UPGRADE" ] ; then
  if [ ! -e "/root/.my.cnf" ] ; then
  msg "EXIT on error due to not found file with your MySQL/$_DB_SERVER root password"
  cat <<EOF

  It appears you don't have required file with your root sql password.
  Create this file first and run this script again:

  echo "[client]" > /root/.my.cnf
  echo "user=root" >> /root/.my.cnf
  echo "password=your_SQL_ROOT_password" >> /root/.my.cnf
  chmod 0600 /root/.my.cnf

EOF
  msg "EXIT on error due to not found file with your MySQL/$_DB_SERVER root password"
  exit 1
  fi
fi


###--------------------###
if [ "$_STATUS" = "INIT" ] ; then
  msg "INFO: We need to install wget, axel, aptitude, netcat & git first, please wait..."
  if [ -e "/etc/debian_version" ] ; then
    _L_DEB_TEST=`grep "^5." /etc/debian_version 2> /dev/null`
    if [ ! -z "$_L_DEB_TEST" ] ; then
      sed -i "s/^deb.*security.debian.org.*/## security updates no longer available for lenny/g" /etc/apt/sources.list &> /dev/null
      sed -i "s/ftp.*debian.org/archive.debian.org/g" /etc/apt/sources.list &> /dev/null
      sed -i "s/volatile.debian.org/archive.debian.org/g" /etc/apt/sources.list &> /dev/null
    fi
  fi
  sleep 1
  apt-get update &> /dev/null
  $_INITINS locales &> /dev/null
  sleep 1
  fix_locales
  $_INITINS wget git-core axel netcat aptitude &> /dev/null
fi


###--------------------###
if ! netcat -w 8 -z ftp.drupal.org 80 ; then
  echo " "
  msg "EXIT on error due to ftp.drupal.org downtime"
  msg "Please try to run this script again in a few minutes"
  msg "or better yet, hours"
  msg "Bye"
  exit 1
fi
if ! netcat -w 8 -z github.com 9418 ; then
  echo " "
  msg "EXIT on error due to GitHub git server at 9418 downtime"
  msg "Please try to run this script again in a few minutes"
  msg "Also, make sure that the git port 9418 is open"
  msg "Bye"
  exit 1
fi


###--------------------###
if [ "$_STATUS" = "UPGRADE" ] ; then
  _DB_SERVER_TEST=`mysql -V 2>&1`
  if [[ "$_DB_SERVER_TEST" =~ "MariaDB" ]] ; then
    if [ "$_DB_SERVER" = "Percona" ] ; then
      _DB_SERVER_SRC=repo.percona.com
    else
      _DB_SERVER_SRC=ftp.osuosl.org
    fi
  else
    _DB_SERVER_SRC=repo.percona.com
  fi
else
  if [ "$_DB_SERVER" = "Percona" ] ; then
    _DB_SERVER_SRC=repo.percona.com
  else
    _DB_SERVER_SRC=ftp.osuosl.org
  fi
fi
if ! netcat -w 8 -z $_DB_SERVER_SRC 80 ; then
  echo " "
  msg "EXIT on error due to $_DB_SERVER_SRC downtime"
  msg "Please try to run this script again in a few minutes"
  msg "or better yet, hours"
  msg "Bye"
  exit 1
fi


###--------------------###
_GITHUB_WORKS=NO
_DRUPAL_WORKS=NO
_GITORIOUS_WORKS=NO
if [ "$_FORCE_GIT_MIRROR" = "github" ] ; then
  msg "INFO: We will use forced GitHub mirror without testing connection"
  _GITHUB_WORKS=YES
  _DRUPAL_WORKS=NO
  _GITORIOUS_WORKS=NO
  sleep 1
elif [ "$_FORCE_GIT_MIRROR" = "drupal" ] ; then
  msg "INFO: We will use forced Drupal repository without testing connection"
  _GITHUB_WORKS=NO
  _DRUPAL_WORKS=YES
  _GITORIOUS_WORKS=NO
  sleep 1
elif [ "$_FORCE_GIT_MIRROR" = "gitorious" ] ; then
  msg "INFO: We will use forced Gitorious mirror without testing connection"
  _GITHUB_WORKS=NO
  _DRUPAL_WORKS=NO
  _GITORIOUS_WORKS=YES
  sleep 1
else
  msg "INFO: Testing GitHub, Drupal and Gitorious servers availability, please wait..."
  sleep 1
  _GITHUB_WORKS=YES
  _DRUPAL_WORKS=YES
  _GITORIOUS_WORKS=YES
  if ! netcat -w 8 -z github.com 9418 ; then
    _GITHUB_WORKS=NO
    msg "WARN: The GitHub mirror repository server doesn't respond..."
  elif ! netcat -w 8 -z git.drupal.org 80 ; then
    _DRUPAL_WORKS=NO
    msg "WARN: The Drupal master repository server doesn't respond..."
  elif ! netcat -w 8 -z code.aegir.cc 9418 ; then
    _GITORIOUS_WORKS=NO
    msg "WARN: The Gitorious mirror repository server doesn't respond..."
  fi
fi
if [ "$_GITHUB_WORKS" = "YES" ] ; then
  _BOA_REPO_NAME="nginx-for-drupal"
  _BOA_REPO_GIT_URL="git://github.com/omega8cc"
  msg "INFO: GitHub mirror repository will be used for this install"
elif [ "$_DRUPAL_WORKS" = "YES" ] ; then
  _BOA_REPO_NAME="barracuda"
  _BOA_REPO_GIT_URL="http://git.drupal.org/project"
  msg "INFO: Drupal master repository will be used for this install"
elif [ "$_GITORIOUS_WORKS" = "YES" ] ; then
  _BOA_REPO_NAME="barracuda-octopus"
  _BOA_REPO_GIT_URL="git://code.aegir.cc/aegir"
  msg "INFO: Gitorious mirror repository will be used for this install"
else
  cat <<EOF

  None of repository servers responded in 8 seconds,
  so we can't continue this installation.

  Please try again later or check if your firewall has port 9418 open.

  Bye.

EOF
  exit 1
fi
_BOA_REPO_GIT_URLX=${_BOA_REPO_GIT_URL//\//\\\/}


###--------------------###
if [ -d "/usr/share/git-core" ] ; then
  chmod 644 /usr/share/git-core/templates/description &> /dev/null
  chmod 644 /usr/share/git-core/templates/hooks/* &> /dev/null
  chmod 644 /usr/share/git-core/templates/info/* &> /dev/null
fi


###--------------------###
msg "INFO: Downloading little helpers, please wait..."
sleep 1
#
# Git clone all
cd /opt/tmp
rm -f -r /opt/tmp/$_BOA_REPO_NAME
if [ "$_AEGIR_VERSION" = "HEAD" ] ; then
  git clone $_BOA_REPO_GIT_URL/$_BOA_REPO_NAME.git &> /dev/null
  if [ ! -z "$_FORCE_GIT_MIRROR" ] ; then
    if [ "$_FORCE_GIT_MIRROR" = "none" ] ; then
      cd /opt/tmp/$_BOA_REPO_NAME
      git checkout 2.0.3-dev &> /dev/null
      cd /opt/tmp
    else
      true
    fi
  fi
else
  wget -q -U iCab http://files.aegir.cc/versions/nginx-for-drupal-$_AEGIR_VERSION.tar.gz
  gunzip -q -c nginx-for-drupal-$_AEGIR_VERSION.tar.gz | tar -xf -
  rm -f nginx-for-drupal-$_AEGIR_VERSION.tar.gz
  _BOA_REPO_NAME="nginx-for-drupal"
fi
#
if [ ! -e "/opt/tmp/$_BOA_REPO_NAME/aegir/helpers/apt.conf.noninteractive" ] ; then
  echo " "
  msg "EXIT on error due to missing helpers"
  msg "Please try to run this script again in a few minutes"
  msg "Also, make sure that the git port 9418 is open"
  msg "Bye"
  exit 1
fi
# Get apt helper
rm -f apt.conf.noninteractive*
cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/helpers/apt.conf.noninteractive ./
#
# Create tmp stuff
if [ "$_STATUS" = "INIT" ] ; then
  _LOG=/var/backups/barracuda-install-$_NOW.log
else
  _LOG=/var/backups/barracuda-upgrade-$_NOW.log
fi
touch $_LOG
chmod 600 $_LOG
_SILENT=/opt/tmp/silent.log
cd $_SRCDIR
#
# Get spinner
rm -f spinner*
cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/helpers/spinner ./
chmod +x spinner &> /dev/null
#
# Get axelerator
if [ ! -e "/usr/bin/aptitude-fast" ] ; then
  git clone git://github.com/omega8cc/apt-fast.git /opt/tmp/apt-fast &> /dev/null
  cp -af /opt/tmp/apt-fast/apt-fast /usr/bin/aptitude-fast &> /dev/null
  chmod +x /usr/bin/aptitude-fast &> /dev/null
  cd /opt/tmp
fi


###--------------------###
msg "INFO: Checking BARRACUDA version..."
if [ "$_AEGIR_VERSION" = "HEAD" ] ; then
  _FILE_VERSION=release.txt
else
  _FILE_VERSION=version.txt
fi
if [ -e "/opt/tmp/$_BOA_REPO_NAME/aegir/conf/$_FILE_VERSION" ] ; then
  _VERSIONS_TEST=`cat /opt/tmp/$_BOA_REPO_NAME/aegir/conf/$_FILE_VERSION`
  if [[ "$_VERSIONS_TEST" =~ "-dev" ]] ; then
    if [[ "$_VERSIONS_TEST" =~ "$_INSTALLER_VERSION" ]] && [ "$_AEGIR_VERSION" = "HEAD" ] ; then
      _VERSIONS_TEST_RESULT=OK
      msg "INFO: Version test result: OK"
    else
      _VERSIONS_TEST_RESULT=FAIL
    fi
  else
    if [[ "$_VERSIONS_TEST" =~ "$_INSTALLER_VERSION" ]] && [[ "$_AEGIR_VERSION" =~ "BOA" ]] ; then
      _VERSIONS_TEST_RESULT=OK
      msg "INFO: Version test result: OK"
    else
      _VERSIONS_TEST_RESULT=FAIL
    fi
  fi
  if [ "$_VERSIONS_TEST_RESULT" = "FAIL" ] ; then
    msg "ERROR: This BARRACUDA version is outdated and will not work correctly"
    msg "Please download and use new version:"
    msg "wget -q -U iCab http://files.aegir.cc/versions/BARRACUDA.sh.txt"
    msg "You can also use (for testing) latest dev version:"
    msg "wget -q -U iCab http://drupalcode.org/project/barracuda.git/blob_plain/HEAD:/BARRACUDA.sh.txt"
    msg "Bye"
    exit 1
  fi
fi


###--------------------###
if [ "$_STATUS" = "INIT" ] ; then
  msg "INFO: Installing lsb-release and dnsutils now, please wait..."
  mrun "sleep 1"
  if ! st_runner "$_INSTALL lsb-release dnsutils"; then
    fatal "Installation failed: $?"
  fi
fi


###--------------------###
msg "INFO: Checking your Debian or Ubuntu version..."
mrun "sleep 1"
_THIS_OS=`lsb_release -si`
_THIS_RV=`lsb_release -sc`
if [ "$_THIS_OS" = "Ubuntu" ] ; then
  if [ "$_THIS_RV" = "precise" ] ; then
    _REL_VERSION="precise"
    _HTTP_WILDCARD=YES
    _THIS_DB_HOST=localhost
  elif [ "$_THIS_RV" = "oneiric" ] ; then
    _REL_VERSION="oneiric"
    _HTTP_WILDCARD=YES
    _THIS_DB_HOST=localhost
  elif [ "$_THIS_RV" = "natty" ] ; then
    _REL_VERSION="natty"
  elif [ "$_THIS_RV" = "maverick" ] ; then
    _REL_VERSION="maverick"
  elif [ "$_THIS_RV" = "lucid" ] ; then
    _REL_VERSION="lucid"
  elif [ "$_THIS_RV" = "karmic" ] ; then
    _REL_VERSION="karmic"
    _DB_SERVER=MariaDB
  elif [ "$_THIS_RV" = "jaunty" ] ; then
    _REL_VERSION="jaunty"
    _DB_SERVER=MariaDB
  elif [ "$_THIS_RV" = "hardy" ] ; then
    _REL_VERSION="hardy"
    _DB_SERVER=MariaDB
  else
    not_supported_os
  fi
elif [ "$_THIS_OS" = "Debian" ] ; then
  if [ "$_THIS_RV" = "squeeze" ] ; then
    _REL_VERSION="squeeze"
  elif [ "$_THIS_RV" = "lenny" ] ; then
    _REL_VERSION="lenny"
    _DB_SERVER=MariaDB
    _MARIADB_VERSION=5.3.7
  else
    not_supported_os
  fi
elif [ "$_THIS_OS" = "Jolicloud" ] ; then
  if [ "$_THIS_RV" = "robby" ] ; then
    _THIS_OS=Ubuntu
    _REL_VERSION=jaunty
    _DB_SERVER=MariaDB
  else
    not_supported_os
  fi
else
  not_supported_os
fi
if [ "$_REL_VERSION" = "squeeze" ] || [ "$_REL_VERSION" = "precise" ] ; then
  if [ "$_BUILD_FROM_SRC" = "YES" ] ; then
    _FROM_SOURCES=YES
  else
    _FROM_SOURCES=NO
  fi
else
  _FROM_SOURCES=YES
fi
_AWS_TEST_A=$(grep cloudimg /etc/fstab)
_AWS_TEST_B=$(grep cloudconfig /etc/fstab)
if [[ "$_AWS_TEST_A" =~ "cloudimg" ]] || [[ "$_AWS_TEST_B" =~ "cloudconfig" ]] ; then
  _VMFAMILY="AWS"
  _IFCONFIG="eth0"
  _HTTP_WILDCARD=YES
  _THIS_DB_HOST=localhost
fi
echo " "
msg "Aegir with Nginx on $_THIS_OS/$_REL_VERSION - Skynet Agent v.$_INSTALLER_VERSION"
echo " "
mrun "sleep 1"


###--------------------###
if [ "$_STATUS" = "INIT" ] ; then
  if [ ! -z "$_LOCAL_NETWORK_IP" ] ; then
    if [ -z "$_LOCAL_NETWORK_HN" ] ; then
      msg "FATAL ERROR: you must specify also _LOCAL_NETWORK_HN"
      exit 1
    else
      _DNS_SETUP_TEST=NO
      _SMTP_RELAY_TEST=NO
      _DEBUG_MODE=YES
      _MY_OWNIP="$_LOCAL_NETWORK_IP"
      _MY_HOSTN="$_LOCAL_NETWORK_HN"
      _MY_FRONT="$_LOCAL_NETWORK_HN"
    fi
  fi
fi


###--------------------###
if [ "$_STATUS" = "INIT" ] ; then
  _ETH_TEST=`ifconfig 2>&1`
  if [[ "$_ETH_TEST" =~ "venet0" ]] ; then
    _VMFAMILY="VZ"
    _IFCONFIG="venet0"
  elif [ -e "/proc/bean_counters" ] ; then
    _VMFAMILY="VZ"
    _IFCONFIG="venet0"
  else
    _VMFAMILY="XEN"
    _IFCONFIG="eth0"
  fi
  if [ ! -z "$_MY_OWNIP" ] ; then
    if [ ! -z "$_MY_HOSTN" ] ; then
      _S_N=$_MY_HOSTN
      _S_T=${_S_N#*.*}
      _S_Q=${_S_N%%${_S_T}}
      _S_E=${_S_Q%*.*}
      if [ ! -z "$_LOCAL_NETWORK_HN" ] ; then
        if [ "$_EASY_LOCALHOST" = "YES" ] ; then
          sed -i "s/^$_MY_OWNIP.*//g" /etc/hosts
        else
          sed -i "s/^$_MY_OWNIP.*//g" /etc/hosts
          echo "$_MY_OWNIP $_MY_HOSTN chive.$_MY_HOSTN sqlbuddy.$_MY_HOSTN cgp.$_MY_HOSTN $_S_E" >> /etc/hosts
        fi
      fi
      hostname -v $_MY_HOSTN ### force our custom FQDN/local hostname
      echo "$_MY_HOSTN" > /etc/hostname
      echo "$_MY_HOSTN" > /etc/mailname
    fi
    _THISHTIP="$_MY_OWNIP"
    _THISHOST="$_MY_HOSTN"
    _LOC_DOM="$_THISHOST"
    find_correct_ip
    _THISRDIP="$_LOC_IP"
    if [ "$_THISRDIP" = "$_THISHTIP" ] ; then
      _FQDNTEST="TRUE"
      _LOC_DOM="$_MY_FRONT"
      find_correct_ip
      _THEFRDIP="$_LOC_IP"
      if [ "$_THEFRDIP" = "$_THISHTIP" ] ; then
        _TESTHOST=`uname -n`
        _LOC_DOM="$_TESTHOST"
        find_correct_ip
        _TESTRDIP="$_LOC_IP"
        if [ "$_TESTRDIP" = "$_THISHTIP" ] ; then
          _FQDNTEST="TRUE"
          hostname -v $_TESTHOST
        else
         _FQDNTEST="FALSE"
        fi
      else
        _FQDNTEST="FALSE"
      fi
    else
      _FQDNTEST="FALSE"
    fi
  else
    _THISHTIP=`ifconfig $_IFCONFIG | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}'`
    _FQDNPROB=`uname -n 2> /dev/null`
    _FQDNTEST="FALSE"
    _THISHOST=`uname -n`
    if [ ! -z "$_FQDNPROB" ] ; then
      _THISHOST=`uname -n`
      _THISHOST=${_THISHOST//[^a-zA-Z0-9-.]/}
      _THISHOST=`echo -n $_THISHOST | tr A-Z a-z`
      _LOC_DOM="$_THISHOST"
      find_correct_ip
      _THISRDIP="$_LOC_IP"
      if [ "$_THISRDIP" = "$_THISHTIP" ] ; then
        _FQDNTEST="TRUE"
        hostname -v $_THISHOST
      else
        _FQDNTEST="FALSE"
        _REVHOSTN=`host $_THISHTIP | cut -d: -f2 | awk '{ print $5}'`
        _REVHOSTN=`echo -n $_REVHOSTN |sed 's/\(.*\)./\1/'`
        _REVHOSTN=${_REVHOSTN//[^a-zA-Z0-9-.]/}
        _REVHOSTN=`echo -n $_REVHOSTN | tr A-Z a-z`
        _LOC_DOM="$_REVHOSTN"
        find_correct_ip
        _REVHSTIP="$_LOC_IP"
        if [ "$_REVHSTIP" = "$_THISHTIP" ] ; then
          hostname -v $_REVHOSTN
          _THISHOST="$_REVHOSTN"
          _FQDNTEST="TRUE"
        else
          _FQDNTEST="FALSE"
        fi
      fi
    else
      _REVHOSTN=`host $_THISHTIP | cut -d: -f2 | awk '{ print $5}'`
      _REVHOSTN=`echo -n $_REVHOSTN |sed 's/\(.*\)./\1/'`
      _REVHOSTN=${_REVHOSTN//[^a-zA-Z0-9-.]/}
      _REVHOSTN=`echo -n $_REVHOSTN | tr A-Z a-z`
      _LOC_DOM="$_REVHOSTN"
      find_correct_ip
      _REVHSTIP="$_LOC_IP"
      if [ "$_REVHSTIP" = "$_THISHTIP" ] ; then
        hostname -v $_REVHOSTN
        _THISHOST="$_REVHOSTN"
        _FQDNTEST="TRUE"
      else
       _FQDNTEST="FALSE"
      fi
    fi
  fi
  if [ ! -z "$_MY_FRONT" ] ; then
    _THIS_FRONT="$_MY_FRONT"
  else
    _THIS_FRONT="$_THISHOST"
  fi
  if [ "$_DNS_SETUP_TEST" = "NO" ] ; then
    _FQDNTEST=TRUE
  fi
  if [ "$_THISHOST" = "localhost" ] ; then
    msg "FATAL ERROR: you can't use localhost as your FQDN hostname"
    msg "Please try something like: aegir.local"
    exit 1
  fi
  if [ "$_FQDNTEST" = "FALSE" ] ; then
    echo " "
    msg "EXIT on error due to invalid DNS setup"
    if [ ! -z "$_MY_OWNIP" ] ; then
      cat <<EOF

  * Your custom _MY_OWNIP is set to "$_MY_OWNIP"
  * Your custom _MY_HOSTN is set to "$_MY_HOSTN"
  * Your custom _MY_FRONT is set to "$_MY_FRONT"

  * Your _MY_HOSTN and/or _MY_FRONT doesn't match your _MY_OWNIP,
    or your hostname is not set properly yet.

  * Please make sure that below command returns your FQDN hostname "$_MY_HOSTN":

  $ uname -n

EOF
    fi
    cat <<EOF

  * Your server has to have already working FQDN hostname matching your IP address.
    This means you _have to_ configure the dns for your server IP/hostname _before_
    trying to use this install script. Reverse dns is _not_ required.

  * Your hostname appears to be $_THISHOST - are you sure it's a valid FQDN hostname?

  * Are you sure your FQDN hostname matches your IP address: $_THISHTIP?

EOF
    msg "EXIT on error due to invalid DNS setup"
    exit 1
  else
    echo "$_THISHOST" > /etc/hostname
    echo "$_THISHOST" > /etc/mailname
    hostname -v $_THISHOST
    msg "DNS test OK - your FQDN hostname is $_THISHOST and it matches your IP $_THISHTIP"
    msg "Please double check whether this is a valid result of my test"
  fi
  mrun "sleep 1"
  echo " "
  msg "INSTALL START -> checkpoint: "
  cat <<EOF

  * Your e-mail address appears to be $_MY_EMAIL - is that correct?
  * Your IP address appears to be $_THISHTIP - are you sure it's a valid IP?
  * Your hostname appears to be $_THISHOST - are you sure it's a valid FQDN hostname?
EOF
  echo " "
  if prompt_yes_no "Do you want to proceed with the install?" ; then
    true
  else
    echo "Installation aborted by you"
    exit 1
  fi
else ### if [ "$_STATUS" = "UPGRADE" ] ; then
  _THISHOST=`cat /etc/hostname`
  _THISHOST=`echo -n $_THISHOST | tr -d "\n"`
  _THISHOST=${_THISHOST//[^a-zA-Z0-9-.]/}
  _THISHOST=`echo -n $_THISHOST | tr A-Z a-z`
  if [ -e "/var/aegir/.drush/hostmaster.alias.drushrc.php" ] ; then
    _THIS_FRONT=`cat /var/aegir/.drush/hostmaster.alias.drushrc.php | grep "uri'" | cut -d: -f2 | awk '{ print $3}' | sed "s/[\,']//g"`
  elif [ ! -z "$_MY_FRONT" ] ; then
    _THIS_FRONT="$_MY_FRONT"
  else
    msg "EXIT on error due to not found or not specified Aegir domain"
    msg "Please specify your previously working Aegir domain as a value of _MY_FRONT"
    exit 1
  fi
  mrun "sleep 1"
  echo " "
  msg "UPGRADE START -> checkpoint: "
  cat <<EOF

  * Your e-mail address appears to be $_MY_EMAIL - is that correct?
  * Your server hostname is $_THISHOST.
  * Your Aegir control panel is/will be available at https://$_THIS_FRONT.

EOF
  echo " "
  if prompt_yes_no "Do you want to proceed with the upgrade?" ; then
    true
  else
    echo "Upgrade aborted by you"
    exit 1
  fi
fi


###--------------------###
if [ "$_THIS_DB_HOST" = "FQDN" ] ; then
  _THIS_DB_HOST="$_THISHOST"
fi


###--------------------###
msg "INFO: Cleaning up temp files in /var/opt/"
mrun "sleep 1"
rm -f -r /var/opt/*
mkdir -p /var/log/php
chmod 777 /var/log/php* &> /dev/null
mkdir -p /var/backups/dragon/{x,z,t}


###--------------------###
install_pdnsd_cache () {
  msg "INFO: Installing DNS cache pdnsd server, please wait..."
  mrun "sleep 1"
  cp -a /etc/resolv.conf /var/backups/resolv.conf.bak
  st_runner "$_INSTALL pdnsd resolvconf";
  sed -i "s/START_DAEMON=no/START_DAEMON=yes/g" /etc/default/pdnsd &> /dev/null
  cat /opt/tmp/$_BOA_REPO_NAME/aegir/conf/pdnsd.conf > /etc/pdnsd.conf
  if [ -e "﻿/etc/NetworkManager/NetworkManager.conf" ] ; then
    sed -i "s/^dns=.*/dns=pdnsd/g" ﻿/etc/NetworkManager/NetworkManager.conf &> /dev/null
    st_runner "service network-manager restart" &> /dev/null
  fi
  st_runner "service pdnsd stop" &> /dev/null
  rm -f /var/cache/pdnsd/pdnsd.cache
  st_runner "service pdnsd start" &> /dev/null
  mrun "sleep 1"
  st_runner "service pdnsd stop" &> /dev/null
  mrun "sleep 1"
  rm -f /var/cache/pdnsd/pdnsd.cache
  st_runner "service pdnsd start" &> /dev/null
}
_INSTALL_PDNSD=NO
_HOSTN_TEST=`hostname -f 2>&1`
if [[ "$_HOSTN_TEST" =~ "Name or service not known" ]] ; then
  _INSTALL_PDNSD=YES
fi
if [[ "$_HOSTN_TEST" =~ "Temporary failure in name resolution" ]] ; then
  _INSTALL_PDNSD=YES
fi
if [ ! -z "$_LOCAL_NETWORK_HN" ] ; then
  _INSTALL_PDNSD=YES
fi
if [ -f "/etc/default/dhcpcd" ] ; then
  _INSTALL_PDNSD=YES
  sed -i "s/.*SET_DNS/#SET_DNS/g" /etc/default/dhcpcd &> /dev/null
  sed -i "s/.*SET_HOSTNAME/#SET_HOSTNAME/g" /etc/default/dhcpcd &> /dev/null
fi
if [ ! -e "/usr/sbin/pdnsd" ] ; then
  if [ "$_INSTALL_PDNSD" = "NO" ] && [ ! -e "/var/run/cloud_vhost.pid" ] ; then
    if [ "$_XTRAS_LIST" = "ALL" ] || [[ "$_XTRAS_LIST" =~ "PDS" ]] ; then
      echo " "
      if prompt_yes_no "Do you want to install fast DNS cache pdnsd server?" ; then
        true
        install_pdnsd_cache
        msg "INFO: DNS cache pdnsd server installation completed"
        mrun "sleep 1"
      else
        msg "INFO: DNS cache pdnsd server installation skipped"
        mrun "sleep 1"
      fi
    fi
  elif [ "$_INSTALL_PDNSD" = "YES" ] ; then
    install_pdnsd_cache
  fi
fi


###--------------------###
if [ -e "/var/log/apt-fast-install-log.txt" ] ; then
  _APT_SOURCES_REWRITE=NO
  if [ ! -z "$_LOCAL_DEBIAN_MIRROR" ] ; then
    _APT_SOURCES_REWRITE=YES
  fi
  if [ ! -z "$_LOCAL_UBUNTU_MIRROR" ] ; then
    _APT_SOURCES_REWRITE=YES
  fi
  if [ "$_REL_VERSION" = "lenny" ] ; then
    sed -i "s/^deb.*security.debian.org.*/## security updates no longer available for lenny/g" /etc/apt/sources.list &> /dev/null
    sed -i "s/ftp.*debian.org/archive.debian.org/g" /etc/apt/sources.list &> /dev/null
    sed -i "s/volatile.debian.org/archive.debian.org/g" /etc/apt/sources.list &> /dev/null
  fi
  if [ "$_LENNY_TO_SQUEEZE" = "YES" ] && [ "$_REL_VERSION" = "lenny" ] ; then
    run_apt_update_again
    _LOC_REL_VERSION=lenny
    _REL_VERSION=squeeze
    _APT_SOURCES_REWRITE=YES
  fi
  if [ "$_REL_VERSION" = "squeeze" ] ; then
    _VOLATILE_TEST=$(grep "MAJOR BUG FIX UPDATES" /etc/apt/sources.list)
    if [[ "$_VOLATILE_TEST" =~ "MAJOR BUG FIX UPDATES" ]] ; then
      true
    else
      _APT_SOURCES_REWRITE=YES
    fi
    if [ ! -e "/etc/apt/sources.list.d/dotdeb.list" ] ; then
      _APT_SOURCES_REWRITE=YES
    fi
  fi
else
  _APT_SOURCES_REWRITE=YES
fi
if [ "$_APT_SOURCES_REWRITE" = "YES" ] ; then
  msg "INFO: Updating apt sources"
  mrun "sleep 1"
  mv -f /etc/apt/sources.list /var/backups/sources.list-pre-$_INSTALLER_VERSION-$_NOW &> /dev/null
  if [ "$_THIS_OS" = "Ubuntu" ] ; then
    if [ "$_AUTOPILOT" = "YES" ] ; then
      _MIRROR=archive.ubuntu.com
    else
      if [ -z "$_LOCAL_UBUNTU_MIRROR" ] ; then
        msg "INFO: Now looking for the best/fastest $_THIS_OS mirror, this may take a while, please wait..."
        mrun "sleep 1"
        cd /opt/tmp/$_BOA_REPO_NAME/aegir/helpers
        _MIRROR=`bash ffmirror.sh.txt < apt-list-ubuntu.txt`
        _MIRROR=`bash ffmirror.sh.txt < apt-list-ubuntu.txt`
        echo " "
        prompt_confirm_choice "Enter your own mirror to use or press enter to use the fastest found mirror" $_MIRROR
        echo " "
        _MIRROR=$_CONFIRMED_ANSWER
      else
        _MIRROR=$_LOCAL_UBUNTU_MIRROR
      fi
      if ! netcat -w 5 -z $_MIRROR 80 ; then
        msg "INFO: The mirror $_MIRROR doesn't respond now, let's try default"
        _MIRROR=archive.ubuntu.com
      fi
    fi
    msg "INFO: We will use $_THIS_OS mirror $_MIRROR"
    cd /var/opt
    mrun "sleep 1"
    echo "## MAIN REPOSITORIES" > /etc/apt/sources.list
    echo "deb http://$_MIRROR/ubuntu/ $_REL_VERSION main restricted universe multiverse" >> /etc/apt/sources.list
    echo "deb-src http://$_MIRROR/ubuntu/ $_REL_VERSION main restricted universe multiverse" >> /etc/apt/sources.list
    echo "" >> /etc/apt/sources.list
    echo "## MAJOR BUG FIX UPDATES produced after the final release" >> /etc/apt/sources.list
    echo "deb http://$_MIRROR/ubuntu/ $_REL_VERSION-updates main restricted universe multiverse" >> /etc/apt/sources.list
    echo "deb-src http://$_MIRROR/ubuntu/ $_REL_VERSION-updates main restricted universe multiverse" >> /etc/apt/sources.list
    echo "" >> /etc/apt/sources.list
    echo "## UBUNTU SECURITY UPDATES" >> /etc/apt/sources.list
    echo "deb http://security.ubuntu.com/ubuntu $_REL_VERSION-security main restricted universe multiverse" >> /etc/apt/sources.list
    echo "deb-src http://security.ubuntu.com/ubuntu $_REL_VERSION-security main restricted universe multiverse" >> /etc/apt/sources.list
  elif [ "$_THIS_OS" = "Debian" ] ; then
    _MIRROR_CHECK=NO
    if [ "$_REL_VERSION" = "lenny" ] ; then
      _MIRROR=archive.debian.org
    else
      if [ "$_AUTOPILOT" = "YES" ] ; then
        _MIRROR=ftp.debian.org
      else
        _MIRROR_CHECK=YES
      fi
    fi
    if [ "$_MIRROR_CHECK" = "YES" ] ; then
      if [ -z "$_LOCAL_DEBIAN_MIRROR" ] ; then
        msg "INFO: Now looking for the best/fastest $_THIS_OS mirror, this may take a while, please wait..."
        mrun "sleep 1"
        cd /opt/tmp/$_BOA_REPO_NAME/aegir/helpers
        _MIRROR=`bash ffmirror.sh.txt < apt-list-debian.txt`
        _MIRROR=`bash ffmirror.sh.txt < apt-list-debian.txt`
        echo " "
        prompt_confirm_choice "Enter your own mirror to use or press enter to use the fastest found mirror" $_MIRROR
        echo " "
        _MIRROR=$_CONFIRMED_ANSWER
      else
        _MIRROR=$_LOCAL_DEBIAN_MIRROR
      fi
      if ! netcat -w 5 -z $_MIRROR 80 ; then
        msg "INFO: The mirror $_MIRROR doesn't respond now, let's try default"
        _MIRROR=ftp.debian.org
      fi
    fi
    msg "INFO: We will use $_THIS_OS mirror $_MIRROR"
    cd /var/opt
    mrun "sleep 1"
    echo "## MAIN REPOSITORIES" > /etc/apt/sources.list
    echo "deb http://$_MIRROR/debian/ $_REL_VERSION main contrib non-free" >> /etc/apt/sources.list
    echo "deb-src http://$_MIRROR/debian/ $_REL_VERSION main contrib non-free" >> /etc/apt/sources.list
    echo "" >> /etc/apt/sources.list
    echo "## MAJOR BUG FIX UPDATES produced after the final release" >> /etc/apt/sources.list
    if [ "$_REL_VERSION" = "lenny" ] ; then
      echo "deb http://archive.debian.org/debian-volatile $_REL_VERSION/volatile main contrib non-free" >> /etc/apt/sources.list
      echo "deb-src http://archive.debian.org/debian-volatile $_REL_VERSION/volatile main contrib non-free" >> /etc/apt/sources.list
    fi
    if [ "$_REL_VERSION" = "squeeze" ] ; then
      echo "deb http://$_MIRROR/debian/ $_REL_VERSION-updates main" >> /etc/apt/sources.list
      echo "deb-src http://$_MIRROR/debian/ $_REL_VERSION-updates main" >> /etc/apt/sources.list
      echo "" >> /etc/apt/sources.list
      echo "## DEBIAN SECURITY UPDATES" >> /etc/apt/sources.list
      echo "deb http://security.debian.org/ $_REL_VERSION/updates main contrib non-free" >> /etc/apt/sources.list
      echo "deb-src http://security.debian.org/ $_REL_VERSION/updates main contrib non-free" >> /etc/apt/sources.list
      echo "## Dotdeb APT Repository" > /etc/apt/sources.list.d/dotdeb.list
      echo "deb http://packages.dotdeb.org squeeze all" >> /etc/apt/sources.list.d/dotdeb.list
      echo "deb-src http://packages.dotdeb.org squeeze all" >> /etc/apt/sources.list.d/dotdeb.list
      cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/etc-apt-preferences.txt /etc/apt/preferences
      _KEYS_SERVER_TEST=FALSE
      until [[ "$_KEYS_SERVER_TEST" =~ "GnuPG" ]] ; do
        rm -f dotdeb.gpg*
        wget -q -U iCab http://www.dotdeb.org/dotdeb.gpg
        _KEYS_SERVER_TEST=`grep GnuPG dotdeb.gpg 2> /dev/null`
        sleep 2
      done
      cat dotdeb.gpg | apt-key add - &> /dev/null
      rm -f dotdeb.gpg*
    fi
  fi
  touch /var/log/apt-fast-install-log.txt
  cd /var/opt
fi


###--------------------###
if [ "$_LENNY_TO_SQUEEZE" = "YES" ] && [ "$_LOC_REL_VERSION" = "lenny" ] ; then
  _FULL_FORCE_REINSTALL=YES
  msg "WARN: Lenny to Squeeze upgrade will start in 60 seconds..."
  msg "WARN: Now pray it will work... or hit ctrl-c to stop now!"
  service cron stop &> /dev/null
  mrun "sleep 60"
  mv -f /var/xdrago /var/xdrago_wait &> /dev/null
  msg "WARN: Too late! Lenny to Squeeze upgrade in progress..."
  msg "HINT: Run tail -f $_LOG"
  msg "HINT: in another terminal window to watch details"
  mrun "sleep 1"
  if [ -e "/etc/init.d/bind" ] ; then
    rm -f /etc/init.d/bind
  fi
  if [ -e "/etc/init.d/tomcat" ] ; then
    cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/tomcat /etc/init.d/tomcat &> /dev/null
    chmod 755 /etc/init.d/tomcat
    st_runner "update-rc.d tomcat defaults" &> /dev/null
  fi
  if [ -d "/var/www/cgp" ] ; then
    st_runner "apt-get -y remove collectd" 2> /dev/null
  fi
  st_runner "apt-get -y remove libc-client2007b-dev" 2> /dev/null
  st_runner "apt-get update -y" &> /dev/null
  st_runner "apt-get -f -y -q --config-file /opt/tmp/apt.conf.noninteractive install apt dpkg aptitude" 2> /dev/null
  st_runner "apt-get -f -y -q --config-file /opt/tmp/apt.conf.noninteractive dist-upgrade" 2> /dev/null
  st_runner "apt-get -y install libgeoip1 libgeoip-dev geoip-database" 2> /dev/null
  install_latest_git
  if [ "$_FROM_SOURCES" = "YES" ] || [ "$_NGINX_FROM_SOURCES" = "YES" ] ; then
    install_upgrade_nginx
  fi
  if [ -e "/etc/init.d/bind9" ] && [ ! -e "/etc/init.d/bind" ] ; then
    ln -s /etc/init.d/bind9 /etc/init.d/bind
  fi
  if [ -d "/var/www/cgp" ] ; then
    st_runner "apt-get -y install collectd" 2> /dev/null
  fi
  st_runner "apt-get -y install libc-client2007e-dev" 2> /dev/null
  _L_VM_TEST=`uname -a 2>&1`
  if [[ "$_L_VM_TEST" =~ beng ]] ; then
    _REMOVE_LINKS="halt hwclock.sh hwclockfirst.sh ifupdown ifupdown-clean klogd mountall-bootclean.sh mountall.sh mountdevsubfs.sh mountkernfs.sh mountnfs-bootclean.sh mountnfs.sh mountoverflowtmp mountvirtfs mtab.sh networking reboot setserial umountfs umountnfs.sh umountroot urandom"
    for link in $_REMOVE_LINKS
    do
      update-rc.d -f $link remove &> /dev/null
    done
  fi
  echo rotate > /var/log/syslog &> /dev/null
  mv -f /var/xdrago_wait /var/xdrago &> /dev/null
  msg "INFO: No errors? Then Lenny to Squeeze upgrade was successful - congrats!"
  msg "HINT: Please remember to reboot when Barracuda will complete all upgrades"
fi


###--------------------###
if [ -d "/etc/webmin" ] ; then
  if [ ! -e "/var/log/webmin_new_apt.log" ] ; then
    cd /var/opt
    wget -q -U iCab http://files.aegir.cc/dev/jcameron-key.asc
    apt-key add jcameron-key.asc &> /dev/null
    touch /var/log/webmin_new_apt.log
  fi
fi


###--------------------###
msg "INFO: Running aptitude update, please wait..."
if [ "$_REL_VERSION" = "lenny" ] ; then
  sed -i "s/^deb.*security.debian.org.*/## security updates no longer available for lenny/g" /etc/apt/sources.list &> /dev/null
  sed -i "s/ftp.*debian.org/archive.debian.org/g" /etc/apt/sources.list &> /dev/null
  sed -i "s/volatile.debian.org/archive.debian.org/g" /etc/apt/sources.list &> /dev/null
else
  st_runner "dpkg --configure --force-all -a" 2> /dev/null
fi
st_runner "aptitude update -y" &> /dev/null
_DB_SERVER_TEST=`mysql -V 2>&1`
if [ "$_STATUS" = "INIT" ] ; then
  st_runner "aptitude -f -y -q -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confold safe-upgrade" 2> /dev/null
  st_runner "aptitude update -y" &> /dev/null
  st_runner "aptitude clean -y" &> /dev/null
  st_runner "aptitude -f -y -q -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confold full-upgrade" 2> /dev/null
  st_runner "aptitude autoclean -y" &> /dev/null
else
  rm -f /var/lib/mysql/debian-*.flag &> /dev/null
  _KEYS_SERVER_TEST=FALSE
  service cron stop &> /dev/null
  csf -x &> /dev/null
  until [[ "$_KEYS_SERVER_TEST" =~ "Monty" ]] ; do
    _KEYS_SERVER_TEST=`apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 1BB943DB 2>&1`
    sleep 2
  done
  _UP_PHP=NO
  _UP_NGX=NO
  _UP_JDK=NO
  check_apt_updates
fi


###--------------------###
if [ "$_STATUS" = "INIT" ] ; then
  msg "INFO: Installing required libraries and tools"
else
  msg "INFO: Upgrading required libraries and tools"
  if [ ! -e "/etc/init.d/php5-fpm" ] ; then
    cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/php5-fpm-init-vanilla /etc/init.d/php5-fpm
  fi
fi
msg "NOTE! This step may take a few minutes, please wait..."
if [ "$_FROM_SOURCES" = "NO" ] ; then
  _APT_SQUEEZE="openjdk-6-jdk nginx-extras"
else
  _APT_SQUEEZE="openjdk-6-jdk nginx"
fi
if [ "$_XTRAS_LIST" = "ALL" ] || [[ "$_XTRAS_LIST" =~ "FMG" ]] ; then
  if [ "$_REL_VERSION" = "squeeze" ] ; then
    _EXTRA_APT="tree ffmpeg flvtool2 libavcodec52"
  elif [ "$_REL_VERSION" = "lucid" ] || [ "$_REL_VERSION" = "maverick" ] || [ "$_REL_VERSION" = "natty" ] ; then
    _EXTRA_APT="tree ffmpeg flvtool2 libavcodec-extra-52"
  elif [ "$_REL_VERSION" = "wheezy" ] || [ "$_REL_VERSION" = "oneiric" ] || [ "$_REL_VERSION" = "precise" ] ; then
    _EXTRA_APT="tree ffmpeg flvtool2 libavcodec-extra-53"
  else
    _EXTRA_APT="tree ffmpeg flvtool2 libavcodec51"
  fi
else
  _EXTRA_APT="tree"
fi
if [ "$_USE_MEMCACHED" = "YES" ] ; then
  _EXTRA_LIB_APT="libmcrypt-dev libmemcache-dev"
else
  _EXTRA_LIB_APT="libmcrypt-dev"
fi
if [ "$_REL_VERSION" = "lenny" ] ; then
  _DEBDEPS="apticron aptitude autoconf2.13 automake automake1.4 autotools-dev bc bison build-essential cron curl cvs defoma devscripts dnsutils dstat flex fontconfig-config ghostscript gnupg imagemagick htop ifstat iptables lemon libapr1 libaprutil1 libc-client-dev libc-client2007b libc-client2007b-dev libcurl4-openssl-dev libfilesys-diskspace-perl libfontconfig1 libfreetype6 libfreetype6-dev libfribidi0 libgd2-xpm libhtml-template-perl libjpeg-dev libjpeg62 $_EXTRA_LIB_APT libnet-daemon-perl libpcre3 libpcre3-dev libplrpc-perl libpng12-dev libpng12-0 libpq5 libsasl2-modules libssl-dev libt1-5 libt1-dev libtool libwww-perl libxml2-dev libxpm4 libxslt-dev libxslt1-dbg libxslt1-dev libxslt1.1 lftp m4 makepasswd mc mcrypt nano netcat nginx ncurses-dev openjdk-6-jdk postfix postfix-pcre pwgen python-dev re2c rsync shtool ssh ssl-cert subversion sudo sysstat sysvconfig t1lib-bin telnet time ttf-dejavu ttf-dejavu-core ttf-dejavu-extra vim whois xml-core xml2 zlib1g-dev zlibc unzip zip xpdf catdoc unrtf pdftk libterm-readkey-perl rrdtool libpam-umask ntpdate p7zip-full sipcalc rsyslog libgmp3-dev symlinks libgeoip1 libgeoip-dev libmagick9-dev gettext ncurses-term screen $_EXTRA_APT"
elif [ "$_REL_VERSION" = "squeeze" ] || [ "$_REL_VERSION" = "lucid" ] || [ "$_REL_VERSION" = "maverick" ] || [ "$_REL_VERSION" = "natty" ] || [ "$_REL_VERSION" = "oneiric" ] || [ "$_REL_VERSION" = "precise" ] ; then
  _DEBDEPS="apticron aptitude autoconf2.13 automake automake1.4 autotools-dev bc bison build-essential cron curl cvs defoma devscripts dnsutils dstat flex fontconfig-config ghostscript gnupg imagemagick htop ifstat iptables libapr1 lemon libaprutil1 libc-client-dev libc-client2007e libc-client2007e-dev libcurl4-openssl-dev libfilesys-diskspace-perl libfontconfig1 libfreetype6 libfreetype6-dev libfribidi0 libgd2-xpm libhtml-template-perl libjpeg-dev libjpeg62 $_EXTRA_LIB_APT libnet-daemon-perl libpcre3 libpcre3-dev libplrpc-perl libpng12-0 libpng12-dev libpq5 libsasl2-modules libssl-dev libt1-5 libt1-dev libtool libwww-perl libxml2-dev libxpm4 libxslt-dev libxslt1-dbg libxslt1-dev libxslt1.1 lftp m4 makepasswd mc mcrypt nano netcat ncurses-dev $_APT_SQUEEZE postfix postfix-pcre pwgen python-dev re2c redis-server rsync shtool ssh ssl-cert subversion sudo sysstat sysvinit-utils t1lib-bin telnet time ttf-dejavu ttf-dejavu-core ttf-dejavu-extra unzip vim whois xml-core xml2 zip zlib1g-dev zlibc xpdf catdoc unrtf pdftk libterm-readkey-perl rrdtool libpam-umask ntpdate p7zip-full sipcalc rsyslog libgmp3-dev symlinks libgeoip1 libgeoip-dev geoip-database libmagickwand-dev gettext ncurses-term screen $_EXTRA_APT"
else
  _DEBDEPS="apticron aptitude autoconf2.13 automake automake1.4 autotools-dev bc bison build-essential cron curl cvs defoma devscripts dnsutils dstat flex fontconfig-config ghostscript gnupg imagemagick htop ifstat iptables lemon libapr1 libaprutil1 libc-client-dev libc-client2007b libc-client2007b-dev libcurl4-openssl-dev libfilesys-diskspace-perl libfontconfig1 libfreetype6 libfreetype6-dev libfribidi0 libgd2-xpm libhtml-template-perl libjpeg-dev libjpeg62 $_EXTRA_LIB_APT libnet-daemon-perl libpcre3 libpcre3-dev libplrpc-perl libpng12-dev libpng12-0 libpq5 libsasl2-modules libssl-dev libt1-5 libt1-dev libtool libwww-perl libxml2-dev libxpm4 libxslt-dev libxslt1-dbg libxslt1-dev libxslt1.1 lftp m4 makepasswd mc mcrypt nano netcat nginx ncurses-dev openjdk-6-jdk postfix postfix-pcre pwgen python-dev re2c rsync shtool ssh ssl-cert subversion sudo sysstat sysvinit-utils t1lib-bin telnet time ttf-dejavu ttf-dejavu-core ttf-dejavu-extra vim whois xml-core xml2 zlib1g-dev zlibc unzip zip xpdf catdoc unrtf pdftk libterm-readkey-perl rrdtool libpam-umask ntpdate p7zip-full sipcalc rsyslog libgmp3-dev symlinks libgeoip1 libgeoip-dev libmagick9-dev gettext ncurses-term screen $_EXTRA_APT"
fi

install_with_aptitude_deps () {
  st_runner "$_INSTAPP $_DEBDEPS" 2> /dev/null
}
install_percona_sql () {
  cd /var/opt
  _KEYS_SERVER_TEST=FALSE
  until [[ "$_KEYS_SERVER_TEST" =~ "Percona" ]] ; do
    _KEYS_SERVER_TEST=`gpg --keyserver hkp://keys.gnupg.net --recv-keys 1C4CBDCDCD2EFD2A 2>&1`
    sleep 2
  done
  gpg -a --export CD2EFD2A | apt-key add - &> /dev/null
  _THIS_REL_VERSION="$_REL_VERSION"
  if [ "$_REL_VERSION" = "precise" ] ; then
    _THIS_REL_VERSION="oneiric"
  fi
  echo "## Percona APT Repository" > /etc/apt/sources.list.d/percona.list
  echo "deb http://repo.percona.com/apt $_THIS_REL_VERSION main" >> /etc/apt/sources.list.d/percona.list
  echo "deb-src http://repo.percona.com/apt $_THIS_REL_VERSION main" >> /etc/apt/sources.list.d/percona.list
  st_runner "apt-get autoremove -y"          &> /dev/null
  st_runner "apt-get remove mysql-common -y" &> /dev/null
  st_runner "apt-get purge mysql-common -y"  &> /dev/null
  st_runner "apt-get autoremove -y"          &> /dev/null
  st_runner "apt-get update -y"              &> /dev/null
  SQLDEB="percona-server-server-5.5"
  if [ "$_REL_VERSION" = "squeeze" ] ; then
    SQLADD="libmysqlclient-dev libmysqld-dev libdbd-mysql-perl python-mysqldb libdbi-perl percona-toolkit mytop"
  else
    SQLADD="libmysqlclient-dev libmysqld-dev libdbd-mysql-perl python-mysqldb libdbi-perl mytop"
  fi
}
install_mariadb_sql () {
  cd /var/opt
  _KEYS_SERVER_TEST=FALSE
  until [[ "$_KEYS_SERVER_TEST" =~ "Monty" ]] ; do
    _KEYS_SERVER_TEST=`apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 1BB943DB 2>&1`
    sleep 2
  done
  if [ "$_THIS_OS" = "Debian" ] ; then
    _THIS_OS_NAME=debian
  elif [ "$_THIS_OS" = "Ubuntu" ] ; then
    _THIS_OS_NAME=ubuntu
  fi
  if [ "$_REL_VERSION" = "lenny" ] ; then
    _MARIADB_SERIES=5.3
  else
    _MARIADB_SERIES=5.5
  fi
  _THIS_REL_VERSION="$_REL_VERSION"
  if [ "$_REL_VERSION" = "precise" ] ; then
    _THIS_REL_VERSION="oneiric"
  fi
  echo "## MariaDB APT Repository" > /etc/apt/sources.list.d/mariadb.list
  echo "deb http://ftp.osuosl.org/pub/mariadb/repo/$_MARIADB_SERIES/$_THIS_OS_NAME $_THIS_REL_VERSION main" >> /etc/apt/sources.list.d/mariadb.list
  echo "deb-src http://ftp.osuosl.org/pub/mariadb/repo/$_MARIADB_SERIES/$_THIS_OS_NAME $_THIS_REL_VERSION main" >> /etc/apt/sources.list.d/mariadb.list
  st_runner "apt-get autoremove -y"                       &> /dev/null
  st_runner "apt-get remove mysql-common -y"              &> /dev/null
  st_runner "apt-get purge mysql-common -y"               &> /dev/null
  st_runner "apt-get remove percona-server-common-5.5 -y" &> /dev/null
  st_runner "apt-get purge percona-server-common-5.5 -y"  &> /dev/null
  st_runner "apt-get autoremove -y"                       &> /dev/null
  st_runner "apt-get update -y"                           &> /dev/null
  SQLDEB="mariadb-server-$_MARIADB_SERIES mariadb-client-$_MARIADB_SERIES mariadb-common"
  SQLADD="libmariadbclient-dev libmariadbclient16 libmariadbd-dev libdbd-mysql-perl python-mysqldb libdbi-perl mytop"
}
install_with_aptitude_sql () {
  if [ "$_REL_VERSION" = "squeeze" ] || [ "$_REL_VERSION" = "lucid" ] || [ "$_REL_VERSION" = "maverick" ] || [ "$_REL_VERSION" = "natty" ] || [ "$_REL_VERSION" = "oneiric" ] || [ "$_REL_VERSION" = "precise" ] ; then
    _PERCONA_READY=YES
  else
    _PERCONA_READY=NO
  fi
  msg "INFO: Installing $_DB_SERVER, please wait..."
  if [ "$_PERCONA_READY" = "YES" ] && [ "$_DB_SERVER" = "Percona" ] ; then
    install_percona_sql
  else
    install_mariadb_sql
  fi
  st_runner "$_INSTAPP $SQLDEB" 2> /dev/null
  st_runner "$_INSTAPP $SQLADD" 2> /dev/null
  st_runner "$_INSTAPP $SQLDEB" 2> /dev/null
}


###--------------------###
st_runner "apt-get remove exim4 exim4-base exim4-config sendmail sendmail-base sendmail-cf sendmail-bin -y" &> /dev/null
st_runner "apt-get purge exim4 exim4-base exim4-config sendmail sendmail-base sendmail-cf sendmail-bin -y" &> /dev/null
st_runner "apt-get autoremove -y" &> /dev/null
rm -f /etc/aliases
rm -f -r /etc/mail
killall -9 sendmail &> /dev/null
install_with_aptitude_deps
fix_locales
if [ "$_LENNY_TO_SQUEEZE" = "NO" ] ; then
  install_latest_git
  if [ "$_USE_MEMCACHED" = "YES" ] ; then
    install_upgrade_libevent
  fi
  if [ "$_FROM_SOURCES" = "YES" ] || [ "$_NGINX_FROM_SOURCES" = "YES" ] ; then
    install_upgrade_nginx
  fi
fi


if [ "$_STATUS" = "INIT" ] ; then
  service cron stop &> /dev/null
  csf -x &> /dev/null
  install_with_aptitude_sql
else
  _SQL_UPGRADE=NO
  if [ "$_SQL_FORCE_REINSTALL" = "YES" ] || [ "$_FULL_FORCE_REINSTALL" = "YES" ] ; then
    _SQL_UPGRADE=YES
  elif [[ "$_DB_SERVER_TEST" =~ "MariaDB" ]] && [ "$_DB_SERVER" = "Percona" ] ; then
    _SQL_UPGRADE=YES
  elif [[ "$_DB_SERVER_TEST" =~ "Percona" ]] && [ "$_DB_SERVER" = "MariaDB" ] ; then
    _SQL_UPGRADE=YES
  elif [[ "$_DB_SERVER_TEST" =~ "MariaDB" ]] ; then
    if [[ "$_DB_SERVER_TEST" =~ " 5.1." ]] || [[ "$_DB_SERVER_TEST" =~ " 5.2." ]] ; then
      _SQL_UPGRADE=YES
    fi
  elif [ "$_REL_VERSION" = "squeeze" ] && [[ "$_DB_SERVER_TEST" =~ "MariaDB" ]] && [[ "$_DB_SERVER_TEST" =~ " 5.3." ]] ; then
    _SQL_UPGRADE=YES
  fi
  if [ "$_LENNY_TO_SQUEEZE" = "YES" ] && [ "$_LOC_REL_VERSION" = "lenny" ] ; then
    _SQL_UPGRADE=NO
  fi
  if [ "$_SQL_UPGRADE" = "YES" ] ; then
    service cron stop &> /dev/null
    csf -x &> /dev/null
    msg "INFO: Running $_DB_SERVER upgrade and then PHP-FPM forced rebuild, please wait..."
    mrun "sleep 50"
    st_runner "service nginx stop" &> /dev/null
    mrun "sleep 3"
    if [ "$_DB_SERVER" = "Percona" ] ; then
      rm -f /etc/apt/sources.list.d/mariadb.list
      rm -f /etc/apt/sources.list.d/ourdelta.list
      st_runner "apt-get update -y" &> /dev/null
      st_runner "apt-get clean -y --force-yes" 2> /dev/null
    elif [ "$_DB_SERVER" = "MariaDB" ] ; then
      rm -f /etc/apt/sources.list.d/percona.list
      rm -f /etc/apt/sources.list.d/ourdelta.list
      _KEYS_SERVER_TEST=FALSE
      until [[ "$_KEYS_SERVER_TEST" =~ "Monty" ]] ; do
        _KEYS_SERVER_TEST=`apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 1BB943DB 2>&1`
        sleep 2
      done
      st_runner "apt-get update -y" &> /dev/null
      st_runner "apt-get clean -y --force-yes" &> /dev/null
    fi
    cp -af /etc/mysql/debian-start /etc/mysql/debian-start-mariadb &> /dev/null
    sed -i "s/.*default-table-type/#default-table-type/g" /etc/mysql/my.cnf
    sed -i "s/.*language/#language/g" /etc/mysql/my.cnf
    rm -f /var/lib/mysql/debian-*.flag &> /dev/null
    rm -f /var/lib/mysql/mysql_upgrade_info &> /dev/null
    install_with_aptitude_sql
    _THIS_DB_SERVER_TEST=`mysql -V 2>&1`
    if [[ "$_THIS_DB_SERVER_TEST" =~ "5.5." ]] ; then
      true
    else
      sed -i "s/.*lc_messages_dir /#lc_messages_dir /g" /etc/mysql/my.cnf
      sed -i "s/.*lc_messages /#lc_messages /g" /etc/mysql/my.cnf
    fi
    _PHP_FORCE_REINSTALL=YES
    mrun "sleep 8"
    msg "INFO: Restarting $_DB_SERVER server, please wait..."
    st_runner "service mysql restart" &> /dev/null
    mrun "sleep 8"
    st_runner "service mysql restart" &> /dev/null
    st_runner "service nginx start" &> /dev/null
    st_runner "csf -e" &> /dev/null
    msg "INFO: Restarting $_DB_SERVER server completed"
  fi
fi


###--------------------###
run_apt_update_again
install_with_aptitude_deps
st_runner "service php5-fpm stop" &> /dev/null
st_runner "update-rc.d -f php5-fpm remove" &> /dev/null
install_latest_git
if [ "$_LENNY_TO_SQUEEZE" = "NO" ] ; then
  if [ "$_FROM_SOURCES" = "YES" ] && [ "$_USE_MEMCACHED" = "YES" ] ; then
    install_upgrade_libevent
  fi
fi
if [ "$_FROM_SOURCES" = "YES" ] || [ "$_NGINX_FROM_SOURCES" = "YES" ] ; then
  install_upgrade_nginx
fi
set_xterm
kill_nash
fix_ftps_squeeze
enable_purge_cruft_machine
install_wkhtmltopdf


###--------------------###
if [ "$_REL_VERSION" = "natty" ] || [ "$_REL_VERSION" = "oneiric" ] || [ "$_REL_VERSION" = "precise" ] ; then
  if [ ! -L "/usr/lib/libpng.so" ] ; then
    msg "INFO: Fix #1 for libs in Ubuntu $_REL_VERSION"
    _X86_64_TEST=`uname -m`
    if [ "$_X86_64_TEST" = "x86_64" ] ; then
      ln -s /usr/lib/x86_64-linux-gnu/libpng.so  /usr/lib/libpng.so
      ln -s /usr/lib/x86_64-linux-gnu/libjpeg.so /usr/lib/libjpeg.so
      ln -s /usr/lib/x86_64-linux-gnu/libkrb5.so /usr/lib/libkrb5.so
    else
      ln -s /usr/lib/i386-linux-gnu/libpng.so  /usr/lib/libpng.so
      ln -s /usr/lib/i386-linux-gnu/libjpeg.so /usr/lib/libjpeg.so
      ln -s /usr/lib/i386-linux-gnu/libkrb5.so /usr/lib/libkrb5.so
    fi
  fi
fi


###--------------------###
if [ "$_REL_VERSION" = "oneiric" ] || [ "$_REL_VERSION" = "precise" ] ; then
  if [ ! -L "/usr/lib/libssl.so.1.0.0" ] ; then
    msg "INFO: Fix #2 for libs in Ubuntu $_REL_VERSION"
    _X86_64_TEST=`uname -m`
    if [ "$_X86_64_TEST" = "x86_64" ] ; then
      if [ -e "/usr/lib/x86_64-linux-gnu/libssl.so.1.0.0" ] ; then
        ln -s /usr/lib/x86_64-linux-gnu/libssl.so.1.0.0  /usr/lib/libssl.so.1.0.0
      elif [ -e "/lib/x86_64-linux-gnu/libssl.so.1.0.0" ] ; then
        ln -s /lib/x86_64-linux-gnu/libssl.so.1.0.0  /usr/lib/libssl.so.1.0.0
      fi
      if [ -e "/usr/lib/x86_64-linux-gnu/libcrypto.so.1.0.0" ] ; then
        ln -s /usr/lib/x86_64-linux-gnu/libcrypto.so.1.0.0 /usr/lib/libcrypto.so.1.0.0
      elif [ -e "/lib/x86_64-linux-gnu/libcrypto.so.1.0.0" ] ; then
        ln -s /lib/x86_64-linux-gnu/libcrypto.so.1.0.0 /usr/lib/libcrypto.so.1.0.0
      fi
    else
      if [ -e "/usr/lib/i386-linux-gnu/libssl.so.1.0.0" ] ; then
        ln -s /usr/lib/i386-linux-gnu/libssl.so.1.0.0  /usr/lib/libssl.so.1.0.0
      elif [ -e "/lib/i386-linux-gnu/libssl.so.1.0.0" ] ; then
        ln -s /lib/i386-linux-gnu/libssl.so.1.0.0  /usr/lib/libssl.so.1.0.0
      fi
      if [ -e "/usr/lib/i386-linux-gnu/libcrypto.so.1.0.0" ] ; then
        ln -s /usr/lib/i386-linux-gnu/libcrypto.so.1.0.0 /usr/lib/libcrypto.so.1.0.0
      elif [ -e "/lib/i386-linux-gnu/libcrypto.so.1.0.0" ] ; then
        ln -s /lib/i386-linux-gnu/libcrypto.so.1.0.0 /usr/lib/libcrypto.so.1.0.0
      fi
    fi
  fi
fi


###--------------------###
if [ "$_THIS_OS" = "Debian" ] ; then
  chmod 644 /usr/share/git-core/templates/description &> /dev/null
  chmod 644 /usr/share/git-core/templates/hooks/* &> /dev/null
  chmod 644 /usr/share/git-core/templates/info/* &> /dev/null
fi


###--------------------###
if [ ! -e "/var/run/cloud_vhost.pid" ] && [ ! -e "/sbin/udevd" ] ; then
  msg "INFO: Installing udev, just in case it is missing, please wait..."
  mrun "sleep 1"
  st_runner "apt-get -y install udev" 2> /dev/null
fi


###--------------------###
if [ -z "$_SMTP_RELAY_HOST" ] && [ "$_SMTP_RELAY_TEST" = "YES" ] ; then
msg "INFO: Checking SMTP connections, please wait..."
mrun "sleep 1"
if ! netcat -w 8 -z smtp.postoffice.net 25 ; then
  WE_NEED_RELAY="YES"
  cat <<EOF

  Your outgoing SMTP port 25 doesn't work
  as expected, so your server can't send out
  any e-mails directly.

  It appears you need a SMTP relayhost added
  in your Postfix /etc/postfix/main.cf config.

  Please enter your SMTP relay host name
  as a value for _SMTP_RELAY_HOST="smtp.your.relay.server"

  Then run this script again.

EOF
  exit 1
else
  true
fi
###
### required if you have closed outgoing smtp port and you have to use smtp relay
###
if [ ! -z "$_SMTP_RELAY_HOST" ] ; then
  sed -i "s/$_SMTP_RELAY_HOST//g" /etc/postfix/main.cf &> /dev/null
  sed -i "s/relayhost =/relayhost = $_SMTP_RELAY_HOST/g" /etc/postfix/main.cf &> /dev/null
  postfix reload &> /dev/null
fi
###
###
fi


###--------------------###
if [ "$_FROM_SOURCES" = "NO" ] ; then
  _X_INIT_TEST=`cat /etc/init.d/nginx 2>&1`
  if [[ "$_X_INIT_TEST" =~ "test_nginx_config" ]] ; then
    true
  else
    mv -f /etc/init.d/nginx /var/backups/nginx-pre-$_INSTALLER_VERSION-$_NOW &> /dev/null
    cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/nginx-squeeze-init /etc/init.d/nginx
    chmod 755 /etc/init.d/nginx &> /dev/null
  fi
else
  _X_INIT_TEST=`cat /etc/init.d/nginx 2>&1`
  if [[ "$_X_INIT_TEST" =~ "Barracuda" ]] ; then
    true
    sed -i "s/sleep 5/sleep 1/g" /etc/init.d/nginx &> /dev/null
  else
    mv -f /etc/init.d/nginx /var/backups/nginx-pre-$_INSTALLER_VERSION-$_NOW &> /dev/null
    cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/nginx /etc/init.d/nginx
    chmod 755 /etc/init.d/nginx &> /dev/null
  fi
fi


###--------------------###
if [ ! -e "/var/run/cloud_vhost.pid" ] ; then
  if [ ! -e "/usr/bin/vnstat" ] || [ "$_FULL_FORCE_REINSTALL" = "YES" ] ; then
    msg "INFO: Installing VnStat monitor, please wait..."
    _ETH_TEST=`ifconfig 2>&1`
    if [[ "$_ETH_TEST" =~ "venet0" ]] ; then
      _VMFAMILY="VZ"
      _IFCONFIG="venet0"
    elif [ -e "/proc/bean_counters" ] ; then
      _VMFAMILY="VZ"
      _IFCONFIG="venet0"
    else
      _VMFAMILY="XEN"
      _IFCONFIG="eth0"
    fi
    cd /var/opt
    wget -q -U iCab http://files.aegir.cc/dev/vnstat-1.10.tar.gz
    tar -xzf vnstat-1.10.tar.gz
    cd vnstat-1.10
    st_runner "make --quiet" 2> /dev/null
    st_runner "make --quiet install" 2> /dev/null
    st_runner "vnstat -u -i $_IFCONFIG" 2> /dev/null
    cp -af /var/opt/vnstat-1.10/examples/init.d/debian/vnstat /etc/init.d/vnstat
    chmod 755 /etc/init.d/vnstat &> /dev/null
    st_runner "update-rc.d vnstat defaults" &> /dev/null
    st_runner "service vnstat start" &> /dev/null
  fi
fi
if [ -e "/etc/init.d/vnstat" ] && [ "$_VMFAMILY" = "VS" ] && [ ! -e "/boot/grub/menu.lst" ] ; then
  service vnstat stop &> /dev/null
  update-rc.d -f vnstat remove &> /dev/null
  rm -f /etc/init.d/vnstat
  rm -f /usr/bin/vnstat
  rm -f -r /var/lib/vnstat
fi


###--------------------###
cd /var
if [ -d "/var/xdrago" ] && [ -e "/var/aegir/.drush/hostmaster.alias.drushrc.php" ] ; then
  msg "INFO: Upgrading a few more tools, please wait..."
  mrun "sleep 1"
  mv -f /var/xdrago-pre* /var/backups/dragon/x/ &> /dev/null
  rm -f -r /var/xdrago/log/init.d-pre*
  rm -f -r /var/backups/dragon/z/init.d-pre-*
  rm -f /var/xdrago/log/cron-root-pre*
  cp -af /var/xdrago /var/backups/dragon/x/xdrago-pre-$_INSTALLER_VERSION-$_NOW &> /dev/null
  rm -f /var/xdrago/log/VISITOR_ABUSE_ONE.log
  rm -f /var/xdrago/log/blackIP.log
  rm -f /var/xdrago/{enableStatus,graceful,move_sql,run_all,second,Minute,firewall.sh,stop-mysql-innodb.sh,firewall_restarter,FireStart,memcache,redis}
  cp -af /var/spool/cron/crontabs/root /var/backups/dragon/z/cron-root-pre-$_INSTALLER_VERSION-$_NOW &> /dev/null
  if [ -e "/var/xdrago/custom.minute.sh.txt" ] && [ ! -e "/var/xdrago/custom.minute.sh.local.txt" ] ; then
    cp -af /var/xdrago/minute.sh /var/xdrago/custom.minute.sh.local.txt
  fi
  cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/tools/system/* /var/xdrago/ &> /dev/null
  if [ -e "/var/xdrago/custom.minute.sh.local.txt" ] ; then
    cp -af /var/xdrago/custom.minute.sh.local.txt /var/xdrago/minute.sh
  fi
  if [ -z "$_THISHTIP" ] ; then
    _LOC_DOM="$_THISHOST"
    find_correct_ip
    _THISHTIP="$_LOC_IP"
  fi
  if [[ "$_THISHOST" =~ ".host8." ]] ; then
    _NGINX_DOS_LIMIT=188
  fi
  sed -i "s/88.88.88.88/$_THISHTIP/g"    /var/xdrago/monitor/check/scan_nginx &> /dev/null
  sed -i "s/= 300/= $_NGINX_DOS_LIMIT/g" /var/xdrago/monitor/check/scan_nginx &> /dev/null
  sed -i "s/=1444/=$_LOAD_LIMIT_ONE/g"   /var/xdrago/second.sh &> /dev/null
  sed -i "s/=888/=$_LOAD_LIMIT_TWO/g"    /var/xdrago/second.sh &> /dev/null
  mv -f /etc/cron.daily/mlocate /var/backups/ &> /dev/null
  cp -af /var/xdrago/cron/crontabs/root /var/spool/cron/crontabs/ &> /dev/null
  if [ -e "/var/xdrago/cron/custom.txt" ] ; then
    cat /var/xdrago/cron/custom.txt >> /var/spool/cron/crontabs/root
  fi
  chown root:crontab /var/spool/cron/crontabs/root
  chmod 600 /var/spool/cron/crontabs/root
  if [[ "$_THISHOST" =~ ".host8." ]] ; then
    sed -i "s/600/300/g" /var/xdrago/minute.sh &> /dev/null
    sed -i "s/\* \* \* \* \* bash \/var\/xdrago\/runner.sh/*\/2 * * * * bash \/var\/xdrago\/runner.sh/g" /var/spool/cron/crontabs/root &> /dev/null
    sed -i "s/rotate 52/rotate 1/g" /etc/logrotate.d/nginx &> /dev/null
    echo "echo rotate > /var/log/nginx/access.log" >> /var/xdrago/clear.sh
    sed -i "s/INTERVAL 1 HOUR/INTERVAL 15 MINUTE/g" /var/xdrago/purge_binlogs.sh &> /dev/null
    rm -f /etc/logrotate.d/lshell
    if [ -e "/usr/share/man/man3/buagent.3.gz" ] ; then
      chmod 644 /usr/share/man/man3/buagent.3.gz
    fi
  else
    sed -i "s/600/900/g" /var/xdrago/minute.sh &> /dev/null
    sed -i "s/log\/lshell/log\/lsh/g" /etc/logrotate.d/lshell &> /dev/null
    sed -i "s/rm -f -r \/tmp/#rm -f -r \/tmp/g" /var/xdrago/graceful.sh &> /dev/null
    sed -i "s/rm -f -r \/tmp/true\n#rm -f -r \/tmp/g" /var/xdrago/clear.sh &> /dev/null
  fi
fi
if [ "$_STATUS" = "INIT" ] ; then
  msg "INFO: Installing a few more tools, please wait..."
  mrun "sleep 1"
  mkdir -p ./xdrago
  cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/tools/system/* ./xdrago/ &> /dev/null
  cp -af /var/xdrago/cron/crontabs/root /var/spool/cron/crontabs/ &> /dev/null
  chown root:crontab /var/spool/cron/crontabs/root
  chmod 600 /var/spool/cron/crontabs/root
  if [ -z "$_THISHTIP" ] ; then
    _LOC_DOM="$_THISHOST"
    find_correct_ip
    _THISHTIP="$_LOC_IP"
  fi
  if [[ "$_THISHOST" =~ ".host8." ]] ; then
    _NGINX_DOS_LIMIT=188
  fi
  sed -i "s/88.88.88.88/$_THISHTIP/g"    /var/xdrago/monitor/check/scan_nginx &> /dev/null
  sed -i "s/= 300/= $_NGINX_DOS_LIMIT/g" /var/xdrago/monitor/check/scan_nginx &> /dev/null
  sed -i "s/=1444/=$_LOAD_LIMIT_ONE/g"   /var/xdrago/second.sh &> /dev/null
  sed -i "s/=888/=$_LOAD_LIMIT_TWO/g"    /var/xdrago/second.sh &> /dev/null
  mv -f /etc/cron.daily/mlocate /var/backups/ &> /dev/null
  if [[ "$_THISHOST" =~ ".host8." ]] ; then
    sed -i "s/600/300/g" /var/xdrago/minute.sh &> /dev/null
    sed -i "s/\* \* \* \* \* bash \/var\/xdrago\/runner.sh/*\/2 * * * * bash \/var\/xdrago\/runner.sh/g" /var/spool/cron/crontabs/root &> /dev/null
    sed -i "s/rotate 52/rotate 1/g" /etc/logrotate.d/nginx &> /dev/null
    rm -f /etc/logrotate.d/lshell
    if [ -e "/usr/share/man/man3/buagent.3.gz" ] ; then
      chmod 644 /usr/share/man/man3/buagent.3.gz
    fi
  else
    sed -i "s/600/900/g" /var/xdrago/minute.sh &> /dev/null
    sed -i "s/rm -f -r \/tmp/#rm -f -r \/tmp/g" /var/xdrago/graceful.sh &> /dev/null
    sed -i "s/rm -f -r \/tmp/true\n#rm -f -r \/tmp/g" /var/xdrago/clear.sh &> /dev/null
  fi
fi
if [ -d "/var/xdrago-pre-$_INSTALLER_VERSION-$_NOW" ] ; then
  cp -af /var/xdrago-pre-$_INSTALLER_VERSION-$_NOW/run-* /var/xdrago/ &> /dev/null
fi
chmod -R 700 /var/xdrago/monitor/check &> /dev/null
chmod 700 /var/xdrago/* &> /dev/null
chmod 700 /var/xdrago &> /dev/null


###--------------------###
if [ "$_USE_MEMCACHED" = "YES" ] ; then
  if [ ! -e "/var/log/memcached-1.4.9.log" ] || [ ! -x "/usr/local/bin/memcached" ] || [ "$_FULL_FORCE_REINSTALL" = "YES" ] ; then
    msg "INFO: Installing Memcached server, please wait..."
    mrun "sleep 1"
    cd /var/opt
    rm -f /opt/bin/memcached
    rm -f /usr/bin/memcached
    rm -f /usr/local/bin/memcached
    wget -q -U iCab http://files.aegir.cc/dev/memcached-1.4.9.tar.gz
    tar -xzf memcached-1.4.9.tar.gz
    cd /var/opt/memcached-1.4.9
    st_runner "sh ./configure" 2> /dev/null
    st_runner "make --quiet" 2> /dev/null
    st_runner "make --quiet install" 2> /dev/null
    ln -s /usr/local/bin/memcached /usr/bin/memcached
    echo "memcached-1.4.9" > /var/log/memcached-1.4.9.log
  fi
fi


###--------------------###
if [ "$_LENNY_TO_SQUEEZE" = "YES" ] && [ "$_LOC_REL_VERSION" = "lenny" ] ; then
  service nginx stop &> /dev/null
  killall -9 nginx &> /dev/null
fi
if [ "$_STATUS" = "UPGRADE" ] ; then
  msg "INFO: Checking if PHP upgrade is available"
  mrun "sleep 1"
  ###--------------------###
  if [ -L "/usr/local/bin/php" ] ; then
    if [ -e "/usr/local/bin/php52" ] ; then
      rm -f /usr/local/bin/php
      mv -f /usr/local/bin/php52 /usr/local/bin/php
    fi
  fi
  ###--------------------###
  if [ "$_FROM_SOURCES" = "NO" ] ; then
    if [ -f "/usr/bin/php" ] && [ -f "/opt/local/bin/php" ] && [ ! -L "/opt/local/bin/php" ] ; then
      mv -f /opt/local/bin/php /opt/local/bin/php-old &> /dev/null
      ln -s /usr/bin/php /opt/local/bin/php
    fi
    if [ -f "/usr/bin/phpize" ] && [ -f "/opt/local/bin/phpize" ] && [ ! -L "/opt/local/bin/phpize" ] ; then
      mv -f /opt/local/bin/phpize /opt/local/bin/phpize-old &> /dev/null
      ln -s /usr/bin/phpize /opt/local/bin/phpize
    fi
  fi
fi
if [ -x "/usr/bin/php" ] ; then
  _PHP_NEW_BIN="/usr/bin/php"
elif [ -x "/opt/local/bin/php" ] ; then
  _PHP_NEW_BIN="/opt/local/bin/php"
fi
if [ -x "$_PHP_NEW_BIN" ] ; then
  _PHP_INSTALLED=`$_PHP_NEW_BIN -v | grep 'PHP 5' | cut -d: -f1 | awk '{ print $2}'`
  if [[ "$_PHP_INSTALLED" =~ "$_PHP_VERSION_NEW" ]] ; then
    if [ "$_FROM_SOURCES" = "YES" ] ; then
      if [[ "$_PHP_INSTALLED" =~ "~" ]] || [[ "$_PHP_INSTALLED" =~ "dotdeb" ]] || [[ "$_PHP_INSTALLED" =~ "ubuntu" ]] ; then
        _PHP_INSTALL_REQUIRED_NEW=YES
        msg "INFO: Installed PHP version $_PHP_INSTALLED, upgrade required"
        fix_php_ext
      else
        _PHP_INSTALL_REQUIRED_NEW=NO
        msg "INFO: Installed PHP version $_PHP_INSTALLED, no upgrade required"
      fi
    else
      _PHP_INSTALL_REQUIRED_NEW=NO
      msg "INFO: Installed PHP version $_PHP_INSTALLED, no upgrade required"
    fi
  else
    if [ "$_FROM_SOURCES" = "YES" ] ; then
      _PHP_INSTALL_REQUIRED_NEW=YES
      msg "INFO: Installed PHP version $_PHP_INSTALLED, upgrade required"
      fix_php_ext
    else
      _PHP_INSTALL_REQUIRED_NEW=NO
      msg "INFO: Installed PHP version $_PHP_INSTALLED, no upgrade required"
    fi
  fi
else
  _PHP_INSTALL_REQUIRED_NEW=YES
fi
if [ "$_PHP_MODERN_ONLY" = "NO" ] ; then
  if [ -x "/usr/local/bin/php" ] ; then
    _PHP_INSTALLED=`/usr/local/bin/php -v | grep 'PHP 5' | cut -d: -f1 | awk '{ print $2}'`
    if [[ "$_PHP_INSTALLED" =~ "$_PHP_VERSION" ]] ; then
      _PHP_INSTALL_REQUIRED=NO
      msg "INFO: Installed PHP version $_PHP_INSTALLED, no upgrade required"
    else
      _PHP_INSTALL_REQUIRED=YES
      msg "INFO: Installed PHP version $_PHP_INSTALLED, upgrade required"
    fi
  else
    _PHP_INSTALL_REQUIRED=YES
  fi
  if [ ! -e "/var/log/libcurl4-openssl-dev.log" ] ; then
    _PHP_INSTALL_REQUIRED=YES
    if [ "$_STATUS" = "UPGRADE" ] ; then
      msg "INFO: PHP $_PHP_VERSION rebuild required to include libcurl4-openssl-dev"
      mrun "sleep 1"
    fi
  fi
fi
if [ "$_STATUS" = "UPGRADE" ] ; then
  _THIS_DB_SERVER_TEST=`mysql -V 2>&1`
  _NEW_LTS=NO
  if [ "$_FROM_SOURCES" = "NO" ] ; then
    _NEW_LTS=YES
  fi
  if [ ! -e "/etc/php5/conf.d/geoip.ini" ] && [ "$_NEW_LTS" = "YES" ] ; then
    if [ -x "/usr/local/bin/php" ] ; then
      _PHP_INSTALL_REQUIRED=YES
    fi
    _PHP_INSTALL_REQUIRED_NEW=YES
    msg "INFO: PHP rebuild required to install $_PHP_VERSION_NEW from Dotdeb.org"
    mrun "sleep 1"
  fi
  if [[ "$_THIS_DB_SERVER_TEST" =~ "MariaDB" ]] ; then
    if [ ! -e "/var/log/installed-$_MARIADB_VERSION-MariaDB.log" ] && [ "$_FROM_SOURCES" = "YES" ] ; then
      _PHP_INSTALL_REQUIRED=YES
      _PHP_INSTALL_REQUIRED_NEW=YES
      echo "$_MARIADB_VERSION-MariaDB" > /var/log/installed-$_MARIADB_VERSION-MariaDB.log
      msg "INFO: PHP rebuild required to include MariaDB $_MARIADB_VERSION libs"
      mrun "sleep 1"
    fi
  else
    if [ ! -e "/var/log/installed-$_PERCONA_VERSION-Percona.log" ] && [ "$_FROM_SOURCES" = "YES" ] ; then
      _PHP_INSTALL_REQUIRED=YES
      _PHP_INSTALL_REQUIRED_NEW=YES
      echo "$_PERCONA_VERSION-Percona" > /var/log/installed-$_PERCONA_VERSION-Percona.log
      msg "INFO: PHP rebuild required to include Percona $_PERCONA_VERSION libs"
      mrun "sleep 1"
    fi
  fi
fi
if [ ! -e "/opt/local/etc/php53-fpm.conf" ] ; then
  mkdir -p /opt/local/etc
  cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/php53-fpm.conf /opt/local/etc/php53-fpm.conf &> /dev/null
  if [ -z "$_THISHTIP" ] ; then
    _LOC_DOM="$_THISHOST"
    find_correct_ip
    _THISHTIP="$_LOC_IP"
  fi
  sed -i "s/listen.allowed_clients =.*/listen.allowed_clients = 127.0.0.1,$_THISHTIP/g" /opt/local/etc/php53-fpm.conf &> /dev/null
  _PHP_INSTALL_REQUIRED_NEW=YES
fi
if [ "$_PHP_FORCE_REINSTALL" = "YES" ] ; then
  _PHP_INSTALL_REQUIRED=YES
  _PHP_INSTALL_REQUIRED_NEW=YES
  if [ "$_STATUS" = "UPGRADE" ] ; then
    msg "INFO: PHP rebuild forced"
    mrun "sleep 1"
  fi
fi
if [ "$_UP_PHP" = "YES" ] && [ "$_FROM_SOURCES" = "YES" ] ; then
  _PHP_INSTALL_REQUIRED=YES
  _PHP_INSTALL_REQUIRED_NEW=YES
  msg "INFO: PHP rebuild required to include upgraded libs"
  fix_php_ext
fi
if [ "$_REL_VERSION" = "oneiric" ] || [ "$_REL_VERSION" = "precise" ] ; then
  _PHP_EXTRA=""
else
  _PHP_EXTRA="--with-ldap --with-gmp"
fi
if [ "$_PHP_INSTALL_REQUIRED" = "YES" ] || [ "$_PHP_INSTALL_REQUIRED_NEW" = "YES" ] || [ "$_FULL_FORCE_REINSTALL" = "YES" ] ; then
  install_ioncube
  if [ "$_USE_MEMCACHED" = "YES" ] ; then
    install_libmemcached
  fi
fi
if [ "$_PHP_MODERN_ONLY" = "NO" ] ; then
  if [ "$_PHP_INSTALL_REQUIRED" = "YES" ] || [ "$_FULL_FORCE_REINSTALL" = "YES" ] ; then
    install_php_legacy
  fi
fi
if [ "$_PHP_INSTALL_REQUIRED_NEW" = "YES" ] || [ "$_FULL_FORCE_REINSTALL" = "YES" ] ; then
  install_php_modern
fi
if [ "$_STATUS" = "UPGRADE" ] ; then
  if [ "$_PHP_MODERN_ONLY" = "NO" ] ; then
    update_php_legacy
  fi
  update_php_modern
fi


###--------------------###
install_newrelic
update_newrelic


###--------------------###
if [ "$_REL_VERSION" = "lenny" ] ; then
  _PATH_BZR="/usr/bin/bzr"
else
  _PATH_BZR="/usr/local/bin/bzr"
fi
if [ ! -e "$_PATH_BZR" ] || [ ! -e "/var/log/bzr-$_BZR_VERSION.log" ] || [ "$_FULL_FORCE_REINSTALL" = "YES" ] ; then
  msg "INFO: Installing bzr, please wait..."
  mrun "sleep 1"
  cd /var/opt
  wget -q -U iCab http://files.aegir.cc/dev/bzr-$_BZR_VERSION.tar.gz
  tar -xzf bzr-$_BZR_VERSION.tar.gz
  cd /var/opt/bzr-$_BZR_VERSION
  st_runner "python setup.py --quiet install build_ext --allow-python-fallback" 2> /dev/null
  echo "bzr-$_BZR_VERSION" > /var/log/bzr-$_BZR_VERSION.log
fi


###--------------------###
if [ "$_REL_VERSION" = "lenny" ] ; then
  _PATH_LSHELL="/usr/bin/lshell"
else
  _PATH_LSHELL="/usr/local/bin/lshell"
fi
if [ ! -e "$_PATH_LSHELL" ] || [ ! -e "/var/log/lshell-$_LSHELL_VERSION" ] || [ "$_FULL_FORCE_REINSTALL" = "YES" ] ; then
  if [ "$_STATUS" = "UPGRADE" ] ; then
    msg "INFO: Upgrading lshell, please wait..."
    cp -af /etc/lshell.conf /etc/lshell.conf-bak &> /dev/null
    cp -af /etc/lshell.conf /etc/lshell.conf-bak-$_NOW &> /dev/null
  else
    msg "INFO: Installing lshell, please wait..."
  fi
  mrun "sleep 1"
  cd /var/opt
  if [ "$_LSHELL_VERSION" = "0.9.14" ] ; then
    wget -q -U iCab http://garr.dl.sourceforge.net/project/lshell/lshell/$_LSHELL_VERSION/lshell-$_LSHELL_VERSION.tar.gz
    tar -xzf lshell-$_LSHELL_VERSION.tar.gz
  else
    git clone --branch $_LSHELL_VERSION git://github.com/omega8cc/lshell.git lshell-$_LSHELL_VERSION &> /dev/null
  fi
  for Files in `find /var/opt/lshell-$_LSHELL_VERSION -type f` ; do
    sed -i "s/kicked/logged/g" $Files
    sed -i "s/Kicked/Logged/g" $Files
  done
  cd /var/opt/lshell-$_LSHELL_VERSION
  st_runner "python setup.py install" 2> /dev/null
  if [ "$_STATUS" = "UPGRADE" ] ; then
    cp -af /etc/lshell.conf-bak /etc/lshell.conf &> /dev/null
  else
    mv -f /etc/lshell.conf /etc/lshell.conf-pre-$_NOW &> /dev/null
    cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/tools/system/conf/lshell.conf /etc/lshell.conf
    echo "$_PATH_LSHELL" >> /etc/shells
  fi
  sed -i "s/log\/lshell/log\/lsh/g" /etc/logrotate.d/lshell &> /dev/null
  addgroup --system lshellg &> /dev/null
  mkdir -p /var/log/lsh
  chown :lshellg /var/log/lsh
  chmod 770 /var/log/lsh &> /dev/null
  echo "lshell-$_LSHELL_VERSION" > /var/log/lshell-$_LSHELL_VERSION
fi
if [ -f "/usr/local/bin/lshell" ] ; then
  if [ ! -L "/usr/bin/lshell" ] ; then
    ln -s /usr/local/bin/lshell /usr/bin/lshell &> /dev/null
  fi
fi


###--------------------###
if [ ! -e "/var/log/umask_fixed_new.log" ] ; then
  mkdir -p /var/www
  sed -i "s/^UMASK.*//g" /etc/default/login &> /dev/null
  echo "UMASK=002" >> /etc/default/login
  sed -i "/^$/d" /etc/default/login &> /dev/null
  sed -i "s/^UMASK.*/UMASK 002/g" /etc/login.defs &> /dev/null
  sed -i "s/^umask.*022/umask 002/g" /etc/profile &> /dev/null
  sed -i "s/^session optional pam_umask.*//g" /etc/pam.d/login &> /dev/null
  echo "session optional pam_umask.so umask=0002" >> /etc/pam.d/login
  sed -i "/^$/d" /etc/pam.d/login &> /dev/null
  echo "umask 002" >> /var/www/.profile
  chown -R www-data:www-data /var/www/* &> /dev/null
  touch /var/log/umask_fixed_new.log
fi


###--------------------###
if [ "$_XTRAS_LIST" = "ALL" ] || [[ "$_XTRAS_LIST" =~ "FTP" ]] ; then
  if [ ! -e "/var/log/pure-ftpd-$_PURE_FTPD_VERSION.log" ] || [ "$_FULL_FORCE_REINSTALL" = "YES" ] ; then
    msg "INFO: Installing latest Pure-FTPd server, please wait..."
    mrun "sleep 1"
    if [ ! -e "/usr/local/sbin/pure-config.pl" ] ; then
      echo "/bin/false" >> /etc/shells
      echo "/bin/true" >> /etc/shells
    fi
    mkdir -p /etc/ssl/private/
    rm -f /etc/ssl/private/pure-ftpd.pem
    rm -f /usr/local/sbin/pure-ftpd
    st_runner "openssl req -x509 -nodes -days 7300 -newkey rsa:2048 -keyout /etc/ssl/private/pure-ftpd.pem -out /etc/ssl/private/pure-ftpd.pem -batch" 2> /dev/null
    chmod 600 /etc/ssl/private/pure-ftpd.pem &> /dev/null
    cd /var/opt
    mkdir -p /usr/local/etc
    rm -f -r pure-ftpd*
    wget -q -U iCab http://files.aegir.cc/dev/pure-ftpd-$_PURE_FTPD_VERSION.tar.gz
    tar -xzf pure-ftpd-$_PURE_FTPD_VERSION.tar.gz
    cd pure-ftpd-$_PURE_FTPD_VERSION
    st_runner "sh ./configure --with-everything --with-virtualchroot --without-humor --with-tls --with-diraliases --with-pam --with-certfile=/etc/ssl/private/pure-ftpd.pem" 2> /dev/null
    st_runner "make install-strip" 2> /dev/null
    cd /usr/local/sbin/
    cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/pure-config.pl.txt ./
    mv -f pure-config.pl.txt pure-config.pl &> /dev/null
    chmod 755 /usr/local/sbin/pure-config.pl &> /dev/null
    cp -af /var/opt/pure-ftpd-$_PURE_FTPD_VERSION/pam/pure-ftpd /etc/pam.d/
    cd /usr/local/etc
    rm -f pure-ftpd.conf
    cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/pure-ftpd.conf ./
    killall -9 pure-ftpd &> /dev/null
    mrun "sleep 1"
    st_runner "/usr/local/sbin/pure-config.pl /usr/local/etc/pure-ftpd.conf" &> /dev/null
    cd /var/opt
    echo "pure-ftpd-$_PURE_FTPD_VERSION" > /var/log/pure-ftpd-$_PURE_FTPD_VERSION.log
  fi
fi


###--------------------###
if [ ! -e "/var/log/redis-$_REDIS_VERSION.log" ] || [ ! -x "/usr/local/bin/redis-server" ] || [ "$_FULL_FORCE_REINSTALL" = "YES" ] ; then
  install_redis_src
fi


###--------------------###
if [ "$_STATUS" = "INIT" ] ; then
  msg "INFO: Updating init scripts"
  mrun "sleep 1"
  cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/clean-boa-env /etc/init.d/clean-boa-env
  chmod 755 /etc/init.d/clean-boa-env &> /dev/null
  st_runner "update-rc.d clean-boa-env defaults" &> /dev/null
  echo "UseDNS no" >> /etc/ssh/sshd_config
  st_runner "service ssh restart" &> /dev/null
  cp -af /etc/mysql/my.cnf /var/backups/dragon/t/my.cnf-pre-$_INSTALLER_VERSION-$_NOW &> /dev/null
  cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/my.cnf.txt /etc/mysql/my.cnf
  sed -i "s/.*default-table-type/#default-table-type/g" /etc/mysql/my.cnf
  sed -i "s/.*language/#language/g" /etc/mysql/my.cnf
  _THIS_DB_SERVER_TEST=`mysql -V 2>&1`
  if [[ "$_THIS_DB_SERVER_TEST" =~ "5.5." ]] ; then
    true
  else
    sed -i "s/.*lc_messages_dir /#lc_messages_dir /g" /etc/mysql/my.cnf
    sed -i "s/.*lc_messages /#lc_messages /g" /etc/mysql/my.cnf
  fi
  update_php_conf
  tune_memory_limits
  msg "INFO: Restarting $_DB_SERVER"
  st_runner "service mysql restart" &> /dev/null
  if [ ! -e "/var/run/aegir_upgrade.pid" ] ; then
    msg "INFO: Starting Redis, PHP-FPM and Nginx"
    st_runner "service redis-server start" &> /dev/null
    killall -9 nginx php-cgi php-fpm &> /dev/null
    mrun "sleep 1"
    st_runner "update-rc.d cron defaults" &> /dev/null
    if [ -e "/etc/init.d/php-fpm" ] ; then
      st_runner "update-rc.d php-fpm defaults" &> /dev/null
      st_runner "service php-fpm start" &> /dev/null
    fi
    st_runner "update-rc.d php53-fpm defaults" &> /dev/null
    st_runner "service php53-fpm start" &> /dev/null
    st_runner "update-rc.d nginx defaults" &> /dev/null
    st_runner "service nginx start" &> /dev/null
  fi
else
  fix_on_upgrade
  tune_memory_limits
  if [ ! -e "/var/run/aegir_upgrade.pid" ] ; then
    msg "INFO: Restarting Redis and PHP-FPM, reloading Nginx"
    mrun "sleep 1"
    st_runner "service redis-server restart" &> /dev/null
    if [ -e "/etc/init.d/php-fpm" ] ; then
      st_runner "service php-fpm restart" &> /dev/null
    fi
    st_runner "service php53-fpm stop" &> /dev/null
    killall -9 php-fpm &> /dev/null
    st_runner "service php53-fpm start" &> /dev/null
    st_runner "service nginx reload" &> /dev/null
  fi
fi


###--------------------###
_NEWRELIC_APP_CFG="/etc/newrelic/newrelic.cfg"
if [ -e "$_NEWRELIC_APP_CFG" ] ; then
  _NEWRELIC_KEY_TEST=$(grep "REPLACE_WITH_REAL_KEY" $_NEWRELIC_APP_CFG)
  if [[ "$_NEWRELIC_KEY_TEST" =~ "REPLACE_WITH_REAL_KEY" ]] && [ ! -z "$_NEWRELIC_KEY" ] ; then
    sed -i "s/REPLACE_WITH_REAL_KEY/$_NEWRELIC_KEY/g" $_NEWRELIC_APP_CFG &> /dev/null
  fi
  sed -i "s/^loglevel=.*/loglevel=error/g" $_NEWRELIC_APP_CFG &> /dev/null
  if [ -e "/etc/init.d/php-fpm" ] ; then
    st_runner "service php-fpm restart" &> /dev/null
  fi
  st_runner "service php53-fpm stop" &> /dev/null
  killall -9 php-fpm &> /dev/null
  st_runner "service php53-fpm start" &> /dev/null
  st_runner "service newrelic-daemon restart" &> /dev/null
fi


###--------------------###
_NEWRELIC_SYS_CFG="/etc/newrelic/nrsysmond.cfg"
if [ -e "$_NEWRELIC_SYS_CFG" ] ; then
  _NEWRELIC_KEY_TEST=$(grep "REPLACE_WITH_REAL_KEY" $_NEWRELIC_SYS_CFG)
  if [[ "$_NEWRELIC_KEY_TEST" =~ "REPLACE_WITH_REAL_KEY" ]] && [ ! -z "$_NEWRELIC_KEY" ] ; then
    sed -i "s/REPLACE_WITH_REAL_KEY/$_NEWRELIC_KEY/g" $_NEWRELIC_SYS_CFG &> /dev/null
  fi
  sed -i "s/^loglevel=.*/loglevel=error/g" $_NEWRELIC_SYS_CFG &> /dev/null
  sed -i "s/.*pidfile=.*/pidfile=\/var\/run\/nrsysmond.pid/g" $_NEWRELIC_SYS_CFG &> /dev/null
  st_runner "service newrelic-sysmond restart" &> /dev/null
fi


###--------------------###
if [ ! -e "/root/.my.pass.txt" ] ; then
  msg "INFO: Generating random password for $_DB_SERVER"
  mrun "sleep 1"
  touch /root/.my.pass.txt
  chmod 0600 /root/.my.pass.txt &> /dev/null
  _ESC_PASS=`pwgen -v -s -1`
  _ESC_PASS=`basic_single_escape "$_ESC_PASS"`
  echo "$_ESC_PASS" > /root/.my.pass.txt
fi
if [ -e "/root/.my.pass.txt" ] ; then
  PXSWD=`cat /root/.my.pass.txt`
  PASWD=`echo -n $PXSWD | tr -d "\n"`
  for Files in `find /var/xdrago -maxdepth 1 -mindepth 1 -type f` ; do
    sed -i "s/NdKBu34erty325r6mUHxWy/$PASWD/g" $Files
    sed -i "s/php-fpm nginx php/php-fpm php-cgi nginx php/g" $Files
  done
  if [ "$_STATUS" = "INIT" ] ; then
    msg "INFO: OS and services installation completed"
  else
    msg "INFO: OS and services upgrade completed"
  fi
  mrun "sleep 1"
else
  msg "EXIT on error due to not found file with your MySQL/$_DB_SERVER root password"
  cat <<EOF

  It appears you don't have required file with your root sql password.
  Create this file first and run this script again:

  echo "your_SQL_ROOT_password" > /root/.my.pass.txt
  chmod 0600 /root/.my.pass.txt

EOF
  msg "EXIT on error due to not found file with your MySQL/$_DB_SERVER root password"
  exit 1
fi


if [ "$_STATUS" = "INIT" ] ; then


###--------------------###
  if [ ! -e "/var/run/mysqld/mysqld.pid" ] || [ ! -e "/var/run/mysqld/mysqld.sock" ] ; then
    msg "ALRT: $_DB_SERVER server not running!"
    msg "EXIT: We can't proceed with installation and will exit now"
    msg "HINT: Please check $_LOG for more information"
    msg "HINT: on errors occured and then run Barracuda installer again"
    msg "Bye"
    rm -f /root/.my.pass.txt
    mkdir -p /var/aegir
    exit 1
  fi
  msg "INFO: Installing Aegir Master Instance, please wait..."
  mrun "sleep 1"
  st_runner "adduser --system --group --home /var/aegir aegir"
  st_runner "adduser aegir www-data"
  echo "aegir ALL=NOPASSWD: /etc/init.d/nginx" >> /etc/sudoers
  ln -s /var/aegir/config/nginx.conf /etc/nginx/conf.d/aegir.conf
  update_nginx_conf
  cd /var/aegir
  _AEGIR_SCRIPT="AegirSetupM.sh.txt"
  if [ "$_AEGIR_VERSION" = "TEST" ] ; then
    _DRUSH_VERSION=All-Versions-HEAD
    _DRUSH_FAMILY=5
  fi
  for Files in `find /opt/tmp/$_BOA_REPO_NAME/aegir/scripts -type f` ; do
    sed -i "s/EDIT_AEGIR_VERSION/$_AEGIR_VERSION/g"        $Files
    sed -i "s/EDIT_DRUSH_VERSION/$_DRUSH_VERSION/g"        $Files
    sed -i "s/EDIT_DRUSH_FAMILY/$_DRUSH_FAMILY/g"          $Files
    sed -i "s/EDIT_BOA_REPO_NAME/$_BOA_REPO_NAME/g"        $Files
    sed -i "s/EDIT_BOA_REPO_GIT_URL/$_BOA_REPO_GIT_URLX/g" $Files
    sed -i "s/EDIT_THIS_DB_HOST/$_THIS_DB_HOST/g"          $Files
    sed -i "s/EDIT_PHP_CLI_VERSION/$_PHP_CLI_VERSION/g"    $Files
    sed -i "s/EDIT_FROM_SOURCES/$_FROM_SOURCES/g"          $Files
  done
  cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/scripts/$_AEGIR_SCRIPT ./
  if [ "$_DEBUG_MODE" = "YES" ] ; then
    su -s /bin/bash aegir -c "bash $_AEGIR_SCRIPT $_THIS_FRONT --http_service_type='nginx' --db_service_type='mysql' --db_port='3306' --aegir_db_host='$_THIS_DB_HOST' --client_email='$_MY_EMAIL' -y -d"
  else
    su -s /bin/bash aegir -c "bash $_AEGIR_SCRIPT $_THIS_FRONT --http_service_type='nginx' --db_service_type='mysql' --db_port='3306' --aegir_db_host='$_THIS_DB_HOST' --client_email='$_MY_EMAIL' -y >/var/aegir/install.log 2>&1"
  fi
  mrun "sleep 1"
  if [ -e "/opt/tmp/status-AegirSetupM-FAIL" ] ; then
    msg "FATAL ERROR: AegirSetupM installer failed"
    msg "FATAL ERROR: Aborting Barracuda installer NOW!"
    msg "HINT: Please check /var/aegir/install.log for more information on errors occured"
    touch /opt/tmp/status-Barracuda-FAIL
    exit 1
  fi
  if [ "$_HTTP_WILDCARD" = "YES" ] ; then
    sed -i "s/\!empty.*';/'*';/g" /var/aegir/.drush/provision/http/Provision/Config/Nginx/server.tpl.php &> /dev/null
    sed -i "s/\!empty.*';/'*';/g" /var/aegir/.drush/provision/http/Provision/Config/Nginx/vhost.tpl.php &> /dev/null
    sed -i "s/\!empty.*';/'*';/g" /var/aegir/.drush/provision/http/Provision/Config/Nginx/vhost_disabled.tpl.php &> /dev/null
    sed -i "s/\!empty.*';/'*';/g" /var/aegir/.drush/provision_cdn/Provision/Config/cdn.tpl.php &> /dev/null
  fi
  msg "INFO: Running hosting-dispatch (1/3), please wait..."
  su -s /bin/bash aegir -c "drush '@hostmaster' hosting-dispatch &> /dev/null"
  mrun "sleep 5"
  msg "INFO: Running hosting-dispatch (2/3), please wait..."
  su -s /bin/bash aegir -c "drush '@hostmaster' hosting-dispatch &> /dev/null"
  mrun "sleep 5"
  msg "INFO: Running hosting-dispatch (3/3), please wait..."
  su -s /bin/bash aegir -c "drush '@hostmaster' hosting-dispatch &> /dev/null"
  if [ "$_HTTP_WILDCARD" = "YES" ] && [ -d "/var/aegir/config/includes" ] ; then
    echo "WILD" > /var/aegir/config/includes/wildcard_listen_http_enabled.txt
  fi
  _THIS_HM_ROOT=`cat /var/aegir/.drush/hostmaster.alias.drushrc.php | grep "root'" | cut -d: -f2 | awk '{ print $3}' | sed "s/[\,']//g"`
  mkdir -p $_THIS_HM_ROOT/sites/all/{modules,themes,libraries} &> /dev/null
  chown -R aegir:aegir $_THIS_HM_ROOT/sites/all &> /dev/null
  rm -f /var/aegir/$_AEGIR_SCRIPT
  chmod 711 /var/aegir/config/includes &> /dev/null
  chmod 711 /var/aegir/config &> /dev/null
  chmod 711 /var/aegir/.drush &> /dev/null


###--------------------###
  if [ -e "/var/aegir/config/includes/nginx_modern_include.conf" ] ; then
    true
  else
    msg "FATAL ERROR: Something went wrong, Aegir Master Instance not installed - exit now"
    msg "HINT: Please check /var/aegir/install.log for more information on errors occured"
    exit 1
  fi


###--------------------###
  ln -s /var/aegir/drush/drush /usr/bin/drush
  mv -f /var/aegir/config/includes/global.inc /var/aegir/config/includes/global.inc-pre-$_INSTALLER_VERSION-$_NOW &> /dev/null
  if [ -e "/var/aegir/config/server_master/nginx/pre.d/nginx_wild_ssl.conf" ] ; then
    cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/global.inc.ssl.aegir.txt /var/aegir/config/includes/global.inc
  else
    cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/global.inc.aegir.txt /var/aegir/config/includes/global.inc
  fi
  sed -i "s/3600/$_SPEED_VALID_MAX/g" /var/aegir/config/includes/global.inc &> /dev/null
  update_redis_password
  force_advanced_nginx_config
  if [ "$_DRUSH_FAMILY" = "3" ] ; then
    cd /var/aegir/drush
    cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/patches/user.drush.inc.patch ./
    patch -p0 < user.drush.inc.patch &> /dev/null
    chown -R aegir:aegir /var/aegir/drush &> /dev/null
  fi
  if [ "$_DRUSH_VERSION" = "7.x-4.5" ] || [ "$_DRUSH_VERSION" = "4.6-dev" ] ; then
    sed -i "s/which one she wants./which one she wants.\n  chdir(\$request['base_project_path'])\;/g" /var/aegir/drush/commands/pm/package_handler/wget.inc &> /dev/null
  fi
  cd /var/aegir
  rm -f /etc/nginx/sites-available/default
  rm -f /etc/nginx/sites-enabled/default
  if [ -e "/opt/tmp/$_BOA_REPO_NAME/aegir/conf/nginx.conf" ] ; then
    mv -f /etc/nginx/nginx.conf /etc/nginx/nginx.conf-old &> /dev/null
    cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/nginx.conf /etc/nginx/nginx.conf
  fi
  service nginx reload &> /dev/null
  mrun "sleep 1"
  msg "INFO: Aegir Master Instance installation completed"
  mrun "sleep 1"
else
  echo " "
  if [ "$_LENNY_TO_SQUEEZE" = "YES" ] && [ "$_LOC_REL_VERSION" = "xlenny" ] ; then
    msg "INFO: Aegir Master Instance upgrade skipped!"
    echo " "
    msg "NOTE! You *must* reboot the server and then run Barracuda *again*"
    msg "NOTE! to complete all system upgrades and upgrade also"
    msg "NOTE! Aegir Master Instance securely"
    echo " "
  elif [ "$_SYSTEM_UPGRADE_ONLY" = "YES" ] ; then
    msg "INFO: Aegir Master Instance upgrade skipped"
    echo " "
  else
    if [ ! -e "/var/run/mysqld/mysqld.pid" ] || [ ! -e "/var/run/mysqld/mysqld.sock" ] ; then
      msg "ALRT: $_DB_SERVER server not running!"
      msg "EXIT: We can't proceed with upgrade and will exit now"
      msg "HINT: Please check $_LOG for more information"
      msg "HINT: on errors occured and then run Barracuda installer again"
      msg "Bye"
      exit 1
    fi
    upgrade_aegir_master
  fi
fi
update_php_cli_cron


###--------------------###
if [ -e "/opt/tmp/$_BOA_REPO_NAME/aegir/conf/mime.types" ] ; then
  cd /etc/nginx
  mv -f mime.types mime.types-pre-$_INSTALLER_VERSION-$_NOW &> /dev/null
  cp /opt/tmp/$_BOA_REPO_NAME/aegir/conf/mime.types ./
  mkdir -p /var/www/nginx-default
  cd /var/www/nginx-default
  cp -f /opt/tmp/$_BOA_REPO_NAME/aegir/conf/uc.html ./
  cp -f /opt/tmp/$_BOA_REPO_NAME/aegir/conf/under_construction.jpg ./
  mv -f index.html index.html-pre-$_INSTALLER_VERSION-$_NOW &> /dev/null
  mv -f uc.html index.html &> /dev/null
  if [ ! -e "/var/run/aegir_upgrade.pid" ] ; then
    st_runner "service nginx reload" &> /dev/null
  fi
fi


###--------------------###
if [ ! -e "/var/aegir/config/server_master/nginx/pre.d/nginx_wild_ssl.conf" ] ; then
  msg "INFO: Installing default SSL Wildcard Nginx Proxy, please wait..."
  mrun "sleep 1"
  _HTTPS_TEST=`netstat -ln | grep :443 2>&1`
  if [[ "$_HTTPS_TEST" =~ "443" ]] ; then
    _HTTPS_TEST=EXIST
    msg "WARNING!"
    cat <<EOF

  We can't enable Wildcard HTTPS Proxy for all your hosted sites,
  including all Aegir Satellite Instances, because you have already
  enabled SSL on the IP address used by your Aegir Master Instance.

  If you wish to use provided now by Barracuda Wildcard HTTPS Proxy,
  please disable the SSL you enabled, or use the built-in Aegir SSL
  feature on another IP address available and not used by the Hostmaster,
  and other hosted sites.

  We will continue in 10 seconds...

EOF
    mrun "sleep 10"
  else
    _HTTPS_TEST=FREE
    validate_public_ip &> /dev/null
    validate_xtras_ip &> /dev/null
    openssl req -x509 -nodes -days 7300 -subj "/C=US/ST=New York/O=Aegir/OU=Cloud/L=New York/CN=*.$_THISHOST" -newkey rsa:2048 -keyout /etc/ssl/private/nginx-wild-ssl.key -out /etc/ssl/private/nginx-wild-ssl.crt -batch 2> /dev/null
    cd /var/aegir/config/server_master/nginx/pre.d
    cp -a /opt/tmp/$_BOA_REPO_NAME/aegir/conf/nginx_wild_ssl.conf ./
    if [ "$_HTTP_WILDCARD" = "YES" ] ; then
      sed -i "s/127.0.0.1:80/localhost:80/g" /var/aegir/config/server_master/nginx/pre.d/nginx_wild_ssl.conf &> /dev/null
    else
      sed -i "s/127.0.0.1:80/$_THISHTIP:80/g" /var/aegir/config/server_master/nginx/pre.d/nginx_wild_ssl.conf &> /dev/null
    fi
    sed -i "s/127.0.0.1:443/$_XTRAS_THISHTIP:443/g" /var/aegir/config/server_master/nginx/pre.d/nginx_wild_ssl.conf &> /dev/null
    if [ -e "/opt/tmp/$_BOA_REPO_NAME/aegir/conf/global.inc.ssl.aegir.txt" ] ; then
      mv -f /var/aegir/config/includes/global.inc /var/aegir/config/includes/global.inc-pre-$_INSTALLER_VERSION-$_NOW &> /dev/null
      cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/global.inc.ssl.aegir.txt /var/aegir/config/includes/global.inc
    fi
    sed -i "s/3600/$_SPEED_VALID_MAX/g" /var/aegir/config/includes/global.inc &> /dev/null
    update_redis_password
    killall -9 nginx &> /dev/null
    mrun "sleep 1"
    service nginx start &> /dev/null
  fi
fi


###--------------------###
if [ -e "/var/aegir/config/server_master/nginx/pre.d" ] ; then
  if [ ! -e "/var/aegir/config/server_master/nginx/pre.d/nginx_speed_purge.conf" ] && [ "$_PURGE_MODE" = "ON" ] ; then
    cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/nginx_speed_purge.conf /var/aegir/config/server_master/nginx/pre.d/nginx_speed_purge.conf
    touch /var/log/nginx-speed-purge-$_INSTALLER_VERSION
  fi
fi


###--------------------###
if [ "$_XTRAS_LIST" = "ALL" ] || [[ "$_XTRAS_LIST" =~ "SLR" ]] ; then
  if [ ! -d "/opt/solr" ] ; then
    echo " "
    if prompt_yes_no "Do you want to install MultiCore Apache Solr Tomcat?" ; then
      true
      msg "INFO: Installing MultiCore Apache Solr Tomcat, please wait..."
      mrun "sleep 1"
      cd /var/opt
      rm -f -r apachesolr*
      rm -f -r /opt/solr
      rm -f -r /opt/tomcat6
      wget -q -U iCab http://files.aegir.cc/dev/apachesolr.tar.gz
      tar -xzf apachesolr.tar.gz
      cd apachesolr
      cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/tomcat /etc/init.d/tomcat &> /dev/null
      chmod 755 /etc/init.d/tomcat
      mv -f solr /opt/ &> /dev/null
      mv -f tomcat6 /opt/ &> /dev/null
      echo "ENABLED=1" > /etc/default/tomcat
      adduser --system --group --home /opt/solr tomcat &> /dev/null
      touch /opt/solr/fixed.log
      touch /opt/solr/fixed.init.log
      cd /var/opt
      wget -q -U iCab http://ftp.drupal.org/files/projects/apachesolr_attachments-7.x-1.0.tar.gz
      tar -xzf apachesolr_attachments-7.x-1.0.tar.gz
      cd /opt/solr/conf
      patch -p0 < /var/opt/apachesolr_attachments/solrconfig.tika.patch &> /dev/null
      ln -s /opt/tomcat6/lib /opt/tika
      cd /opt/tika
      wget -q -U iCab http://www.apache.org/dist/tika/tika-app-0.10.jar
      chown -R tomcat:tomcat /opt/solr
      chown -R tomcat:tomcat /opt/tomcat6
      st_runner "update-rc.d tomcat defaults" &> /dev/null
      st_runner "service tomcat start" &> /dev/null
      msg "INFO: MultiCore Apache Solr Tomcat installation completed"
      mrun "sleep 1"
    else
      msg "INFO: MultiCore Apache Solr Tomcat installation skipped"
      mrun "sleep 1"
    fi
  fi
fi
if [ -d "/opt/solr" ] && [ -e "/etc/init.d/tomcat" ] ; then
  if [ ! -e "/opt/solr/fixed.log" ] ; then
    adduser --system --group --home /opt/solr tomcat &> /dev/null
    touch /opt/solr/fixed.log
    st_runner "service tomcat stop" &> /dev/null
    chown -R tomcat:tomcat /opt/solr
    chown -R tomcat:tomcat /opt/tomcat6
    killall -9 java &> /dev/null
    mrun "sleep 5"
    st_runner "service tomcat start" &> /dev/null
  fi
  if [ ! -e "/opt/solr/fixed.init.log" ] ; then
    cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/tomcat /etc/init.d/tomcat &> /dev/null
    chmod 755 /etc/init.d/tomcat
    st_runner "update-rc.d tomcat defaults" &> /dev/null
  fi
  if [ ! -e "/opt/solr/conf/apachesolr-6.x-1.6.log" ] ; then
    cd /var/opt
    wget -q -U iCab http://ftp.drupal.org/files/projects/apachesolr-6.x-1.6.tar.gz
    tar -xzf apachesolr-6.x-1.6.tar.gz &> /dev/null
    rm -f apachesolr-6.x-1.6.tar.gz
    cp -af /opt/solr/conf/schema.xml /opt/solr/conf/schema.xml-pre-$_INSTALLER_VERSION-$_NOW
    cp -af apachesolr/schema.xml /opt/solr/conf/
    cp -af /opt/solr/conf/solrconfig.xml /opt/solr/conf/solrconfig.xml-pre-$_INSTALLER_VERSION-$_NOW
    cp -af apachesolr/solrconfig.xml /opt/solr/conf/
    cp -af /opt/solr/conf/protwords.txt /opt/solr/conf/protwords.txt-pre-$_INSTALLER_VERSION-$_NOW
    cp -af apachesolr/protwords.txt /opt/solr/conf/
    touch /opt/solr/conf/apachesolr-6.x-1.6.log
    chown -R tomcat:tomcat /opt/solr/conf
    st_runner "service tomcat stop" &> /dev/null
    mrun "sleep 5"
    st_runner "service tomcat start" &> /dev/null
  fi
  if [ ! -e "/opt/tika" ] ; then
    cd /var/opt
    wget -q -U iCab http://ftp.drupal.org/files/projects/apachesolr_attachments-7.x-1.0.tar.gz
    tar -xzf apachesolr_attachments-7.x-1.0.tar.gz
    cd /opt/solr/conf
    patch -p0 < /var/opt/apachesolr_attachments/solrconfig.tika.patch &> /dev/null
    ln -s /opt/tomcat6/lib /opt/tika
    cd /opt/tika
    wget -q -U iCab http://www.apache.org/dist/tika/tika-app-0.10.jar
    chown -R tomcat:tomcat /opt/tika/*
    chown -R tomcat:tomcat /opt/solr/conf
    st_runner "service tomcat stop" &> /dev/null
    mrun "sleep 5"
    st_runner "service tomcat start" &> /dev/null
  fi
fi
if [ "$_UP_JDK" = "YES" ] ; then
  msg "INFO: Tomcat restart in progress - required after java upgrade"
  st_runner "service tomcat restart" &> /dev/null
  msg "INFO: Tomcat restart completed"
fi


###--------------------###
if [ "$_XTRAS_LIST" = "ALL" ] || [[ "$_XTRAS_LIST" =~ "CHV" ]] ; then
  if [ ! -e "/var/www/chive/index.php" ] ; then
    echo " "
    if prompt_yes_no "Do you want to install Chive $_DB_SERVER Manager?" ; then
      true
      msg "INFO: Installing Chive $_DB_SERVER Manager, please wait..."
      mrun "sleep 1"
      cd /var/www
      rm -f -r /var/www/chive &> /dev/null
      wget -q -U iCab http://files.aegir.cc/dev/chive_$_CHIVE_VERSION.tar.gz
      tar -xzf chive_$_CHIVE_VERSION.tar.gz
      rm -f chive_$_CHIVE_VERSION.tar.gz
      chown -R www-data:www-data /var/www/chive
      _CHIVE_VHOST="/var/aegir/config/server_master/nginx/vhost.d/chive.$_THIS_FRONT"
      validate_public_ip &> /dev/null
      validate_xtras_ip &> /dev/null
      echo > $_CHIVE_VHOST
      echo "server {" >> $_CHIVE_VHOST
      echo "   include     /var/aegir/config/includes/fastcgi_params.conf;" >> $_CHIVE_VHOST
      echo "   limit_conn  gulag 32;" >> $_CHIVE_VHOST
      echo "   listen      $_XTRAS_THISHTIP:80;" >> $_CHIVE_VHOST
      echo "   server_name chive.$_THIS_FRONT $_THISHTIP;" >> $_CHIVE_VHOST
      echo "   root        /var/www/chive;" >> $_CHIVE_VHOST
      echo "   index       index.php index.html;" >> $_CHIVE_VHOST
      echo "   include     /var/aegir/config/includes/nginx_compact_include.conf;" >> $_CHIVE_VHOST
      echo "}" >> $_CHIVE_VHOST
      echo >> $_CHIVE_VHOST
      touch /var/log/chive_$_CHIVE_VERSION.log
      msg "INFO: Chive $_DB_SERVER Manager installation completed"
      mrun "sleep 1"

    else
      msg "INFO: Chive $_DB_SERVER Manager installation skipped"
      mrun "sleep 1"

    fi
  fi
fi

###--------------------###
if [ -e "/var/www/chive/index.php" ] ; then
  if [ ! -e "/var/log/chive_$_CHIVE_VERSION.log" ] ; then
    msg "INFO: Upgrading Chive $_DB_SERVER Manager, please wait..."
    mrun "sleep 1"
    rm -f -r /var/www/chive
    cd /var/www
    wget -q -U iCab http://files.aegir.cc/dev/chive_$_CHIVE_VERSION.tar.gz
    tar -xzf chive_$_CHIVE_VERSION.tar.gz
    rm -f chive_$_CHIVE_VERSION.tar.gz
    chown -R www-data:www-data /var/www/chive
    touch /var/log/chive_$_CHIVE_VERSION.log
  fi
  if [ ! -e "/var/log/chive_$_CHIVE_VERSION.vhost.log" ] ; then
    _CHIVE_VHOST="/var/aegir/config/server_master/nginx/vhost.d/chive.$_THIS_FRONT"
    validate_public_ip &> /dev/null
    validate_xtras_ip &> /dev/null
    echo > $_CHIVE_VHOST
    echo "server {" >> $_CHIVE_VHOST
    echo "   include     /var/aegir/config/includes/fastcgi_params.conf;" >> $_CHIVE_VHOST
    echo "   limit_conn  gulag 32;" >> $_CHIVE_VHOST
    echo "   listen      $_XTRAS_THISHTIP:80;" >> $_CHIVE_VHOST
    echo "   server_name chive.$_THIS_FRONT $_THISHTIP;" >> $_CHIVE_VHOST
    echo "   root        /var/www/chive;" >> $_CHIVE_VHOST
    echo "   index       index.php index.html;" >> $_CHIVE_VHOST
    echo "   include     /var/aegir/config/includes/nginx_compact_include.conf;" >> $_CHIVE_VHOST
    echo "}" >> $_CHIVE_VHOST
    echo >> $_CHIVE_VHOST
    touch /var/log/chive_$_CHIVE_VERSION.vhost.log
  fi
fi


###--------------------###
_CHIVE_VHOST="/var/aegir/config/server_master/nginx/vhost.d/chive.$_THIS_FRONT"
if [ -e "$_CHIVE_VHOST" ] ; then
  sed -i "s/nginx_simple_include.conf/nginx_compact_include.conf/g" $_CHIVE_VHOST &> /dev/null
fi


###--------------------###
if [ "$_XTRAS_LIST" = "ALL" ] || [[ "$_XTRAS_LIST" =~ "BDD" ]] ; then
  if [ ! -d "/var/www/sqlbuddy" ] ; then
    echo " "
    if prompt_yes_no "Do you want to install SQL Buddy $_DB_SERVER Manager?" ; then
      true
      msg "INFO: Installing SQL Buddy $_DB_SERVER Manager, please wait..."
      mrun "sleep 1"
      cd /var/www
      wget -q -U iCab http://files.aegir.cc/dev/sqlbuddy_1_3_3.tar.gz
      tar -xzf sqlbuddy_1_3_3.tar.gz &> /dev/null
      rm -f sqlbuddy_1_3_3.tar.gz
      chown -R www-data:www-data /var/www/sqlbuddy
      _SQLBUDDY_VHOST="/var/aegir/config/server_master/nginx/vhost.d/sqlbuddy.$_THIS_FRONT"
      validate_public_ip &> /dev/null
      validate_xtras_ip &> /dev/null
      echo > $_SQLBUDDY_VHOST
      echo "server {" >> $_SQLBUDDY_VHOST
      echo "   include     /var/aegir/config/includes/fastcgi_params.conf;" >> $_SQLBUDDY_VHOST
      echo "   limit_conn  gulag 32;" >> $_SQLBUDDY_VHOST
      echo "   listen      $_XTRAS_THISHTIP:80;" >> $_SQLBUDDY_VHOST
      echo "   server_name sqlbuddy.$_THIS_FRONT;" >> $_SQLBUDDY_VHOST
      echo "   root        /var/www/sqlbuddy;" >> $_SQLBUDDY_VHOST
      echo "   index       index.php index.html;" >> $_SQLBUDDY_VHOST
      echo "   include     /var/aegir/config/includes/nginx_compact_include.conf;" >> $_SQLBUDDY_VHOST
      echo "}" >> $_SQLBUDDY_VHOST
      echo >> $_SQLBUDDY_VHOST
      msg "INFO: SQL Buddy $_DB_SERVER Manager installation completed"
      mrun "sleep 1"

    else
      msg "INFO: SQL Buddy $_DB_SERVER Manager installation skipped"
      mrun "sleep 1"

    fi
  fi
fi


###--------------------###
_SQLBUDDY_VHOST="/var/aegir/config/server_master/nginx/vhost.d/sqlbuddy.$_THIS_FRONT"
if [ -e "$_SQLBUDDY_VHOST" ] ; then
  sed -i "s/nginx_simple_include.conf/nginx_compact_include.conf/g" $_SQLBUDDY_VHOST &> /dev/null
fi


###--------------------###
if [ "$_XTRAS_LIST" = "ALL" ] || [[ "$_XTRAS_LIST" =~ "CGP" ]] ; then
  if [ ! -e "/var/run/cloud_vhost.pid" ] ; then
    if [ ! -d "/var/www/cgp" ] ; then
      echo " "
      if prompt_yes_no "Do you want to install Collectd Graph Panel?" ; then
        true
        msg "INFO: Installing Collectd Graph Panel, please wait..."
        mrun "sleep 1"
        st_runner "$_INSTAPP collectd" 2> /dev/null
        cd /var/www
        git clone http://git.nethuis.nl/pub/cgp.git &> /dev/null
        rm -f -r cgp/.git
        sed -i "s/>uncategorized</>Barracuda Server</g" /var/www/cgp/index.php &> /dev/null
        chown -R www-data:www-data /var/www/cgp
        _CGP_VHOST="/var/aegir/config/server_master/nginx/vhost.d/cgp.$_THIS_FRONT"
        validate_public_ip &> /dev/null
        validate_xtras_ip &> /dev/null
        echo > $_CGP_VHOST
        echo "server {" >> $_CGP_VHOST
        echo "   include     /var/aegir/config/includes/fastcgi_params.conf;" >> $_CGP_VHOST
        echo "   limit_conn  gulag 32;" >> $_CGP_VHOST
        echo "   listen      $_XTRAS_THISHTIP:80;" >> $_CGP_VHOST
        echo "   server_name cgp.$_THIS_FRONT;" >> $_CGP_VHOST
        echo "   root        /var/www/cgp;" >> $_CGP_VHOST
        echo "   index       index.php index.html;" >> $_CGP_VHOST
        echo "   include     /var/aegir/config/includes/nginx_compact_include.conf;" >> $_CGP_VHOST
        echo "}" >> $_CGP_VHOST
        echo >> $_CGP_VHOST
        st_runner "update-rc.d collectd defaults" &> /dev/null
        msg "INFO: Collectd Graph Panel installation completed"
        mrun "sleep 1"
        else
        msg "INFO: Collectd Graph Panel installation skipped"
        mrun "sleep 1"
      fi
    fi
  fi
fi


###--------------------###
if [ -d "/var/www/cgp" ] && [ "$_VMFAMILY" = "VS" ] && [ ! -e "/boot/grub/menu.lst" ] ; then
  rm -f /var/aegir/config/server_master/nginx/vhost.d/cgp*
  st_runner "apt-get -y remove collectd" 2> /dev/null
  st_runner "apt-get -y purge collectd" 2> /dev/null
  rm -f -r /var/www/cgp
fi
_CGP_VHOST="/var/aegir/config/server_master/nginx/vhost.d/cgp.$_THIS_FRONT"
if [ -e "$_CGP_VHOST" ] ; then
  sed -i "s/nginx_simple_include.conf/nginx_compact_include.conf/g" $_CGP_VHOST &> /dev/null
fi


###--------------------###
if [ "$_XTRAS_LIST" = "ALL" ] || [[ "$_XTRAS_LIST" =~ "WMN" ]] ; then
  if [ ! -d "/etc/webmin" ] && [ ! -e "/var/run/cloud_vhost.pid" ] ; then
    echo " "
    if prompt_yes_no "Do you want to install Webmin Control Panel?" ; then
      true
      msg "INFO: Installing Webmin Control Panel, please wait..."
      mrun "sleep 1"
      cd /var/opt
      echo "deb http://download.webmin.com/download/repository sarge contrib" >> /etc/apt/sources.list
      wget -q -U iCab http://files.aegir.cc/dev/jcameron-key.asc
      apt-key add jcameron-key.asc &> /dev/null
      touch /var/log/webmin_new_apt.log
      st_runner "apt-get update -y --force-yes" &> /dev/null
      st_runner "$_INSTAPP webmin libxml-simple-perl libcrypt-ssleay-perl" 2> /dev/null
      update-rc.d webmin defaults &> /dev/null
      msg "INFO: Webmin Control Panel installation completed"
      mrun "sleep 1"

      else
      msg "INFO: Webmin Control Panel installation skipped"
      mrun "sleep 1"

    fi
  fi
fi


###--------------------###
if [ "$_REL_VERSION" = "oneiric" ] || [ "$_REL_VERSION" = "precise" ] ; then
  if [ "$_XTRAS_LIST" = "ALL" ] ; then
    _XTRAS_LIST="BDD CGP CHV CSF FMG FTP GIT PDS SLR WMN"
  fi
  if [[ "$_XTRAS_LIST" =~ "BND" ]] ; then
    _XTRAS_LIST="PDS CHV CSF CGP WMN"
  fi
fi
if [ "$_XTRAS_LIST" = "ALL" ] || [[ "$_XTRAS_LIST" =~ "BND" ]] ; then
  if [ ! -e "/usr/sbin/named" ] && [ ! -e "/var/run/cloud_vhost.pid" ] ; then
    echo " "
    if prompt_yes_no "Do you want to install Bind9 DNS Server? (experimental only - not recommended)" ; then
      true
      msg "INFO: Installing Bind9 DNS Server, please wait..."
      mrun "sleep 1"
      if [ -z "$_THISHTIP" ] ; then
        _LOC_DOM="$_THISHOST"
        find_correct_ip
        _THISHTIP="$_LOC_IP"
      fi
      st_runner "$_INSTAPP bind9" 2> /dev/null
      cd /etc/bind
      rm -f named.conf.options
      cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/named.conf.options ./
      sed -i "s/127.0.1.1/$_THISHTIP/g" named.conf.options &> /dev/null
      st_runner "service bind9 restart" &> /dev/null
      if [ ! -e "/etc/init.d/bind" ] ; then
        ln -s /etc/init.d/bind9 /etc/init.d/bind
      fi
      echo "aegir ALL=NOPASSWD: /etc/init.d/bind9" >> /etc/sudoers
      echo "aegir ALL=NOPASSWD: /etc/init.d/bind" >> /etc/sudoers
      msg "INFO: Bind9 DNS Server installation completed"
      mrun "sleep 1"

    else
      msg "INFO: Bind9 DNS Server installation skipped"
      mrun "sleep 1"

    fi
  fi
fi


###--------------------###
if [ ! -e "/root/.my.cnf" ] ; then
  msg "INFO: $_DB_SERVER final setup"
  mrun "sleep 1"
  #
  # Let's just do what mysql_secure_installation does, so we can do it non-interactively:
  # - remove anonymous users
  # - remove remote root
  # - remove test database
  # - remove privileges on test database
  # - set auto-generated root password
  # - reload privileges table
  #
  if [ -e "/root/.my.pass.txt" ] ; then
    PXSWD=`cat /root/.my.pass.txt`
    PASWD=`echo -n $PXSWD | tr -d "\n"`
    mysql -u root -e "DELETE FROM mysql.user WHERE User='';" &> /dev/null
    mysql -u root -e "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');" &> /dev/null
    mysql -u root -e "DROP DATABASE test;" &> /dev/null
    mysql -u root -e "DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';" &> /dev/null
    mysql -u root -e "UPDATE mysql.user SET Password=PASSWORD('$PASWD') WHERE User='root';" &> /dev/null
    mysql -u root -e "FLUSH PRIVILEGES;" &> /dev/null
  fi
  mrun "sleep 1"
  echo "[client]" >> /root/.my.cnf
  echo "user=root" >> /root/.my.cnf
  echo "password=\"$PASWD\"" >> /root/.my.cnf
  chmod 0600 /root/.my.cnf
  if [ ! -e "/var/log/check_for_crashed_tables_disabled" ] ; then
    sed -i "s/.*check_for_crashed_tables/#check_for_crashed_tables/g" /etc/mysql/debian-start &> /dev/null
    touch /var/log/check_for_crashed_tables_disabled
    st_runner "service mysql restart" &> /dev/null
    mrun "sleep 1"
  fi
  msg "INFO: $_DB_SERVER setup completed"
  msg "INFO: You can now log in as root by typing only 'mysql' on the command line"
  mrun "sleep 1"
fi


###--------------------###
if [ ! -L "/var/aegir/config/includes/barracuda_log.txt" ] ; then
  if [ -e "/var/aegir/config/includes/barracuda_log.txt" ] ; then
    cp -af /var/aegir/config/includes/barracuda_log.txt /var/log/barracuda_log.txt
    mv -f /var/aegir/config/includes/barracuda_log.txt /var/backups/barracuda_log.txt
  fi
  ln -s /var/log/barracuda_log.txt /var/aegir/config/includes/barracuda_log.txt
fi
if [ "$_THIS_DB_HOST" = "localhost" ] ; then
  _LOG_DB_HOST=localhost
else
  _LOG_DB_HOST=FQDN
fi
if [ ! -z "$_FORCE_GIT_MIRROR" ] ; then
  _LOG_GIT_MIRROR="-$_FORCE_GIT_MIRROR"
fi
_LOG_DB_V=`mysql -V 2>&1 | tr -d "\n" | cut -d" " -f6 | awk '{ print $1}' | cut -d"-" -f1 | awk '{ print $1}' | sed "s/[\,']//g"`
_BARRACUDA_VERSION_INFO="`date` / `lsb_release -si`.`lsb_release -sc` `uname -m` $_VMFAMILY / Aegir $_AEGIR_VERSION / Barracuda $_INSTALLER_VERSION$_LOG_GIT_MIRROR / Nginx $_NGINX_VERSION / PHP $_PHP_VERSION and $_PHP_VERSION_NEW / MODERN-$_PHP_MODERN_ONLY / FPM $_PHP_FPM_VERSION / CLI $_PHP_CLI_VERSION / $_DB_SERVER-$_LOG_DB_V $_LOG_DB_HOST / Wildcard $_HTTP_WILDCARD"
echo "$_BARRACUDA_VERSION_INFO" >> /var/log/barracuda_log.txt
echo "$_BARRACUDA_VERSION_INFO" >> /var/backups/barracuda_log.txt
msg "INFO: New entry added to /var/log/barracuda_log.txt"


###--------------------###
if [ ! -e "/var/log/sysctl.conf.custom.log" ] ; then
  mv -f /etc/sysctl.conf /etc/sysctl.conf-pre-$_INSTALLER_VERSION-$_NOW &> /dev/null
  cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/sysctl.conf /etc/sysctl.conf
  touch /var/log/sysctl.conf.custom.log
fi
APTEMAIL=${_MY_EMAIL//\@/\\\@}
XPTEMAIL=${_MY_EMAIL//\@/\\\\\@}
sed -i "s/notify\@omega8.cc/$_MY_EMAIL/g"  /etc/csf/csf.conf &> /dev/null
sed -i "s/notify\@omega8.cc/$_MY_EMAIL/g"  /etc/apticron/apticron.conf &> /dev/null
sed -i "s/root/$_MY_EMAIL/g"               /etc/apticron/apticron.conf &> /dev/null
sed -i "s/notify\\\@omega8.cc/$XPTEMAIL/g" /var/xdrago/checksql.cgi &> /dev/null
sed -i "s/notify\\\@omega8.cc/$XPTEMAIL/g" /var/xdrago/usage.sh &> /dev/null
sed -i "s/notify\\\@omega8.cc/$XPTEMAIL/g" /var/xdrago/monitor/check/segfault_alert &> /dev/null
if [ "$_STATUS" = "INIT" ] ; then
  st_runner "sh /usr/sbin/apticron"
  if [ "$_DEBUG_MODE" = "YES" ] ; then
    true
  else
    _AEGIR_LOGIN_URL=`grep "^http://$_THIS_FRONT" /var/aegir/install.log 2> /dev/null`
    if [ ! -z "$_AEGIR_LOGIN_URL" ] ; then
      echo " "
      msg "INFO: Congratulations, Aegir backend and frontend have been installed successfully"
      msg "NOTE! Please wait 2 minutes before opening the following link in your web browser:"
      echo " "
      msg "LINK: $_AEGIR_LOGIN_URL"
    else
      msg "ALRT: Something went wrong"
      msg "ALRT: Please check the install log for details:"
      msg "ALRT: /var/aegir/install.log"
    fi
  fi
fi
if [ ! -e "/var/log/cron_aegir_off.pid" ] ; then
  touch /var/log/cron_aegir_off.pid
fi


###--------------------###
if [ "$_FORCE_REDIS_RESTART" = "YES" ] ; then
  service redis-server stop &> /dev/null
  killall -9 redis-server &> /dev/null
  service redis-server start &> /dev/null
fi
if [ "$_STATUS" = "INIT" ] ; then
  service cron start &> /dev/null
  if [ "$_EASY_LOCALHOST" = "NO" ] && [ "$_EASY_PUBLIC" = "NO" ] ; then
    echo " "
    msg "Now waiting 2 minutes before restarting Nginx..."
    mrun "sleep 111"
  fi
  force_advanced_nginx_config
  mrun "sleep 8"
  service nginx restart &> /dev/null
else
  service nginx reload &> /dev/null
fi


###--------------------###
csf_install () {
  msg "INFO: Installing csf/lfd firewall, please wait..."
  mrun "sleep 1"
  cd /var/opt
  rm -f /var/xdrago/log/lastFire
  if ! netcat -w 8 -z www.configserver.com 80 ; then
    wget -q -U iCab http://files.aegir.cc/dev/csf.tgz
  else
    wget -q -U iCab http://www.configserver.com/free/csf.tgz
  fi
  tar -xzf csf.tgz
  cd csf
  st_runner "sh install.sh" 2> /dev/null
  cd /etc/csf
  mv -f csf.conf csf.conf-pre-$_INSTALLER_VERSION-$_NOW &> /dev/null
  cp -af /opt/tmp/$_BOA_REPO_NAME/aegir/conf/csf.conf ./
  sed -i "s/notify\@omega8.cc/$_MY_EMAIL/g" /etc/csf/csf.conf &> /dev/null
  sed -i "s/TCP_IN = \"20,21,22,/TCP_IN = \"20,21,$_SSH_PORT,/g" /etc/csf/csf.conf &> /dev/null
  chmod 600 /etc/csf/csf.conf &> /dev/null
  sed -i "s/^Port.*/Port $_SSH_PORT/g" /etc/ssh/sshd_config &> /dev/null
  sed -i "s/30 \* \* \* \* bash/#30 * * * * bash/g" /var/spool/cron/crontabs/root &> /dev/null
  st_runner "service ssh restart" &> /dev/null
  msg "INFO: csf/lfd firewall installation completed"
  mrun "sleep 1"
  touch /var/log/csf_$_INSTALLER_VERSION.log
}
if [ "$_XTRAS_LIST" = "ALL" ] || [[ "$_XTRAS_LIST" =~ "CSF" ]] ; then
  if [ ! -e "/var/run/cloud_vhost.pid" ] ; then
    if [ ! -e "/usr/sbin/csf" ] ; then
      echo " "
      if prompt_yes_no "Do you want to install csf/lfd firewall?" ; then
        true
        csf_install
      else
        msg "INFO: csf/lfd firewall installation skipped"
        mrun "sleep 1"
      fi
    fi
  fi
fi
if [ -e "/usr/sbin/csf" ] && [ "$_VMFAMILY" = "VS" ] && [ ! -e "/boot/grub/menu.lst" ] ; then
  csf -x &> /dev/null
  update-rc.d -f csf remove &> /dev/null
  update-rc.d -f lfd remove &> /dev/null
  rm -f /etc/cron.d/{csf,lfd}*
  rm -f /usr/sbin/{csf,lfd}
  rm -f /etc/init.d/{csf,lfd}
  rm -f -r /etc/csf
fi
if [ -e "/usr/sbin/csf" ] ; then
  if [ "$_SSH_PORT" = "22" ] ; then
    true
  else
    if [ "$_CUSTOM_CONFIG_CSF" = "NO" ] || [[ "$_THISHOST" =~ ".host8." ]] ; then
      csf_install
    fi
  fi
  if [ -e "/var/xdrago/log/lastFire" ] ; then
    sed -i "s/30 \* \* \* \* bash/#30 * * * * bash/g" /var/spool/cron/crontabs/root &> /dev/null
    rm -f /var/xdrago/log/lastFire
    st_runner "csf -x" &> /dev/null
    st_runner "csf -e" &> /dev/null
    st_runner "csf -q" &> /dev/null
  fi
fi


###--------------------###
echo " "
if [ "$_STATUS" = "INIT" ] ; then
  _L_ST="install"
else
  _L_ST="upgrade"
fi
msg "CARD: Now charging your credit card for this automated $_L_ST service..."
mrun "sleep 5"
msg "JOKE: Just kidding! Enjoy your Aegir Hosting System :)"
mrun "sleep 3"
echo " "
msg "Final post-$_L_ST cleaning, please wait a moment..."
mrun "sleep 1"
mv -f /etc/motd /var/backups/dragon/t/motd-pre-$_INSTALLER_VERSION-$_NOW &> /dev/null
mv -f /etc/motd-pre-* /var/backups/dragon/t/ &> /dev/null
echo > /etc/motd
echo " Barracuda System managed by Skynet Agent v.$_INSTALLER_VERSION welcomes you aboard" >> /etc/motd
echo >> /etc/motd
echo > /etc/motd.tail
echo " Barracuda System managed by Skynet Agent v.$_INSTALLER_VERSION welcomes you aboard" >> /etc/motd.tail
echo >> /etc/motd.tail
mkdir -p /data/conf/arch
mv -f /data/conf/global.inc-pre* /data/conf/arch/ &> /dev/null
mv -f /data/conf/global.inc-before* /data/conf/arch/ &> /dev/null
mv -f /data/conf/global.inc-missing* /data/conf/arch/ &> /dev/null
rm -f /tmp/cache.inc
rm -f -r /var/opt/*
rm -f -r /opt/tmp/*
rm -f /var/run/boa_run.pid
rm -f /var/run/boa_wait.pid
chmod 700 /root
killall -9 memcached &> /dev/null
service cron start   &> /dev/null
csf -x &> /dev/null
csf -e &> /dev/null
csf -q &> /dev/null
msg "BYE!"
exit 0


###----------------------------------------###
###
###  Barracuda Aegir Installer
###  Copyright (C) 2010-2012 Omega8.cc
###  noc@omega8.cc www.omega8.cc
###
###----------------------------------------###
